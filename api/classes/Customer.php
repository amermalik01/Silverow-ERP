<?php
// error_reporting(E_ALL);

require_once(SERVER_PATH . "/classes/Xtreme.php");
require_once(SERVER_PATH . "/classes/General.php");
require_once(SERVER_PATH . "/classes/Setup.php");
require_once(SERVER_PATH . "/classes/Stock.php");
require_once(SERVER_PATH . "/classes/Hr.php");
require_once(SERVER_PATH . "/classes/Srm.php");
require_once(SERVER_PATH . "/classes/Crm.php");

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
require(SERVER_PATH . "/vendor/sendgrid-php/sendgrid-php.php");

require 'vendor/autoload.php';

class Customer extends Xtreme {

    private $Conn = null;
    private $objGeneral = null; 
    private $arrUser = null;
    private $objsetup = null;
    //private $objstock = null;
    private $objHr = null;
    private $ObjCS = null;
    private $objSrm = null;
    private $objCrm = null;

    function __construct($user_info = array()) {
        parent::__construct();
        $this->Conn = parent::GetConnection();
        $this->objGeneral = new General($user_info);
        $this->ObjCS = new Stock($user_info);
        $this->objsetup = new Setup($user_info);
        $this->objHr = new Hr($user_info);
        $this->objSrm = new Srm($user_info);
        $this->objCrm = new Crm($user_info);
        $this->arrUser = $user_info;
        $this->sendgrid = new \SendGrid('SG.U1fh-cwZQfSPoO8WzzWe0w.0w0gH1UCAQEPbOsnipbF0iU0SPzJpGNU8C1CCPg03h0');
    }

    // static
    function delete_update($table_name, $column, $id) {
        $Sql = "UPDATE $table_name SET  $column=0 	WHERE srm_id = $id Limit 1";

        $RS = $this->objsetup->CSI($Sql);
        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be deleted!';
        }

        return $response;
    }

    function delete_update_status($table_name, $column, $id) {

        //	$Sql = "DELETE FROM $table_name 	WHERE id = $id Limit 1 ";
        $Sql = "UPDATE $table_name SET  $column=0 	WHERE id = $id Limit 1";
        //echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be deleted!';
        }
        /* 	$uploads_dir = UPLOAD_PATH.'sales/';
          $Sql1 = "SELECT *
          FROM document
          WHERE id='".$attr['id']."'
          LIMIT 1";
          $Row = $this->objsetup->CSI($Sql1)->FetchRow();
          if($Row[file] != '')
          unlink($uploads_dir.$Row[file]);
         */
        return $response;
    }

    // General Tab/ Main Customer Info Module
    //--------------------------------------

    function get_customer_listings($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $str_where = '';
        $order_type = '';
        $defaultFilter = false;
        $response = array();
        //print_r($attr);exit;
        $where_clause = $this->objGeneral->flexiWhereRetriever("c.", $attr, $fieldsMeta);
        $order_clause = $this->objGeneral->flexiOrderRetriever("c.", $attr, $fieldsMeta);
        if (empty($where_clause)) {
            $defaultFilter = true;
            $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("Customer", $this->arrUser);
        }

         $upToDate = date("Y-m-d"); 
         
        // error_reporting(E_ALL) ;

        $Sql = "SELECT * FROM (SELECT  c.id,c.crm_code,c.customer_code,c.region,c.statusp,c.segment,c.buying_group,c.name,
                        c.primaryc_name, c.company_email, c.primaryc_email, c.primary_city,c.primary_country,c.primary_county,c.primary_postcode,c.phone,c.type,c.company_id,c.salesperson_name,c.crm_classification,c.address_1,c.address_2,c.web_address,c.company_reg_no,c.turnover,currency,credit_limit,credit_rating,
                        
                        (CASE WHEN (c.finance_check>0) THEN fs.fincharges
                        ELSE 0
                        END) AS finance,
                        (CASE WHEN (c.insurance_check>0) THEN fs.inscharges
                        ELSE 0
                        END) AS insurance,
                        c.finance_check,
                        c.insurance_check,
                        c.bank_account_id,b.name AS bank_name,c.payment_terms_id,p.days AS payment_days,p.name AS payment_term,c.customer_posting_group,pg.name AS posting_group,
                        c.crm_segment_id,
                        crm_crdt_rtng.title as credit_rating_title,
                        c.buying_grp,
                        c.region_id,
                        c.country_id,
                        c.source_of_crm
                from sr_crm_listing  c
                LEFT JOIN bank_account b ON b.id=c.bank_account_id
                LEFT JOIN payment_terms p ON p.id=c.payment_terms_id
                LEFT JOIN ref_posting_group pg ON pg.id=c.customer_posting_group
                LEFT JOIN crm_credit_rating crm_crdt_rtng ON crm_crdt_rtng.id=c.credit_rating
                LEFT JOIN financial_settings fs ON fs.company_id=c.company_id
                where  c.type IN (2,3) AND c.customer_code IS NOT NULL AND 
                      c.company_id=" . $this->arrUser['company_id'] . "  GROUP BY c.id ) as c WHERE 1  " . $where_clause . " ";
        //defualt Variable
        $Sql = $this->objsetup->whereClauseAppender($Sql, 48);

       // $Sql.= " ) as c ";
         //echo $Sql;exit;
        //defualt Variable
        $total_limit = pagination_limit;

        //echo $total_limit."limit";

        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];


        $column = 'c.customer_code';


        if ($order_clause == "")
            $order_type = "Order BY " . $column . " DESC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->preListing($attr, $Sql, $response, $total_limit, 'c', $order_type);
        //echo $response['q'];exit;
        // $RS = $this->objsetup->CSI($response['q']);
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('Customer');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        $RS = $this->objsetup->CSI($response['q'], "customer", sr_ViewPermission);
        // $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $Row['finance'] =  ($Row['finance_check']==1) ? $Row['finance'] : '-';
                $Row['insurance'] =  ($Row['insurance_check']==1) ? $Row['insurance'] : '-';
                $response['total'] = $Row['totalRecordCount']; 
                $Row['credit_rating_title'] = utf8_encode($Row['credit_rating_title']);               
                $response['response'][] = $Row;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        $response = $this->objGeneral->postListing($attr, $response);


        
        return $response;
    }

    function get_customer_listings_popup($attr) {
        /* error_reporting(E_ALL);
          ini_set('display_error', 1); */
        //echo "here==.>>";exit;
        $column = '';
        $value = '';
        $more_fields = '';
        $filter_id = '';
        if (isset($attr['column']))
            $column = $attr['column'];
        if (isset($attr['column']))
            $value = $attr['value'];
        if (isset($attr['more_fields']))
            $more_fields = $attr['more_fields'];
        if (isset($attr['filter_id']))
            $filter_id = $attr['filter_id'];

        // global $objFilters;
        // return $objFilters->get_module_listing(9, "crm", $column, $value, $more_fields, $filter_id, '', '');
    }

    function get_customer_listings_for_alt_location($attr) {
        $this->objGeneral->mysql_clean($attr);

        $response = array();
        $Sql = "SELECT  crm.id, crm.customer_code,crm.name, crm.city, crm.contact_person, crm.postcode,crm.phone,CONCAT(employees.first_name,' ',employees.last_name) as salesperon
			FROM crm
			JOIN company on company.id=crm.company_id 
			LEFT JOIN employees on (employees.id = crm.salesperson_id)
			where type in (2,3) and crm.status='1' and (select count(altL.id) as altLocations from crm_alt_depot as altL where altL.crm_id = crm.id) > 0 and ( crm.company_id=" . $this->arrUser['company_id'] . " 
			or  company.parent_id=" . $this->arrUser['company_id'] . ")
			order by crm.id ASC"; //d.status=1 and
        //echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['Code'] = $Row['customer_code'];
                $result['Name'] = $Row['name'];
                $result['Contact_Person'] = $Row['contact_person'];
                $result['City'] = $Row['city'];
                $result['Postcode'] = $Row['postcode'];
                $result['Phone'] = $Row['phone'];
                $result['Salesperson'] = $Row['salesperon'];
                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        //print_r($response);exit;
        return $response;
    }

    function get_cust_sales_return_list($attr) {
        $this->objGeneral->mysql_clean($attr);

        $limit_clause = $where_clause = "";

        if (!empty($attr['all']))
            $where_clause .= " AND  c.type IN (1,2,3)  ";
        $where_clause .= " AND  c.type IN (2,3)  ";


        if (!empty($attr['searchKeyword'])) {
            $val = intval(preg_replace("/[^0-9]/", '', $attr['searchKeyword']));
            //$where_clause .= " AND  c.customer_no LIKE '%$val%'  OR c.name LIKE '%$attr[searchKeyword]%'";
            if ($val != 0)
                $where_clause .= " AND  c.customer_no LIKE '%$val%'  ";
            else
                $where_clause .= "   AND c.name LIKE '%".$attr['searchKeyword']."%'";
        }

        if (!empty($attr['buying_groups']))
            $where_clause .= " AND c.buying_grp=".$attr['buying_groups']." ";

        if (!empty($attr['regions']))
            $where_clause .= " AND c.region_id=".$attr['regions']."";

        if (!empty($attr['segments']))
            $where_clause .= " AND c.crm_segment_id=".$attr['segments']." ";


        $response = array();
        $Sql = "SELECT  c.id,  c.name , c.contact_person , c.city  , c.postcode, c.phone, c.type
		, c.crm_no, c.customer_code, c.crm_code, c.customer_no
		,c.region_id,c.crm_segment_id,c.buying_grp,c.internal_sales,c.salesperson_id,c.support_person,c.currency_id,
		c.address_2,c.county,c.country_id
		, " . $this->objGeneral->get_nested_query_list('region', $this->arrUser['company_id']) . "
		, " . $this->objGeneral->get_nested_query_list('buying_group', $this->arrUser['company_id']) . "
		, " . $this->objGeneral->get_nested_query_list('segment', $this->arrUser['company_id']) . "
		FROM  crm  c
		Inner JOIN orders o ON o.sell_to_cust_id=c.id
		where o.type in (2,3) AND
		c.name !='' AND c.company_id=" . $this->arrUser['company_id'] . " 	" . $where_clause . " group by o.sell_to_cust_id";

        //echo $Sql ; exit;
        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'c');
        //$response['q'];exit;
        $RS = $this->objsetup->CSI($response['q']);
        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];

                $result['code'] = $Row['customer_code'];

                if ($Row['type'] == 1)
                    $result['code'] = $Row['crm_code'];


                $result['title'] = $Row['name'];
                $result['person'] = $Row['contact_person'];
                $result['city'] = $Row['city'];
                $result['postcode'] = $Row['postcode'];
                $result['phone'] = $Row['phone'];
                $result['type'] = $Row['type'];
                $result['address'] = $Row['address_1'];


                $result['region_id'] = $Row['region_id'];
                $result['segment_id'] = $Row['company_type'];
                $result['buying_id'] = $Row['buying_grp'];

                $result['Region'] = $Row['region'];
                $result['Buying Group'] = $Row['buying_group'];
                $result['Segment'] = $Row['segment'];
                if ($attr['type'] == 99) {
                    $result['internal_sales'] = $Row['internal_sales'];
                    $result['salesperson_id'] = $Row['salesperson_id'];
                    $result['support_person'] = $Row['support_person'];
                    $result['currency_id'] = $Row['currency_id'];
                    //$result['address_1'] = $Row['address_1'];
                    $result['address_2'] = $Row['address_2'];
                    $result['county'] = $Row['county'];
                    $result['country_id'] = $Row['country_id'];
                }
                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_customer_order_listings_popup($attr) {

        $this->objGeneral->mysql_clean($attr);

        $limit_clause = $where_clause = "";
        $str_where = '';
        $order_type = '';
        $response = array();

        if (!empty($attr['buying_groups']))
            $where_clause .= " AND c.buying_grp=".$attr['buying_groups']." ";

        if (!empty($attr['regions']))
            $where_clause .= " AND c.region_id=".$attr['regions']." ";

        if (!empty($attr['segments']))
            $where_clause .= " AND c.crm_segment_id=".$attr['segments']." ";

        if (!empty($attr['filter_status']) || $attr['filter_status'] == "0")
            $where_clause .= " AND c.statusp = " . $attr['filter_status'];

        $Sql = "SELECT  c.*
            FROM sr_crm_general_sel  c
            WHERE c.type IN (1,3) AND c.customer_code IS NOT NULL AND c.company_id=" . $this->arrUser['company_id'] . " ";
        // echo $Sql;exit;
        $total_limit = pagination_limit;


        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'c.' . $attr['sort_column'];

            if ($attr['sort_column'] == 'code')
                $column = 'c.' . 'crm_code';
            else if ($attr['sort_column'] == 'person')
                $column = 'c.' . 'contact_person';
            else if ($attr['sort_column'] == "Region")
                $column = 'cr.' . 'title';
            else if ($attr['sort_column'] == "Segment")
                $column = 'seg.' . 'title';
            else if ($attr['sort_column'] == "Buying Group")
                $column = 'bs.' . 'title';
            //calculated value can be order by id
            else if ($attr['sort_column'] == 'status')
                $column = 'c.id';

            $order_type = "Order BY " . $column . " ".$attr['sortform']." ";
        }
        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'c', $order_type);
        // echo $response['q'];exit;
        $RS = $this->objsetup->CSI($response['q']);
        $response['q'] = '';


        $counter = 0;
        if ($RS->RecordCount() > 0) {

            while ($Row = $RS->FetchRow()) {
                $result = array();
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $result['id'] = $Row['id'];

                $result['code'] = $Row['customer_code'];

                if ($Row['type'] == 1)
                    $result['code'] = $Row['crm_code'];

                $result['title'] = $Row['name'];
                $result['city'] = $Row['city'];
                $result['postcode'] = $Row['postcode'];
                $result['region'] = $Row['region'];
                $result['segment'] = $Row['segment'];
                $result['buying_group'] = $Row['buying_group'];
                $result['person'] = $Row['contact_person'];
                $result['phone'] = $Row['phone'];

                $response['response'][] = $result;
            }


            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_customer_for_order($attr) {
        $this->objGeneral->mysql_clean($attr);

        $limit_clause = $where_clause = "";
        $str_where = '';
        $order_type = '';
        $response = array();

        $account_type = (isset($attr['account_type']) && $attr['account_type'] == 2) ? "1" : "2, 3";
        $code_check = (isset($attr['account_type']) && $attr['account_type'] == 2) ? " c.crm_code " : " c.customer_code ";

        $Sql = "SELECT  c.*, 
                `ad`.`id`           AS clid,
                `ad`.`depot`        AS cldepot,
                `ad`.`address`      AS claddress,
                `ad`.`address_2`    AS claddress_2,
                `ad`.`city`         AS clcity,
                `ad`.`county`       AS clcounty,
                `ad`.`postcode`     AS clpostcode,
                ad.country          as clcountry,
                `cl`.`contact_name` AS `clcontact_name`,
                `cl`.`direct_line`  AS `cldirect_line`,
                `cl`.`job_title`    AS `cljob_title`,
                `cl`.`mobile`       AS `clmobile`,
                `cl`.`email`        AS `clemail`,
                `cl`.`phone`        AS `clphone`,
                `cl`.`fax`          AS `clfax`,
                crm_sp.salesperson_id AS sale_person_id,
                CONCAT(emp.first_name,' ',emp.last_name) as empname,
                IFNULL(SR_CalculateCustomerBalance(c.id, " . $this->arrUser['company_id'] . "), 0) AS customer_balance,
                fin.statement_email,
                fin.reminder_email,
                fin.invoice_email,
                CONCAT_WS(',',fin.statement_email,
                fin.reminder_email,
                fin.invoice_email,
                c.email,
                group_concat(cl.email SEPARATOR ','),
                group_concat(ad.email SEPARATOR ','),
                group_concat(ad.booking_email SEPARATOR ','),
                fin.email,
                fin.alt_contact_email) AS c_emails
            FROM sr_select_customer_for_order  c
            LEFT JOIN finance AS fin ON fin.customer_id = c.id
            LEFT JOIN alt_depot ad 
                ON `ad`.`acc_id`=`c`.`id` AND `ad`.`is_default`=1
            LEFT JOIN crm_salesperson as crm_sp on crm_sp.module_id = c.id AND crm_sp.type =2  AND (crm_sp.end_date IS NULL OR crm_sp.end_date=0) and crm_sp.is_primary=1
            LEFT JOIN employees as emp on emp.id= crm_sp.salesperson_id
            LEFT JOIN `alt_contact` `cl`
                ON `cl`.`id` = `ad`.`alt_contact_id` OR `cl`.`acc_id` = c.id
            WHERE 
                    c.company_id=" . $this->arrUser['company_id'] . " and c.id = " . $attr['id'] . " LIMIT 1";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        $counter = 0;
        if ($RS->RecordCount() > 0) {

            while ($Row = $RS->FetchRow()) {
                $result = array();
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $result['id'] = $Row['id'];

                if(isset($attr['account_type']) && $attr['account_type'] == 2)
                    $result['code'] = $Row['crm_code'];
                else
                    $result['code'] = $Row['customer_code'];

                if ($Row['type'] == 1)
                    $result['code'] = $Row['crm_code'];


                $result['title'] = $Row['name'];
                $result['person'] = $Row['contact_person'];
                $result['city'] = $Row['primary_city'];
                $result['postcode'] = $Row['primary_postcode'];
                $result['phone'] = $Row['primary_phone'];
                $result['type'] = $Row['type'];
                $result['address'] = $Row['primary_address'];
                $result['customer_emails'] = $Row['c_emails'];
                $result['statement_email'] = $Row['statement_email'];
                $result['invoice_email'] = $Row['invoice_email'];
                $result['reminder_email'] = $Row['reminder_email'];
                if($Row['customer_balance'] == '333333333') 
                    $result['customer_balance'] = 0;


                $result['region_id'] = $Row['region_id'];
                $result['buying_id'] = $Row['buying_grp'];

                $result['region'] = $Row['region'];
                $result['buying_group'] = $Row['buying_group'];
                $result['segment_id'] = $Row['crm_segment_id'];

                // $result['DefaultLocation']  = $this->getDefaultLocation($Row['id']);
                // $result['BillingLocation']  = $this->getBillingLocation($Row['id']);
                // dilvery location
                if ($Row['clid'] != '') {
                    $result['clid'] = $Row['clid'];
                    $result['cldepot'] = $Row['cldepot'];
                    $result['claddress'] = $Row['claddress'];
                    $result['claddress_2'] = $Row['claddress_2'];
                    $result['clcity'] = $Row['clcity'];
                    $result['clcounty'] = $Row['clcounty'];
                    $result['clpostcode'] = $Row['clpostcode'];
                    $result['clcountry'] = $Row['clcountry'];
                    $result['cldirect_line'] = $Row['cldirect_line'];
                    $result['clcontact_name'] = $Row['clcontact_name'];
                    $result['cljob_title'] = $Row['cljob_title'];
                    $result['clmobile'] = $Row['clmobile'];
                    $result['clemail'] = $Row['clemail'];
                    $result['clphone'] = $Row['clphone'];
                    $result['clfax'] = $Row['clfax'];
                } else {
                    $Sql1 = "SELECT
                                `s`.`id`           AS clid,
                                `s`.`depot`        AS cldepot,
                                `s`.`address`      AS claddress,
                                `s`.`address_2`    AS claddress_2,
                                `s`.`city`         AS clcity,
                                `s`.`county`       AS clcounty,
                                `s`.`postcode`     AS clpostcode,
                                `s`.`country`      AS clcountry,
                                
                                `cl`.`contact_name` AS `clcontact_name`,
                                `cl`.`direct_line`  AS `cldirect_line`,
                                `cl`.`job_title`    AS `cljob_title`,
                                `cl`.`mobile`       AS `clmobile`,
                                `cl`.`email`        AS `clemail`,
                                `cl`.`phone`        AS `clphone`,
                                `cl`.`fax`          AS `clfax`
                            FROM 
                                `alt_depot` AS `s`
                                LEFT JOIN `alt_contact` `cl`
                                        ON `cl`.`id` = `s`.`alt_contact_id` AND `cl`.`status` = 1 AND cl.module_type = 1 AND cl.company_id = s.company_id 
                                WHERE s.module_type = 1 AND s.acc_id = ".$Row['id']." AND s.status =1 AND s.is_delivery_collection_address = 1 AND s.company_id = " . $this->arrUser['company_id'];
                    // echo $Sql1;exit;
                    $RS1 = $this->objsetup->CSI($Sql1);

                    if ($RS1->RecordCount() == 1) {
                        if ($Row1 = $RS1->FetchRow()) {
                            $result['clid'] = $Row1['clid'];
                            $result['cldepot'] = $Row1['cldepot'];
                            $result['claddress'] = $Row1['claddress'];
                            $result['claddress_2'] = $Row1['claddress_2'];
                            $result['clcity'] = $Row1['clcity'];
                            $result['clcounty'] = $Row1['clcounty'];
                            $result['clpostcode'] = $Row1['clpostcode'];
                            $result['clcountry'] = $Row1['clcountry'];
                            $result['cldirect_line'] = $Row1['cldirect_line'];
                            $result['clcontact_name'] = $Row1['clcontact_name'];
                            $result['cljob_title'] = $Row1['cljob_title'];
                            $result['clmobile'] = $Row1['clmobile'];
                            $result['clemail'] = $Row1['clemail'];
                            $result['clphone'] = $Row1['clphone'];
                            $result['clfax'] = $Row1['clfax'];
                        }
                    } else {
                        $result['clid'] = '';
                        $result['cldepot'] = '';
                        $result['claddress'] = '';
                        $result['claddress_2'] = '';
                        $result['clcity'] = '';
                        $result['clcounty'] = '';
                        $result['clpostcode'] = '';
                        $result['cldirect_line'] = '';
                        $result['clcountry'] = '';
                        $result['clcontact_name'] = '';
                        $result['cljob_title'] = '';
                        $result['clmobile'] = '';
                        $result['clemail'] = '';
                        $result['clphone'] = '';
                        $result['clfax'] = '';
                    }
                }


                // if ($attr['type'] == 99) {
                $result['internal_sales'] = $Row['internal_sales'];
                $result['salesperson_id'] = $Row['salesperson_id'];
                $result['support_person'] = $Row['support_person'];
                $result['currency_id'] = $Row['currency_id'];
                $currency_attr['id'] = $result['currency_id'];
                $c_rate = $this->get_currency_conversion_rate($currency_attr);
                if ($c_rate['ack'] == 1) {
                    $result['currency_rate'] = $c_rate['response']['conversion_rate'];
                } else
                    $result['currency_rate'] = 1;
                $result['address_1'] = $Row['primary_address_1'];
                $result['address_2'] = $Row['primary_address_2'];
                $result['county'] = $Row['primary_county'];
                $result['country_id'] = $Row['primary_country'];
                // }

                $result['contact_id'] = $Row['primaryc_id'];
                $result['contact_person'] = $Row['primaryc_name'];
                $result['fax'] = $Row['primaryc_fax'];
                $result['Telephone'] = $Row['primaryc_phone'];
                $result['email'] = $Row['primaryc_email'];

                //finance details
                $result['finance_id'] = $Row['fid'];
                $result['purchase_code_number'] = $Row['purchase_code_number'];
                $result['account_payable_number'] = $Row['account_payable_number'];
                $result['account_payable_id'] = $Row['account_payable_id'];
                $result['femail'] = $Row['femail'];
                $result['fphone'] = $Row['fphone'];
                $result['ffax'] = $Row['ffax'];
                $result['generate'] = $Row['generate'];
                $result['payment_terms_id'] = $Row['payment_terms_id'];
                $result['payment_method_id'] = $Row['payment_method_id'];
                
                $result['finance_check'] = $Row['finance_check'];
                $result['fincharges'] = $Row['fincharges'];
                $result['finchargetype'] = $Row['finchargetype'];

                $result['insurance_check'] = $Row['insurance_check'];
                $result['inscharges'] = $Row['inscharges'];
                $result['inschargetype'] = $Row['inschargetype'];
                $result['fcontact_person'] = $Row['fcontact_person'];
                $result['falt_contact_person'] = $Row['falt_contact_person'];
                $result['falt_contact_email'] = $Row['falt_contact_email'];
                $result['company_reg_no'] = $Row['company_reg_no'];
                if(isset($attr['account_type']) && $attr['account_type'] == 2)
                {
                    $result['bill_bank_name'] = $Row['crm_bank_name'];
                    $result['bill_to_bank_id'] = $Row['crm_bank_account_id'];
                    $result['posting_group_id'] = $Row['crm_posting_group_id'];
                }
                else
                {
                    $result['bill_bank_name'] = $Row['fbank_name'];
                    $result['bill_to_bank_id'] = $Row['bank_account_id'];
                    $result['posting_group_id'] = $Row['posting_group_id'];
                }

                $result['account_name'] = $Row['account_name'];
                $result['account_no'] = $Row['account_no'];
                $result['swift_no'] = $Row['swift_no'];
                $result['iban'] = $Row['iban'];
                $result['sort_code'] = $Row['sort_code'];
                $result['vat_number'] = $Row['vat_number'];
                $result['sale_person_id'] = $Row['sale_person_id'];
                $result['empname'] = $Row['empname'];
                $result['credit_limit'] = $Row['credit_limit'];
                $result['anonymous_customer'] = $Row['anonymous_customer'];

                $temp_attr['acc_id']=$Row['id'];
                $temp_attr['is_billing_address']=1;
                $temp_attr['module_type']=1;
                
                // $billing_address_details = $this->objSrm->get_alt_depots($temp_attr);
                $billing_addr_sql = "SELECT address AS address_1, address_2, city, county, postcode, country 
                                    FROM alt_depot
                                    where   status = 1 AND 
                                            acc_id = ".$Row['id']." AND 
                                            module_type = 1 AND 
                                            is_billing_address = 1 AND
                                            depot != '' AND
                                            company_id='" . $this->arrUser['company_id']."' LIMIT 1";
                // $result['billing_address_details'] = $billing_address_details['record']['result'][0];
                $RS_billing_addr_sql = $this->objsetup->CSI($billing_addr_sql);

                if ($RS_billing_addr_sql->RecordCount() > 0) {

                    while ($Row1 = $RS_billing_addr_sql->FetchRow()) {
                        foreach ($Row1 as $key => $value) {
                            if (is_numeric($key))
                                unset($Row1[$key]);
                        }
                        $result['billing_address_details'] = $Row1;
                    }
                }


                $attr['crm_id'] = $Row['id'];
                $attr['type'] = '2';

                if(!($result['posting_group_id']>0)){
                    
                    $postingGrpSql = "   SELECT vat.id,
                                                    c.vat AS vat_value, 
                                                    vat.vat_name,
                                                    vat.ref_id,
                                                    postgrp.id AS post_grp
                                            FROM vat_posting_grp_setup AS c 
                                            LEFT JOIN ref_posting_group AS postgrp ON postgrp.id=c.postingGrpID
                                            LEFT JOIN vat ON vat.id=c.vatRateID
                                            WHERE postgrp.company_id='" . $this->arrUser['company_id']."' AND  
                                                  c.company_id= '" . $this->arrUser['company_id']."' AND 
                                                  vat.ref_id=1 AND c.vat = 20 
                                            LIMIT 1";
                                            
                    $RS_postingGrp = $this->objsetup->CSI($postingGrpSql);

                    if ($RS_postingGrp->RecordCount() > 0) {

                        $result['posting_group_id'] = $RS_postingGrp->fields['post_grp'];
                    }
                }


                // $result['crmsaleperson']            = $this->objCrm->getCRMSalespersons($attr);

                
            
                $temp_attr['posting_group_id'] = $result['posting_group_id'];
                $posting_group_arr = $this->objHr->get_vat_group_by_posting_group($temp_attr);
                $result['arr_vat_post_grp_sales'] = ($posting_group_arr['ack'] == 1) ? $posting_group_arr['response'] : array();

                $temp_attr_currency['currency_id'] = $result['currency_id'];
                $currency_arr_local = $this->objsetup->get_currencies_list($temp_attr_currency);
                $result['currency_arr_local']= $currency_arr_local['response'];

                $posting_group = $this->getPostingGrp();
                $result['arr_posting_grp'] = ($posting_group['ack'] == 1) ? $posting_group['response'] : array();

                $paymentTerms = $this->getPaymentTerms();
                $result['arr_paymentTerms'] = ($paymentTerms['ack'] == 1) ? $paymentTerms['response'] : array();

                $paymentMethods = $this->getPaymentMethods();
                $result['arr_paymentMethods'] = ($paymentMethods['ack'] == 1) ? $paymentMethods['response'] : array();

                $response['response'] = $result;
            }


            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_customer_for_general_ledger($attr) {
        $this->objGeneral->mysql_clean($attr);
        $response = array();

        $subQuery = "SELECT  c.id
                from sr_crm_listing  c
                where  c.type IN (2,3) AND c.customer_code IS NOT NULL AND  c.name !='' AND
                      (c.company_id=" . $this->arrUser['company_id'] . " )  "; 
        
        /* $subQuery = "SELECT  c.id
                     FROM crm c
                     WHERE c.type IN (2,3) AND 
                           c.company_id=" . $this->arrUser['company_id'] . ""; */

        //or  company.parent_id=" . $this->arrUser['company_id'] . "
        //defualt Variable
        $subQuery = $this->objsetup->whereClauseAppender($subQuery, 48);

        $Sql = "Select c.* FROM 
                    sr_crm as c
                    where c.name!='' AND c.id IN (".$subQuery.") AND c.company_id=" . $this->arrUser['company_id'] . " AND  c.type IN (2,3)";

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {

            while ($Row = $RS->FetchRow()) {
                $result = array();
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $result['id'] = $Row['id'];
                $result['code'] = $Row['customer_code'];
                $result['title'] = $Row['name'];
                $response['response'][] = $result;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function getDefaultLocation($id) {
        // echo "<pre>";print_r($attr);

        $Sql = "SELECT d.*
                FROM alt_depot d
                WHERE d.acc_id='$id' AND 
                      d.module_type=1 AND  
                      d.is_default=1 AND
                      d.company_id=" . $this->arrUser['company_id'] . " 
                LIMIT 1";

        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);
        $response = array();

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response = $Row;
        } else {
            $response = array();
        }
        return $response;
    }

    function getBillingLocation($id) {
        // echo "<pre>";print_r($attr);

        $Sql = "SELECT d.*, `cl`.`contact_name`                  AS `clcontact_name`,
                            `cl`.`direct_line`                   AS `cldirect_line`,
                            `cl`.`job_title`                     AS `cljob_title`,
                            `cl`.`mobile`                        AS `clmobile`,
                            `cl`.`email`                         AS `clemail`,
                            `cl`.`phone`                         AS `clphone`,
                            `cl`.`fax`                           AS `clfax`
                FROM alt_depot d
                LEFT JOIN `alt_contact` `cl`
                    ON ((`cl`.`id` = `d`.`alt_contact_id`))
                WHERE d.acc_id='".$id."' AND 
                      d.module_type=1 AND  
                      d.is_billing_address=1 AND
                      d.company_id=" . $this->arrUser['company_id'] . "
                LIMIT 1";

        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);
        $response = array();

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response = $Row;
        } else {
            $response = array();
        }
        return $response;
    }

    function get_customer_crm_listings_popup($attr) {
        $this->objGeneral->mysql_clean($attr);

        $limit_clause = $where_clause = "";

        if (!empty($attr['all']))
            $where_clause .= " AND  c.type IN (3)  ";
        else
            $where_clause .= " AND  c.type IN (2,3)  ";


        if (!empty($attr['searchKeyword'])) {
            $val = intval(preg_replace("/[^0-9]/", '', $attr['searchKeyword']));
            //$where_clause .= " AND  c.customer_no LIKE '%$val%'  OR c.name LIKE '%$attr[searchKeyword]%'";
            if ($val != 0)
                $where_clause .= " AND  c.customer_no LIKE '%".$val."%'  ";
            else
                $where_clause .= "   AND c.name LIKE '%".$attr['searchKeyword']."%'";
        }

        if (!empty($attr['buying_groups']))
            $where_clause .= " AND c.buying_grp=".$attr['buying_groups']." ";

        if (!empty($attr['regions']))
            $where_clause .= " AND c.region_id=".$attr['regions']." ";

        if (!empty($attr['segments']))
            $where_clause .= " AND c.crm_segment_id=".$attr['segments']." ";


        $response = array();
        $Sql = "Select c.*," . $this->objGeneral->get_nested_query_list('region', $this->arrUser['company_id']) . "
          , " . $this->objGeneral->get_nested_query_list('buying_group', $this->arrUser['company_id']) . "
          , " . $this->objGeneral->get_nested_query_list('segment', $this->arrUser['company_id']) . " from 
          sr_customer_finance_sel as c
		where c.name!='' AND c.company_id=" . $this->arrUser['company_id'] . " " . $where_clause . "";

        /* $Sql = "Select c.* from 
          sr_customer_finance_sel as c
          LEFT JOIN crm_region ON crm_region.id=c.region_id
          LEFT JOIN crm_buying_group ON crm_buying_group.id=c.buying_grp
          LEFT JOIN crm_segment ON crm_segment.id=c.crm_segment_id
          LEFT JOIN
          where c.name!='' AND (c.company_id=" . $this->arrUser['company_id'] . " or  c.parent_id=" .
          $this->arrUser['company_id']
          . ")
          " . $where_clause . ""; */
        // echo $Sql;exit;
        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'c');
        // echo $response['q'];exit;
        $RS = $this->objsetup->CSI($response['q']);
        $response['q'] = '';

        //finance settings

        $counter = 0;
        if ($RS->RecordCount() > 0) {

            while ($Row = $RS->FetchRow()) {
                $result = array();
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                // $result['id'] = $Row['id'];
                $result['id'] = $Row['customer_id'];

                $result['code'] = $Row['customer_code'];

                if ($Row['type'] == 1)
                    $result['code'] = $Row['crm_code'];


                $result['title'] = $Row['name'];
                $result['person'] = $Row['contact_person'];
                $result['city'] = $Row['city'];
                $result['postcode'] = $Row['postcode'];
                $result['phone'] = $Row['phone'];
                $result['type'] = $Row['type'];
                $result['address'] = $Row['address'];


                $result['region_id'] = $Row['region_id'];
                $result['segment_id'] = $Row['company_type'];
                $result['buying_id'] = $Row['buying_grp'];

                $result['Region'] = $Row['region'];
                $result['Buying Group'] = $Row['buying_group'];
                $result['Segment'] = $Row['segment'];
                if ($attr['type'] == 99) {
                    $result['internal_sales'] = $Row['internal_sales'];
                    $result['salesperson_id'] = $Row['salesperson_id'];
                    $result['support_person'] = $Row['support_person'];
                    $result['currency_id'] = $Row['currency_id'];
                    //$result['address_1'] = $Row['address_1'];
                    $result['address_2'] = $Row['address_2'];
                    $result['county'] = $Row['county'];
                    $result['country_id'] = $Row['country_id'];
                }
                require_once(SERVER_PATH . "/classes/Setup.php");
                $objsetup = new Setup($this->arrUser);

                $result1 = $objsetup->get_finance_charges($attr);
                $response['response']['arr_finance_charges'] = $result1['response'];

                $response['response'][$counter] = $result;
                // $response['response'][$counter]['alldata'] = $Row;

                $counter++;
            }


            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_customer_listings_for_groups($attr) {
        //$this->objGeneral->mysql_clean($attr);
        $strWhere = '';
        if (isset($attr['type_id']) && isset($attr['search_data'])) {
            if ($attr['type_id'] == 3)
                $strWhere .= " and crm_region.title LIKE '%" . $attr['search_data'] . "%'";
            if ($attr['type_id'] == 4)
                $strWhere .= " and crm_segment.title LIKE '%" . $attr['search_data'] . "%'";
            if ($attr['type_id'] == 5)
                $strWhere .= " and crm_buying_group.title LIKE '%" . $attr['search_data'] . "%'";
        }

        $strIds = implode(',', $attr['value']);
        $response = array();
        $Sql = "SELECT  crm.id,crm.region_id,crm.company_type as segment_id,crm.buying_grp as buying_group_id,
				crm.customer_code,crm.name as customer_name,crm_region.title as region,
					crm_segment.title as segment,
					crm_buying_group.title as buying_group
			FROM crm

			LEFT OUTER JOIN crm_region ON ( crm_region.id = crm.region_id )
			LEFT OUTER JOIN crm_segment ON ( crm_segment.id = crm.company_type)
			LEFT OUTER JOIN crm_buying_group ON ( crm_buying_group.id = crm.buying_grp)

			JOIN company on company.id=crm.company_id 
			LEFT JOIN employees on (employees.id = crm.salesperson_id)
			where type in (2,3) and crm.status='1' " . $strWhere . " and " . $attr['column'] . " in (" . $strIds . ") and ( crm.company_id=" . $this->arrUser['company_id'] . " 
			or  company.parent_id=" . $this->arrUser['company_id'] . ")
			order by crm.id ASC"; //d.status=1 and
        //echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['region_id'] = $Row['region_id'];
                $result['segment_id'] = $Row['segment_id'];
                $result['buying_group_id'] = $Row['buying_group_id'];
                $result['customer_code'] = $Row['customer_code'];
                $result['customer_name'] = $Row['customer_name'];
                $result['region'] = $Row['region'];
                $result['segment'] = $Row['segment'];
                $result['buying_group'] = $Row['buying_group'];
                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        //print_r($response);exit;
        return $response;
    }

    function get_group_of_customers($attr) {
        //error_reporting(E_ALL);
        //ini_set('display_error', 1);
        $this->objGeneral->mysql_clean($attr);

        //Old date
        //$current_date = strtotime(date('Y-m-d'));
        $current_date = $this->objGeneral->convert_date(date('Y-m-d'));

        //echo "current date==>>".$current_date; exit;
        $s_start_date = $this->objGeneral->convert_date($attr['s_start_date']);
        $s_end_date = $this->objGeneral->convert_date($attr['s_end_date']);

        $strWhere = '';
        if (isset($attr['type_id']) && isset($attr['search_data'])) {
            //$strWhere .= " and pad.customer_product_type_id = ".$attr['type_id']."";
            if ($attr['type_id'] == 1)
                $strWhere .= " and pad.customer_name LIKE '%" . $attr['search_data'] . "%'";
            /* if($attr['type_id'] == 2)
              $strWhere .= " and crm_alt_depot.depot LIKE '%".$attr['search_data']."%'"; */
            if ($attr['type_id'] == 3)
                $strWhere .= " and pad.region LIKE '%" . $attr['search_data'] . "%'";
            if ($attr['type_id'] == 4)
                $strWhere .= " and pad.segment LIKE '%" . $attr['search_data'] . "%'";
            if ($attr['type_id'] == 5)
                $strWhere .= " and pad.buying_grp LIKE '%" . $attr['search_data'] . "%'";
        }

        if (isset($attr['status']) && $attr['status'] == 1) {
            $strWhere .= " and pad.start_date < '" . $current_date . "'";
        }

        if (isset($attr['status']) && $attr['status'] == 2) {
            $strWhere .= " and (pad.start_date <= '" . $current_date . "' and pad.end_date >= '" . $current_date . "')";
        }

        if (isset($attr['status']) && $attr['status'] == 3) {
            $strWhere .= " and pad.start_date > '" . $current_date . "'";
        }


        if (isset($attr['s_start_date']) && !empty($attr['s_start_date'])) {
            //$strWhere .= " and pad.start_date >= '".strtotime($s_start_date)."'";
            $strWhere .= " and pad.start_date >= '" . $s_start_date . "'";
        }

        //echo "where==>>".$strWhere; exit;
        if (isset($attr['s_end_date']) && !empty($attr['s_end_date'])) {
            //$strWhere .= " and pad.end_date <= '".strtotime($s_end_date)."'";
            $strWhere .= " and pad.end_date <= '" . $s_end_date . "'";
        }

        //echo "where==>>".$strWhere; exit;


        $Sql = " SELECT *
					FROM customer_price_adjustment as pad
					JOIN company on company.id=pad.company_id
					WHERE pad.crm_id = " . $attr['value'] . " and pad.customer_product_type_id = " . $attr['customer_product_type_id'] . " and pad.product_id = " . $attr['product_id'] . " " . $strWhere . " and (pad.company_id=" . $this->arrUser['company_id'] . "  
					or  company.parent_id=" . $this->arrUser['company_id'] . ")";
        //and ('".strtotime($current_date)."' between pa.start_date and pa.end_date)
        //echo $priceSqlCat; exit;
        ////echo $priceSqlBrand; exit;
        //echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['final_price'] = $attr['price_offered'];
                $response['response'][] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    }

    function super_unique($array) {
        $result = "";
        // $result = array_map("unserialize", array_unique(array_map("serialize", $array)));


        foreach ($result as $key => $value) {
            if (is_array($value)) {
                $result[$key] = self::super_unique($value);
            }
        }

        return $result;
    }

    function get_promotion_products_customers($attr) {

        $this->objGeneral->mysql_clean($attr);
        //echo '<pre>'; print_r(json_decode($attr['price_strategy'])); exit;
        //echo '<pre>'; print_r($attr); exit;
        $exCust['sale_promotion_id'] = $attr['sale_promotion_id'];
        $arrExclCust = self::get_promotion_excluded_customers($exCust);
        //echo '<pre>'; print_r($arrExclCust); exit;
        $strCustWhere = '';
        if ($arrExclCust['ack'] == 1) {
            $strIds = implode(',', $arrExclCust['response']);
            $strCustWhere = "and crm.id NOT IN (" . $strIds . ")";
        }

        $exProd['sale_promotion_id'] = $attr['sale_promotion_id'];
        $arrExclProd = self::get_promotion_excluded_products($exProd);
        //echo '<pre>'; print_r($arrExclProd); exit;
        $strProdWhere = '';
        if ($arrExclProd['ack'] == 1) {
            $strProdIds = implode(',', $arrExclProd['response']);
            $strProdWhere = "and product.id NOT IN (" . $strProdIds . ")";
        }


        $strategySql = " SELECT name
					FROM ref_price_strategy_types
					WHERE status = 1 and id=" . $attr['price_strategy'] . " limit 1";
        //echo $volDiscSql; exit;
        $strategyRS = $this->objsetup->CSI($strategySql);
        $strStrategy = $strategyRS->fields['name'];

        $current_date = $this->objGeneral->convert_date(date('Y-m-d'));


        $response = array();
        $Sql = "SELECT  crm.id, 
				crm.customer_code,crm.name, crm.city, crm.contact_person, crm.postcode,crm.phone,CONCAT(employees.first_name,' ',employees.last_name) as salesperon,crm_region.title as region, crm_segment.title as segment, crm_buying_group.title as buying_grp,currency.code as currency_name
			FROM crm
			JOIN company on company.id=crm.company_id 
			LEFT JOIN crm_region on crm_region.id=crm.region_id 
			LEFT JOIN crm_segment on crm_segment.id=crm.company_type 
			LEFT JOIN crm_buying_group on crm_buying_group.id=crm.buying_grp 
			LEFT JOIN currency on currency.id=crm.currency_id 
			
			LEFT JOIN employees on (employees.id = crm.salesperson_id)
			where type in (2,3) and crm.status='1' and crm." . $attr['column'] . " = " . $attr['value'] . " " . $strCustWhere . " and ( crm.company_id=" . $this->arrUser['company_id'] . " 
			or  company.parent_id=" . $this->arrUser['company_id'] . ")
			order by crm.id ASC";

        //echo $Sql; exit;
        $prodSql = " SELECT product.id,product.product_code,product.description,product.standard_price,category.name as cat_name, brand.brandname,pvd.supplier_type as prod_vol_disc_type,pvd.discount_value as prod_vol_disc,ci.price_offered,cvd.discount_type as cust_vol_disc_type, cvd.discount as cust_vol_disc,
				( SELECT uom.title  FROM units_of_measure as uom 
				where uom.id =product.unit_id ) as unit_measur ,product.absolute_minimum_price
				
				FROM product
				JOIN company on company.id=product.company_id
				JOIN category on category.id=product.category_id
				JOIN brand on brand.id=product.brand_id
				LEFT JOIN product_volume_discount as pvd on product.id=pvd.product_id
				LEFT JOIN customer_item_info as ci on product.id=ci.product_id and ci.status = 1 and ci.crm_id = " . $attr['value'] . " and ci.customer_product_type_id = " . $attr['customer_product_type_id'] . "
				LEFT JOIN crm_volume_discount as cvd on product.id=cvd.product_id and cvd.status = 1 and cvd.customer_item_info_id = ci.id and ('" . $current_date . "' between cvd.start_date and cvd.end_date)

				WHERE product.status = 1 and product." . $attr['prod_column'] . " = " . $attr['prod_value'] . " " . $strProdWhere . " and (product.company_id=" . $this->arrUser['company_id'] . " 
				or  company.parent_id=" . $this->arrUser['company_id'] . ")
				order by product.id ASC";

        //echo $prodSql; exit;
        $arrProductIds = array();
        $strProductIds = '';
        $prodRS = $this->objsetup->CSI($prodSql);
        $arr_products = array();
        if ($prodRS->RecordCount() > 0) {
            while ($Row = $prodRS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $arr_products[] = $Row;
                $arrProductIds[] = $Row['id'];
            }
        }

        /* $strProductIds = implode(',', $arrProductIds);

          $custItemSql = " SELECT ci.id,ci.price_offered
          FROM customer_item_info as ci
          JOIN company on company.id=ci.company_id
          WHERE ci.status = 1 and ci.crm_id = ".$attr['value']." and ci.customer_product_type_id = ".$attr['customer_product_type_id']." and product_id IN (".$strProductIds.")  and (ci.company_id=".$this->arrUser['company_id']."
          or  company.parent_id=".$this->arrUser['company_id'].") limit 1";

          //echo $custItemSql; exit;
          $custItemRS = $this->objsetup->CSI($custItemSql);

          $price_offered = $custItemRS->fields['price_offered'];
          $customer_item_info_id = $custItemRS->fields['id'];

          $current_date = date('Y-m-d');

          //Customer Volume Discount
          $volDiscSql = " SELECT cvd.id,cvd.discounted_price,cvd.discount_type,cvd.discount
          FROM crm_volume_discount as cvd
          JOIN company on company.id=cvd.company_id
          WHERE cvd.status = 1 and cvd.customer_item_info_id = ".$customer_item_info_id." and (".strtotime($current_date)." between cvd.start_date and cvd.end_date) and (cvd.company_id=".$this->arrUser['company_id']."
          or  company.parent_id=".$this->arrUser['company_id'].") limit 1";
          //echo $volDiscSql; exit;
          $volDiscRS = $this->objsetup->CSI($volDiscSql);
          $cust_vol_discounted_price = $volDiscRS->fields['discounted_price'];
          $cust_vol_disc_type = $volDiscRS->fields['discount_type'];
          $cust_vol_disc = $volDiscRS->fields['discount']; */

        /* //Product Volume Discount
          $prodVolDiscSql = " SELECT pvd.id,pvd.supplier_type,pvd.discount_value
          FROM product_volume_discount as pvd
          JOIN company on company.id=pvd.company_id
          WHERE pvd.status = 1 and pvd.product_id IN (".$strProductIds.") and (".strtotime($current_date)." between pvd.start_date and pvd.end_date) and (pvd.company_id=".$this->arrUser['company_id']."
          or  company.parent_id=".$this->arrUser['company_id'].") limit 1";
          //echo $prodVolDiscSql; exit;
          $prodVolDiscRS = $this->objsetup->CSI($prodVolDiscSql);
          $prod_vol_disc_type = $prodVolDiscRS->fields['supplier_type'];
          $prod_vol_disc = $prodVolDiscRS->fields['discount_value']; */


        //echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);
        $arr_customers = array();
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $arr_customers[] = $Row;
            }
        }

        if (count($arr_products) >= count($arr_customers)) {
            foreach ($arr_products as $key => $prod) {
                foreach ($arr_customers as $key => $cust) {
                    $result = array();
                    $final_disc_price = 0;
                    $standard_vol_discount = 0;
                    $specific_vol_discount = 0;
                    $arr_prod_vol_disc = self::get_product_vol_discount_by_id($prod['id']);
                    $result['cat_name'] = $prod['cat_name'];
                    $result['brandname'] = $prod['brandname'];
                    $result['Product_Code'] = $prod['product_code'];
                    $result['Product_Description'] = $prod['description'];
                    $result['region'] = $cust['region'];
                    $result['buying_grp'] = $cust['buying_grp'];
                    $result['segment'] = $cust['segment'];
                    $result['Customer_Code'] = $cust['Customer_Code'];
                    $result['Customer_Name'] = $cust['name'];
                    $result['standard_price'] = $prod['standard_price'];
                    $result['currency_name'] = $cust['currency_name'];
                    $result['unit_measur'] = $prod['unit_measur'];
                    $result['absolute_minimum_price'] = $prod['absolute_minimum_price'];
                    $result['discount_type'] = $attr['discount_type'];
                    $result['discount'] = round($attr['discount'], 0);
                    $result['price_strategy_type'] = $attr['price_strategy_type'];
                    $result['prod_vol_disc_type'] = $prod['prod_vol_disc_type'];
                    $result['price_offered'] = $prod['price_offered'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['cust_vol_disc_type'] = $prod['cust_vol_disc_type'];
                    $result['cust_vol_disc'] = $prod['cust_vol_disc'];
                    $result['price_strategy'] = $attr['price_strategy'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];

                    /* if($prod['prod_vol_disc_type'] == 1)
                      $standard_vol_discount = $prod['standard_price'] * $prod['prod_vol_disc']/100;
                      else
                      $standard_vol_discount = $prod['prod_vol_disc'];

                      if($prod['cust_vol_disc_type'] == 1)
                      $specific_vol_discount = $prod['price_offered'] * $prod['cust_vol_disc']/100;
                      else
                      $specific_vol_discount = $prod['cust_vol_disc']; */

                    if ($attr['price_strategy_type'] == 1) {
                        if ($prod['prod_vol_disc_type'] == 1)
                            $standard_vol_discount = $prod['price_offered'] * $prod['prod_vol_disc'] / 100;
                        else
                            $standard_vol_discount = $prod['prod_vol_disc'];

                        if ($prod['cust_vol_disc_type'] == 1)
                            $specific_vol_discount = $prod['price_offered'] * $prod['cust_vol_disc'] / 100;
                        else
                            $specific_vol_discount = $prod['cust_vol_disc'];
                    }
                    if ($attr['price_strategy_type'] == 2) {
                        if ($prod['prod_vol_disc_type'] == 1)
                            $standard_vol_discount = $prod['standard_price'] * $prod['prod_vol_disc'] / 100;
                        else
                            $standard_vol_discount = $prod['prod_vol_disc'];

                        if ($prod['cust_vol_disc_type'] == 1)
                            $specific_vol_discount = $prod['standard_price'] * $prod['cust_vol_disc'] / 100;
                        else
                            $specific_vol_discount = $prod['cust_vol_disc'];
                    }

                    if ($attr['price_strategy_type'] == 3) {
                        if ($prod['price_offered'] > 0) {
                            if ($prod['prod_vol_disc_type'] == 1)
                                $standard_vol_discount = $prod['price_offered'] * $prod['prod_vol_disc'] / 100;
                            else
                                $standard_vol_discount = $prod['prod_vol_disc'];

                            if ($prod['cust_vol_disc_type'] == 1)
                                $specific_vol_discount = $prod['price_offered'] * $prod['cust_vol_disc'] / 100;
                            else
                                $specific_vol_discount = $prod['cust_vol_disc'];
                        } else {
                            if ($prod['prod_vol_disc_type'] == 1)
                                $standard_vol_discount = $prod['standard_price'] * $prod['prod_vol_disc'] / 100;
                            else
                                $standard_vol_discount = $prod['prod_vol_disc'];

                            if ($prod['cust_vol_disc_type'] == 1)
                                $specific_vol_discount = $prod['standard_price'] * $prod['cust_vol_disc'] / 100;
                            else
                                $specific_vol_discount = $prod['cust_vol_disc'];
                        }
                    }

                    $result['standard_vol_discount'] = $standard_vol_discount;
                    $result['specific_vol_discount'] = $specific_vol_discount;
                    $price_offered = $prod['price_offered'];


                    if ($attr['discount_type'] == 1)
                        $prod_promotion_discount = $prod['standard_price'] * $attr['discount'] / 100;
                    else
                        $prod_promotion_discount = $attr['discount'];

                    if ($attr['discount_type'] == 1)
                        $cust_promotion_discount = $price_offered * $attr['discount'] / 100;
                    else
                        $cust_promotion_discount = $attr['discount'];

                    //Promotion Applies Before Volume Discount
                    //---------------------------------------------------
                    if ($attr['price_strategy'] == 4) {

                        if ($attr['price_strategy_type'] == 1) {
                            $final_disc_price = ($price_offered - $cust_promotion_discount) - $specific_vol_discount;
                            $promotion_discount = $cust_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 2) {
                            $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount) - $standard_vol_discount;
                            $promotion_discount = $prod_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 3) {
                            if ($price_offered > 0 && !empty($price_offered)) {
                                $final_disc_price = ($price_offered - $cust_promotion_discount) - $specific_vol_discount;
                                $promotion_discount = $cust_promotion_discount;
                            } else {
                                $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount) - $standard_vol_discount;
                                $promotion_discount = $prod_promotion_discount;
                            }
                        }
                    }

                    //Promotion Applies After Volume Discount
                    //----------------------------------------------
                    if ($attr['price_strategy'] == 5) {
                        if ($attr['price_strategy_type'] == 1) {
                            $final_disc_price = ($price_offered - $specific_vol_discount) - $cust_promotion_discount;
                            $promotion_discount = $cust_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 2) {
                            $final_disc_price = ($prod['standard_price'] - $standard_vol_discount) - $prod_promotion_discount;
                            $promotion_discount = $prod_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 3) {
                            if ($price_offered > 0 && !empty($price_offered)) {
                                $final_disc_price = ($price_offered - $specific_vol_discount) - $cust_promotion_discount;
                                $promotion_discount = $cust_promotion_discount;
                            } else {
                                $final_disc_price = ($prod['standard_price'] - $standard_vol_discount) - $prod_promotion_discount;
                                $promotion_discount = $prod_promotion_discount;
                            }
                        }
                    }

                    //Only Apply Promotion and Ignore Any Volume Discount
                    //---------------------------------------------------------------
                    if ($attr['price_strategy'] == 6) {

                        if ($attr['price_strategy_type'] == 1) {
                            $final_disc_price = ($price_offered - $cust_promotion_discount);
                            $promotion_discount = $cust_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 2) {
                            $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount);
                            $promotion_discount = $prod_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 3) {
                            if ($price_offered > 0 && !empty($price_offered)) {
                                $final_disc_price = ($price_offered - $cust_promotion_discount);
                                $promotion_discount = $cust_promotion_discount;
                            } else {
                                $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount);
                                $promotion_discount = $prod_promotion_discount;
                            }
                        }
                    }

                    //Volume Discount Applies and Promotion only for Customers without Volume Discount
                    //---------------------------------------------------------------
                    if ($attr['price_strategy'] == 7) {
                        if ($specific_vol_discount > 0) {
                            if ($attr['price_strategy_type'] == 1) {
                                $final_disc_price = ($price_offered - $specific_vol_discount);
                                $promotion_discount = $cust_promotion_discount;
                            }
                            if ($attr['price_strategy_type'] == 2) {
                                $final_disc_price = ($prod['standard_price'] - $specific_vol_discount);
                                $promotion_discount = $prod_promotion_discount;
                            }
                            if ($attr['price_strategy_type'] == 3) {
                                if ($price_offered > 0 && !empty($price_offered)) {
                                    $final_disc_price = ($price_offered - $specific_vol_discount);
                                    $promotion_discount = $cust_promotion_discount;
                                } else {
                                    $final_disc_price = ($prod['standard_price'] - $specific_vol_discount);
                                    $promotion_discount = $prod_promotion_discount;
                                }
                            }
                        } else {

                            if ($attr['price_strategy_type'] == 1) {
                                $final_disc_price = ($price_offered - $cust_promotion_discount);
                                $promotion_discount = $cust_promotion_discount;
                            }
                            if ($attr['price_strategy_type'] == 2) {
                                $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount);
                                $promotion_discount = $prod_promotion_discount;
                            }
                            if ($attr['price_strategy_type'] == 3) {
                                if ($price_offered > 0 && !empty($price_offered)) {
                                    $final_disc_price = ($price_offered - $cust_promotion_discount);
                                    $promotion_discount = $cust_promotion_discount;
                                } else {
                                    $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount);
                                    $promotion_discount = $prod_promotion_discount;
                                }
                            }
                        }
                    }

                    $result['promotion_discount'] = $promotion_discount;
                    $result['final_disc_price'] = $final_disc_price;
                    $result['show_red'] = intval($final_disc_price) == 0 || intval($final_disc_price) < 0 || intval($final_disc_price) < intval($prod['absolute_minimum_price'])
                                ? 1 : 0;
                    $result['strategy'] = $strStrategy;
                    $response['response'][] = $result;
                }
            }
        }

        if (count($arr_customers) > count($arr_products)) {

            foreach ($arr_customers as $key => $cust) {
                foreach ($arr_products as $key => $prod) {
                    $result = array();
                    $final_disc_price = 0;
                    $standard_vol_discount = 0;
                    $specific_vol_discount = 0;
                    $arr_prod_vol_disc = self::get_product_vol_discount_by_id($prod['id']);
                    $result['cat_name'] = $prod['cat_name'];
                    $result['brandname'] = $prod['brandname'];
                    $result['Product_Code'] = $prod['product_code'];
                    $result['Product_Description'] = $prod['description'];
                    $result['region'] = $cust['region'];
                    $result['buying_grp'] = $cust['buying_grp'];
                    $result['segment'] = $cust['segment'];
                    $result['Customer_Code'] = $cust['Customer_Code'];
                    $result['Customer_Name'] = $cust['name'];
                    $result['standard_price'] = $prod['standard_price'];
                    $result['currency_name'] = $cust['currency_name'];
                    $result['unit_measur'] = $prod['unit_measur'];
                    $result['absolute_minimum_price'] = $prod['absolute_minimum_price'];
                    $result['discount_type'] = $attr['discount_type'];
                    $result['discount'] = round($attr['discount'], 0);
                    $result['price_strategy_type'] = $attr['price_strategy_type'];
                    $result['prod_vol_disc_type'] = $prod['prod_vol_disc_type'];
                    $result['price_offered'] = $prod['price_offered'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['cust_vol_disc_type'] = $prod['cust_vol_disc_type'];
                    $result['cust_vol_disc'] = $prod['cust_vol_disc'];
                    $result['price_strategy'] = $attr['price_strategy'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];
                    $result['prod_vol_disc'] = $prod['prod_vol_disc'];

                    /* if($prod['prod_vol_disc_type'] == 1)
                      $standard_vol_discount = $prod['standard_price'] * $prod['prod_vol_disc']/100;
                      else
                      $standard_vol_discount = $prod['prod_vol_disc'];

                      if($prod['cust_vol_disc_type'] == 1)
                      $specific_vol_discount = $prod['price_offered'] * $prod['cust_vol_disc']/100;
                      else
                      $specific_vol_discount = $prod['cust_vol_disc']; */

                    if ($attr['price_strategy_type'] == 1) {
                        if ($prod['prod_vol_disc_type'] == 1)
                            $standard_vol_discount = $prod['price_offered'] * $prod['prod_vol_disc'] / 100;
                        else
                            $standard_vol_discount = $prod['prod_vol_disc'];

                        if ($prod['cust_vol_disc_type'] == 1)
                            $specific_vol_discount = $prod['price_offered'] * $prod['cust_vol_disc'] / 100;
                        else
                            $specific_vol_discount = $prod['cust_vol_disc'];
                    }
                    if ($attr['price_strategy_type'] == 2) {
                        if ($prod['prod_vol_disc_type'] == 1)
                            $standard_vol_discount = $prod['standard_price'] * $prod['prod_vol_disc'] / 100;
                        else
                            $standard_vol_discount = $prod['prod_vol_disc'];

                        if ($prod['cust_vol_disc_type'] == 1)
                            $specific_vol_discount = $prod['standard_price'] * $prod['cust_vol_disc'] / 100;
                        else
                            $specific_vol_discount = $prod['cust_vol_disc'];
                    }

                    if ($attr['price_strategy_type'] == 3) {
                        if ($prod['price_offered'] > 0) {
                            if ($prod['prod_vol_disc_type'] == 1)
                                $standard_vol_discount = $prod['price_offered'] * $prod['prod_vol_disc'] / 100;
                            else
                                $standard_vol_discount = $prod['prod_vol_disc'];

                            if ($prod['cust_vol_disc_type'] == 1)
                                $specific_vol_discount = $prod['price_offered'] * $prod['cust_vol_disc'] / 100;
                            else
                                $specific_vol_discount = $prod['cust_vol_disc'];
                        } else {
                            if ($prod['prod_vol_disc_type'] == 1)
                                $standard_vol_discount = $prod['standard_price'] * $prod['prod_vol_disc'] / 100;
                            else
                                $standard_vol_discount = $prod['prod_vol_disc'];

                            if ($prod['cust_vol_disc_type'] == 1)
                                $specific_vol_discount = $prod['standard_price'] * $prod['cust_vol_disc'] / 100;
                            else
                                $specific_vol_discount = $prod['cust_vol_disc'];
                        }
                    }

                    $result['standard_vol_discount'] = $standard_vol_discount;
                    $result['specific_vol_discount'] = $specific_vol_discount;
                    $price_offered = $prod['price_offered'];


                    if ($attr['discount_type'] == 1)
                        $prod_promotion_discount = $prod['standard_price'] * $attr['discount'] / 100;
                    else
                        $prod_promotion_discount = $attr['discount'];

                    if ($attr['discount_type'] == 1)
                        $cust_promotion_discount = $price_offered * $attr['discount'] / 100;
                    else
                        $cust_promotion_discount = $attr['discount'];

                    //Promotion Applies Before Volume Discount
                    //---------------------------------------------------
                    if ($attr['price_strategy'] == 4) {

                        if ($attr['price_strategy_type'] == 1) {
                            $final_disc_price = ($price_offered - $cust_promotion_discount) - $specific_vol_discount;
                            $promotion_discount = $cust_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 2) {
                            $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount) - $standard_vol_discount;
                            $promotion_discount = $prod_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 3) {
                            if ($price_offered > 0 && !empty($price_offered)) {
                                $final_disc_price = ($price_offered - $cust_promotion_discount) - $specific_vol_discount;
                                $promotion_discount = $cust_promotion_discount;
                            } else {
                                $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount) - $standard_vol_discount;
                                $promotion_discount = $prod_promotion_discount;
                            }
                        }
                    }

                    //Promotion Applies After Volume Discount
                    //----------------------------------------------
                    if ($attr['price_strategy'] == 5) {
                        if ($attr['price_strategy_type'] == 1) {
                            $final_disc_price = ($price_offered - $specific_vol_discount) - $cust_promotion_discount;
                            $promotion_discount = $cust_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 2) {
                            $final_disc_price = ($prod['standard_price'] - $standard_vol_discount) - $prod_promotion_discount;
                            $promotion_discount = $prod_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 3) {
                            if ($price_offered > 0 && !empty($price_offered)) {
                                $final_disc_price = ($price_offered - $specific_vol_discount) - $cust_promotion_discount;
                                $promotion_discount = $cust_promotion_discount;
                            } else {
                                $final_disc_price = ($prod['standard_price'] - $standard_vol_discount) - $prod_promotion_discount;
                                $promotion_discount = $prod_promotion_discount;
                            }
                        }
                    }

                    //Only Apply Promotion and Ignore Any Volume Discount
                    //---------------------------------------------------------------
                    if ($attr['price_strategy'] == 6) {

                        if ($attr['price_strategy_type'] == 1) {
                            $final_disc_price = ($price_offered - $cust_promotion_discount);
                            $promotion_discount = $cust_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 2) {
                            $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount);
                            $promotion_discount = $prod_promotion_discount;
                        }
                        if ($attr['price_strategy_type'] == 3) {
                            if ($price_offered > 0 && !empty($price_offered)) {
                                $final_disc_price = ($price_offered - $cust_promotion_discount);
                                $promotion_discount = $cust_promotion_discount;
                            } else {
                                $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount);
                                $promotion_discount = $prod_promotion_discount;
                            }
                        }
                    }

                    //Volume Discount Applies and Promotion only for Customers without Volume Discount
                    //---------------------------------------------------------------
                    if ($attr['price_strategy'] == 7) {
                        if ($specific_vol_discount > 0) {
                            if ($attr['price_strategy_type'] == 1) {
                                $final_disc_price = ($price_offered - $specific_vol_discount);
                                $promotion_discount = $cust_promotion_discount;
                            }
                            if ($attr['price_strategy_type'] == 2) {
                                $final_disc_price = ($prod['standard_price'] - $specific_vol_discount);
                                $promotion_discount = $prod_promotion_discount;
                            }
                            if ($attr['price_strategy_type'] == 3) {
                                if ($price_offered > 0 && !empty($price_offered)) {
                                    $final_disc_price = ($price_offered - $specific_vol_discount);
                                    $promotion_discount = $cust_promotion_discount;
                                } else {
                                    $final_disc_price = ($prod['standard_price'] - $specific_vol_discount);
                                    $promotion_discount = $prod_promotion_discount;
                                }
                            }
                        } else {

                            if ($attr['price_strategy_type'] == 1) {
                                $final_disc_price = ($price_offered - $cust_promotion_discount);
                                $promotion_discount = $cust_promotion_discount;
                            }
                            if ($attr['price_strategy_type'] == 2) {
                                $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount);
                                $promotion_discount = $prod_promotion_discount;
                            }
                            if ($attr['price_strategy_type'] == 3) {
                                if ($price_offered > 0 && !empty($price_offered)) {
                                    $final_disc_price = ($price_offered - $cust_promotion_discount);
                                    $promotion_discount = $cust_promotion_discount;
                                } else {
                                    $final_disc_price = ($prod['standard_price'] - $prod_promotion_discount);
                                    $promotion_discount = $prod_promotion_discount;
                                }
                            }
                        }
                    }

                    $result['promotion_discount'] = $promotion_discount;
                    $result['final_disc_price'] = $final_disc_price;
                    $result['show_red'] = intval($final_disc_price) == 0 || intval($final_disc_price) < 0 || intval($final_disc_price) < intval($prod['absolute_minimum_price'])
                                ? 1 : 0;
                    $result['strategy'] = $strStrategy;
                    $response['response'][] = $result;
                }
            }
        }

        if (count($response['response']) > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        //print_r($response);exit;
        return $response;
    }

    function get_product_vol_discount_by_id($id) {
        //Product Volume Discount
        $current_date = $this->objGeneral->convert_date(date('Y-m-d'));
        $prdVolDiscSql = " SELECT pvd.id,pvd.discount_price,pvd.discount_type,pvd.discount
					FROM product_volume_discount as pvd
					JOIN company on company.id=pvd.company_id
					WHERE pvd.status = 1 and pvd.product_id = $id and (" . $current_date . " between pvd.start_date and pvd.end_date) and (pvd.company_id=" . $this->arrUser['company_id'] . "  
					or  company.parent_id=" . $this->arrUser['company_id'] . ") limit 1";
        //echo $prdVolDiscSql; exit;
        $prdVolDiscRS = $this->objsetup->CSI($prdVolDiscSql);
        $data['prd_vol_disc_price'] = $prdVolDiscRS->fields['discount_price'];
        $data['prd_vol_discount_type'] = $prdVolDiscRS->fields['discount_type'];
        $data['prd_vol_discount'] = $prdVolDiscRS->fields['discount'];
        return $data;
    }

    function get_promotion_excluded_products($arr_attr) {
        $Sql = "SELECT product_id FROM promotion_excluded_product
			WHERE sale_promotion_id = ".$arr_attr['sale_promotion_id']."";

        //echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);
        $response = array();
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $response['response'][] = $Row['product_id'];
            };
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_customer_listings_2($attr) {
        $this->objGeneral->mysql_clean($attr);

        $limit_clause = $where_clause = "";


        $response = array();
        $Sql = "SELECT  d.id, d.name, d.address_1, d.contact_person, d.customer_no, d.customer_price
                FROM crm  d
                left  JOIN company on company.id=d.company_id 
                where type in (2,3) and ( d.company_id=" . $this->arrUser['company_id'] . " 
                or  company.parent_id=" . $this->arrUser['company_id'] . ")
                order by d.id ASC"; //d.status=1 and


        $RS = $this->objsetup->CSI($Sql);


        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['name'] = $Row['name'];
                $result['customer_code'] = $Row['customer_no'];
                //$result['contact_person'] = $Row['contact_person'];
                // $result['address'] = $Row['address_1'];
                $result['customer_price'] = $Row['customer_price'];

                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        //print_r($response);exit;
        return $response;
    }

    function get_customer_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "SELECT  * from sr_crm  c where c.id='".$attr['id']."' AND c.company_id=" . $this->arrUser['company_id'] . "   ";
 
        /* $subQueryForBuckets = " SELECT  c.id
                                FROM sr_crm_listing c
                                WHERE c.type IN (2,3) AND 
                                      c.company_id=" . $this->arrUser['company_id'] . " ";

        //$subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);
        //echo $subQueryForBuckets;exit;

        $Sql .= " AND c.id IN ($subQueryForBuckets) "; */

        $Sql .= " LIMIT 1 ";

        //echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
        } else {
            $response['response'] = array();
            $response['bucketFail'] = 1;
        }
        return $response;
    }

    function get_customer_global($attr) {
        $response['response']['customer_global'] = $this->get_all_customer_global($attr['customer_checksum_id']);

        return $response;
    }

    function get_all_customer_global($checksum_id) {

        $result = array();
        $Check_Exist = "INSERT INTO sr_checksum (company_id, checksum_id, tableName, ChangedOn, ChangedBy) 
                    SELECT * FROM (SELECT " . $this->arrUser['company_id'] . ", 1, 'crm', CURRENT_TIMESTAMP," . $this->arrUser['id'] . ") AS temp
                    WHERE NOT EXISTS (SELECT  * from sr_checksum where tableName = 'crm' AND company_id = " . $this->arrUser['company_id'] . ")";
        // echo $Check_Exist;exit;      
        $RS_CHECK = $this->objsetup->CSI($Check_Exist);
        $Sql = "SELECT  * from sr_checksum where tableName = 'crm' AND checksum_id <> ".$checksum_id." AND company_id = " . $this->arrUser['company_id'];
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $result['customer_checksum_id'] = $RS->fields['checksum_id'];
            $subQuery = "SELECT  c.id
                from sr_crm_listing  c
                where  c.type IN (2,3) AND
                       c.company_id=" . $this->arrUser['company_id'] . "  "; 

            //or  company.parent_id=" . $this->arrUser['company_id'] . "
            //defualt Variable
            $subQuery = $this->objsetup->whereClauseAppender($subQuery, 48);

            $Sql1 = "SELECT  * from SR_crm_general_sel c WHERE c.type IN (2,3) AND c.customer_code IS NOT NULL AND  c.name !='' AND c.company_id=" . $this->arrUser['company_id'] . " AND c.id IN (".$subQuery.")";

            // echo $Sql1;exit;
            $RS1 = $this->objsetup->CSI($Sql1);
            if ($RS1->RecordCount() > 0) {
                while ($Row = $RS1->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $result['customer_arr'][] = $Row;
                }
                $result['ack'] = 1;
                $result['error'] = null;
            } else {
                $result['ack'] = 0;
                $result['error'] = 'No customer found';
            }
        } else {
            $result['ack'] = 0;
            $result['error'] = 'No updates in customer found';
        }
        return $result;
    }

    function get_unique_id($attr) {

        $moduleCodeType = 1;

        if($attr['type'] == 3 ){

            $Sql = "SELECT type
                    FROM ref_module_category_value
                    WHERE  module_code_id = 2 AND status = 1 AND company_id=" . $this->arrUser['company_id'] . "
                    LIMIT 1";
            // echo  $Sql;exit;

            $rs4 = $this->objsetup->CSI($Sql);

            if ($rs4->RecordCount() > 0){
                $moduleCodeType = $rs4->fields['type'];
            }

        }

        $response['ack'] = 1;
        $response['moduleCodeType'] = $moduleCodeType;

        $response = $this->objCrm->load_crm_nested_data($attr, $response, 'crm', 'notselect');
        return $response;
    }
    function check_for_module_code($attr) {

        $moduleCodeType = 1;


            $Sql = "SELECT type
                    FROM ref_module_category_value
                    WHERE  module_code_id = 2 AND status = 1 AND company_id=" . $this->arrUser['company_id'] . "
                    LIMIT 1";
            // echo  $Sql;exit;

            $rs4 = $this->objsetup->CSI($Sql);

            if ($rs4->RecordCount() > 0){
                $moduleCodeType = $rs4->fields['type'];
            }

       

        $response['ack'] = 1;
        $response['moduleCodeType'] = $moduleCodeType;

        return $response;
    }

    function add_customer($arr_attr) {
        $this->objGeneral->mysql_clean($arr_attr);
        //(tst.customer_code='" . $arr_attr['customer_code'] . "' AND   )

        $data_pass = " tst.type IN (2,3) AND tst.name='" . $arr_attr['name'] . "'";
        $total = $this->objGeneral->count_duplicate_in_sql('crm', $data_pass, $this->arrUser['company_id']);

        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists.';
            return $response;
        }
        /* customer_no='$arr_attr[customer_no]', */

        $anonymous_customer = (isset($arr_attr['anonymous_customer']) && $arr_attr['anonymous_customer'] != '') ? $arr_attr['anonymous_customer'] : 0;

        $Sql = "INSERT INTO crm
                            SET 
                                customer_code='".$arr_attr['customer_code']."',
                                name='".$arr_attr['name']."',
                                type='3',
                                contact_person='".$arr_attr['contact_person']."',
                                address_type='".$arr_attr['address_type']."',
                                address_1='".$arr_attr['address_1']."',
                                job_title='".$arr_attr['job_title']."',
                                address_2='".$arr_attr['address_2']."',
                                phone='".$arr_attr['phone']."',
                                city='".$arr_attr['city']."',
                                fax='".$arr_attr['fax']."',
                                county='".$arr_attr['county']."',
                                country_id='".$arr_attr['country_id']."',
                                mobile='".$arr_attr['mobile']."',
                                postcode='".$arr_attr['postcode']."',
                                direct_line='".$arr_attr['direct_line']."',
                                crm_classification='".$arr_attr['crm_classification']."',
                                ownership_type='".$arr_attr['ownership_type']."',
                                support_person='".$arr_attr['support_person']."',
                                email='".$arr_attr['email']."',
                                salesperson_id='$arr_attr[salesperson_id]',
                                turnover='$arr_attr[turnover]',
                                internal_sales='$arr_attr[internal_sales]',
                                company_type='$arr_attr[company_type]',
                                source_of_crm='$arr_attr[source_of_crm]',
                                additionalInformation = '$arr_attr[additionalInformation]',
                                pref_method_of_communication='$arr_attr[pref_method_of_communication]',
                                status='".$arr_attr['status']."',
                                web_address='$arr_attr[web_address]',
                                anonymous_customer='" . $anonymous_customer . "',
                                buying_grp='$arr_attr[buying_grp]',
                                region_id='$arr_attr[region_id]',
                                credit_rating='$arr_attr[credit_rating]',
                                currency_id='$arr_attr[currency_id]',
                                user_id='" . $this->arrUser['id'] . "',
                                company_id='" . $this->arrUser['company_id'] . "',
                                AddedBy='" . $this->arrUser['id'] . "',
                                AddedOn='" . current_date . "',
                                credit_limit='$arr_attr[credit_limit]'";


        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();

        if ($id > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function update_customer($arr_attr) {
        // $this->objGeneral->mysql_clean($arr_attr);        

        if ($arr_attr['turnover'] == '')
            $turnover = 0;
        else
            $turnover = $arr_attr['turnover'];

        if ($arr_attr['emp_no'] == '')
            $emp_no = 0;
        else
            $emp_no = $arr_attr['emp_no'];

        $social_media_arr = $arr_attr['social_media_arr'];

        $social_media_str = "";
        $index = 1;
        // print_r($social_media_arr);exit;
        foreach ($social_media_arr as $sm) {
            if (!empty($sm) && $sm->id > 0) {
                $social_media_str .= " socialmedia" . $index . " = '" . $sm->id . "',
                socialmedia" . $index . "_value = '" . addslashes($sm->value) . "',";
                $index++;
            }
        }
        if ($index <= 5) {
            while ($index <= 5) {
                $social_media_str .= " socialmedia" . $index . " = '0',
                socialmedia" . $index . "_value = '',";
                $index++;
            }
        }
        // echo $social_media_str;exit;
        $social_media_str = substr($social_media_str, 0, -1);

        $locArray = $arr_attr['loc'];
        $contactArray = $arr_attr['contact'];
        $this->objGeneral->mysql_clean($arr_attr);

        if(empty($arr_attr['ownership_types'])){
            $arr_attr['ownership_types'] = 0;
        }
        if (!empty($arr_attr['id']))
            $where_id = "AND tst.id <>  '".$arr_attr['id']."' ";

        $data_pass = " tst.type IN (2,3) AND tst.customer_code='" . $arr_attr['customer_code'] . "'  $where_id ";
        $total = $this->objGeneral->count_duplicate_in_sql('crm', $data_pass, $this->arrUser['company_id']);

        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Customer No. Already Exists.';
            return $response;
        }

        $data_pass = " tst.type IN (2,3) AND
                       (tst.customer_code='" . $arr_attr['customer_code'] . "' AND tst.name='" . $arr_attr['name'] . "' )  $where_id ";

        $total = $this->objGeneral->count_duplicate_in_sql('crm', $data_pass, $this->arrUser['company_id']);

        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists.';
            return $response;
        }

        $is_billing_address = (isset($arr_attr['is_billing_address']) && $arr_attr['is_billing_address'] != '') ? $arr_attr['is_billing_address'] : 0;
        $is_delivery_collection_address = (isset($arr_attr['is_delivery_collection_address']) && $arr_attr['is_delivery_collection_address'] != '') ? $arr_attr['is_delivery_collection_address']
                    : 0;
        $is_invoice_address = (isset($arr_attr['is_invoice_address']) && $arr_attr['is_invoice_address'] != '') ? $arr_attr['is_invoice_address'] : 0;

        $anonymous_customer = (isset($arr_attr['anonymous_customer']) && $arr_attr['anonymous_customer'] != '') ? $arr_attr['anonymous_customer'] : 0;
        $crm_segment_id = (isset($arr_attr['crm_segment_id']) && $arr_attr['crm_segment_id'] != '' && intval($arr_attr['crm_segment_id']) > 0)? $arr_attr['crm_segment_id']: 'NULL';

        $saleperson_code_id = (isset($arr_attr['saleperson_code_id']) && $arr_attr['saleperson_code_id'] != '' && intval($arr_attr['saleperson_code_id']) > 0)? $arr_attr['saleperson_code_id']: 0;
        // print_r($locArray);exit;
        

        if (empty($arr_attr['id'])) {

            $Sql = "INSERT INTO crm 
                                SET 
                                    transaction_id = SR_GetNextTransactionID(" . $this->arrUser['company_id'] . ", 2),
                                    unique_id = UUID(),
                                    type=3,
                                    customer_code = '$arr_attr[customer_code]',
                                    name = '".$arr_attr['name']."',
                                    contact_person = '$arr_attr[contact_person]',
                                    crm_classification = '$arr_attr[customer_classification]',
                                    customer_classification = '$arr_attr[customer_classification]',
                                    ownership_type = '$arr_attr[ownership_types]',
                                    address_type = '$arr_attr[address_type]',
                                    address_1 = '$arr_attr[address_1]',
                                    job_title = '$arr_attr[job_title]',
                                    address_2 = '$arr_attr[address_2]',
                                    phone = '$arr_attr[phone]',
                                    city = '$arr_attr[city]',
                                    fax = '$arr_attr[fax]',
                                    county = '$arr_attr[county]',
                                    country_id = '$arr_attr[country_id]',
                                    mobile = '$arr_attr[mobile]',
                                    postcode = '$arr_attr[postcode]',
                                    direct_line = '$arr_attr[direct_line]',
                                    email = '$arr_attr[email]',
                                    turnover = '$turnover',
                                    crm_segment_id=$crm_segment_id,
                                    source_of_crm = '$arr_attr[source_of_crm]',
                                    pref_method_of_communication = '$arr_attr[pref_method_of_communication]',
                                    STATUS = '".$arr_attr['status']."',
                                    web_address = '$arr_attr[web_address]',
                                    buying_grp = '$arr_attr[buying_grp]',
                                    region_id = '$arr_attr[region_ids]',
                                    credit_rating = '$arr_attr[credit_ratings]',
                                    currency_id = '$arr_attr[currency_id]',
                                    credit_limit = '" . $arr_attr['credit_limit'] . "',
                                    additionalInformation = '$arr_attr[additionalInformation]',
                                    is_billing_address = '" . $is_billing_address . "',
                                    is_shipping_address = '" . $is_delivery_collection_address . "',
                                    is_invoice_address = '" . $is_invoice_address . "',
                                    anonymous_customer='" . $anonymous_customer . "',
                                    ChangedBy='" . $this->arrUser['id'] . "',
                                    ChangedOn='" . current_date . "',
                                    emp_no = '$emp_no', $social_media_str,
                                    company_reg_no='$arr_attr[company_reg_no]',
                                    salesperson_id='$saleperson_code_id',
                                    date_of_inc='" . $this->objGeneral->convert_date($arr_attr['date_of_inc']) . "',
                                    crm_type = '$arr_attr[crm_type]',
                                    user_id='" . $this->arrUser['id'] . "',
                                    company_id='" . $this->arrUser['company_id'] . "',
                                    AddedBy='" . $this->arrUser['id'] . "',
                                    AddedOn='" . current_date . "'";

            //echo $Sql;exit;
            // $RS = $this->objsetup->CSI($Sql);
            $RS = $this->objsetup->CSI($Sql, "customer", sr_AddPermission);
            $id = $this->Conn->Insert_ID();
            $arr_attr['id'] = $id;
        }
        else{

            /* $checkLocSql = "SELECT COUNT(*) AS total FROM alt_depot
                            WHERE acc_id = ".$arr_attr['id']." AND 
                                    module_type = 1 AND 
                                    company_id=" . $this->arrUser['company_id'];

            $RS_CheckLoc = $this->objsetup->CSI($checkLocSql);

            if($RS_CheckLoc->fields['total'] > 0)
            { */
            if ((isset($locArray->depot) && $locArray->depot != "" ) || (isset($locArray->postcode) && $locArray->postcode != "")) { 

                $whereLocID = '';

                if($locArray->alt_loc_id  >0)
                    $whereLocID = 'id <>  '.$locArray->alt_loc_id.' AND';

                if($locArray->is_billing_address == 0) 
                {
                    $checkBillingSql = "SELECT COUNT(*) AS total FROM alt_depot
                                        WHERE acc_id = ".$arr_attr['id']." AND 
                                              module_type = 1 AND 
                                              is_billing_address = 1 AND
                                              $whereLocID
                                              company_id=" . $this->arrUser['company_id'];

                    $RS_Check_billing = $this->objsetup->CSI($checkBillingSql);
                    if($RS_Check_billing->fields['total'] == 0)
                    {
                        $response['ack'] = 0;
                        $response['error'] = 'Please select billing and payment address';
                        return $response;
                    }
                }
                
                if($locArray->is_invoice_address == 0)
                {
                    $checkPaymentSql = "SELECT COUNT(*) AS total FROM alt_depot
                                        WHERE acc_id = ".$arr_attr['id']." AND 
                                              module_type = 1 AND 
                                              is_invoice_address = 1 AND
                                              $whereLocID
                                              company_id=" . $this->arrUser['company_id'];

                    $RS_Check_payment = $this->objsetup->CSI($checkPaymentSql);

                    if($RS_Check_payment->fields['total'] == 0 )
                    {
                        $response['ack'] = 0;
                        $response['error'] = 'Please select billing and payment address';
                        return $response;
                    }            
                }
            }

            $Sql = "UPDATE crm
                            SET
                                customer_code = '$arr_attr[customer_code]',
                                name = '".$arr_attr['name']."',
                                contact_person = '$arr_attr[contact_person]',
                                crm_classification = '$arr_attr[customer_classification]',
                                customer_classification = '$arr_attr[customer_classification]',
                                ownership_type = '$arr_attr[ownership_types]',
                                address_type = '$arr_attr[address_type]',
                                address_1 = '$arr_attr[address_1]',
                                job_title = '$arr_attr[job_title]',
                                address_2 = '$arr_attr[address_2]',
                                phone = '$arr_attr[phone]',
                                city = '$arr_attr[city]',
                                fax = '$arr_attr[fax]',
                                county = '$arr_attr[county]',
                                country_id = '$arr_attr[country_id]',
                                mobile = '$arr_attr[mobile]',
                                postcode = '$arr_attr[postcode]',
                                direct_line = '$arr_attr[direct_line]',
                                email = '$arr_attr[email]',
                                turnover = '$turnover',
                                crm_segment_id=$crm_segment_id,
                                source_of_crm = '$arr_attr[source_of_crm]',
                                pref_method_of_communication = '$arr_attr[pref_method_of_communication]',
                                STATUS = '".$arr_attr['status']."',
                                web_address = '$arr_attr[web_address]',
                                buying_grp = '$arr_attr[buying_grp]',
                                region_id = '$arr_attr[region_ids]',
                                credit_rating = '$arr_attr[credit_ratings]',
                                currency_id = '$arr_attr[currency_id]',
                                credit_limit = '" . $arr_attr['credit_limit'] . "',
                                additionalInformation = '$arr_attr[additionalInformation]',
                                is_billing_address = '" . $is_billing_address . "',
                                is_shipping_address = '" . $is_delivery_collection_address . "',
                                is_invoice_address = '" . $is_invoice_address . "',
                                anonymous_customer='" . $anonymous_customer . "',
                                ChangedBy='" . $this->arrUser['id'] . "',
                                ChangedOn='" . current_date . "',
                                emp_no = '$emp_no', $social_media_str,
                                company_reg_no='$arr_attr[company_reg_no]',
                                salesperson_id='$saleperson_code_id',
                                date_of_inc='" . $this->objGeneral->convert_date($arr_attr['date_of_inc']) . "',
                                crm_type = '$arr_attr[crm_type]'
                                WHERE id = ".$arr_attr['id']." and
                                    company_id=" . $this->arrUser['company_id'] . "
                                limit 1";
            // echo $Sql;  exit;
            // $response = $this->objGeneral->any_query_exception($Sql);
            // print_r($response);exit;
            $response = $this->objsetup->CSI($Sql, "customer", sr_AddEditPermission);

        }
        $response99['ack'] = 1;
        $response99['error'] = NULL;
        $response = $response99;
        // print_r($response);exit;
        //  $this->add_crm_social_media($arr_attr);

        $response2[] = array();


        $response2['id'] = $arr_attr['id'];

        $locArray->acc_id = $arr_attr['id'];
        $locArray->module_type = 1;

        $contactArray->acc_id = $arr_attr['id'];
        $contactArray->module_type = 1;

        if (empty($arr_attr['alt_loc_id']))
            $response2 = $this->objSrm->add_alt_depot2($locArray, $response2);
        else
            $response2 = $this->objSrm->update_alt_depot2($locArray, $response2);

        if ($response2['ack'] == 0 && $response2['ack'] != "")
            return $response2;

        if ((isset($contactArray->contact_name) && $contactArray->contact_name != "") || $arr_attr['alt_contact_id']>0) {

            $contactArray->alt_contact_id = $arr_attr['alt_contact_id'];
            
            if (empty($arr_attr['alt_contact_id']))
                $response2 = $this->objSrm->add_alt_contact2($contactArray, $response2);
            else
                $response2 = $this->objSrm->update_alt_contact2($contactArray, $response2);
        }           


        if (!($arr_attr['alt_contact_id'] > 0))
            $arr_attr['alt_contact_id'] = $response2['alt_contact_id'];

        if (!($arr_attr['alt_loc_id'] > 0))
            $arr_attr['alt_loc_id'] = $response2['alt_location_id'];


        if ($arr_attr['alt_loc_id'] > 0 && $arr_attr['alt_contact_id'] > 0) {

            $sqlC = "SELECT COUNT(*) as loc_con_count
                     From alt_depot_contact
                     WHERE acc_id = '".$arr_attr['id']."' and module_type = '1' and location_id = '".$arr_attr['alt_loc_id']."' and
                           contact_id = '".$arr_attr['alt_contact_id']."'";
            //echo $sqlC;
            $RSC = $this->objsetup->CSI($sqlC);
            $Row = $RSC->FetchRow();


            if ($Row['loc_con_count'] == 0) {

                $response2['crm_id'] = $arr_attr['id'];
                $response2['acc_id'] = $arr_attr['id'];
                $response2['module_type'] = 1;
                $response2['alt_location_id'] = $arr_attr['alt_loc_id'];
                $response2['alt_contact_id'] = $arr_attr['alt_contact_id'];
                // print_r($response2);exit;
                $response3 = $this->add_contact_location_dropdown_general($response2);
            }
        }       
        // add update customer salesperson
        if($arr_attr['saleperson_code_id'] && $arr_attr['saleperson_code_id']!=0){
        $Sql_SP = "SELECT *
				FROM  crm_salesperson
				WHERE module_id = '".$arr_attr['id']."' ";


        $RSP = $this->objsetup->CSI($Sql_SP);
        if ($RSP->RecordCount() > 0) {
            $SQLSP = "UPDATE crm_salesperson SET salesperson_id = '".$arr_attr['saleperson_code_id']."' WHERE module_id = '".$arr_attr['id']."' ";
            $this->objsetup->CSI($SQLSP);
        }else{
            $insertSalePersonSql = "INSERT INTO crm_salesperson 
                                                SET
                                                module_id= '".$arr_attr['id']."',
                                                salesperson_id = '$arr_attr[saleperson_code_id]', 
                                                is_primary = 1, 
                                                company_id = " . $this->arrUser['company_id'].", 
                                                user_id = ".$this->arrUser['id'].", 
                                                type = 2, 
                                                bucket_id = 0, 
                                                start_date = current_date, 
                                                AddedBy = ".$this->arrUser['id'].",
                                                AddedOn = current_date
                                                ";
            $this->objsetup->CSI($insertSalePersonSql);
           // echo $insertSalePersonSql;exit;
        }
    }
        $response['crm_id'] = $arr_attr['id'];
        $response['alt_loc_id'] = $arr_attr['alt_loc_id'];
        $response['alt_contact_id'] = $arr_attr['alt_contact_id'];
        return $response;
    }

    // for general form
    function add_contact_location_dropdown_general($arr_attr) {
        $arr_attr['acc_id'] = $arr_attr['crm_id'];
        $response = $this->objSrm->add_contact_location_dropdown_general($arr_attr);
        return $response;
    }

    // Customer Finance
    //--------------------------------------

    function get_finance_listings($attr) {
        $this->objGeneral->mysql_clean($attr);

        $limit_clause = "";
        $where_clause = "AND type =1 AND company_id =" . $this->arrUser['company_id'];

        $response = array();

        $Sql = "SELECT id, contact_person, email
				FROM sr_customer_finance_sel
				WHERE 1 
				" . $where_clause . "
				ORDER BY id ASC";


        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['contact_person'] = $Row['contact_person'];
                $result['email'] = $Row['email'];
                $response['response'][] = $result;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_finance_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM sr_customer_finance_sel
				WHERE id='".$attr['id']."'
				LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
        } else {
            $response['response'] = array();
        }
        return $response;
    }

    function get_finance_by_customer_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM sr_customer_finance_sel
				WHERE customer_id='".$attr['customer_id']."'
				LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_finance_by_order_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM sr_customer_finance_sel
				WHERE order_id='".$attr['order_id']."'
				LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
        } else {
            $response['response'] = array();
        }
        return $response;
    }

    function get_customer_finance($attr) {
        //error_reporting(E_ALL);
        $this->objGeneral->mysql_clean($attr);
        //      $Sql = "SELECT finance.*,bank_account.name as bank_name,payment_terms.name as payment_term, fncharge.name as finance_charges,incharge.name as insurance_charges,crm.currency_id
        //				FROM finance
        //				LEFT JOIN bank_account on bank_account.id = finance.bank_account_id
        //				LEFT JOIN payment_terms on payment_terms.id = finance.payment_terms_id
        //				LEFT JOIN charges as fncharge on fncharge.id = finance.finance_charges_id
        //				LEFT JOIN charges as incharge on incharge.id = finance.insurance_charges_id
        //				LEFT JOIN crm on crm.id = finance.customer_id
        //				WHERE customer_id='".$attr['customer_id']."' AND finance.type = 'customer'
        //				LIMIT 1";


  
        $Sql1 = "SELECT fs.finchargetype,
                       fs.fincharges,
                       fs.inschargetype,
                       fs.inscharges
                FROM financial_settings as fs
                WHERE fs.company_id='" . $this->arrUser['company_id'] . "'
                LIMIT 1";
        // echo $Sql1; exit;
        // $RS1 = $this->objsetup->CSI($Sql1);
        $RS1 = $this->objsetup->CSI($Sql1, "customer_financetab", sr_ViewPermission);
        if (is_array($RS1) && $RS1['Error'] == 1) {
            return $RS1;
        } else if (is_array($RS1) && $RS1['Access'] == 0) {
            return $RS1;
        }

        if ($RS1->RecordCount() > 0) {
            $Row1 = $RS1->FetchRow();
            foreach ($Row1 as $key => $value) {
                if (is_numeric($key))
                    unset($Row1[$key]);
            }
        }
        $where = (isset($attr['chk_posting_grp']) && $attr['chk_posting_grp'] == 1) ? ' AND cf.posting_group_id > 0 ' : '';
        $customer_id = ($attr['customer_id'] != '') ? $attr['customer_id'] : 0;

        $upToDate = date("Y-m-d"); 

        //IFNULL(SR_CalculateCustomerBalance($customer_id, " . $this->arrUser['company_id'] . "), 0) AS customer_balance

        $Sql = "SELECT  cf.*,
                        fs.finchargetype,
                        fs.fincharges,
                        fs.inschargetype,
                        fs.inscharges,
                        fs.is_whole_seller,
                        fs.posting_start_date,
                        fs.posting_end_date,
                        IFNULL(SR_rep_aged_cust_sum(cf.customer_id,DATE_SUB('$upToDate', INTERVAL 14600 DAY),DATE_ADD('$upToDate', INTERVAL 14600 DAY),cf.company_id,'LCY_total',2,'',DATE_ADD('$upToDate', INTERVAL 14600 DAY)), 0) AS customer_balance,
                        IFNULL(SR_Payment_Days_Avg(cf.customer_id,DATE_SUB('$upToDate', INTERVAL 14600 DAY),'$upToDate',cf.company_id,1), 0) AS custAvgPaymentDays                     
                FROM sr_customer_finance_sel as cf
                left join financial_settings as fs on fs.company_id = cf.company_id 
                WHERE cf.customer_id='$customer_id' AND  
                      cf.ftype = 'customer'
                LIMIT 1";
        // echo $Sql; exit;*(-1)

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }

            if($Row['customer_balance'] == '333333333') 
                $Row['customer_balance'] = 0;

            $response['response'] = $Row;
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            // $response['response'] = array();
            $response['response'] = $Row1;
            $response['ack'] = 1;
            $response['error'] = NULL;
        }

        $SQL_Bank = "SELECT bank_account.name, bank_account.account_name, bank_account.display_name FROM finance LEFT JOIN bank_account ON bank_account.id = finance.bank_account_id 
        WHERE customer_id = '".$customer_id."' LIMIT 1";
        $RS_SQL_Bank = $this->objsetup->CSI($SQL_Bank);

        if ($RS_SQL_Bank->RecordCount() > 0) {
            $Row_Bank = $RS_SQL_Bank->FetchRow();
            $response["bank_details"]["bank_name"] = $Row_Bank["name"];
        }


        // require_once(SERVER_PATH . "/classes/Setup.php");
        // $objsetup = new Setup($this->arrUser);
        // $result1 = $objsetup->get_finance_charges($attr);
        // $response['response']['arr_finance_charges'] = $result1['response'];
        // $result2 = $objsetup->get_insurance_charges($attr);
        // $response['response']['arr_insurance_charges'] = $result2['response'];
        // $result3 = $objsetup->get_bank_accounts($attr);
        // $response['response']['arr_bank'] = $result3['response'];


        return $response;
    }

    function get_order_finance($attr) {

        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT  * from sr_customer_finance_sel WHERE order_id='".$attr['order_id']."' AND finance.type = 'order'
				LIMIT 1";
        //echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function add_finance($attr) {
        $this->objGeneral->mysql_clean($attr);

        $contact_id = (isset($attr['contact_id']) && $attr['contact_id'] != '') ? $attr['contact_id'] : 0;
        $posting = (isset($attr['posting']) && $attr['posting'] != '') ? $attr['posting'] : 0;
        $bill_to_customer_id = (isset($attr['bill_to_customer_id']) && $attr['bill_to_customer_id'] != '') ? $attr['bill_to_customer_id'] : 0;
        $status = (isset($attr['status']) && $attr['status'] != '') ? $attr['status'] : 0;
        $vat_id = (isset($attr['vat_id']) && $attr['vat_id'] != '') ? $attr['vat_id'] : 0;
        $customer_status = (isset($attr['customer_status']) && $attr['customer_status'] != '') ? $attr['customer_status'] : 0;
        $account_payable_id = (isset($attr['account_payable_id']) && $attr['account_payable_id'] != '') ? $attr['account_payable_id'] : 0;
        $purchase_code_id = (isset($attr['purchase_code_id']) && $attr['purchase_code_id'] != '') ? $attr['purchase_code_id'] : 0;
        $bank_account_id = (isset($attr['bank_account_id']) && $attr['bank_account_id'] != '') ? $attr['bank_account_id'] : 0;

        $finchargetype = (isset($attr['finchargetype']) && $attr['finchargetype'] != '') ? $attr['finchargetype'] : 0;
        $inschargetype = (isset($attr['inschargetype']) && $attr['inschargetype'] != '') ? $attr['inschargetype'] : 0;

        $finance_charges_id = (isset($attr['finance_charges_id']) && $attr['finance_charges_id'] != '') ? $attr['finance_charges_id'] : 0;
        $insurance_charges_id = (isset($attr['insurance_charges_id']) && $attr['insurance_charges_id'] != '') ? $attr['insurance_charges_id'] : 0;

        $posting_group_id = (isset($attr['posting_group_id']) && $attr['posting_group_id'] != '') ? $attr['posting_group_id'] : 0;
        $payment_terms_id = (isset($attr['payment_terms_id']) && $attr['payment_terms_id'] != '') ? $attr['payment_terms_id'] : 0;
        $payment_method_id = (isset($attr['payment_method_id']) && $attr['payment_method_id'] != '') ? $attr['payment_method_id'] : 0;

        $fincharges = (isset($attr['fincharges']) && $attr['fincharges'] != '') ? $attr['fincharges'] : 0;
        $inscharges = (isset($attr['inscharges']) && $attr['inscharges'] != '') ? $attr['inscharges'] : 0;

        $finance_check = (isset($attr['finance_check']) && $attr['finance_check'] != '') ? $attr['finance_check'] : 0;
        $insurance_check = (isset($attr['insurance_check']) && $attr['insurance_check'] != '') ? $attr['insurance_check'] : 0;
        $e_archive_chk = (isset($attr['e_archive_chk']) && $attr['e_archive_chk'] != '') ? $attr['e_archive_chk'] : 0;
        

        $Sql = "INSERT INTO finance
                                SET 
                                    customer_id='".$attr['customer_id']."',
                                    type='1',
                                    contact_person='$attr[contact_person]',
                                    phone='$attr[phone]',
                                    alt_contact_person='$attr[alt_contact_person]',
                                    alt_contact_email='$attr[alt_contact_email]',
                                    contact_id='$contact_id',
                                    fax='$attr[fax]',
                                    posting='$posting',
                                    bill_to_customer='$attr[bill_to_customer]',
                                    bill_to_customer_id='$bill_to_customer_id',
                                    payment_terms_id='$payment_terms_id',
                                    payment_method_id='$payment_method_id',
                                    email='$attr[email]',
                                    bank_account_id='$bank_account_id',
                                    generate='$attr[generate]',
                                    reminder_email = '$attr[reminder_email]',
                                    statement_email = '$attr[statement_email]',
                                    invoice_email = '$attr[invoice_email]',
                                    currency='".$attr['currency']."',
                                    gen_bus_posting_group='$attr[gen_bus_posting_group]',
                                    status='$status',
                                    vat_bus_posting_group='$attr[vat_bus_posting_group]',
                                    customer_posting_group='$attr[customer_posting_group]',
                                    company_reg_no='$attr[company_reg_no]',                                    
                                    finance_charges_id='$finance_charges_id',
                                    insurance_charges_id='$insurance_charges_id',
                                    fincharges='$fincharges',
                                    finchargetype='$finchargetype',
                                    inscharges='$inscharges',
                                    inschargetype='$inschargetype',
                                    vat_id='$vat_id',
                                    customer_status='$customer_status',
                                    rebate='$attr[rebate]',
                                    vat_number='$attr[vat_number]',
                                    account_name='$attr[account_name]',
                                    sort_code='$attr[sort_code]',
                                    account_no='$attr[account_no]',
                                    swift_no='$attr[swift_no]',
                                    iban='$attr[iban]',
                                    bill_bank_name='$attr[bill_bank_name]',
                                    bank_address='$attr[bank_address]',
                                    account_payable_id='$account_payable_id', 
                                    account_payable_number='$attr[account_payable_number]', 
                                    purchase_code_id='$purchase_code_id', 
                                    purchase_code_number='$attr[purchase_code_number]',
                                    posting_group_id='$posting_group_id',
                                    user_id='" . $this->arrUser['id'] . "',
                                    finance_check='$finance_check', 
                                    insurance_check='$insurance_check', 
                                    e_archive_chk='$e_archive_chk', 
                                    company_id='" . $this->arrUser['company_id'] . "'";

        // echo $Sql."<hr>"; exit;
        // $RS = $this->objsetup->CSI($Sql);
        $RS = $this->objsetup->CSI($Sql, "customer_financetab", sr_EditPermission);
        $id = $this->Conn->Insert_ID();

        if ($id > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function add_order_finance($attr) {
        $this->objGeneral->mysql_clean($attr);

        $contact_id = (isset($attr['contact_id']) && $attr['contact_id'] != '') ? $attr['contact_id'] : 0;
        $posting = (isset($attr['posting']) && $attr['posting'] != '') ? $attr['posting'] : 0;
        $bill_to_customer_id = (isset($attr['bill_to_customer_id']) && $attr['bill_to_customer_id'] != '') ? $attr['bill_to_customer_id'] : 0;
        $status = (isset($attr['status']) && $attr['status'] != '') ? $attr['status'] : 0;
        $vat_id = (isset($attr['vat_id']) && $attr['vat_id'] != '') ? $attr['vat_id'] : 0;
        $customer_status = (isset($attr['customer_status']) && $attr['customer_status'] != '') ? $attr['customer_status'] : 0;
        $account_payable_id = (isset($attr['account_payable_id']) && $attr['account_payable_id'] != '') ? $attr['account_payable_id'] : 0;
        $purchase_code_id = (isset($attr['purchase_code_id']) && $attr['purchase_code_id'] != '') ? $attr['purchase_code_id'] : 0;
        $bank_account_id = (isset($attr['bank_account_id']) && $attr['bank_account_id'] != '') ? $attr['bank_account_id'] : 0;

        $finchargetype = (isset($attr['finchargetype']) && $attr['finchargetype'] != '') ? $attr['finchargetype'] : 0;
        $inschargetype = (isset($attr['inschargetype']) && $attr['inschargetype'] != '') ? $attr['inschargetype'] : 0;

        $posting_group_id = (isset($attr['posting_group_id']) && $attr['posting_group_id'] != '') ? $attr['posting_group_id'] : 0;
        $payment_terms_id = (isset($attr['payment_terms_id']) && $attr['payment_terms_id'] != '') ? $attr['payment_terms_id'] : 0;
        $payment_method_id = (isset($attr['payment_method_id']) && $attr['payment_method_id'] != '') ? $attr['payment_method_id'] : 0;

        $finance_charges_id = (isset($attr['finance_charges_id']) && $attr['finance_charges_id'] != '') ? $attr['finance_charges_id'] : 0;
        $insurance_charges_id = (isset($attr['insurance_charges_id']) && $attr['insurance_charges_id'] != '') ? $attr['insurance_charges_id'] : 0;
        $fincharges = (isset($attr['fincharges']) && $attr['fincharges'] != '') ? $attr['fincharges'] : 0;
        $inscharges = (isset($attr['inscharges']) && $attr['inscharges'] != '') ? $attr['inscharges'] : 0;
        $finance_check = (isset($attr['finance_check']) && $attr['finance_check'] != '') ? $attr['finance_check'] : 0;
        $insurance_check = (isset($attr['insurance_check']) && $attr['insurance_check'] != '') ? $attr['insurance_check'] : 0;
        $e_archive_chk = (isset($attr['e_archive_chk']) && $attr['e_archive_chk'] != '') ? $attr['e_archive_chk'] : 0;
        
        $Sql = "INSERT INTO finance
                                SET 
                                    order_id='".$attr['order_id']."',
                                    type='2',
                                    contact_person='$attr[contact_person]',
                                    phone='$attr[phone]',
                                    alt_contact_person='$attr[alt_contact_person]',
                                    alt_contact_email='$attr[alt_contact_email]',
                                    contact_id='$contact_id',
                                    fax='$attr[fax]',
                                    posting='$posting',
                                    bill_to_customer='$attr[bill_to_customer]',
                                    bill_to_customer_id='$bill_to_customer_id',
                                    payment_terms_id='$payment_terms_id',
                                    payment_method_id='$payment_method_id',
                                    email='$attr[email]',
                                    bank_account_id='$bank_account_id',
                                    generate='$attr[generate]',
                                    currency='".$attr['currency']."',
                                    gen_bus_posting_group='$attr[gen_bus_posting_group]',
                                    status='$status',
                                    vat_bus_posting_group='$attr[vat_bus_posting_group]',
                                    customer_posting_group='$attr[customer_posting_group]',
                                    company_reg_no='$attr[company_reg_no]',
                                    finance_charges_id='$finance_charges_id',
                                    insurance_charges_id='$insurance_charges_id',
                                    vat_id='$vat_id',
                                    fincharges='$fincharges',
                                    finchargetype='$finchargetype',
                                    inscharges='$inscharges',
                                    inschargetype='$inschargetype',
                                    customer_status='$customer_status',
                                    rebate='$attr[rebate]',
                                    vat_number='$attr[vat_number]',
                                    taxOfficeName='$attr[taxOfficeName]',
                                    account_name='$attr[account_name]',
                                    sort_code='$attr[sort_code]',
                                    account_no='$attr[account_no]',
                                    swift_no='$attr[swift_no]',
                                    iban='$attr[iban]',
                                    bill_bank_name='$attr[bill_bank_name]',
                                    user_id='" . $this->arrUser['id'] . "',
                                    company_id='" . $this->arrUser['company_id'] . "', 
                                    finance_check='$finance_check', 
                                    insurance_check='$insurance_check', 
                                    e_archive_chk='$e_archive_chk', 
                                    posting_group_id='$posting_group_id' ";

        // echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();

        if ($id > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function update_finance($attr) {
        $this->objGeneral->mysql_clean($attr);

        $contact_id = (isset($attr['contact_id']) && $attr['contact_id'] != '') ? $attr['contact_id'] : 0;
        $posting = (isset($attr['posting']) && $attr['posting'] != '') ? $attr['posting'] : 0;
        $bill_to_customer_id = (isset($attr['bill_to_customer_id']) && $attr['bill_to_customer_id'] != '') ? $attr['bill_to_customer_id'] : 0;
        $status = (isset($attr['status']) && $attr['status'] != '') ? $attr['status'] : 0;
        $vat_id = (isset($attr['vat_id']) && $attr['vat_id'] != '') ? $attr['vat_id'] : 0;
        $customer_status = (isset($attr['customer_status']) && $attr['customer_status'] != '') ? $attr['customer_status'] : 0;
        $account_payable_id = (isset($attr['account_payable_id']) && $attr['account_payable_id'] != '') ? $attr['account_payable_id'] : 0;
        $purchase_code_id = (isset($attr['purchase_code_id']) && $attr['purchase_code_id'] != '') ? $attr['purchase_code_id'] : 0;
        $bank_account_id = (isset($attr['bank_account_id']) && $attr['bank_account_id'] != '') ? $attr['bank_account_id'] : 0;

        $finchargetype = (isset($attr['finchargetype']) && $attr['finchargetype'] != '') ? $attr['finchargetype'] : 0;
        $inschargetype = (isset($attr['inschargetype']) && $attr['inschargetype'] != '') ? $attr['inschargetype'] : 0;

        $posting_group_id = (isset($attr['posting_group_id']) && $attr['posting_group_id'] != '') ? $attr['posting_group_id'] : 0;
        $payment_terms_id = (isset($attr['payment_terms_id']) && $attr['payment_terms_id'] != '') ? $attr['payment_terms_id'] : 0;
        $payment_method_id = (isset($attr['payment_method_id']) && $attr['payment_method_id'] != '') ? $attr['payment_method_id'] : 0;

        $finance_charges_id = (isset($attr['finance_charges_id']) && $attr['finance_charges_id'] != '') ? $attr['finance_charges_id'] : 0;
        $insurance_charges_id = (isset($attr['insurance_charges_id']) && $attr['insurance_charges_id'] != '') ? $attr['insurance_charges_id'] : 0;
        $fincharges = (isset($attr['fincharges']) && $attr['fincharges'] != '') ? $attr['fincharges'] : 0;
        $inscharges = (isset($attr['inscharges']) && $attr['inscharges'] != '') ? $attr['inscharges'] : 0;
        $finance_check = (isset($attr['finance_check']) && $attr['finance_check'] != '') ? $attr['finance_check'] : 0;
        $insurance_check = (isset($attr['insurance_check']) && $attr['insurance_check'] != '') ? $attr['insurance_check'] : 0;
        $e_archive_chk = (isset($attr['e_archive_chk']) && $attr['e_archive_chk'] != '') ? $attr['e_archive_chk'] : 0;
        // echo '<pre>';print_r($attr);
        // echo $inscharges;exit;

        $Sql = "UPDATE finance
                            SET 
                                contact_person='$attr[contact_person]',
                                phone='$attr[phone]',
                                alt_contact_person='$attr[alt_contact_person]',
                                alt_contact_email='$attr[alt_contact_email]',
                                contact_id='$contact_id',
                                fax='$attr[fax]',
                                posting='$posting',
                                bill_to_customer='$attr[bill_to_customer]',
                                bill_to_customer_id='$bill_to_customer_id',
                                payment_terms_id='$payment_terms_id',
                                payment_method_id='$payment_method_id',
                                email='$attr[email]',bank_account_id='$bank_account_id',
                                generate='$attr[generate]',
                                reminder_email = '$attr[reminder_email]',
                                statement_email = '$attr[statement_email]',
                                invoice_email = '$attr[invoice_email]',currency='".$attr['currency']."',
                                gen_bus_posting_group='$attr[gen_bus_posting_group]',
                                status='$status',
                                vat_bus_posting_group='$attr[vat_bus_posting_group]',
                                customer_posting_group='$attr[customer_posting_group]',
                                company_reg_no='$attr[company_reg_no]', 
                                finance_charges_id='$finance_charges_id',
                                insurance_charges_id='$insurance_charges_id',                               
                                fincharges='$fincharges',
                                finchargetype='$finchargetype',
                                inscharges='$inscharges',
                                inschargetype='$inschargetype',
                                vat_id='$vat_id',
                                customer_status='$customer_status',
                                rebate='$attr[rebate]',
                                vat_number='$attr[vat_number]',
                                taxOfficeName='$attr[taxOfficeName]',
                                account_name='$attr[account_name]',
                                sort_code='$attr[sort_code]',
                                account_no='$attr[account_no]',
                                swift_no='$attr[swift_no]',
                                iban='$attr[iban]',
                                bill_bank_name='$attr[bill_bank_name]',
                                bank_address='$attr[bank_address]',
                                account_payable_id='$account_payable_id', 
                                account_payable_number='$attr[account_payable_number]', 
                                purchase_code_id='$purchase_code_id', 
                                purchase_code_number='$attr[purchase_code_number]', 
                                finance_check='$finance_check', 
                                insurance_check='$insurance_check', 
                                e_archive_chk='$e_archive_chk', 
                                posting_group_id='$posting_group_id' 
                        WHERE id = ".$attr['id']." ";

        // echo $Sql."<hr>"; exit;
        // $RS = $this->objsetup->CSI($Sql);
        $RS = $this->objsetup->CSI($Sql, "customer_financetab", sr_EditPermission);

        $response['ack'] = 1;
        $response['error'] = NULL;
        return $response;
    }

    function update_order_finance($attr) {
        $this->objGeneral->mysql_clean($attr);
        // $Sql = "UPDATE finance
        // 		SET contact_person='$attr[contact_person]',phone='$attr[phone]',alt_contact_person='$attr[alt_contact_person]',alt_contact_email='$attr[alt_contact_email]',contact_id='$attr[contact_id]',fax='$attr[fax]',posting='$attr[posting]',bill_to_customer='$attr[bill_to_customer]',bill_to_customer_id='$attr[bill_to_customer_id]',payment_terms_id='$attr[payment_terms_id]',payment_method_id='$attr[payment_method_id]',email='$attr[email]',bank_account_id='$attr[bank_account_id]',generate='$attr[generate]',currency='".$attr['currency']."',gen_bus_posting_group='$attr[gen_bus_posting_group]',status='$attr[status]',vat_bus_posting_group='$attr[vat_bus_posting_group]',customer_posting_group='$attr[customer_posting_group]',company_reg_no='$attr[company_reg_no]',finance_charges_id='$attr[finance_charges_id]',insurance_charges_id='$attr[insurance_charges_id]',vat_id='$attr[vat_id]',customer_status='$attr[customer_status]',rebate='$attr[rebate]',vat_number='$attr[vat_number]',account_name='$attr[account_name]',sort_code='$attr[sort_code]',account_no='$attr[account_no]',swift_no='$attr[swift_no]',iban='$attr[iban]',bill_bank_name='$attr[bill_bank_name]'
        // 		WHERE id = ".$attr['update_id']." ";

        $Sql = "UPDATE orders SET 
                finance_customer_id= ".$attr['bill_to_cust_id'].", 
                due_date = '" . $this->objGeneral->convert_date($attr['due_date']) . "', 
                payment_discount = '".$attr['payment_discount']."'  WHERE id = ".$attr['id']." ";

        // echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function update_order_invoice($attr) {
        // print_r($attr);exit;
        $this->objGeneral->mysql_clean($attr);
        // $Sql = "UPDATE finance
        // 		SET contact_person='$attr[contact_person]',phone='$attr[phone]',alt_contact_person='$attr[alt_contact_person]',alt_contact_email='$attr[alt_contact_email]',contact_id='$attr[contact_id]',fax='$attr[fax]',posting='$attr[posting]',bill_to_customer='$attr[bill_to_customer]',bill_to_customer_id='$attr[bill_to_customer_id]',payment_terms_id='$attr[payment_terms_id]',payment_method_id='$attr[payment_method_id]',email='$attr[email]',bank_account_id='$attr[bank_account_id]',generate='$attr[generate]',currency='".$attr['currency']."',gen_bus_posting_group='$attr[gen_bus_posting_group]',status='$attr[status]',vat_bus_posting_group='$attr[vat_bus_posting_group]',customer_posting_group='$attr[customer_posting_group]',company_reg_no='$attr[company_reg_no]',finance_charges_id='$attr[finance_charges_id]',insurance_charges_id='$attr[insurance_charges_id]',vat_id='$attr[vat_id]',customer_status='$attr[customer_status]',rebate='$attr[rebate]',vat_number='$attr[vat_number]',account_name='$attr[account_name]',sort_code='$attr[sort_code]',account_no='$attr[account_no]',swift_no='$attr[swift_no]',iban='$attr[iban]',bill_bank_name='$attr[bill_bank_name]'
        // 		WHERE id = ".$attr['update_id']." ";

        $Sql = "UPDATE orders SET finance_customer_id= ".$attr['bill_to_cust_id']." WHERE id = ".$attr['id']." ";

        // echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function change_finance_status($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "UPDATE finance
				SET status='".$attr['status']."'
				WHERE id = ".$attr['id']." ";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    // Alt Contact Module not in use , Now working from crm class
    //--------------------------------------

    function get_alt_contacts($attr) {
        $this->objGeneral->mysql_clean($attr);

        $limit_clause = "";
        $where_clause = "AND company_id =" . $this->arrUser['company_id'];


        $response = array();

        $Sql = "SELECT id, contact_name, role, direct_line, mobile, email
				FROM crm_alt_contact
				WHERE 1
				" . $where_clause . "
				ORDER BY id ASC";

        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;


        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['contact_name'] = $Row['contact_name'];
                $result['role'] = $Row['role'];
                $result['direct_line'] = $Row['direct_line'];
                $result['mobile'] = $Row['mobile'];
                $result['email'] = $Row['email'];
                $response['response'][] = $result;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_alt_contact_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM crm_alt_contact
				WHERE id='".$attr['id']."'
				LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
        } else {
            $response['response'] = array();
        }
        return $response;
    }

    function add_alt_contact($attr) {
        $attr = array();
        $attr = (array) $attr;
        $this->objGeneral->mysql_clean($attr);

        $data_pass = "   tst.crm_id='".$attr['crm_id']."'  and tst.email='".$attr['email']."' ";
        $total = $this->objGeneral->count_duplicate_in_sql('crm_alt_contact', $data_pass, $this->arrUser['company_id']);


        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists.';
            return $response;
        }

        $Sql = "INSERT INTO crm_alt_contact
				SET depot='$attr[depot]',contact_name='$attr[contact_name]',role='$attr[role]',address='$attr[address]',address_2='$attr[address_2]',telephone='$attr[telephone]',city='$attr[city]',fax='$attr[fax]',county='$attr[county]',country='$attr[country]',mobile='$attr[mobile]',postcode='$attr[postcode]',direct_line='$attr[direct_line]',email='$attr[email]',web_add='$attr[web_add]',crm_id='".$attr['crm_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();

        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function update_alt_contact($attr) {
        $attr = array();
        $attr = (array) $attr;
        $this->objGeneral->mysql_clean($attr);

        $data_pass = "   tst.crm_id='".$attr['crm_id']."'  and tst.email='$attr[email]' and tst.id='".$attr['id']."' ";
        $total = $this->objGeneral->count_duplicate_in_sql('crm_alt_contact', $data_pass, $this->arrUser['company_id']);


        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists.';
            return $response;
        }

        $Sql = "UPDATE crm_alt_contact
				SET depot='$attr[depot]',contact_name='$attr[contact_name]',role='$attr[role]',address='$attr[address]',address_2='$attr[address_2]',telephone='$attr[telephone]',city='$attr[city]',fax='$attr[fax]',county='$attr[county]',country='$attr[country]',mobile='$attr[mobile]',postcode='$attr[postcode]',direct_line='$attr[direct_line]',email='$attr[email]',web_add='$attr[web_add]',user_id='$attr[user_id]',company_id='$attr[company_id]'
				WHERE id = ".$attr['id']." ";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    // Alt Depot Module not in use , Now working from crm class
    //--------------------------------------

    function get_alt_depots($attr) {
        $this->objGeneral->mysql_clean($attr);

        $limit_clause = "";
        $where_clause = "AND company_id =" . $this->arrUser['company_id'];


        $response = array();

        $Sql = "SELECT id, depot, contact_name, direct_line, mobile, email
				FROM crm_alt_depot
				WHERE 1
				" . $where_clause . "
				ORDER BY id ASC";

        // echo $Sql."<hr>"; exit;


        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['depot'] = $Row['depot'];
                $result['contact_name'] = $Row['contact_name'];
                $result['direct_line'] = $Row['direct_line'];
                $result['mobile'] = $Row['mobile'];
                $result['email'] = $Row['email'];
                $response['response'][] = $result;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_alt_depot_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM crm_alt_depot
				WHERE id='".$attr['id']."'
				LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
        } else {
            $response['response'] = array();
        }
        return $response;
    }

    function add_alt_depot($attr) {
        $this->objGeneral->mysql_clean($attr);

        $data_pass = "   tst.crm_id='" . $attr['crm_id'] . "'  and tst.postcode='" . $attr['postcode'] . "'";
        $total = $this->objGeneral->count_duplicate_in_sql('crm_alt_depot', $data_pass, $this->arrUser['company_id']);


        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists.';
            return $response;
        }

        $Sql = "INSERT INTO crm_alt_depot
				SET depot='$attr[depot]',contact_name='$attr[contact_name]',role='$attr[role]',address='$attr[address]',address_2='$attr[address_2]',telephone='$attr[telephone]',city='$attr[city]',fax='$attr[fax]',county='$attr[county]',country='$attr[country]',mobile='$attr[mobile]',postcode='$attr[postcode]',salesperson_id='$attr[salesperson_id]',direct_line='$attr[direct_line]',email='$attr[email]',web_add='$attr[web_add]',crm_id='".$attr['crm_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();

        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function update_alt_depot($attr) {

        print_r('sssssssss');
        exit;
        $attr = array();
        $attr = (array) $attr;
        $this->objGeneral->mysql_clean($attr);

        $data_pass = "   tst.crm_id='" . $attr['crm_id'] . "'  and tst.postcode='$attr[postcode]' and tst.id <> ".$attr['id']."";
        $total = $this->objGeneral->count_duplicate_in_sql('crm_alt_depot', $data_pass, $this->arrUser['company_id']);


        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists.';
            return $response;
        }

        $Sql = "UPDATE crm_alt_depot
				SET depot='$attr[depot]',contact_name='$attr[contact_name]',role='$attr[role]',address='$attr[address]',address_2='$attr[address_2]',telephone='$attr[telephone]',city='$attr[city]',fax='$attr[fax]',county='$attr[county]',country='$attr[country]',mobile='$attr[mobile]',postcode='$attr[postcode]',salesperson_id='$attr[salesperson_id]',direct_line='$attr[direct_line]',email='$attr[email]',web_add='$attr[web_add]',crm_id='".$attr['crm_id']."',user_id='$attr[user_id]',company_id='$attr[company_id]'
				WHERE id = ".$attr['id']." ";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    // Promotions Module not in use , Now working from crm class
    //----------------------------------------------------
    function get_promotions($attr) {
        $this->objGeneral->mysql_clean($attr);
        //print_r($attr);
        $limit_clause = "";
        $where_clause = "AND company_id =" . $this->arrUser['company_id'];


        $response = array();

        $Sql = "SELECT id, name, starting_date, customer_type
				FROM promotions
				WHERE 1
				" . $where_clause . "
				ORDER BY id ASC";


        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['name'] = $Row['name'];
                $result['starting_date'] = $this->objGeneral->convert_unix_into_date($Row['starting_date']);
                $result['customer_type'] = $Row['customer_type'];
                $response['response'][] = $result;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_promotion_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM promotions
				WHERE id='".$attr['id']."'
				LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function add_promotion($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "INSERT INTO promotions
					SET starting_date = '" . $this->objGeneral->convert_date($attr[starting_date]) . "',ending_date = '" . $this->objGeneral->convert_date($attr[ending_date]) . "',offer_type = '$attr[offer_type]',customer_type = '$attr[customer_type]',discount_type = '$attr[discount_type]',discount = '$attr[discount]',name = '".$attr['name']."',file = '$attr[file]',description = '$attr[description]',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();


        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function update_promotion($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "UPDATE promotions
					SET starting_date = '" . $this->objGeneral->convert_date($attr[starting_date]) . "',ending_date = '" . $this->objGeneral->convert_date($attr[ending_date]) . "',offer_type = '$attr[offer_type]',customer_type = '$attr[customer_type]',discount_type = '$attr[discount_type]',discount = '$attr[discount]',name = '".$attr['name']."',file = '$attr[file]',description = '$attr[description]'
					WHERE id = ".$attr['id']."";

        /* echo $Sql."<hr>";exit; */
        $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be updated!';
        }

        return $response;
    }

    function get_promotion_products($attr) {
        $this->objGeneral->mysql_clean($attr);
        //print_r($attr);
        $limit_clause = "";
        $where_clause = "AND company_id =" . $this->arrUser['company_id'];

        if (!empty($attr['keyword'])) {
            $where_clause .= " AND name LIKE '%$attr[keyword]%' ";
        }

        if (empty($attr['all'])) {
            if (empty($attr['start']))
                $attr['start'] = 0;
            if (empty($attr['limit']))
                $attr['limit'] = 10;
            $limit_clause = " LIMIT $attr[start] , $attr[limit]";
        }

        $response = array();

        $pItemSql = "SELECT id, product_id
				FROM promotions_items
				WHERE promotion_id = ".$attr['id']."";

        //echo $pItemSql."<hr>"; exit;
        $pItemRS = $this->objsetup->CSI($pItemSql);

        if ($pItemRS->RecordCount() > 0) {
            $arr_ids = array();
            $str_ids = '';
            while ($Row = $pItemRS->FetchRow())
                $arr_ids[] = $Row['product_id'];
            $str_ids = implode(',', $arr_ids);

            $itemSql = "SELECT prod.id, prod.productnumber, prod.name, prod.unitprice, brand.brandname, cat.name as category 
				FROM product as prod
				LEFT JOIN brand ON brand.id = prod.brand_id
				LEFT JOIN catagory as cat ON cat.id = prod.category_id
				WHERE prod.id IN ($str_ids)";


            $itemRS = $this->objsetup->CSI($itemSql);
            $response['ack'] = 1;
            $response['error'] = NULL;

            if ($itemRS->RecordCount() > 0) {
                while ($Row = $itemRS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['id'];
                    $result['name'] = $Row['name'];
                    $result['prod_no'] = $Row['productnumber'];
                    $result['unit_price'] = $Row['unitprice'];
                    $result['brand'] = $Row['brandname'];
                    $result['category'] = $Row['category'];
                    $response['response'][] = $result;
                }
            } else
                $response['response'][] = array();
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function add_promotion_product($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "INSERT INTO promotions_items
					SET product_id = '".$attr['product_id']."',promotion_id = '".$attr['promotion_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();


        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function get_promotion_segments($attr) {
        $this->objGeneral->mysql_clean($attr);
        //print_r($attr);
        $limit_clause = "";
        $where_clause = "AND company_id =" . $this->arrUser['company_id'];

        if (!empty($attr['keyword'])) {
            $where_clause .= " AND name LIKE '%$attr[keyword]%' ";
        }

        if (empty($attr['all'])) {
            if (empty($attr['start']))
                $attr['start'] = 0;
            if (empty($attr['limit']))
                $attr['limit'] = 10;
            $limit_clause = " LIMIT $attr[start] , $attr[limit]";
        }

        $response = array();

        $pItemSql = "SELECT id, segment_id
				FROM promotions_segment
				WHERE promotion_id = ".$attr['id']."";

        //echo $pItemSql."<hr>"; exit;
        $pItemRS = $this->objsetup->CSI($pItemSql);

        if ($pItemRS->RecordCount() > 0) {
            $arr_ids = array();
            $str_ids = '';
            while ($Row = $pItemRS->FetchRow())
                $arr_ids[] = $Row['segment_id'];
            $str_ids = implode(',', $arr_ids);

            $itemSql = "SELECT id, title 
				FROM site_constants
				WHERE id IN ($str_ids)";

            $itemRS = $this->objsetup->CSI($itemSql);
            $response['ack'] = 1;
            $response['error'] = NULL;

            if ($itemRS->RecordCount() > 0) {
                while ($Row = $itemRS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['id'];
                    $result['name'] = $Row['title'];
                    $response['response'][] = $result;
                }
            } else
                $response['response'][] = array();
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function add_promotion_segment($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "INSERT INTO promotions_segment
					SET segment_id = '$attr[segment_id]',promotion_id = '".$attr['promotion_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();

        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }
        return $response;
    }

    function get_promotion_customers($attr) {
        $this->objGeneral->mysql_clean($attr);
        //print_r($attr);
        $limit_clause = "";
        $where_clause = "AND company_id =" . $this->arrUser['company_id'];


        $response = array();

        $pItemSql = "SELECT id, customer_id
				FROM promotions_customer
				WHERE promotion_id = ".$attr['id']."";

        //echo $pItemSql."<hr>"; exit;
        $pItemRS = $this->objsetup->CSI($pItemSql);

        if ($pItemRS->RecordCount() > 0) {
            $arr_ids = array();
            $str_ids = '';
            while ($Row = $pItemRS->FetchRow())
                $arr_ids[] = $Row['customer_id'];
            $str_ids = implode(',', $arr_ids);

            $itemSql = "SELECT id, name, address, county, city, postcode, telephone, mobile 
				FROM crm
				WHERE id IN ($str_ids)";

            $itemRS = $this->objsetup->CSI($itemSql);
            $response['ack'] = 1;
            $response['error'] = NULL;

            if ($itemRS->RecordCount() > 0) {
                while ($Row = $itemRS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['id'];
                    $result['name'] = $Row['name'];
                    $result['address'] = $Row['address'];
                    $result['county'] = $Row['county'];
                    $result['city'] = $Row['city'];
                    $result['postcode'] = $Row['postcode'];
                    $result['telephone'] = $Row['telephone'];
                    $result['mobile'] = $Row['mobile'];
                    $response['response'][] = $result;
                }
            } else
                $response['response'][] = array();
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function add_promotion_customer($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "INSERT INTO promotions_customer
					SET customer_id = '".$attr['customer_id']."',promotion_id = '".$attr['promotion_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();


        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function get_product_promotion($attr) {

        $Sql = "SELECT * FROM promotions
			LEFT JOIN promotions_customer as prmoCust ON promotions.id = prmoCust.promotion_id and prmoCust.customer_id = ".$attr['customer_id']."
			LEFT JOIN promotions_segment as prmoSeg ON promotions.id = prmoSeg.promotion_id and prmoSeg.segment_id = (select company_type from crm where id = ".$attr['customer_id']." ) 
			LEFT JOIN promotions_items as prmoItem ON promotions.id = prmoItem.promotion_id and prmoItem.product_id = ".$attr['product_id']."
			WHERE prmoItem.product_id = ".$attr['product_id']."  AND  NOW() Between starting_date and ending_date AND (prmoCust.customer_id = ".$attr['customer_id']."  OR prmoSeg.segment_id = (select company_type from crm where id = ".$attr['customer_id']." ) OR promotions.customer_type = '3' )";

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $response['response'][] = $Row;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    // CRM Competitors Module not in use , Now working from crm class
    //----------------------------------------------------
    function get_crm_competitors($attr) {
        $this->objGeneral->mysql_clean($attr);
        //print_r($attr);
        $limit_clause = "";
        $where_clause = "AND compt.company_id =" . $this->arrUser['company_id'];

        $response = array();

        $Sql = "SELECT compt.id, compt.price, compt.volume, compt.note, compt.brand, cat.name as category 
				FROM crm_competitor as compt
				LEFT JOIN catagory as cat ON cat.id = compt.category_id
				WHERE 1
				" . $where_clause . "
				ORDER BY id ASC";


        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['category'] = $Row['category'];
                $result['brand'] = $Row['brand'];
                $result['price'] = $Row['price'];
                $result['volume'] = $Row['volume'];
                $result['note'] = $Row['note'];
                $response['response'][] = $result;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_crm_competitor_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM crm_competitor
				WHERE id='".$attr['id']."'
				LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function add_crm_competitor($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "INSERT INTO crm_competitor
				SET category_id = '$attr[category_id]',brand = '$attr[brand]',price = '$attr[price]',volume = '$attr[volume]',file = '$attr[file]',note = '$attr[note]',order_frequency = '$attr[order_frequency]',crm_id = '".$attr['crm_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();

        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function update_crm_competitor($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "UPDATE crm_competitor
				SET category_id = '$attr[category_id]',brand = '$attr[brand]',price = '$attr[price]',volume = '$attr[volume]',file = '$attr[file]',note = '$attr[note]',order_frequency = '$attr[order_frequency]'
				WHERE id = ".$attr['id']." ";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be updated!';
        }

        return $response;
    }

    // Price Offer not in use , Now working from crm class
    //----------------------------------------------------
    function get_price_offers($attr) {
        $this->objGeneral->mysql_clean($attr);
        //print_r($attr);
        $limit_clause = "";
        $where_clause = "AND cpoffer.company_id =" . $this->arrUser['company_id'];


        $response = array();

        $Sql = "SELECT cpoffer.id, emp.name as offered_by, cpoffer.product_id as product_no, prod.name as product_description, cpoffer.one_four_pallet, cpoffer.half_load,cpoffer.full_load,cpoffer.primary,cpoffer.offer_date as valid_from, cpoffer.offer_valid_date as valid_until  
				FROM crm_price_offer as cpoffer
				LEFT JOIN employee as emp ON emp.id = cpoffer.offered_by_id
				LEFT JOIN product as prod ON prod.id = cpoffer.product_id
				WHERE 1
				" . $where_clause . "
				ORDER BY id ASC";

        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['offered_by'] = $Row['offered_by'];
                $result['product_no'] = $Row['product_no'];
                $result['product_description'] = $Row['product_description'];
                $result['one_four_pallet'] = $Row['one_four_pallet'];
                $result['half_load'] = $Row['half_load'];
                $result['primary'] = $Row['primary'];
                $result['valid_from'] = $this->objGeneral->convert_unix_into_date($Row['valid_from']);
                $result['valid_until'] = $this->objGeneral->convert_unix_into_date($Row['valid_until']);
                $response['response'][] = $result;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_price_offer_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM crm_price_offer
				WHERE id='".$attr['id']."'
				LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function add_price_offer($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "INSERT INTO crm_price_offer
				SET crm_id = '".$attr['crm_id']."',product_id = '".$attr['product_id']."',offered_by_id = '".$attr['offered_by_id']."',offer_method_id = '$attr[offer_method_id]',price_offered = '$attr[price_offered]',currency_id = '".$attr['currency_id']."',offer_date = '" . $this->objGeneral->convert_date($attr[offer_valid_date]) . "',one_four_pallet = '$attr[one_four_pallet]',half_load = '$attr[half_load]',full_load = '$attr[full_load]',primary = '$attr[primary]',comment = '$attr[comment]',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();

        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function update_price_offer($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "UPDATE crm_price_offer
				SET product_id = '".$attr['product_id']."',offered_by_id = '".$attr['offered_by_id']."',offer_method_id = '$attr[offer_method_id]',price_offered = '$attr[price_offered]',currency_id = '".$attr['currency_id']."',offer_date = '" . $this->objGeneral->convert_date($attr[offer_valid_date]) . "',one_four_pallet = '$attr[one_four_pallet]',half_load = '$attr[half_load]',full_load = '$attr[full_load]',primary = '$attr[primary]',comment = '$attr[comment]'
				WHERE id = ".$attr['id']." ";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be updated!';
        }

        return $response;
    }

    // Price Offer not in use , Now working from crm class
    //----------------------------------------------------
    function get_customer_items_info($attr) {
        $current_date = $this->objGeneral->convert_date(date('Y-m-d'));
        $s_start_date = $this->objGeneral->convert_date($attr['start_date']);
        $s_end_date = $this->objGeneral->convert_date($attr['end_date']);

        $strWhere = '';

        if (isset($attr['type_id']) && isset($attr['search_data'])) {

            $strWhere .= " and crm_price_offer.customer_product_type_id = " . $attr['type_id'] . "";

            if ($attr['type_id'] == 1)
                $strWhere .= " and crm.name LIKE '%" . $attr['search_data'] . "%'";
            if ($attr['type_id'] == 2)
                $strWhere .= " and crm_alt_depot.depot LIKE '%" . $attr['search_data'] . "%'";
            if ($attr['type_id'] == 3)
                $strWhere .= " and crm_region.title LIKE '%" . $attr['search_data'] . "%'";
            if ($attr['type_id'] == 4)
                $strWhere .= " and crm_segment.title LIKE '%" . $attr['search_data'] . "%'";
            if ($attr['type_id'] == 5)
                $strWhere .= " and crm_buying_group.title LIKE '%" . $attr['search_data'] . "%'";
        }

        if (isset($attr['column']) && isset($attr['value'])) {
            $strWhere .= " and crm_price_offer.$attr[column] = '$attr[value]'";
        }

        if (isset($attr['crm_ids'])) {
            $strIds = implode(',', $attr['crm_ids']);
            $strWhere .= " and crm_price_offer.crm_id in (" . $strIds . ")";
        }
        /* crm_alt_depot.depot as Alt_Location,
          LEFT OUTER JOIN crm_alt_depot ON ( crm_alt_depot.id = crm_price_offer.crm_alt_location_id) */

        $Sql = "Select  crm_price_offer.*,
                        crm_price_offer.customer_product_type_id as type,
                        currency.code as Code,
                        crm_price_offer.is_sales_vol_disc,
                        crm.customer_code as Customer_Code,
                        crm.name as 'Customer_Name',
                        products.product_code as Item_Code,
                        products.description as Item_Description,
                        br.brandname,catr.name as cat,
                        CONCAT(employeesOffered_By.first_name,' ',employeesOffered_By.last_name) as Offered_By,
                        uom.title as 'Unit_Of_Measure',
                        crm_price_offer.price_offered as Price,
                        crm_price_offer.start_date as Start_Date,
                        crm_price_offer.end_date as End_Date,
                        
                        IFNULL((SELECT count(crmVD.id) FROM crm_volume_discount as crmVD
                                      WHERE crmVD.customer_item_info_id = crm_price_offer.id),0) as is_vol_disc,

                        IFNULL((SELECT count(exCust.id) FROM excluded_customer as exCust
                                        WHERE exCust.customer_item_info_id = crm_price_offer.id),0) as is_exclud_cust,

                        IFNULL((SELECT history.id From crm_price_history as history
                              where history.custPriceID = crm_price_offer.id limit 1 ),0) as price_history                       

                 FROM customer_item_info as crm_price_offer
                 LEFT JOIN employees employeesOffered_By ON ( employeesOffered_By.id = crm_price_offer.offered_by_id)
                 LEFT JOIN crm ON ( crm.id = crm_price_offer.crm_id and 
                                    (crm_price_offer.customer_product_type_id = 1 OR crm_price_offer.customer_product_type_id = 2))
			     LEFT JOIN currency ON ( currency.id = crm_price_offer.currency_id)
			     LEFT JOIN units_of_measure_setup AS unitSetup1 ON (crm_price_offer.unit_of_measure_id = unitSetup1.id)
			     LEFT JOIN units_of_measure AS uom ON (uom.id = unitSetup1.cat_id)
			     LEFT JOIN product products ON ( products.id = crm_price_offer.product_id)
			     LEFT JOIN brand as br on br.id=products.brand_id
			     LEFT JOIN category as catr on catr.id=products.category_id

			     WHERE crm_price_offer.user_id='" . $this->arrUser['id'] . "' and 
			           crm_price_offer.company_id='" . $this->arrUser['company_id'] . "' " . $strWhere . " 
			     ORDER BY crm_price_offer.id DESC";

        //echo $Sql;exit;

        /*
          crm_region.title as Region,
          crm_segment.title as Segment,
          crm_buying_group.title as Buying_Group,

          LEFT JOIN crm_region ON ( crm_region.id = crm_price_offer.crm_id and crm_price_offer.customer_product_type_id = 3)
          LEFT JOIN crm_segment ON ( crm_segment.id = crm_price_offer.crm_id and crm_price_offer.customer_product_type_id = 4)
          LEFT JOIN crm_buying_group ON ( crm_buying_group.id = crm_price_offer.crm_id and crm_price_offer.customer_product_type_id = 5)

         */

        $RS = $this->objsetup->CSI($Sql);


        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['created_date'] = $this->objGeneral->convert_unix_into_date($Row['created_date']);
                $Row['Start_Date'] = $this->objGeneral->convert_unix_into_date($Row['Start_Date']);
                $Row['End_Date'] = $this->objGeneral->convert_unix_into_date($Row['End_Date']);

                $crm_alt_location_id = $Row['crm_alt_location_id'];

                if ($crm_alt_location_id != null) {
                    $crm_alt_location_id = rtrim($crm_alt_location_id, ',');
                    $locArray = explode(',', $crm_alt_location_id);

                    if (sizeof($locArray) == 1) {
                        $locSql = "SELECT id,depot FROM crm_alt_depot where id= $locArray[0]";
                        $locRS = $this->objsetup->CSI($locSql);

                        if ($locRS->RecordCount() > 0) {
                            $locRow = $locRS->FetchRow();
                            $Row['Location'] = $locRow['depot'];
                        }
                    } else
                        $Row['Location'] = "Multiples";
                }

                $strWhereDate = " and ('" . $current_date . "' >= cpa.start_date and '" . $current_date . "' <= cpa.end_date)";


                $priceSqlProd = " SELECT cpa.final_disc_price,cpa.start_date,cpa.end_date
					              FROM customer_price_adjustment as cpa
					              WHERE cpa.crm_id = " . $Row['crm_id'] . " and
					                    cpa.customer_product_type_id = " . $Row['customer_product_type_id'] . " and
					                    cpa.product_id = " . $Row['product_id'] . " " . $strWhereDate . "  limit 1";
                //echo '==>>'.$priceSqlProd; exit;

                $priceRSCat = $this->objsetup->CSI($priceSqlProd);

                if ($priceRSCat->RecordCount() > 0) {
                    $final_disc_price = $priceRSCat->fields['final_disc_price'];
                    $start_date = $priceRSCat->fields['start_date'];
                    $end_date = $priceRSCat->fields['end_date'];
                    $Row['start_date'] = $this->objGeneral->convert_unix_into_date($start_date);
                    $Row['end_date'] = $this->objGeneral->convert_unix_into_date($end_date);
                    $Row['Price'] = $final_disc_price;
                }

                $Row['detail'] = array();
                $response['response'][] = $Row;
                $record['results'][] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'] = array();
            $response['ack'] = 1;
            $response['error'] = NULL;
        }

        //return array('filters_dropdown' => $filters_dropdown, 'columns' => $head, 'filter_dict' => $filter_dict, 'filters' => $record['column_id'], 'record' => array('total' => $record['num_rows'], 'result' => $record['results'], 'response' => $record['response']));
        return $response;
    }

    function get_customer_item_info_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        /* $Sql = "Select crm_price_offer.*,crm_price_offer.customer_product_type_id as type,currency.code as Code,
          crm_price_offer.is_sales_vol_disc,crm.customer_code as Customer_Code,crm.name as 'Customer_Name',

          IFNULL((SELECT count(crmVD.id) FROM crm_volume_discount as crmVD
          WHERE crmVD.customer_item_info_id = crm_price_offer.id),0) as is_vol_disc,

          IFNULL((SELECT count(exCust.id) FROM excluded_customer as exCust
          WHERE exCust.customer_item_info_id = crm_price_offer.id),0) as is_exclud_cust,

          products.product_code as Item_Code,products.description as Item_Description,
          CONCAT(employeesOffered_By.first_name,' ',employeesOffered_By.last_name) as Offered_By,
          uom.title as 'Unit_Of_Measure',crm_price_offer.price_offered as Price,
          crm_price_offer.start_date as Start_Date,crm_price_offer.end_date as End_Date

          FROM customer_item_info as crm_price_offer
          LEFT OUTER JOIN employees employeesOffered_By ON ( employeesOffered_By.id = crm_price_offer.offered_by_id)
          LEFT OUTER JOIN crm ON ( crm.id = crm_price_offer.crm_id and (crm_price_offer.customer_product_type_id = 1 OR crm_price_offer.customer_product_type_id = 2))
          LEFT OUTER JOIN currency ON ( currency.id = crm_price_offer.currency_id)
          LEFT JOIN units_of_measure_setup AS unitSetup1 ON (crm_price_offer.unit_of_measure_id = unitSetup1.id)
          LEFT JOIN units_of_measure AS uom ON (uom.id = unitSetup1.cat_id)
          LEFT OUTER JOIN product products ON ( products.id = crm_price_offer.product_id)

          WHERE crm_price_offer.id='".$attr['id']."' LIMIT 1"; */

        $Sql = "Select c.*,hr.first_name,hr.last_name
                 FROM sr_crm_pricelist_sel as c
                 left join sr_employee_sel as hr on c.offered_by_id=hr.id
                 WHERE c.id='" . $attr['id'] . "'";
        //echo $Sql;exit;

        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();

            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }

            $Row['start_date'] = $this->objGeneral->convert_unix_into_date($Row['start_date']);
            $Row['end_date'] = $this->objGeneral->convert_unix_into_date($Row['end_date']);

            $attr['product_id'] = $Row['product_id'];
            $attr['crm_id'] = $Row['crm_id'];
            $attr['price_volume_disc'] = 1;
            $attr['isAdded'] = false;
            $attr['customer_price_info_id'] = $attr['id'];

            $response['response'] = $Row;

            //echo "<pre>";print_r($attr);exit;
            // stock class function
            $result1 = $this->ObjCS->get_unit_setup_list_category($attr);
            //print_r($result1);exit;
            $response['response']['uom'] = $result1['response'];

            // setup class function
            $result2 = $this->objsetup->get_offer_method_list();
            //print_r($result2);exit;
            $response['response']['OfferMethod'] = $result2['response'];

            // fetch All Customer locations function
            $response['response']['locations'] = self::getLocationList($attr);

            // fetch price offer volume function
            $response['response']['VolumeDisc'] = self::getPriceListVolumeListing($attr);

            // stock class function
            $attr['product_id'] = "";
            $result3 = $this->ObjCS->get_sale_offer_volume_by_type($attr);
            //print_r($result3);exit;
            $response['response']['uomVol'] = $result3['response'];

            $SqlOfferLocation = "   SELECT c.id, c.depot as title
                                    FROM alt_depot c
                                    where  c.acc_id='" . $attr['crm_id'] . "' and 
                                            c.module_type='" . $attr['module_type'] . "' and 
                                            c.company_id='" . $this->arrUser['company_id'] . "'";

            //echo $SqlOfferLocation; exit;
            $RSOfferLocation = $this->objsetup->CSI($SqlOfferLocation);

            if ($RSOfferLocation->RecordCount() > 0) {
                while ($Row = $RSOfferLocation->FetchRow()) {
                    $result2 = array();
                    $result2['id'] = $Row['id'];
                    $result2['title'] = $Row['title'];
                    $response['response']['OfferLocation'][] = $result2;
                }
            } else {
                $response['response']['OfferLocation'][] = array();
            }

            //echo "<pre>";print_r($response['response']);exit;
        } else {
            $response['response'] = array();
        }
        return $response;
    }

    // Get All Customer locations function
    function getLocationList($attr) {
        $this->objGeneral->mysql_clean($attr);
        $order_type = "";

        $response = array();

        $Sql = "SELECT id, depot as title
                FROM alt_depot
                where acc_id='" . $attr['crm_id'] . "' and 
                      module_type='" . $attr['module_type'] . "' and 
                      company_id='" . $this->arrUser['company_id'] . "'  ";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['title'] = $Row['title'];
                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    // Function for getting price list volume listings.
    function getPriceListVolumeListing($attr) {
        if (empty($attr['id'])) {
            $response['response'] = array();
            exit;
        }

        if (isset($attr["price_volume_disc"]))
            $strwhere = " AND cvd.price_volume_disc_chk=" . $attr["price_volume_disc"];
        else
            $strwhere = " AND cvd.price_volume_disc_chk=0";

        //$this->objGeneral->mysql_clean($attr);
        //echo $attr['id'];
        $strIds = "";
        $strIds = implode(',', $attr['id']);
        //print_r($strIds);

        if ($strIds == "")
            $strIds = $attr['id'];

        $Sql = "SELECT cvd.*
                FROM SR_crm_VolumeDiscount_sel as cvd
                where cvd.customer_item_info_id IN (" . $strIds . ") AND 
                      cvd.status=1 " . $strwhere;

        //echo $Sql; exit;

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $crm = $Row['crm_name'];

                $result['id'] = $Row['id'];
                $result['price_volume_history'] = $Row['price_volume_history'];
                $result['volume'] = $Row['quantity_from'] . '-' . $Row['quantity_to'] . ' ' . $Row['cat_name'] . '-' . $crm;
                $result['price'] = $Row['price'];
                $result['discount_type'] = $Row['discount_type'] == 1 ? 'Percentage' : 'Value';
                $result['discount'] = $Row['discount_type'] == 1 ? $Row['discount'] . ' %' : $Row['discount'];
                $result['discounted_price'] = $Row['discounted_price'];
                $result['start_date'] = $this->objGeneral->convert_unix_into_date($Row['start_date']);
                $result['end_date'] = $this->objGeneral->convert_unix_into_date($Row['end_date']);
                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;

            /* echo "<pre>";
              print_r($response['response']);
              exit; */
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = 'No record found.';
        }
        return $response;
    }

    function add_customer_item_info($attr) {
        $this->objGeneral->mysql_clean($attr);

        $start_date = $this->objGeneral->convert_date($attr['offer_date']);
        $end_date = $this->objGeneral->convert_date($attr['offer_valid_date']);

        $current_date = date('Y-m-d');

        $strwhere = '';

        if ($attr['customer_product_type_id'] == 2)
            $strwhere = 'AND tst.crm_alt_location_id ='. $attr['crm_alt_location_id'];

        $data_pass = "  tst.crm_id='" . $attr['crm_id'] . "' AND 
                        tst.product_id = '".$attr['product_id']."' AND 
                        tst.customer_product_type_id = '$attr[customer_product_type_id]' AND 
                        tst.end_date >= '" . $start_date . "' " . $strwhere . "";

        $total = $this->objGeneral->count_duplicate_in_sql('customer_item_info', $data_pass, $this->arrUser['company_id']);

        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists.';
            return $response;
        }

        $Sql = "INSERT INTO customer_item_info 
                                      SET
                                          crm_id = '".$attr['crm_id']."',
                                          product_id = '".$attr['product_id']."',
                                          crm_alt_location_id ='$attr[crm_alt_location_id]',
                                          offered_by_id = '".$attr['offered_by_id']."',
                                          offer_method_id = '$attr[offer_method_id]',
                                          currency_id = '".$attr['currency_id']."',
                                          is_sales_vol_disc = '$attr[is_sales_vol_disc]',
                                          min_order_qty = '$attr[min_order_qty]',
                                          max_order_qty = '$attr[max_order_qty]',
                                          vat_chk = '$attr[vat_chk]',
                                          customer_product_type_id = '$attr[customer_product_type_id]',
                                          message = '$attr[message]',
                                          price_offered = '$attr[price_offered]',
                                          converted_price = '$attr[converted_price]',
                                          end_date = '" . $end_date . "',
                                          start_date = '" . $start_date . "',
                                          unit_of_measure_id = '$attr[unit_of_measure]',
                                          is_same_as_stnadard = '$attr[is_same_as_stnadard]',
                                          created_date = '" . $current_date . "',
                                          user_id='" . $this->arrUser['id'] . "',
                                          company_id='" . $this->arrUser['company_id'] . "'";
        /*
          vat_rate_id = '$attr[vat_rate_id]', */

        //echo $Sql."<hr>"; exit;

        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();

        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['edit'] = 0;
            $response['id'] = $id;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted.';
            $response['edit'] = 0;
            $response['id'] = 0;
        }

        return $response;
    }

    function update_customer_item_info($attr) {
        $this->objGeneral->mysql_clean($attr);
        $start_date = $this->objGeneral->convert_date($attr['offer_date']);
        $end_date = $this->objGeneral->convert_date($attr['offer_valid_date']);


        $Sql = "UPDATE customer_item_info 
                                     SET 
                                          product_id = '".$attr['product_id']."',
                                          offered_by_id = '".$attr['offered_by_id']."',
                                          offer_method_id = '$attr[offer_method_id]',
                                          currency_id = '".$attr['currency_id']."',
                                          is_sales_vol_disc = '$attr[is_sales_vol_disc]',
                                          price_offered = '$attr[price_offered]',
                                          converted_price = '$attr[converted_price]',
                                          min_order_qty = '$attr[min_order_qty]',
                                          max_order_qty = '$attr[max_order_qty]',
                                          vat_chk = '$attr[vat_chk]',
                                          message = '$attr[message]',
                                          end_date = '" . $end_date . "',
                                          start_date = '" . $start_date . "',
                                          unit_of_measure_id = '$attr[unit_of_measure]',
                                          is_same_as_stnadard = '$attr[is_same_as_stnadard]'
                                    WHERE id = ".$attr['id']."  
                                    Limit 1";

        /*
          vat_rate_id = '$attr[vat_rate_id]', */

        // echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['edit'] = 1;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be updated!';
            $response['edit'] = 0;
        }

        return $response;
    }

    function change_standard_price_sale_info($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "UPDATE   customer_item_info Set price_offered='$attr[price_offered]'
				WHERE product_id = ".$attr['product_id']."  and is_same_as_stnadard=1 ";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be deleted!';
        }

        return $response;
    }

    function get_customer_pricing($attr) {

        $strCRMIds = implode(',', $attr['crm_ids']);
        $strCustTypeIds = implode(',', $attr['cust_prod_type_id']);
        $current_date = $this->objGeneral->convert_date(date('Y-m-d'));

        $Sql = "Select crm_price_offer.*,crm_price_offer.customer_product_type_id as type,currency.code as Code,crm_price_offer.is_sales_vol_disc,
				crm.customer_code,
		crm.name as 'Customer_Name',
		crm_alt_depot.depot as Alt_Location,
		crm_region.title as Region,
		crm_segment.title as Segment,
		crm_buying_group.title as Buying_Group,

		IFNULL((SELECT count(crmVD.id) FROM crm_volume_discount as crmVD
					  WHERE crmVD.customer_item_info_id = crm_price_offer.id),0) as is_vol_disc,

		IFNULL((SELECT count(exCust.id) FROM excluded_customer as exCust
					  WHERE exCust.customer_item_info_id = crm_price_offer.id),0) as is_exclud_cust,

		
		products.product_code as Item_Code,products.description as Item_Description, CONCAT(employeesOffered_By.first_name,' ',employeesOffered_By.last_name) as Offered_By,uom.title as 'Unit_Of_Measure',crm_price_offer.price_offered as Price,crm_price_offer.start_date as Start_Date,crm_price_offer.end_date as End_Date
			from customer_item_info as crm_price_offer

			LEFT OUTER JOIN employees employeesOffered_By ON ( employeesOffered_By.id = crm_price_offer.offered_by_id)

			LEFT OUTER JOIN crm ON ( crm.id = crm_price_offer.crm_id and (crm_price_offer.customer_product_type_id = 1 OR crm_price_offer.customer_product_type_id = 2))
			LEFT OUTER JOIN crm_region ON ( crm_region.id = crm_price_offer.crm_id and crm_price_offer.customer_product_type_id = 3)
			LEFT OUTER JOIN crm_segment ON ( crm_segment.id = crm_price_offer.crm_id and crm_price_offer.customer_product_type_id = 4)
			LEFT OUTER JOIN crm_buying_group ON ( crm_buying_group.id = crm_price_offer.crm_id and crm_price_offer.customer_product_type_id = 5)
			LEFT OUTER JOIN crm_alt_depot ON ( crm_alt_depot.id = crm_price_offer.crm_alt_location_id)

			LEFT OUTER JOIN currency ON ( currency.id = crm_price_offer.currency_id) 

			LEFT JOIN units_of_measure_setup AS unitSetup1 ON (crm_price_offer.unit_of_measure_id = unitSetup1.id)
			LEFT JOIN units_of_measure AS uom ON (uom.id = unitSetup1.cat_id)

			INNER JOIN product as products ON ( products.id = crm_price_offer.product_id)


			 WHERE crm_price_offer.crm_id in (" . $strCRMIds . ") and crm_price_offer.customer_product_type_id in (" . $strCustTypeIds . ") and ('" . strtotime($current_date) . "' between crm_price_offer.start_date and crm_price_offer.end_date) and crm_price_offer.user_id='" . $this->arrUser['id'] . "' and crm_price_offer.company_id='" . $this->arrUser['company_id'] . "' ORDER BY crm_price_offer.id DESC";

        //
        //crm_price_offer.$attr[column] = '$attr[value]' and


        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['detail'] = array();
                $response['response'][] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = 'No record found.';
        }
        return $response;
    }

// Sale Promotions Module not in use , Now working from crm class
//----------------------------------------------------
    function get_sale_promotions($attr) {
        //global $objFilters;
        //return $objFilters->get_module_listing(74, "crm_price_offer",$attr[column],$attr[value],$attr[more_fields]);
        /*
          ,
          (SELECT strgy.name FROM ref_price_strategy_types strgy WHERE strgy.id = promo.strategy_type_id AND strgy.type=1) AS strategy_type,
          (SELECT strgy2.name FROM ref_price_strategy_types strgy2 WHERE strgy2.id  = promo.strategy_id AND strgy2.type=2) AS strategy
         */
        $arr_strategy_type = array();
        $arr_strategy_type = [
            array('id' => "1", 'name' => "Standard and Customer Specific Price", 'type' => "1"),
            array('id' => "2", 'name' => "Standard Sales Price", 'type' => "1"),
            array('id' => "3", 'name' => "Customer Specific Price", 'type' => "1")
        ];
        $arr_strategy = [
            array('id' => "1", 'name' => "Volume Discount  Applies and Promotion only for Customers without Volume Discount", 'type' => "2"),
            array('id' => "2", 'name' => "Apply Promotion Only and Ignore Any Volume Discount", 'type' => "2"),
            array('id' => "3", 'name' => "Promotion Applies After Volume Discount", 'type' => "2"),
            array('id' => "4", 'name' => "Promotion Applies Before Volume  Discount", 'type' => "2")
        ];

        $Sql = "SELECT promo.*, cr.code as currency_code
                FROM sale_promotion as promo
				LEFT JOIN currency as cr on (cr.id = promo.currency_id)
				where promo.user_id='" . $this->arrUser['id'] . "' and promo.company_id='" . $this->arrUser['company_id'] . "' ORDER BY promo.id DESC
				";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['start_date'] = $this->objGeneral->convert_unix_into_date($Row['start_date']);
                $Row['end_date'] = $this->objGeneral->convert_unix_into_date($Row['end_date']);

                foreach ($arr_strategy_type as $st) {
                    if ($Row['strategy_type_id'] == $st['id'])
                        $Row['strategy_type'] = $st['name'];
                }

                foreach ($arr_strategy as $s) {
                    if ($Row['strategy_id'] == $s['id'])
                        $Row['strategy'] = $s['name'];
                }


                $response['response'][] = $Row;
                $response['ack'] = 1;
                $response['error'] = NULL;
            }
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_latest_promotions($attr) {
        $strCRMIds = implode(',', $attr['crm_ids']);
        $current_date = $this->objGeneral->convert_date(date('Y-m-d'));

        $Sql = "SELECT promo1.promotion_name,promo1.start_date,promo1.end_date,strgy.name as promotion_type,
				promo.*,cat.name as cat_name,brand.brandname,product.product_code,product.description as prodcut_description,crm_region.title as region,crm_segment.title as segment,crm_buying_group.title as buying_group,crm_alt_depot.depot as alt_location,crm.customer_code,crm.name as customer_name,

		    IFNULL((SELECT count(exCust.id) FROM promotion_excluded_customer as exCust
					  WHERE exCust.sale_promotion_id = promo.id),0) as is_exclud_cust,
			IFNULL((SELECT count(exProd.id) FROM promotion_excluded_product as exProd
					  WHERE exProd.sale_promotion_id = promo.id),0) as is_exclud_prod
				FROM sale_promotion as promo1
				LEFT JOIN ref_price_strategy_types as strgy on (promo1.strategy_type_id = strgy.id)
				JOIN sale_promotion_detail as promo on (promo1.id = promo.sale_promotion_id and promo.crm_id in (" . $strCRMIds . ") )
				LEFT JOIN category as cat ON (cat.id = promo.product_id AND promo.product_promotion_type_id = 1)
				LEFT JOIN brand ON (brand.id = promo.product_id AND promo.product_promotion_type_id = 2)
				LEFT JOIN product ON (product.id = promo.product_id AND promo.product_promotion_type_id = 3)
				LEFT JOIN crm_region ON (crm_region.id = promo.crm_id AND promo.customer_product_type_id = 3)
				LEFT JOIN crm_segment ON (crm_segment.id = promo.crm_id AND promo.customer_product_type_id = 4)
				LEFT JOIN crm_buying_group ON (crm_buying_group.id = promo.crm_id AND promo.customer_product_type_id = 5)
				LEFT JOIN crm_alt_depot ON (crm_alt_depot.id = promo.crm_alt_location_id AND promo.customer_product_type_id = 2)
				LEFT JOIN crm ON (crm.id = promo.crm_id AND (promo.customer_product_type_id = 1 OR promo.customer_product_type_id = 2))
				where promo1.user_id='" . $this->arrUser['id'] . "' and (" . $current_date . " between promo1.start_date and promo1.end_date)  and promo1.company_id='" . $this->arrUser['company_id'] . "' ORDER BY promo1.id DESC
				";


        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $response['response'][] = $Row;
                $response['ack'] = 1;
                $response['error'] = NULL;
            }
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_sale_promotion_detail($attr) {
        //global $objFilters;
        //return $objFilters->get_module_listing(74, "crm_price_offer",$attr[column],$attr[value],$attr[more_fields]);

        $Sql = "SELECT promo.*,cat.name as cat_name,brand.brandname,product.product_code,product.description as prodcut_description,crm_region.title as region,crm_segment.title as segment,crm_buying_group.title as buying_group,crm_alt_depot.depot as alt_location,
		    crm.customer_code,crm.name as customer_name,

		    IFNULL((SELECT count(exCust.id) FROM promotion_excluded_customer as exCust
					  WHERE exCust.sale_promotion_id = promo.id),0) as is_exclud_cust,
			IFNULL((SELECT count(exProd.id) FROM promotion_excluded_product as exProd
					  WHERE exProd.sale_promotion_id = promo.id),0) as is_exclud_prod

				FROM sale_promotion_detail as promo
				LEFT JOIN category as cat ON (cat.id = promo.product_id AND promo.product_promotion_type_id = 1)
				LEFT JOIN brand ON (brand.id = promo.product_id AND promo.product_promotion_type_id = 2)
				LEFT JOIN product ON (product.id = promo.product_id AND promo.product_promotion_type_id = 3)
				LEFT JOIN crm_region ON (crm_region.id = promo.crm_id AND promo.customer_product_type_id = 3)
				LEFT JOIN crm_segment ON (crm_segment.id = promo.crm_id AND promo.customer_product_type_id = 4)
				LEFT JOIN crm_buying_group ON (crm_buying_group.id = promo.crm_id AND promo.customer_product_type_id = 5)
				LEFT JOIN crm_alt_depot ON (crm_alt_depot.id = promo.crm_alt_location_id AND promo.customer_product_type_id = 2)
				LEFT JOIN crm ON (crm.id = promo.crm_id AND (promo.customer_product_type_id = 1 OR promo.customer_product_type_id = 2))
				where promo.sale_promotion_id='" . $attr['sale_promotion_id'] . "' and promo.user_id='" . $this->arrUser['id'] . "' and promo.company_id='" . $this->arrUser['company_id'] . "' ORDER BY promo.id DESC
				";
        // echo  $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['detail'] = array();
                $response['response'][] = $Row;
                $response['ack'] = 1;
                $response['error'] = NULL;
            }
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function getPromotionProducts($id) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT product_id
				FROM promotion_products
                WHERE promotion_id='$id'";

        $RS = $this->objsetup->CSI($Sql);
        $result = array();
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow())
                $result[] = $Row['product_id'];
        }
        return $result;
    }

    function getPromotionCustomers($id) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT customer_id
				FROM promotion_customers
                WHERE promotion_id='$id'";

        $RS = $this->objsetup->CSI($Sql);
        $result = array();
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow())
                $result[] = $Row['customer_id'];
        }
        return $result;
    }

    function get_sale_promotion_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT * FROM sale_promotion WHERE id='".$attr['id']."' LIMIT 1";
//echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $Row['start_date'] = $this->objGeneral->convert_unix_into_date($Row['start_date']);
            $Row['end_date'] = $this->objGeneral->convert_unix_into_date($Row['end_date']);
            $Row['product_list'] = self::getPromotionProducts($Row['id']);
            $Row['customer_list'] = self::getPromotionCustomers($Row['id']);

            $response['response'] = $Row;
        } else {
            $response['response'] = array();
        }
        return $response;
    }

    function add_sale_promotion($attr) {
        // print_r($attr);exit;
        // $this->objGeneral->mysql_clean($attr);
        //echo '<pre>'; print_r($attr);
        $start_date = $this->objGeneral->convert_date($attr['start_date']);
        $end_date = $this->objGeneral->convert_date($attr['end_date']);
        $update_id = (isset($attr['id']) && $attr['id'] > 0) ? $attr['id'] : 0;
        $prod_query = "";
        $cust_query = "";
        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;

        if ($update_id == 0) {
            $prod_chk_query = "";
            $cust_chk_query = "";

            $Trs_id_sql = "SELECT UUID() AS transaction_id";
            $RS = $this->objsetup->CSI($Trs_id_sql);
            $trs_id = $RS->fields['transaction_id'];
            $product_list = $attr['product_list'];
            $customer_list = $attr['customer_list'];

            if (count($product_list) > 0) {
                $prod_chk_query = "INSERT INTO promotion_products_comparison (transaction_id, product_id) VALUES ";
                $prod_chk_vals = "";
                foreach ($product_list as $index => $prod) {
                    $prod_chk_vals .= "('" . $trs_id . "', '" . $prod . "')";
                    if ($index < count($product_list) - 1)
                        $prod_chk_vals .= ", ";
                }
                $prod_chk_query = $prod_chk_query . $prod_chk_vals;
                $RS = $this->objsetup->CSI($prod_chk_query);
            }
            if (count($customer_list) > 0) {
                $cust_chk_query = "INSERT INTO promotion_customers_comparison (transaction_id, customer_id) VALUES ";
                $cust_chk_vals = "";
                foreach ($customer_list as $index => $cust) {
                    $cust_chk_vals .= "('" . $trs_id . "', '" . $cust . "')";
                    if ($index < count($customer_list) - 1)
                        $cust_chk_vals .= ", ";
                }
                $cust_chk_query = $cust_chk_query . $cust_chk_vals;
                $RS = $this->objsetup->CSI($cust_chk_query);
            }
            $ValidateSql = "SELECT SR_Validate_Promotions('" . $trs_id . "', " . $this->arrUser['company_id'] . ", $start_date, $end_date) AS duplicates";
            // $ValidateSql = "CALL SR_Duplicate_Promotions('".$trs_id."', ".$this->arrUser['company_id'].", $start_date, $end_date)";
            // echo $ValidateSql;exit;
            $RS = $this->objsetup->CSI($ValidateSql);
            // if($RS->RecordCount() > 0) // for SR_Duplicate_Promotions
            if ($RS->fields['duplicates'] > 0) { // for SR_Validate_Promotions
                $empty_tbl_sql = "DELETE FROM promotion_products_comparison WHERE transaction_id = '" . $trs_id . "'";
                $RS = $this->objsetup->CSI($empty_tbl_sql);
                $empty_tbl_sql = "DELETE FROM promotion_customers_comparison WHERE transaction_id = '" . $trs_id . "'";
                $RS = $this->objsetup->CSI($empty_tbl_sql);
                $response['ack'] = 0;
                // $response['error'] = 'Other promotion on same items customers pairs exists';
                $response['error'] = 'Other promotion for same item on same customer already exist';
                return $response;
            } else {
                $empty_tbl_sql = "DELETE FROM promotion_products_comparison WHERE transaction_id = '" . $trs_id . "'";
                $RS = $this->objsetup->CSI($empty_tbl_sql);
                $empty_tbl_sql = "DELETE FROM promotion_customers_comparison WHERE transaction_id = '" . $trs_id . "'";
                $RS = $this->objsetup->CSI($empty_tbl_sql);
                $response['ack'] = 0;
                $response['error'] = 'Valid promotion';
                // return $response;
            }
            $promotion_gl_id = ($attr['promotion_gl_id'] != '') ? $attr['promotion_gl_id'] : 0;
            $promotion_code_sql = "SELECT SR_GetNextSeq('promotion', " . $this->arrUser['company_id'] . ", 0, 0) AS promo_code";
            $RS_promo = $this->objsetup->CSI($promotion_code_sql);
            $promotion_code = $RS_promo->fields['promo_code'];
            // echo $promotion_code;exit;
            $SqlMain = "INSERT INTO sale_promotion
                            SET
                                promotion_code = '$promotion_code',
                                promotion_name = '$attr[promotion_name]',
                                currency_id = '".$attr['currency_id']."',
                                strategy_type_id = '$attr[strategy_type_id]',
                                strategy_id = '$attr[strategy_id]',
                                discount = '$attr[discount]',
                                discount_type = '$attr[discount_type]',
                                promotion_gl_id = '$promotion_gl_id',
                                promotion_gl_name = '$attr[promotion_gl_name]',
                                promotion_gl_code = '$attr[promotion_gl_code]',
                                end_date = '" . $end_date . "',
                                start_date = '" . $start_date . "',
                                created_date = '" . $this->objGeneral->convert_date(date('Y-m-d')) . "',
                                user_id='" . $this->arrUser['id'] . "',
                                company_id='" . $this->arrUser['company_id'] . "'";

            // echo $SqlMain;exit;
            // $RS1 = $this->objsetup->CSI($SqlMain);
            $RS1 = $this->objsetup->CSI($SqlMain, "sale_promotion", sr_AddPermission);

            $id = $this->Conn->Insert_ID();
            // echo $id;exit;
            if ($id > 0) {
                if (count($product_list) > 0) {
                    $prod_query = "INSERT INTO promotion_products (promotion_id, product_id) VALUES ";
                    $prod_vals = "";
                    foreach ($product_list as $index => $prod) {
                        $prod_vals .= "('" . $id . "', '" . $prod . "')";
                        if ($index < count($product_list) - 1)
                            $prod_vals .= ", ";
                    }
                    $prod_query = $prod_query . $prod_vals;
                    $RS = $this->objsetup->CSI($prod_query);
                }
                if (count($customer_list) > 0) {
                    $cust_query = "INSERT INTO promotion_customers (promotion_id, customer_id) VALUES ";
                    $cust_vals = "";
                    foreach ($customer_list as $index => $cust) {
                        $cust_vals .= "('" . $id . "', '" . $cust . "')";
                        if ($index < count($customer_list) - 1)
                            $cust_vals .= ", ";
                    }
                    $cust_query = $cust_query . $cust_vals;
                    $RS = $this->objsetup->CSI($cust_query);
                }
            }
        }
        else {
            $promotion_code = $attr['promotion_code'];
            $SqlMain = "UPDATE sale_promotion
                                SET
                                    promotion_name = '$attr[promotion_name]',
                                    currency_id = '".$attr['currency_id']."',
                                    discount = '$attr[discount]',
                                    discount_type = '$attr[discount_type]',
                                    end_date = '" . $end_date . "',
                                    start_date = '" . $start_date . "',
                                    promotion_gl_id = '$attr[promotion_gl_id]',
                                    promotion_gl_name = '$attr[promotion_gl_name]',
                                    promotion_gl_code = '$attr[promotion_gl_code]'
                                    WHERE id = $update_id";
            // echo $SqlMain;exit;                   
            // $RS1 = $this->objsetup->CSI($SqlMain);
            $RS1 = $this->objsetup->CSI($SqlMain, "sale_promotion", sr_EditPermission);
            $id = $update_id; //$this->Conn->Affected_Rows();
        }

        // echo $id;exit;
        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['edit'] = 0;
            $response['id'] = $id;
            $response['promotion_code'] = $promotion_code;
            
            $this->Conn->commitTrans();
            $this->Conn->autoCommit = true;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated.';
            $response['edit'] = 0;
            $response['id'] = 0;
        }

        return $response;
    }

// Crm Promotions Module not in use , Now working from crm class
//----------------------------------------------------
    function get_crm_promotions($attr) {
        $this->objGeneral->mysql_clean($attr);
        //print_r($attr);
        $limit_clause = "";
        $where_clause = "AND company_id =" . $this->arrUser['company_id'];


        $response = array();

        $Sql = "SELECT id, name, starting_date, ending_date
				FROM crm_promotions
				WHERE 1
				" . $where_clause . "
				ORDER BY id ASC";


        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['name'] = $Row['name'];
                $result['starting_date'] = $this->objGeneral->convert_unix_into_date($Row['starting_date']);
                $result['starting_date'] = $this->objGeneral->convert_unix_into_date($Row['starting_date']);
                $response['response'][] = $result;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_crm_promotion_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM crm_promotions
				WHERE id='".$attr['id']."'
				LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $response['response'] = $Row;
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function add_crm_promotion($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "INSERT INTO crm_promotions
					SET starting_date = '" . $this->objGeneral->convert_date($attr[starting_date]) . "',ending_date = '" . $this->objGeneral->convert_date($attr[ending_date]) . "',offer_type = '$attr[offer_type]',customer_type = '$attr[customer_type]',discount_type = '$attr[discount_type]',discount = '$attr[discount]',name = '".$attr['name']."',file = '$attr[file]',description = '$attr[description]',crm_id = '".$attr['crm_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();


        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function update_crm_promotion($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "UPDATE crm_promotions
					SET starting_date = '" . $this->objGeneral->convert_date($attr[starting_date]) . "',ending_date = '" . $this->objGeneral->convert_date($attr[ending_date]) . "',offer_type = '$attr[offer_type]',customer_type = '$attr[customer_type]',discount_type = '$attr[discount_type]',discount = '$attr[discount]',name = '".$attr['name']."',file = '$attr[file]',description = '$attr[description]'
					WHERE id = ".$attr['id']." limit 1";

        /* echo $Sql."<hr>";exit; */
        $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be updated!';
        }

        return $response;
    }

    function get_crm_promotion_products($attr) {
        $this->objGeneral->mysql_clean($attr);
        //print_r($attr);
        $limit_clause = "";
        $where_clause = "AND company_id =" . $this->arrUser['company_id'];


        $response = array();

        $pItemSql = "SELECT id, product_id
				FROM crm_promotions_items
				WHERE promotion_id = ".$attr['id']."";

        //echo $pItemSql."<hr>"; exit;
        $pItemRS = $this->objsetup->CSI($pItemSql);

        if ($pItemRS->RecordCount() > 0) {
            $arr_ids = array();
            $str_ids = '';
            while ($Row = $pItemRS->FetchRow())
                $arr_ids[] = $Row['product_id'];
            $str_ids = implode(',', $arr_ids);

            $itemSql = "SELECT prod.id, prod.productnumber, prod.name, prod.unitprice, brand.brandname, cat.name as category 
				FROM product as prod
				LEFT JOIN brand ON brand.id = prod.brand_id
				LEFT JOIN catagory as cat ON cat.id = prod.category_id
				WHERE prod.id IN ($str_ids)";


            $itemRS = $this->objsetup->CSI($itemSql);
            $response['ack'] = 1;
            $response['error'] = NULL;

            if ($itemRS->RecordCount() > 0) {
                while ($Row = $itemRS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['id'];
                    $result['name'] = $Row['name'];
                    $result['prod_no'] = $Row['productnumber'];
                    $result['unit_price'] = $Row['unitprice'];
                    $result['brand'] = $Row['brandname'];
                    $result['category'] = $Row['category'];
                    $response['response'][] = $result;
                }
            } else
                $response['response'][] = array();
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function add_crm_promotion_product($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "INSERT INTO crm_promotions_items
					SET product_id = '".$attr['product_id']."',promotion_id = '".$attr['promotion_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();


        if ($id > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

// General Tab/ Main Quote Info Module
//--------------------------------------


    function get_quote_listings($attr) {
        $default_currency_Sql = "SELECT currency_id FROM company WHERE id=" . $this->arrUser['company_id'] . " limit 1";

        $default_currency_RS = $this->objsetup->CSI($default_currency_Sql);
        $def_currency_id = $default_currency_RS->fields['currency_id'];
// q.* From SR_cust_qoutations_sel q

        $Sql = "SELECT  q.* From SR_cust_qoutations_sel q

                where  q.status=1  AND ( q.company_id=" . $this->arrUser['company_id'] . "  or  q.parent_id=" . $this->arrUser['company_id'] . ")

                Order by q.id DESC"; /* AND q.type=1 */

        $RS = $this->objsetup->CSI($Sql);


        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];

                $result['Sales Quote No.'] = $Row['quotation_code'];
                $result['Customer No.'] = $Row['sell_to_cust_no'];
                $result['Customer Name'] = $Row['sell_to_cust_name'];
                $result['Customer Order No.'] = $Row['cust_order_no'];
                $result['Salesperson(s)'] = $Row['sale_person'];
                $result['Currency Code'] = $Row['crcode'];
                $result['Amount'] = $Row['net_amount'];
                //$result['Amount (incl VAT)'] = $Row['grand_total'];

                if ($Row['currency_id'] != $def_currency_id && $Row['conversion_rate'] > 0)
                    $result['order_value_in_LCY'] = $Row['conversion_rate'] * $Row['net_amount'];
                else
                    $result['order_value_in_LCY'] = $Row['net_amount'];

                $result['rq_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);

                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_quote_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM quotations
				WHERE id='".$attr['id']."'
				LIMIT 1";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        $attr['quote_id'] = $attr['id'];
        //.getitems
        $res = self::get_quote_items($attr);
        // print_r($res); exit;
        //$RS = $this->objsetup->CSI($Sql);

        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }


            $Row['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
            $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
            $Row['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
            $Row['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
            $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
            $Row['shipment_date'] = $this->objGeneral->convert_unix_into_date($Row['shipment_date']);
            $Row['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);

            $Row['quote_date'] = $this->objGeneral->convert_unix_into_date($Row['quote_date']);

            $response['response'] = $Row;

            if (count($res['response']) > 0)
                $response['response']['items'] = $res['response'];
        } else {
            $response['response'] = array();
        }
        return $response;
    }

    function delete_quote_item($attr) {

        $Sql = "DELETE FROM quotation_details   WHERE id = ".$attr['id']."  LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = "Record can't be deleted!";
        }

        return $response;
    }

    function add_quote($attr) {
        $this->objGeneral->mysql_clean($attr);


        $data_pass = "   tst.quotation_code='" . $attr['quotation_code'] . "'";
        $total = $this->objGeneral->count_duplicate_in_sql('quotations', $data_pass, $this->arrUser['company_id']);


        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists.';
            return $response;
            exit;
        }

        $Sql = "INSERT INTO quotations  SET quotation_no='$attr[quotation_no]',quotation_code='$attr[quotation_code]',posting_date='" . $this->objGeneral->convert_date($attr[posting_date]) . "',sell_to_cust_id='$attr[sell_to_cust_id]',sell_to_cust_no='$attr[sell_to_cust_no]',order_date='" . $this->objGeneral->convert_date($attr[order_date]) . "',sell_to_contact_id='$attr[sell_to_contact_id]',sell_to_contact_no='$attr[sell_to_contact_no]',  requested_delivery_date='" . $this->objGeneral->convert_date($attr[requested_delivery_date]) . "',sell_to_cust_name='$attr[sell_to_cust_name]',  delivery_date='" . $this->objGeneral->convert_date($attr[delivery_date]) . "',sell_to_address='$attr[sell_to_address]',delivery_time='$attr[delivery_time]',sell_to_address2='$attr[sell_to_address2]',cust_order_no='$attr[cust_order_no]',sell_to_city='$attr[sell_to_city]',    sell_to_county='$attr[sell_to_county]',campaign_id='$attr[campaign_id]',campaign_no='$attr[campaign_no]',sell_to_contact='$attr[sell_to_contact]',sale_person_id='$attr[sale_person_id]',sale_person='$attr[sale_person]',cust_phone='$attr[cust_phone]',cust_fax='$attr[cust_fax]',cust_email='$attr[cust_email]', comm_book_in_no='$attr[comm_book_in_no]',book_in_email='$attr[book_in_email]',comm_book_in_contact='$attr[comm_book_in_contact]',converted_currency_id='$attr[converted_currency_id]',converted_currency_code='$attr[converted_currency_code]',   converted_unit_price='$attr[converted_unit_price]',type='".$attr['type']."',sell_to_post_code='$attr[sell_to_post_code]',purchase_order_id='$attr[purchase_order_id]',country_id='$attr[country_id]',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'    ,quote_date='" . $this->objGeneral->convert_date($attr['quote_date']) . "' ,currency_id='$attr[currency_ids]'   ";

        // echo $Sql . "<hr>";  exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();


        if ($id > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not inserted!';
        }

        return $response;
    }

    function update_quote($attr) {
        $this->objGeneral->mysql_clean($attr);

        $data_pass = "   tst.quotation_code='" . $attr['quotation_code'] . "' AND tst.id <> ".$attr['id']."";
        $total = $this->objGeneral->count_duplicate_in_sql('quotations', $data_pass, $this->arrUser['company_id']);


        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists.';
            return $response;
        }


        $Sql = "UPDATE quotations
                        SET sell_to_cust_id='$attr[sell_to_cust_id]',sell_to_cust_no='$attr[sell_to_cust_no]' ,sell_to_contact_id='$attr[sell_to_contact_id]',sell_to_contact_no='$attr[sell_to_contact_no]',  sell_to_cust_name='$attr[sell_to_cust_name]',sell_to_address='$attr[sell_to_address]',delivery_time='$attr[delivery_time]',sell_to_address2='$attr[sell_to_address2]',cust_order_no='$attr[cust_order_no]',sell_to_city='$attr[sell_to_city]',sell_to_county='$attr[sell_to_county]',campaign_id='$attr[campaign_id]',campaign_no='$attr[campaign_no]',sell_to_contact='$attr[sell_to_contact]',sale_person_id='$attr[sale_person_id]',sale_person='$attr[sale_person]',cust_phone='$attr[cust_phone]',cust_fax='$attr[cust_fax]',cust_email='$attr[cust_email]',currency_id='".$attr['currency_id']."',comm_book_in_no='$attr[comm_book_in_no]',book_in_email='$attr[book_in_email]',comm_book_in_contact='$attr[comm_book_in_contact]',converted_currency_id='$attr[converted_currency_id]',converted_currency_code='$attr[converted_currency_code]' ,converted_unit_price='$attr[converted_unit_price]',type=1,sell_to_post_code='$attr[sell_to_post_code]',purchase_order_id='$attr[purchase_order_id]',country_id='$attr[country_id]',  bill_to_cust_id='$attr[bill_to_cust_id]',bill_to_cust_no='$attr[bill_to_cust_no]',bill_to_contact_id='$attr[bill_to_contact_id]',payable_bank='$attr[payable_bank]',payment_terms_code='$attr[payment_terms_code]',bill_to_name='$attr[bill_to_name]',bill_to_address='$attr[bill_to_address]',payment_discount='$attr[payment_discount]',bill_to_address2='$attr[bill_to_address2]',payment_method_id='$attr[payment_method_id]',payment_method_code='$attr[payment_method_code]',bill_to_city='$attr[bill_to_city]',price_including_vat='$attr[price_including_vat]',bill_to_county='$attr[bill_to_county]',bill_to_post_code='$attr[bill_to_post_code]',bill_to_contact='$attr[bill_to_contact]',  alt_depo_id='$attr[alt_depo_id]',shipment_method_id='$attr[shipment_method_id]',shipment_method_code='$attr[shipment_method_code]',shipping_agent_code='$attr[shipping_agent_code]',ship_to_name='$attr[ship_to_name]',shipping_agent_id='$attr[shipping_agent_id]',ship_to_address='$attr[ship_to_address]',ship_to_address2='$attr[ship_to_address2]',freight_charges='$attr[freight_charges]',ship_to_city='$attr[ship_to_city]',container_no='$attr[container_no]',ship_to_county='$attr[ship_to_county]',ship_to_post_code='$attr[ship_to_post_code]',ship_to_contact='$attr[ship_to_contact]',ship_delivery_time='$attr[ship_delivery_time]',book_in_tel='$attr[book_in_tel]',warehouse_booking_ref='$attr[warehouse_booking_ref]',customer_warehouse_ref='$attr[customer_warehouse_ref]',location_code='$attr[location_code]' ,posting_date='" . $this->objGeneral->convert_date($attr['posting_date']) . "',order_date='" . $this->objGeneral->convert_date($attr['order_date']) . "',requested_delivery_date='" . $this->objGeneral->convert_date($attr['requested_delivery_date']) . "',delivery_date='" . $this->objGeneral->convert_date($attr['delivery_date']) . "',due_date='" . $this->objGeneral->convert_date($attr['due_date']) . "',shipment_date='" . $this->objGeneral->convert_date($attr['shipment_date']) . "'  ,quote_date='" . $this->objGeneral->convert_date($attr['quote_date']) . "' ,currency_id='$attr[currency_ids]'  WHERE id = ".$attr['id']." limit 1";

        //echo $Sql."<hr>"; exit;
        //,offer_date=" . $this->objGeneral->convert_date($attr['offer_date']) . "

        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function insert_quote($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "INSERT INTO quotations
				SET quotation_no='$attr[quotation_no]',quotation_code='$attr[quotation_code]',sell_to_cust_id='$attr[sell_to_cust_id]',sell_to_cust_no='$attr[sell_to_cust_no]' ,sell_to_contact_id='$attr[sell_to_contact_id]',sell_to_contact_no='$attr[sell_to_contact_no]',
				sell_to_cust_name='$attr[sell_to_cust_name]',sell_to_address='$attr[sell_to_address]',delivery_time='$attr[delivery_time]',sell_to_address2='$attr[sell_to_address2]',cust_order_no='$attr[cust_order_no]',sell_to_city='$attr[sell_to_city]',sell_to_county='$attr[sell_to_county]',campaign_id='$attr[campaign_id]',campaign_no='$attr[campaign_no]',sell_to_contact='$attr[sell_to_contact]',sale_person_id='$attr[sale_person_id]',sale_person='$attr[sale_person]',cust_phone='$attr[cust_phone]',cust_fax='$attr[cust_fax]',cust_email='$attr[cust_email]',currency_id='".$attr['currency_id']."',comm_book_in_no='$attr[comm_book_in_no]',book_in_email='$attr[book_in_email]',comm_book_in_contact='$attr[comm_book_in_contact]',converted_currency_id='$attr[converted_currency_id]',converted_currency_code='$attr[converted_currency_code]', converted_unit_price='$attr[converted_unit_price]',type=1,sell_to_post_code='$attr[sell_to_post_code]',purchase_order_id='$attr[purchase_order_id]',country_id='$attr[country_id]',
					bill_to_cust_id='$attr[bill_to_cust_id]',bill_to_cust_no='$attr[bill_to_cust_no]',bill_to_contact_id='$attr[bill_to_contact_id]',payable_bank='$attr[payable_bank]',payment_terms_code='$attr[payment_terms_code]',bill_to_name='$attr[bill_to_name]',bill_to_address='$attr[bill_to_address]',payment_discount='$attr[payment_discount]',bill_to_address2='$attr[bill_to_address2]',payment_method_id='$attr[payment_method_id]',payment_method_code='$attr[payment_method_code]',bill_to_city='$attr[bill_to_city]',price_including_vat='$attr[price_including_vat]',bill_to_county='$attr[bill_to_county]',bill_to_post_code='$attr[bill_to_post_code]',bill_to_contact='$attr[bill_to_contact]',
					alt_depo_id='$attr[alt_depo_id]',shipment_method_id='$attr[shipment_method_id]',shipment_method_code='$attr[shipment_method_code]',shipping_agent_code='$attr[shipping_agent_code]',ship_to_name='$attr[ship_to_name]',shipping_agent_id='$attr[shipping_agent_id]',ship_to_address='$attr[ship_to_address]',ship_to_address2='$attr[ship_to_address2]',freight_charges='$attr[freight_charges]',ship_to_city='$attr[ship_to_city]',container_no='$attr[container_no]',ship_to_county='$attr[ship_to_county]',ship_to_post_code='$attr[ship_to_post_code]',ship_to_contact='$attr[ship_to_contact]',ship_delivery_time='$attr[ship_delivery_time]',book_in_tel='$attr[book_in_tel]',warehouse_booking_ref='$attr[warehouse_booking_ref]',customer_warehouse_ref='$attr[customer_warehouse_ref]',location_code='$attr[location_code]'
,user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'
,posting_date=" . $this->objGeneral->convert_date($attr['posting_date']) . ",offer_date=" . $this->objGeneral->convert_date($attr['offer_date']) . ",order_date=" . $this->objGeneral->convert_date($attr['order_date']) . ",requested_delivery_date=" . $this->objGeneral->convert_date($attr['requested_delivery_date']) . ",delivery_date=" . $this->objGeneral->convert_date($attr['delivery_date']) . "
,due_date=" . $this->objGeneral->convert_date($attr['due_date']) . ",shipment_date=" . $this->objGeneral->convert_date($attr['shipment_date']) . "

";
//echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $this->Conn->Insert_ID();
        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['quote_id'] = $id;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function check_customer_limit($attr) {
        $mSql = "SELECT * FROM `crm` WHERE `id` = ".$attr['crm_id']."";
        $customer = $this->objsetup->CSI($mSql)->FetchRow();

        $sql = 'SELECT (sum(`grand_total`) - sum(`recieved`)) as balance FROM `orders` WHERE `sell_to_cust_id` = ' . $attr['crm_id'] . ' and status <> ' . CANCEL . '';
        //echo $mSql; exit;
        $row = $this->objsetup->CSI($sql)->FetchRow();
        if ($row['balance'] != '')
            $balance = $row['balance'];
        else
            $balance = 0;

        return array('credit_limit' => $customer['credit_limit'], 'balance' => $balance);
    }

// Quote Invoicing
//-------------------------------------------

    function quote_invoice($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "UPDATE quotations  SET  bill_to_cust_id='$attr[bill_to_cust_id]',bill_to_cust_no='$attr[bill_to_cust_no]',bill_to_contact_id='$attr[bill_to_contact_id]',payable_bank='$attr[payable_bank]',payment_terms_code='$attr[payment_terms_code]',bill_to_name='$attr[bill_to_name]', due_date='" . $this->objGeneral->convert_date($attr[due_date]) . "',  bill_to_address='$attr[bill_to_address]',payment_discount='$attr[payment_discount]',bill_to_address2='$attr[bill_to_address2]',payment_method_id='$attr[payment_method_id]',payment_method_code='$attr[payment_method_code]',bill_to_city='$attr[bill_to_city]',price_including_vat='$attr[price_including_vat]',bill_to_county='$attr[bill_to_county]',bill_to_post_code='$attr[bill_to_post_code]',bill_to_contact='$attr[bill_to_contact]'   WHERE id = ".$attr['id']." limit 1";

        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

// Quote Shipping
//-------------------------------------------

    function quote_shipping($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "UPDATE quotations
				SET  alt_depo_id='$attr[alt_depo_id]',shipment_method_id='$attr[shipment_method_id]',shipment_method_code='$attr[shipment_method_code]',shipping_agent_code='$attr[shipping_agent_code]',ship_to_name='$attr[ship_to_name]',shipping_agent_id='$attr[shipping_agent_id]',ship_to_address='$attr[ship_to_address]',ship_to_address2='$attr[ship_to_address2]',freight_charges='$attr[freight_charges]',ship_to_city='$attr[ship_to_city]',container_no='$attr[container_no]',ship_to_county='$attr[ship_to_county]',ship_to_post_code='$attr[ship_to_post_code]',shipment_date='" . $this->objGeneral->convert_date($attr[shipment_date]) . "',ship_to_contact='$attr[ship_to_contact]',ship_delivery_time='$attr[ship_delivery_time]',book_in_tel='$attr[book_in_tel]',warehouse_booking_ref='$attr[warehouse_booking_ref]',customer_warehouse_ref='$attr[customer_warehouse_ref]',location_code='$attr[location_code]'
				WHERE id = ".$attr['id']." ";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

// Quote products
//--------------------------------------

    function add_quote_items($attr) {
        //$this->objGeneral->mysql_clean($attr);
        //print_r($attr);
        //$currency_rate =$this->objGeneral->get_convert_price(0, $attr['currency_id'], $attr['order_date']
        //,$this->arrUser['company_id']);
        $currency_rate = "";
        $Sql = "UPDATE quotations SET net_amount='$attr[net_amount]', grand_total='$attr[grand_total]', tax_amount='$attr[tax_amount]',tax_rate='$attr[tax_rate]'	,comment='$attr[comment]' ,	net_amount_converted='$attr[net_amount_converted]', grand_total_converted='$attr[grand_total_converted]',  tax_amount_converted='$attr[tax_amount_converted]'    ,  currency_rate='' WHERE id = $attr[quote_id] 
        Limit 1";

        //   echo $Sql; exit;
        $RS1 = $this->objsetup->CSI($Sql);
        if (!$RS1) {
            print $this->Conn->ErrorMsg();
        }

        $Sqldel = "Delete From quotation_details  WHERE quotation_id = $attr[quote_id]";
        $RS = $this->objsetup->CSI($Sqldel);

        $chk = false;
        foreach ($attr['items'] as $item) {

            $SqlQuote = "INSERT INTO quotation_details  SET  qty='$item->qty',unit_price='$item->standard_price',vat='" . $item->vats->name . "',vat_id='" . $item->vats->id . "',vat_value='" . $item->vats->vat_value . "',item_name='$item->description',item_id='$item->id',item_no ='$item->product_code',total_price='$item->total_price',unit_measure='" . $item->units->name . "',unit_measure_id='" . $item->units->id . "',unit_parent_id='0',unit_qty='" . $item->units->quantity . "',default_unit_measure='" . $item->default_units->name . "',default_unit_measure_id='" . $item->default_units->id . "',default_unit_qty='" . $item->default_units->quantity . "',cat_id='$item->category_id',quotation_id='$attr[quote_id]',conv_unit_price='$item->conv_unit_price',type='$item->item_type',discount_type='" . $item->discount_type_id->id . "',discount='$item->discount',sale_unit_id='$item->sale_unit_id',purchase_unit_id='$item->purchase_unit_id',warehouse_id='" . $item->warehouses->id . "',warehouse='" . $item->warehouses->name . "'
";


            $RS = $this->objsetup->CSI($SqlQuote);
            if (!$RS)
                print $this->Conn->ErrorMsg();
            else
                $chk = true;
        }

        if ($chk) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function get_unit_setup_list_category_by_item($attr) {
        $response = array();
        $where = "";
        $total = "";

        if ($attr['product_code'])
            $where .= "product_code= '" . $attr['product_code'] . "'  AND ";
        if ($attr['product_id'])
            $where .= "product_id= '" . $attr['product_id'] . "'  AND ";

        $Sql = "SELECT   c.id,c.quantity,us.title as name,c.cat_id,c.ref_unit_id,c.ref_quantity
		 FROM  units_of_measure_setup  c 
		right JOIN units_of_measure us on us.id=c.cat_id 
		where  $where 
		 c.status=1 	and us.status=1  
		group by us.title
        order by c.id  ASC";


        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['name'] = $Row['name'];

                if ($attr['product_id'] != 0) {
                    $result['quantity'] = $Row['quantity'];
                    $result['unit_id'] = $Row['cat_id'];
                    $result['ref_unit_id'] = $Row['ref_unit_id'];
                    $result['ref_quantity'] = $Row['ref_quantity'];
                }
                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['total'] = $total;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        return $response;
    }

    function get_quote_items($attr, $doObj = 0) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM quotation_details
				WHERE quotation_id='$attr[quote_id]'";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if (!$RS) {
            print $this->Conn->ErrorMsg();
        }
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $attr['product_id'] = $Row['item_id'];
                if ($doObj == 1) {
                    $Row['vats']->name = $Row['vat'];
                    $Row['vats']->id = $Row['vat_id'];
                    $Row['vats']->vat_value = $Row['vat_value'];
                    $Row['units']->name = $Row['unit_measure'];
                    $Row['units']->id = $Row['unit_measure_id'];
                    $Row['units']->parent_id = $Row['unit_parent_id'];
                    $Row['units']->quantity = $Row['unit_qty'];
                    $Row['default_units']->name = $Row['default_unit_measure'];
                    $Row['default_units']->id = $Row['default_unit_measure_id'];
                    $Row['default_units']->parent_id = $Row['default_unit_parent_id'];
                    $Row['default_units']->quantity = $Row['default_unit_qty'];
                    $Row['discount_type_id']->id = $Row['discount_type'];
                    $Row['warehouses']->id = $Row['warehouse_id'];
                    $Row['warehouses']->name = $Row['warehouse'];
                    $Row['standard_price'] = $Row['unit_price'];
                    $Row['item_type'] = $Row['type'];
                    $Row['product_code'] = $Row['product_code'];
                    $Row['description'] = $Row['item_name'];
                    $Row['id'] = $Row['item_id'];


                    $Row['arr_warehouse'] = self::get_all_product_warehouses($attr);
                    $Row['arr_units'] = self::get_unit_setup_list_category_by_item($attr);

                    $response['response'][] = (object) $Row;
                } else
                    $Row['arr_warehouse'] = self::get_all_product_warehouses($attr);
                $Row['arr_units'] = self::get_unit_setup_list_category_by_item($attr);

                $response['response'][] = $Row;
            };


            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    }

    function get_all_product_warehouses($attr) {
        $response1 = array();

        //  $this->objGeneral->mysql_clean($attr);

        $Sql = "SELECT c.* From sr_product_warehouses_sel as c
                where  c.item_id=" . $attr['product_id'] . " and c.status ='1' and
                      (c.company_id=" . $this->arrUser['company_id'] . " or  c.parent_id=" .
                $this->arrUser['company_id'] . ")
                 group by  c.`warehouse`  order by c.id ASC ";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        //echo $Sql.';';
        if ($RS->RecordCount() > 0) {
            while ($Row2 = $RS->FetchRow()) {
                $result['id'] = $Row2['warehouse_id'];
                $result['name'] = $Row2['wrh_code'] . '-' . $Row2['warehouse'];

                if ($Row2['default_warehouse'] > 0) {
                    $response1['default_wh'] = $Row2['warehouse_id'];
                }

                $response1['response'][] = $result;
            }
            /*  $response['ack'] = 1;
              $response['error'] = NULL; */
        } else {
            // $response['response'] = array();
        }
        return $response1;
    }

    function convert_to_order($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT * FROM quotations WHERE id='$attr[quote_id]' LIMIT 1";
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }
            $Row['type'] = 1;
            //$arr = self::get_order_code(array('type' => 1, 'is_increment' => 1));
            // $Row['order_no'] = $arr['number'];
            $rsOrder = self::add_order($attr);
            $response['ack'] = $rsOrder['ack'];
            $response['error'] = $rsOrder['error'];
            $Row['id'] = $rsOrder['id'];

            // print_r( $rsOrder );exit;

            if ($response['ack'] == 1) {
                self::update_order($Row);
                $arrItems = self::get_quote_items(array('quote_id' => $attr['quote_id']), 1);
                if ($arrItems['ack'] == 1) {
                    //  print_r($arrItems);  exit;
                    $arrOrderItems['convert_from_forcast'] = $attr['convert_from_forcast'];

                    $arrOrderItems['order_id'] = $rsOrder['id'];
                    $arrOrderItems['net_amount'] = $Row['net_amount'];
                    $arrOrderItems['grand_total'] = $Row['grand_total'];
                    $arrOrderItems['tax_rate'] = $Row['tax_rate'];
                    $arrOrderItems['tax_amount'] = $Row['tax_amount'];
                    $arrOrderItems['note'] = $Row['note'];

                    $arrOrderItems['items'] = (object) $arrItems['response'];

                    self::add_order_items($arrOrderItems);
                    $this->objsetup->CSI('UPDATE quotations SET status = 0 WHERE id =' . $attr['quote_id']);
                }
            }
        } else {
            $response['response'] = array();
        }
        return $response;
    }

    // General Tab/ Main Order Info Module
    //--------------------------------------

    function getOrdersBySelCustListings($attr) {

        $response = array();

        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";

        if(isset($attr['selCust'])){

            $key = hash('sha256', SECRET_KEY);
            $iv = substr(hash('sha256', SECRET_IV), 0, 16);
            $outputInvName = openssl_decrypt(base64_decode($attr['selCust']), SECRET_METHOD, $key, 0, $iv);
            $fileName = explode(",",$outputInvName);

            $customerID = $fileName[1];

            $Sql = "SELECT c.id as cid,c.customer_code,c.name,c.company_id,
                            company.name as compName,company.url,company.address,
                            company.address_2,company.county,company.postcode,company.telephone,
                            company.fax,company.city,company.logo
                    FROM crm c
                    LEFT JOIN company on company.id = c.company_id
                    WHERE c.type IN (2,3) AND 
                        c.customer_code IS NOT NULL AND 
                        c.name !='' AND 
                        c.id=" . $customerID. "";
            
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $row = array();
                    $attr['cust_id'] = $Row['cid'];
                    $this->arrUser['company_id'] = $Row['company_id'];

                    $attr['compName'] = $Row['compName'];
                    $attr['compURL'] = $Row['url'];
                    $attr['address'] = $Row['address'];
                    $attr['address_2'] = $Row['address_2'];
                    $attr['county'] = $Row['county'];
                    $attr['postcode'] = $Row['postcode'];
                    $attr['telephone'] = $Row['telephone'];
                    $attr['fax'] = $Row['fax'];
                    $attr['city'] = $Row['city'];
                    $attr['logo'] = $Row['logo'];
                }
                $response['customerID'] = $customerID;
            } else {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['response'][] = array();
                return $response;
            }
        }
        else{
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
            return $response;
        }

        $response['compName'] = $attr['compName'];
        $response['compURL'] = $attr['compURL'];
        $response['address'] = $attr['address'];
        $response['address_2'] = $attr['address_2'];
        $response['county'] = $attr['county'];
        $response['postcode'] = $attr['postcode'];
        $response['telephone'] = $attr['telephone'];
        $response['fax'] = $attr['fax'];
        $response['city'] = $attr['city'];
        $response['logo'] = $attr['logo'];  

        //print_r($attr);
        $where_clause = "";
        $limit_clause = "";
        $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
        $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        

        if ($attr['type'] == 1 || $attr['type'] == 0)
            $where_clause .= "AND tbl.type in (".$attr['type'].") ";
        else
            $where_clause .= "AND tbl.type in (3,".$attr['type'].") ";

        // if (!empty($attr['parent_id']))
        //     $where_clauseperson = "and wa.parent_id=  " . $attr['parent_id'] . "";

        if (!empty($attr['cust_id']))
            $where_clause2 = "AND tbl.sell_to_cust_id  = '$attr[cust_id]' ";

        $Sql = "SELECT * FROM (SELECT d.*
                               FROM orderscache d
                               WHERE  d.status=1 AND 
                                      d.company_id=" . $this->arrUser['company_id'] . " 
                               GROUP BY d.id ORDER BY d.id DESC, `activeDateTime` DESC) as tbl 
                 WHERE 1 " . $where_clause . "  ";
        //echo $Sql;exit;
          
        $subQueryForBuckets = "SELECT  c.id
                               FROM sr_crm_listing c
                               WHERE c.id IS NOT NULL ";

        $subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);

        // echo $subQueryForBuckets;exit;

        $Sql .= " AND (tbl.sell_to_cust_id = 0 OR tbl.sell_to_cust_id IS NULL OR tbl.sell_to_cust_id IN ($subQueryForBuckets) ) ";

        $Sql .= $where_clause2;

        //echo $Sql;exit;
        if ($order_clause == "")
            $order_type = "Order by tbl.id DESC";
        else
            $order_type = $order_clause;

        $total_limit = pagination_limit;
        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // $RS = $this->objsetup->CSI($response['q']);

        // if ($attr['type'] == 0)
        //     $moduleForPermission = "sale_quote";
        // elseif ($attr['type'] == 1)
        //     $moduleForPermission = "sale_order";
        // elseif ($attr['type'] == 2 || $attr['type'] == 3)
        //     $moduleForPermission = "sale_invoice";

        // $RS = $this->objsetup->CSI($response['q'], $moduleForPermission, sr_ViewPermission);

        // $response['q'] = '';
        // echo $Sql;exit;
        //srm_invoice.order_code
        //left JOIN srm_invoice on srm_invoice.id=d.purchase_order_id
        $RS = $this->objsetup->CSI($response['q']);


        /* if (!empty($attr[blance])) {

            $Sql_balance = "SELECT sum(jd.credit_amount+jd.debit_amount)  as balance_payed  FROM gl_journal_receipt_detail jd WHERE jd.type = 2  AND jd.account_id  = '$attr[cust_id]' and 	jd.company_id=" . $this->arrUser['company_id'] . " ";
            $RSb = $this->objsetup->CSI($Sql_balance);
            $response['balance_payed'] = $RSb->fields['balance_payed'];
        } */

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['company_id'] = $Row['company_id'];
                $result['type'] = $Row['type'];

                $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);

                if (!empty($attr['more_fields'])) {
                    $result['grand_total'] = $Row['grand_total_converted'];
                    $result['amount'] = $Row['grand_total'];

                    $result['grand_total_converted'] = $Row['grand_total_converted'];
                    $result['orignal_grand_total'] = $Row['grand_total'];

                    $result['sale_invioce_code'] = $Row['sale_invioce_code'];
                    $result['sale_order_code'] = $Row['sale_order_code'];

                    $result['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
                    $day = 0;
                    $day = $Row['payment_days'];


                    $result['consigment_no'] = $Row['comm_book_in_no'];
                    $result['name'] = $Row['sell_to_cust_name'];
                    $result['address_1'] = $Row['sell_to_address'];
                    $result['address_2'] = $Row['sell_to_address2'];
                    $result['city'] = $Row['sell_to_city'];
                    $result['county'] = $Row['sell_to_county'];
                    $result['country'] = $Row['comm_book_in_no'];
                    $result['contact_person'] = $Row['sell_to_contact_no'];
                    $result['outstanding'] = $Row['outstanding'];
                }
                $result['prev_code'] = $Row['prev_code'];
                $result['sale_person_id'] = $Row['sale_person_id'];

                $result['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
                $result['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
                $result['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
                $result['dispatch_date'] = $this->objGeneral->convert_unix_into_date($Row['dispatch_date']);
                $result['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                $result['current_stage'] = $Row['current_stage'];
                
                $result['sale_quote_code'] = $Row['sale_quote_code'];
                $result['sale_order_code'] = $Row['sale_order_code'];

                if ($attr['type'] == 2)
                    $result['sale_invioce_code'] = $Row['sale_invioce_code'];

                $result['sell_to_cust_no'] = $Row['sell_to_cust_no'];
                $result['sell_to_cust_name'] = $Row['sell_to_cust_name'];

                $result['sell_to_address'] = $Row['sell_to_address'];
                $result['sell_to_address2'] = $Row['sell_to_address2'];
                $result['sell_to_post_code'] = $Row['sell_to_post_code'];
                $result['sell_to_city'] = $Row['sell_to_city'];
                $result['sell_to_county'] = $Row['sell_to_county'];
                $result['country_code'] = $Row['country_code'];
                $result['cust_phone'] = $Row['cust_phone'];
                $result['cust_email'] = $Row['cust_email'];
                
                $result['sell_to_contact_no'] = $Row['sell_to_contact_no'];
                $result['sale_person'] = $Row['sale_person'];
                $result['grand_total'] = $Row['grand_total'];
                $result['currency_id'] = $Row['currency_id'];
                $result['currency_code'] = $Row['currency_code'];
                
                $result['bill_to_posting_group_name'] = $Row['bill_to_posting_group_name'];
                $result['segment'] = $Row['segment'];
                $result['net_amount'] = $Row['net_amount'];
                $result['tax_amount'] = $Row['tax_amount'];
                $result['finance_charges_exists'] = $Row['finance_charges_exists'];
                $result['insurance_charges_exists'] = $Row['insurance_charges_exists'];               
                
                $result['ship_to_address'] = $Row['ship_to_address'];
                $result['ship_to_address2'] = $Row['ship_to_address2'];
                $result['ship_to_city'] = $Row['ship_to_city'];
                $result['ship_to_county'] = $Row['ship_to_county'];
                $result['ship_to_post_code'] = $Row['ship_to_post_code'];
                $result['book_in_tel'] = $Row['book_in_tel'];
                $result['comm_book_in_contact'] = $Row['comm_book_in_contact'];
                $result['book_in_email'] = $Row['book_in_email'];
                $result['warehouse_booking_ref'] = $Row['warehouse_booking_ref'];
                $result['customer_warehouse_ref'] = $Row['customer_warehouse_ref'];
                $result['shipping_agent_code'] = $Row['shipping_agent_code'];
                $result['shipment_method_code'] = $Row['shipment_method_code'];                                
                
                $result['currency_rate'] = $Row['currency_rate'];
                $result['posting_group'] = $Row['posting_group_id'];
                $result['linked_pos_1'] = $Row['linked_pos_1'];
                $result['isPoExists'] = $Row['lpo_id'];
                $result['total_items'] = $Row['total_items'];
                $result['total_allocated'] = $Row['total_allocated'];
                $result['total_dispatched'] = $Row['total_dispatched'];
                $result['partially_allocated'] = $Row['partially_allocated'];
                $result['shipping_agent_code'] = $Row['shipping_agent_code'];
                $result['shipment_method_code'] = $Row['shipment_method_code'];
                $result['ship_to_city'] = $Row['ship_to_city'];
                $result['cust_order_no'] = $Row['cust_order_no'];
                $result['segment'] = $Row['segment'];
                $result['emailCount'] = $Row['emailCount'];
                $result['documentSQCount'] = $Row['documentSQCount'];
                $result['documentSOCount'] = $Row['documentSOCount'];
                $result['documentSICount'] = $Row['documentSICount'];
                $result['ma_approval_status'] = $Row['ma_approval_status'];
                $result['cl_approval_status'] = $Row['cl_approval_status'];

                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $tableName = "";
        // if ($attr['type'] == 0)
        //     $tableName = "SalesQuote";
        // else if ($attr['type'] == 1)
        //     $tableName = "SalesOrder";
        // else if ($attr['type'] == 2)
            $tableName = "SalesInvoicePortal";
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData($tableName);
        return $response;
    }

    function get_order_listings($attr) {

        //print_r($attr);
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
        $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        $response = array();
        //
        // if (!empty($attr['Serachkeyword'])) {
        //     $val = intval(preg_replace("/[^0-9]/", '', $attr['Serachkeyword']));
        //     //  $where_clause .= " AND  (d.invoice_no LIKE '%$val%'  OR d.sell_to_cust_name LIKE '%$attr[Serachkeyword]%' )";
        //     if ($val != 0)
        //         $where_clause .= "   "; //AND  d.invoice_no LIKE '%$val%'
        //     else
        //         $where_clause .= "   AND d.sell_to_cust_name LIKE '%$attr[Serachkeyword]%'";
        // }

        if ($attr['type'] == 1 || $attr['type'] == 0)
            $where_clause .= "AND tbl.type in (".$attr['type'].") ";
        else
            $where_clause .= "AND tbl.type in (3,".$attr['type'].") ";

        if (!empty($attr['parent_id']))
            $where_clauseperson = "and wa.parent_id=  " . $attr['parent_id'] . "";

        /*  if (!empty($attr[cust_id])) {
          $where_clause2 = "AND d.sell_to_cust_id  = '$attr[sell_to_cust_id]' AND  (d.grand_total- IFNULL(( SELECT sum(wa.amount)  FROM gl_journal_receipt_person as wa WHERE wa.type =1 AND wa.salesperson_id = d.id  and wa.company_id=" . $this->arrUser['company_id'] . "),0 )  >0 ) ";
          } */

        if (!empty($attr['cust_id']))
            $where_clause2 = "AND tbl.sell_to_cust_id  = '".$attr['cust_id']."' ";

        /* 
        (SELECT COUNT(*) FROM document_association AS da WHERE da.record_id = d.id AND da.module_type='document' and da.additional like '%quote' AND da.record_type = 'Sales') AS documentSQCount,
                                    (SELECT COUNT(*) FROM document_association AS da WHERE da.record_id = d.id AND da.module_type='document' and da.additional like '%order' AND da.record_type = 'Sales') AS documentSOCount,
                                    (SELECT COUNT(*) FROM document_association AS da WHERE da.record_id = d.id AND da.module_type='document' and da.additional like '%invoice' AND da.record_type = 'Sales') AS documentSICount,

                                    (SELECT (CASE 
                                                WHEN status = 0 THEN 
                                                    'Queued for Approval'
                                                WHEN status = 1 THEN 
                                                    'Awaiting Approval'
                                                WHEN status = 2 THEN 
                                                    'Approved'
                                                WHEN status = 3 OR status = 4 OR status = 5 THEN 
                                                    'Disapproved'
                                                WHEN status = 7 THEN 
                                                    'On Hold'
                                                ELSE    
                                                    '-'
                                            END)
                                        FROM approval_history AS ah 
                                        WHERE ah.object_id=d.id AND ah.type = 1 ORDER BY ah.id DESC LIMIT 1
                                    ) AS ma_approval_status,
                                    (SELECT (CASE 
                                                WHEN status = 0 THEN 
                                                    'Queued for Approval'
                                                WHEN status = 1 THEN 
                                                    'Awaiting Approval'
                                                WHEN status = 2 THEN 
                                                    'Approved'
                                                WHEN status = 3 OR status = 4 OR status = 5 THEN 
                                                    'Disapproved'
                                                WHEN status = 7 THEN 
                                                    'On Hold'
                                                ELSE    
                                                    '-'
                                            END)
                                        FROM approval_history AS ah 
                                        WHERE ah.object_id=d.id AND ah.type = 2 ORDER BY ah.id DESC LIMIT 1
                                    ) AS cl_approval_status,

                                    (CASE WHEN COALESCE((SELECT gltxn.vatPosted   FROM gl_account_txn AS gltxn  
                                    WHERE gltxn.object_id = d.id AND gltxn.company_id = d.company_id AND gltxn.type = 1 AND gltxn.vatPosted = 1 LIMIT 1),0)>0 THEN 'Yes'
                                    ELSE 'No' END) AS vatPosted 

        */

        $Sql = "SELECT * FROM (SELECT d.*, 
                                    (SELECT GROUP_CONCAT(srm_invoice.order_code SEPARATOR ',') FROM srm_invoice, link_so_po AS link WHERE srm_invoice.id=link.purchaseOrderID AND link.saleOrderID = d.id) AS linked_pos_1,
                                    0 AS documentSQCount,
                                    (SELECT COUNT(*) FROM document_association AS da WHERE da.record_id = d.id AND da.module_type='document' and da.additional like '%order' AND da.record_type = 'Sales') AS documentSOCount,
                                    0 AS documentSICount,
                                    0 AS emailCount,
                                    'Approved' AS ma_approval_status,
                                    'Approved' AS cl_approval_status,
                                    '' AS vatPosted 
                               FROM orderscache d
                               -- LEFT JOIN gl_account_txn AS gltxn On gltxn.object_id = d.id AND gltxn.company_id = d.company_id AND gltxn.type = 1
                               WHERE  d.status=1 AND 
                                      d.company_id=" . $this->arrUser['company_id'] . " GROUP BY d.id ORDER BY d.id DESC, `activeDateTime` DESC) as tbl 
                 WHERE 1 " . $where_clause . "  ";
        //echo $Sql;exit;
        //

        // $subQueryForBuckets = '';
        // $subQueryForBuckets_crm = '';
        //sr_crm_listing c
          
        $subQueryForBuckets = "SELECT  c.id
                               FROM crm AS c
                               WHERE c.type IN (2,3) AND 
                                     c.company_id=" . $this->arrUser['company_id'] . ""; 

        $subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);
        // echo $subQueryForBuckets;exit;

        //sr_crm_listing c
        
        /* $subQueryForBuckets_crm = " SELECT  c.id
                                    FROM crm 
                                    WHERE c.id IS NOT NULL AND c.type = 1 "; 

        $subQueryForBuckets_crm = $this->objsetup->whereClauseAppender($subQueryForBuckets_crm, 40);
         OR  
                            tbl.sell_to_cust_id IN ($subQueryForBuckets_crm) 
 */
        $employeeId = $this->arrUser['id'];

        if ($attr['type'] == 0)
            $Sql .= " AND ( tbl.sale_person_id = $employeeId OR  
                            tbl.sell_to_cust_id = 0 OR 
                            tbl.sell_to_cust_id IS NULL OR 
                            tbl.sell_to_cust_id IN ($subQueryForBuckets)) ";
        else
            $Sql .= " AND (tbl.sell_to_cust_id = 0 OR tbl.sell_to_cust_id IS NULL OR tbl.sell_to_cust_id IN ($subQueryForBuckets)) ";

        //echo $Sql;exit;
        if ($order_clause == ""){
            
            // $order_type = "Order by tbl.id DESC";
            if ($attr['type'] == 0)
               $order_type = "ORDER BY tbl.offer_date DESC,tbl.sale_quote_code DESC";
            elseif ($attr['type'] == 1)
               $order_type = "ORDER BY tbl.offer_date DESC,tbl.sale_order_code DESC";
            elseif ($attr['type'] == 2 || $attr['type'] == 3)
                $order_type = "ORDER BY tbl.posting_date DESC,tbl.sale_invioce_code DESC";
        }
        else
            $order_type = $order_clause;

        $total_limit = pagination_limit;
        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // $RS = $this->objsetup->CSI($response['q']);

        if ($attr['type'] == 0)
            $moduleForPermission = "sale_quote";
        elseif ($attr['type'] == 1)
            $moduleForPermission = "sale_order";
        elseif ($attr['type'] == 2 || $attr['type'] == 3)
            $moduleForPermission = "sale_invoice";

        $RS = $this->objsetup->CSI($response['q'], $moduleForPermission, sr_ViewPermission);

        // $response['q'] = '';
        // echo $Sql;exit;
        //srm_invoice.order_code
        //left JOIN srm_invoice on srm_invoice.id=d.purchase_order_id
        //$RS = $this->objsetup->CSI($Sql);


        if (isset($attr['blance'])) {

            $Sql_balance = "SELECT sum(jd.credit_amount+jd.debit_amount)  as balance_payed  FROM gl_journal_receipt_detail jd 
                        WHERE jd.type = 2  AND jd.account_id  = '".$attr['cust_id']."' and 	jd.company_id=" . $this->arrUser['company_id'] . " ";
            $RSb = $this->objsetup->CSI($Sql_balance);
            $response['balance_payed'] = $RSb->fields['balance_payed'];
        }

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['company_id'] = $Row['company_id'];
                $result['type'] = $Row['type'];
                // $result['code'] = $Row['sale_order_code'];

                $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);

                if (!empty($attr['more_fields'])) {
                    $result['grand_total'] = $Row['grand_total_converted'];
                    $result['amount'] = $Row['grand_total'];

                    $result['grand_total_converted'] = $Row['grand_total_converted'];
                    $result['orignal_grand_total'] = $Row['grand_total'];

                    $result['sale_invioce_code'] = $Row['sale_invioce_code'];
                    $result['sale_order_code'] = $Row['sale_order_code'];

                    $result['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
                    $day = 0;
                    $day = $Row['payment_days'];

                    // if ($day > 0)
                    //     $result['due_date'] = date('d/m/Y', strtotime(date('Y/m/d ', $Row['posting_date'], timezone) . " + $day  days"));


                    $result['consigment_no'] = $Row['comm_book_in_no'];
                    $result['name'] = $Row['sell_to_cust_name'];
                    $result['address_1'] = $Row['sell_to_address'];
                    $result['address_2'] = $Row['sell_to_address2'];
                    $result['city'] = $Row['sell_to_city'];
                    $result['county'] = $Row['sell_to_county'];
                    $result['country'] = $Row['comm_book_in_no']; // $Row['cuname'];
                    $result['contact_person'] = $Row['sell_to_contact_no'];
                    $result['outstanding'] = $Row['outstanding'];
                }
                $result['prev_code'] = $Row['prev_code'];
                $result['sale_person_id'] = $Row['sale_person_id'];

                $result['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
                $result['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
                $result['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
                $result['dispatch_date'] = $this->objGeneral->convert_unix_into_date($Row['dispatch_date']);
                $result['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                $result['converted_to_so_on'] = $this->objGeneral->convert_unix_into_date($Row['converted_to_so_on']);
                $result['posted_on'] = $this->objGeneral->convert_unix_into_date($Row['posted_on']);
                $result['converted_to_so_by_name'] = $Row['converted_to_so_by_name'];
                $result['posted_by_name'] = $Row['posted_by_name'];
                $result['current_stage'] = $Row['current_stage'];
                $result['vatPosted'] = $Row['vatPosted'];
                // $result['converted_price'] = $Row['net_amount_converted'];
                // $result['dispatch_date'] = $this->objGeneral->convert_unix_into_date($Row['dispatch_date']);
                // if ($Row['type'] == 0)
                    $result['sale_quote_code'] = $Row['sale_quote_code'];
                // else
                    $result['sale_order_code'] = $Row['sale_order_code'];

                if ($attr['type'] == 2)
                    $result['sale_invioce_code'] = $Row['sale_invioce_code'];

                $result['sell_to_cust_no'] = $Row['sell_to_cust_no'];
                $result['sell_to_cust_name'] = $Row['sell_to_cust_name'];

                $result['sell_to_address'] = $Row['sell_to_address'];
                $result['sell_to_address2'] = $Row['sell_to_address2'];
                $result['sell_to_post_code'] = $Row['sell_to_post_code'];
                $result['sell_to_city'] = $Row['sell_to_city'];
                $result['sell_to_county'] = $Row['sell_to_county'];
                $result['country_code'] = $Row['country_code'];
                $result['cust_phone'] = $Row['cust_phone'];
                $result['cust_email'] = $Row['cust_email'];
                
                $result['sell_to_contact_no'] = $Row['sell_to_contact_no'];
                $result['sale_person'] = $Row['sale_person'];
                $result['grand_total'] = $Row['grand_total']; //$Row['net_amount'];
                $result['currency_id'] = $Row['currency_id'];
                $result['currency_code'] = $Row['currency_code'];
                
                $result['bill_to_posting_group_name'] = $Row['bill_to_posting_group_name'];
                $result['segment'] = $Row['segment'];
                $result['net_amount'] = $Row['net_amount'];
                $result['tax_amount'] = $Row['tax_amount'];
                $result['finance_charges_exists'] = $Row['finance_charges_exists'];
                $result['insurance_charges_exists'] = $Row['insurance_charges_exists'];
                
                
                $result['ship_to_address'] = $Row['ship_to_address'];
                $result['ship_to_address2'] = $Row['ship_to_address2'];
                $result['ship_to_city'] = $Row['ship_to_city'];
                $result['ship_to_county'] = $Row['ship_to_county'];
                $result['ship_to_post_code'] = $Row['ship_to_post_code'];
                $result['book_in_tel'] = $Row['book_in_tel'];
                $result['comm_book_in_contact'] = $Row['comm_book_in_contact'];
                $result['book_in_email'] = $Row['book_in_email'];
                $result['warehouse_booking_ref'] = $Row['warehouse_booking_ref'];
                $result['customer_warehouse_ref'] = $Row['customer_warehouse_ref'];
                $result['shipping_agent_code'] = $Row['shipping_agent_code'];
                $result['shipment_method_code'] = $Row['shipment_method_code'];
                                
                
                $result['currency_rate'] = $Row['currency_rate'];
                $result['posting_group'] = $Row['posting_group_id'];
                $result['linked_pos_1'] = $Row['linked_pos_1'];
                $result['isPoExists'] = $Row['lpo_id'];
                $result['total_items'] = $Row['total_items'];
                $result['total_allocated'] = $Row['total_allocated'];
                $result['total_dispatched'] = $Row['total_dispatched'];
                $result['partially_allocated'] = $Row['partially_allocated'];
                $result['shipping_agent_code'] = $Row['shipping_agent_code'];
                $result['shipment_method_code'] = $Row['shipment_method_code'];
                $result['ship_to_city'] = $Row['ship_to_city'];
                $result['cust_order_no'] = $Row['cust_order_no'];
                $result['segment'] = $Row['segment'];
                $result['emailCount'] = $Row['emailCount'];
                $result['documentSQCount'] = $Row['documentSQCount'];
                $result['documentSOCount'] = $Row['documentSOCount'];
                $result['documentSICount'] = $Row['documentSICount'];
                $result['ma_approval_status'] = $Row['ma_approval_status'];
                $result['cl_approval_status'] = $Row['cl_approval_status'];



                /* if ($Row['currency_id'] != $def_currency_id && $Row['conversion_rate'] > 0) $result['order_value_in_LCY'] = $Row['net_amount'] / $Row['conversion_rate'];
                  else $result['order_value_in_LCY'] = $Row['net_amount']; */


                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $tableName = "";
        if ($attr['type'] == 0)
            $tableName = "SalesQuote";
        else if ($attr['type'] == 1)
            $tableName = "SalesOrder";
        else if ($attr['type'] == 2)
            $tableName = "SalesInvoice";
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData($tableName);
        return $response;
    }

    function get_customer_invoice_listings_for_refund($attr) {
        // print_r($attr);exit;
        $response = array();
        $posting_date = $this->objGeneral->convert_date($attr['posting_date']);
        $currency_id = ($attr['currency_id'] != '') ? $attr['currency_id'] : 0;
         
        // invoices and refund
        $Sql = "SELECT  
                d.id, 
                (CASE WHEN d.type > 1 THEN d.sale_invioce_code
                        ELSE  ''
                        END) AS code,
                d.sale_order_code AS order_code,
                d.posting_date, 
                d.sell_to_cust_name as name, 
                d.grand_total as total_amount, 
                d.grand_total_converted AS converted_amount,
                d.currency_id,
                d.converted_currency_id,
                d.currency_rate,
                (SELECT code from currency where id = d.currency_id) as currency_code,
                (SELECT code from currency where id = d.converted_currency_id) as converted_currency_code,
                (SELECT COALESCE(SUM(amount_allocated),0)  -- get temp allocated in case of journal (in case of posted that are already added to setteled amount)
                                FROM payment_allocation pa, gl_journal_receipt AS gl_jr
                                WHERE  
                                    pa.company_id = " . $this->arrUser['company_id'] . " AND
                                    gl_jr.company_id = " . $this->arrUser['company_id'] . " AND
                                    pa.payment_id = gl_jr.id AND
                                    gl_jr.type = 1 AND
                                    pa.document_type = 1 AND
                                    pa.invoice_type = 5 AND
                                    pa.status = 0 AND
                                    pa.invoice_id = d.id) + 
                        d.setteled_amount paid_amount,

                (CASE WHEN d.type = 1 THEN 'Sales Order'
                        ELSE 'Sales Invoice' 
                        END) AS payment_type,
                '0' AS cust_payment_id,
                d.on_hold,
                        (CASE
                            WHEN d.on_hold = 1 THEN
                                (SELECT comments FROM on_hold_invoice WHERE invoice_id=d.id AND invoice_type = 1 ORDER BY id DESC LIMIT 1)
                            ELSE
                                ''
                        END) AS on_hold_message
                FROM orders  d
                WHERE d.type IN(1,2,3) AND 
                      d.company_id=" . $this->arrUser['company_id'] . " AND 
                      d.sell_to_cust_id = ".$attr['account_id']." AND 
                      d.currency_id = $currency_id AND 
                      ROUND(d.remaining_amount, 2) > 0

                UNION ALL
                
                SELECT  
                    d.id, 
                    d.invoiceNo as code, 
                    '' AS order_code,
                    d.posting_date, 
                    d.moduleNo as name, 
                    (CASE
                            WHEN d.creditAmount > 0 THEN d.creditAmount
                            WHEN d.debitAmount > 0 THEN d.debitAmount
                        END ) AS total_amount,
                    d.converted_price AS converted_amount,
                    d.currency_id,
                    d.converted_currency_id,
                    d.convRate AS currency_rate,
                    (SELECT code from currency where id = d.currency_id) as currency_code,
                    (SELECT code from currency where id = d.converted_currency_id) as converted_currency_code,
                    (SELECT COALESCE(SUM(amount_allocated),0)  -- get temp allocated in case of journal (in case of posted that are already added to setteled amount)
                                FROM payment_allocation pa, gl_journal_receipt AS gl_jr
                                WHERE   
                                    pa.company_id = " . $this->arrUser['company_id'] . " AND
                                    gl_jr.company_id = " . $this->arrUser['company_id'] . " AND
                                    pa.status = 0 AND
                                    pa.payment_id = gl_jr.id AND
                                    gl_jr.type = 1 AND
                                        (
                                            (pa.document_type = 7 AND pa.invoice_id = d.id AND pa.invoice_type = 5) OR
                                            (pa.invoice_type = 7 AND pa.payment_id = d.id AND pa.document_type = 5)
                                        )
                                    ) + d.allocated_amount as paid_amount,
                    'Opening Balance Invoice' AS payment_type,
                    '0' AS cust_payment_id,
                    d.on_hold,
                        (CASE
                            WHEN d.on_hold = 1 THEN
                                (SELECT comments FROM on_hold_invoice WHERE invoice_id=d.id AND invoice_type = 6 ORDER BY id DESC LIMIT 1)
                            ELSE
                                ''
                        END) AS on_hold_message
                    FROM opening_balance_customer  d
                    WHERE 
                            d.type = 1 AND
                            d.docType = 1 AND
                            d.postStatus = 1 AND
                            d.company_id=" . $this->arrUser['company_id'] . " AND 
                            d.moduleID = ".$attr['account_id']." AND 
                            d.currency_id = $currency_id AND 
                            (CASE
                                WHEN d.creditAmount > 0 THEN d.creditAmount
                                WHEN d.debitAmount > 0 THEN d.debitAmount
                            END ) > ROUND(d.allocated_amount, 2)
                    
                UNION ALL
                
                SELECT  
                    d.id, 
                    d.invoiceNo as code, 
                    '' AS order_code,
                    d.posting_date, 
                    d.moduleNo as name, 
                    (CASE
                            WHEN d.creditAmount > 0 THEN d.creditAmount
                            WHEN d.debitAmount > 0 THEN d.debitAmount
                        END ) AS total_amount,
                    d.converted_price AS converted_amount,
                    d.currency_id,
                    d.converted_currency_id,
                    d.convRate AS currency_rate,
                    (SELECT code from currency where id = d.currency_id) as currency_code,
                    (SELECT code from currency where id = d.converted_currency_id) as converted_currency_code,
                    (SELECT COALESCE(SUM(amount_allocated),0)  -- get temp allocated in case of journal (in case of posted that are already added to setteled amount)
                                FROM payment_allocation pa, gl_journal_receipt AS gl_jr
                                WHERE   
                                    pa.company_id = " . $this->arrUser['company_id'] . " AND
                                    gl_jr.company_id = " . $this->arrUser['company_id'] . " AND
                                    pa.status = 0 AND
                                    pa.payment_id = gl_jr.id AND
                                    gl_jr.type = 1 AND
                                        (
                                            (pa.document_type = 12 AND pa.invoice_id = d.id AND pa.invoice_type = 5) OR
                                            (pa.invoice_type = 12 AND pa.payment_id = d.id AND pa.document_type = 5)
                                        )
                                    ) + d.allocated_amount as paid_amount,
                    'Bank Opening Balance Refund' AS payment_type,
                    '0' AS cust_payment_id,
                    d.on_hold,
                        (CASE
                            WHEN d.on_hold = 1 THEN
                                (SELECT comments FROM on_hold_invoice WHERE invoice_id=d.id AND invoice_type = 7 ORDER BY id DESC LIMIT 1)
                            ELSE
                                ''
                        END) AS on_hold_message
                    FROM opening_balance_bank  d
                    WHERE 
                            d.type = 1 AND
                            d.docType = 2 AND
                            d.postStatus = 1 AND
                            d.company_id=" . $this->arrUser['company_id'] . " AND 
                            d.moduleID = ".$attr['account_id']." AND 
                            d.currency_id = $currency_id AND 
                            (CASE
                                WHEN d.creditAmount > 0 THEN d.creditAmount
                                WHEN d.debitAmount > 0 THEN d.debitAmount
                            END ) > ROUND(d.allocated_amount, 2)
                    
                UNION ALL
                
                SELECT pd.id, 
                        pd.document_no AS code, 
                        '' AS order_code,
                        pd.posting_date, 
                        pd.account_name as cust_name, 
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS total_amount,
                        pd.converted_price AS converted_amount,
                        pd.currency_id,
                        pd.converted_currency_id,
                        pd.cnv_rate AS currency_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        (pd.allocated_amount + pd.temp_allocated_amount) as paid_amount,
                        'Refund' AS payment_type,
                        gl_jr.id AS cust_payment_id,
                        pd.on_hold,
                        (CASE
                            WHEN pd.on_hold = 1 THEN
                                (SELECT comments FROM on_hold_invoice WHERE invoice_id=pd.id AND invoice_type = 5 ORDER BY id DESC LIMIT 1)
                            ELSE
                                ''
                        END) AS on_hold_message 
                FROM gl_journal_receipt AS gl_jr, payment_details AS pd
                WHERE
                    gl_jr.id = pd.parent_id AND 
                    gl_jr.type = 2 AND
                    pd.document_type IN(1, 3) AND 
                    pd.debit_amount > 0 AND
                    pd.transaction_type = 2 AND 
                    pd.currency_id = $currency_id AND 
                    (CASE
                        WHEN pd.credit_amount > 0 THEN pd.credit_amount
                        WHEN pd.debit_amount > 0 THEN pd.debit_amount
                    END ) > ROUND(pd.allocated_amount, 2) AND
                    pd.account_id = ".$attr['account_id']."
                    
                order by posting_date DESC"; //
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                $result = array();

                $result['order_id'] = $Row['id'];
                $result['code'] = $Row['code'];
                $result['order_code'] = $Row['order_code'];
                $result['invoice_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $result['name'] = $Row['name'];
                $result['grand_total'] = $Row['total_amount'];
                $result['converted_amount'] = $Row['converted_amount'];
                $result['paid_amount'] = $Row['paid_amount'];
                $result['outstanding_amount'] = $Row['total_amount'] - $Row['paid_amount'];
                $result['currency_code'] = $Row['currency_code'];
                $result['converted_currency_code'] = ($Row['converted_currency_code'] != null) ? $Row['converted_currency_code'] : $Row['currency_code'];
                $result['currency_id'] = $Row['currency_id'];
                $result['currency_rate'] = $Row['currency_rate'];
                $result['converted_currency_id'] = $Row['converted_currency_id'];
                $result['payment_type'] = $Row['payment_type'];
                $result['cust_payment_id'] = $Row['cust_payment_id'];
                $result['on_hold'] = intval($Row['on_hold']);
                $result['on_hold_message'] = $Row['on_hold_message'];
                if($posting_date > current_date || $Row['posting_date'] > current_date)
                {
                    $result['allocation_date'] = ($posting_date >=  $Row['posting_date']) ? $this->objGeneral->convert_unix_into_date($posting_date) : $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                }
                else
                {
                    $result['allocation_date'] = $this->objGeneral->convert_unix_into_date(current_date);
                }
                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else
            $response['response'][] = array();

        return $response;
    }

    function get_customer_invoice_listings_for_payment($attr) {
        // print_r($attr);exit;
        $response = array();
        $posting_date = $this->objGeneral->convert_date($attr['posting_date']);
        
        $Sql = "SELECT  d.id, 
                        d.return_invoice_code as code, 
                        '' AS order_code,
                        d.posting_date, 
                        d.sell_to_cust_name as cust_name, 
                        d.grand_total as total_amount, 
                        d.grand_total_converted AS converted_amount,
                        d.currency_id,
                        d.converted_currency_id,
                        d.currency_rate,
                        (SELECT code from currency where id = d.currency_id) as currency_code,
                        (SELECT code from currency where id = d.converted_currency_id) as converted_currency_code,
                        (SELECT COALESCE(SUM(amount_allocated),0) -- get temp allocated in case of journal (in case of posted that are already added to setteled amount)
                                FROM payment_allocation pa, gl_journal_receipt AS gl_jr
                                WHERE   
                                    pa.company_id = " . $this->arrUser['company_id'] . " AND
                                    gl_jr.company_id = " . $this->arrUser['company_id'] . " AND
                                    pa.payment_id = gl_jr.id AND
                                    gl_jr.type = 1 AND
                                    pa.status = 0 AND
                                    pa.document_type = 2 AND
                                    pa.invoice_type = 6 AND
                                    pa.invoice_id = d.id ) + 
                        d.setteled_amount paid_amount,
                        'Credit Note' AS payment_type,
                        '0' AS cust_payment_id,
                        d.on_hold,
                        (CASE
                            WHEN d.on_hold = 1 THEN
                                (SELECT comments FROM on_hold_invoice WHERE invoice_id=d.id AND invoice_type = 2 ORDER BY id DESC LIMIT 1)
                            ELSE
                                ''
                        END) AS on_hold_message
                FROM return_orders  d
                LEFT JOIN currency on currency.id=d.currency_id
                WHERE d.type IN(2,3) AND 
                      d.company_id=" . $this->arrUser['company_id'] . " AND 
                      d.sell_to_cust_id = ".$attr['account_id']." AND 
                      d.currency_id = ".$attr['currency_id']." AND 
                      ROUND(d.remaining_amount, 2) > 0
                UNION ALL
                
                SELECT  
                    d.id, 
                    d.invoiceNo as code, 
                    '' AS order_code,
                    d.posting_date, 
                    d.moduleNo as name, 
                    (CASE
                            WHEN d.creditAmount > 0 THEN d.creditAmount
                            WHEN d.debitAmount > 0 THEN d.debitAmount
                        END ) AS total_amount,
                    d.converted_price AS converted_amount,
                    d.currency_id,
                    d.converted_currency_id,
                    d.convRate AS currency_rate,
                    (SELECT code from currency where id = d.currency_id) as currency_code,
                    (SELECT code from currency where id = d.converted_currency_id) as converted_currency_code,
                    (SELECT COALESCE(SUM(amount_allocated),0)  -- get temp allocated in case of journal (in case of posted that are already added to setteled amount)
                                FROM payment_allocation pa, gl_journal_receipt AS gl_jr
                                WHERE   
                                    pa.company_id = " . $this->arrUser['company_id'] . " AND
                                    gl_jr.company_id = " . $this->arrUser['company_id'] . " AND
                                    pa.payment_id = gl_jr.id AND
                                    pa.status = 0 AND
                                    gl_jr.type = 1 AND
                                        (
                                            (pa.document_type = 8 AND pa.invoice_id = d.id AND pa.invoice_type = 6) OR
                                            (pa.invoice_type = 8 AND pa.payment_id = d.id AND pa.document_type = 6)
                                        )
                                    ) + d.allocated_amount as paid_amount,
                    'Opening Balance Credit Note' AS payment_type,
                    '0' AS cust_payment_id,
                    d.on_hold,
                    (CASE
                        WHEN d.on_hold = 1 THEN
                            (SELECT comments FROM on_hold_invoice WHERE invoice_id=d.id AND invoice_type = 6 ORDER BY id DESC LIMIT 1)
                        ELSE
                            ''
                    END) AS on_hold_message
                    FROM opening_balance_customer  d
                    WHERE 
                            d.type = 1 AND
                            d.docType = 2 AND
                            d.postStatus = 1 AND
                            d.company_id=" . $this->arrUser['company_id'] . " AND 
                            d.moduleID = ".$attr['account_id']." AND 
                            d.currency_id = ".$attr['currency_id']." AND 
                            (CASE
                                WHEN d.creditAmount > 0 THEN d.creditAmount
                                WHEN d.debitAmount > 0 THEN d.debitAmount
                            END ) > ROUND(d.allocated_amount, 2)
                    
                
                UNION ALL
                
                SELECT  
                    d.id, 
                    d.invoiceNo as code, 
                    '' AS order_code,
                    d.posting_date, 
                    d.moduleNo as name, 
                    (CASE
                            WHEN d.creditAmount > 0 THEN d.creditAmount
                            WHEN d.debitAmount > 0 THEN d.debitAmount
                        END ) AS total_amount,
                    d.converted_price AS converted_amount,
                    d.currency_id,
                    d.converted_currency_id,
                    d.convRate AS currency_rate,
                    (SELECT code from currency where id = d.currency_id) as currency_code,
                    (SELECT code from currency where id = d.converted_currency_id) as converted_currency_code,
                    (SELECT COALESCE(SUM(amount_allocated),0)  -- get temp allocated in case of journal (in case of posted that are already added to setteled amount)
                                FROM payment_allocation pa, gl_journal_receipt AS gl_jr
                                WHERE   
                                    pa.company_id = " . $this->arrUser['company_id'] . " AND
                                    gl_jr.company_id = " . $this->arrUser['company_id'] . " AND
                                    pa.payment_id = gl_jr.id AND
                                    pa.status = 0 AND
                                    gl_jr.type = 1 AND
                                        (
                                            (pa.document_type = 11 AND pa.invoice_id = d.id AND pa.invoice_type = 6) OR
                                            (pa.invoice_type = 11 AND pa.payment_id = d.id AND pa.document_type = 6)
                                        )
                                    )  + d.allocated_amount as paid_amount,
                    'Bank Opening Balance Payment' AS payment_type,
                    '0' AS cust_payment_id,
                    d.on_hold,
                    (CASE
                        WHEN d.on_hold = 1 THEN
                            (SELECT comments FROM on_hold_invoice WHERE invoice_id=d.id AND invoice_type = 7 ORDER BY id DESC LIMIT 1)
                        ELSE
                            ''
                    END) AS on_hold_message
                    FROM opening_balance_bank  d
                    WHERE 
                            d.type = 1 AND
                            d.docType = 1 AND
                            d.postStatus = 1 AND
                            d.company_id=" . $this->arrUser['company_id'] . " AND 
                            d.moduleID = ".$attr['account_id']." AND 
                            d.currency_id = ".$attr['currency_id']." AND 
                            (CASE
                                WHEN d.creditAmount > 0 THEN d.creditAmount
                                WHEN d.debitAmount > 0 THEN d.debitAmount
                            END ) > ROUND(d.allocated_amount, 2)
                    
                
                UNION ALL
                
                SELECT pd.id, 
                        pd.document_no AS code, 
                        '' AS order_code,
                        pd.posting_date, 
                        pd.account_name as cust_name, 
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS total_amount,
                        pd.converted_price AS converted_amount,
                        pd.currency_id,
                        pd.converted_currency_id,
                        pd.cnv_rate AS currency_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        (pd.allocated_amount + pd.temp_allocated_amount) as paid_amount,
                        'Payment' AS payment_type,
                        gl_jr.id AS cust_payment_id,
                        pd.on_hold,
                        (CASE
                            WHEN pd.on_hold = 1 THEN
                                (SELECT comments FROM on_hold_invoice WHERE invoice_id=pd.id AND invoice_type = 6 ORDER BY id DESC LIMIT 1)
                            ELSE
                                ''
                        END) AS on_hold_message
                FROM gl_journal_receipt AS gl_jr, payment_details AS pd
                WHERE
                    gl_jr.id = pd.parent_id AND 
                    gl_jr.type = 2 AND
                    pd.document_type IN(1, 2) AND 
                    pd.credit_amount > 0 AND
                    pd.transaction_type = 2 AND 
                    pd.currency_id = ".$attr['currency_id']." AND 
                    (CASE
                        WHEN pd.credit_amount > 0 THEN pd.credit_amount
                        WHEN pd.debit_amount > 0 THEN pd.debit_amount
                    END ) > ROUND(pd.allocated_amount, 2) AND
                    pd.account_id = ".$attr['account_id']."
                    
                    
                    
                ORDER BY posting_date DESC
                "; //-- pd.parent_id <> $attr['parent_id'] AND
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                $result = array();
                $result['order_id'] = $Row['id'];
                $result['code'] = $Row['code'];                
                $result['order_code'] = $Row['order_code'];
                $result['invoice_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $result['name'] = $Row['cust_name'];
                $result['grand_total'] = $Row['total_amount'];
                $result['converted_amount'] = $Row['converted_amount'];
                $result['paid_amount'] = $Row['paid_amount'];
                $result['outstanding_amount'] = $Row['total_amount'] - $Row['paid_amount'];
                $result['currency_code'] = $Row['currency_code'];
                $result['converted_currency_code'] = ($Row['converted_currency_code'] != null) ? $Row['converted_currency_code'] : $Row['currency_code'];
                $result['currency_id'] = $Row['currency_id'];
                $result['currency_rate'] = $Row['currency_rate'];
                $result['converted_currency_id'] = $Row['converted_currency_id'];
                $result['payment_type'] = $Row['payment_type'];
                $result['cust_payment_id'] = $Row['cust_payment_id'];
                $result['on_hold'] = $Row['on_hold'];
                $result['on_hold_message'] = $Row['on_hold_message'];
                if($posting_date > current_date || $Row['posting_date'] > current_date)
                {
                    $result['allocation_date'] = ($posting_date >=  $Row['posting_date']) ? $this->objGeneral->convert_unix_into_date($posting_date) : $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                }
                else
                {
                    $result['allocation_date'] = $this->objGeneral->convert_unix_into_date(current_date);
                }
                

                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else
            $response['response'][] = array();

        return $response;
    }

    function get_customer_invoice_listings_for_payment_paid($attr) {
        // print_r($attr);exit;
        $response = array();
        // invoices and refund
        if ($attr['invoice_type'] == 1) { // sales invoices
            $Sql = "SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.return_invoice_code AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        'Credit Note' AS payment_type
                        FROM return_orders AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
                                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id =o.id   AND 
                                pa.invoice_type= 1 AND
                                pa.`document_type` = 2 AND
                                pa.payment_type = 2
                            )
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.return_invoice_code AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        'Credit Note' AS payment_type
                        FROM return_orders AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
                                pa.payment_id = o.id AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 2 AND
                                pa.`document_type` = 1 AND
                                pa.payment_type = 2
                            )
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                        
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Payment' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE
                        pa.company_id = " . $this->arrUser['company_id'] . " AND
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`payment_detail_id` AND
                                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 5 AND
                                pa.document_type= 1 AND
                                pa.payment_type = 1
                            )
                        ) 
                        UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                        
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Payment' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE
                        pa.company_id = " . $this->arrUser['company_id'] . " AND
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`invoice_id` AND
                                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.payment_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 1 AND
                                pa.document_type= 5 AND
                                pa.payment_type = 2
                            )
                        ) 
                    
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Credit Note' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
				                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 1 AND
                                pa.document_type= 8 AND
                                pa.payment_type = 2
                            )  
                    
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Credit Note' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 8 AND
                                pa.document_type= 1 AND
                                pa.payment_type = 1
                            )
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Payment' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
				                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND 
                                pa.invoice_type= 1 AND
                                pa.document_type= 11 AND
                                pa.payment_type = 2
                            )       
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Payment' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 11 AND
                                pa.document_type= 1 AND
                                pa.payment_type = 1
                            )               
                    "; //
        } else if ($attr['invoice_type'] == 6) {
            $Sql = "SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.return_invoice_code AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        'Credit Note' AS payment_type
                        FROM return_orders AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
                                pa.invoice_id = $attr[detail_id] AND
                                pa.payment_id = o.id AND 
                                pa.invoice_type= 2 AND
                                pa.`document_type` = 6 AND
                                pa.payment_type = 1
                            )
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.return_invoice_code AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        'Credit Note' AS payment_type
                        FROM return_orders AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                             
                            (
                                pa.invoice_id = o.id AND
                                pa.payment_detail_id = $attr[detail_id] AND 
                                pa.invoice_type= 6 AND
                                pa.`document_type` = 2 AND
                                pa.payment_type = 1
                            )
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                        
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,                        
                        'Payment' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`payment_detail_id` AND
                                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_id = $attr[detail_id] AND 
                                pa.invoice_type= 5 AND
                                pa.document_type = 6
                            )
                        )
                         AND
                        pa.payment_type = 1

                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                        
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,                        
                        'Payment' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`invoice_id` AND
                                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.payment_detail_id = $attr[detail_id] AND 
                                pa.invoice_type= 6 AND
                                pa.document_type = 5
                            )
                        )
                         AND
                        pa.payment_type = 1

                    
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Credit Note' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
                                pa.invoice_id = $attr[detail_id]   AND
                                pa.payment_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 8 AND
                                pa.document_type= 6 AND
                                pa.payment_type = 1
                            )             
                    
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Credit Note' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                             
                            (
                                pa.payment_detail_id = $attr[detail_id]  AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 6 AND
                                pa.document_type= 8 AND
                                pa.payment_type = 1
                            )         
                       
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Payment' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.payment_detail_id = $attr[detail_id] AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 6 AND
                                pa.document_type= 11 AND
                                pa.payment_type = 1
                            )      
                       
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Payment' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND
                                pa.invoice_id = $attr[detail_id] AND 
                                pa.invoice_type= 11 AND
                                pa.document_type= 6 AND
                                pa.payment_type = 1
                            )         
                    "; //
        } else if ($attr['invoice_type'] == 7) {
            $Sql = "SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.return_invoice_code AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        'Credit Note' AS payment_type
                        FROM return_orders AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                             
                            (
                                pa.payment_id = o.id  AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 2 AND
                                pa.`document_type` = 7 AND
                                pa.payment_type = 2 
                            )
                            
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.return_invoice_code AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        'Credit Note' AS payment_type
                        FROM return_orders AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                             
                            (
                                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                pa.invoice_type= 7 AND
                                pa.`document_type` = 2 AND
                                pa.payment_type = 1 
                            )
                            
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                        
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Payment' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND 
                        (
                            (
                                pd.id = `pa`.`payment_detail_id` AND
                                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 5 AND
                                pa.document_type = 7
                            )                                
                        )
                         AND
                        pa.payment_type = 1

                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                        
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Payment' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND 
                        (
                            (
                                pd.id = `pa`.`invoice_id` AND
                                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.payment_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 7 AND
                                pa.document_type = 5
                            )                              
                        )
                         AND
                        pa.payment_type = 1

                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Credit Note' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND

                            (
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND
                                pa.invoice_id = ".$attr['invoice_id']."  AND 
                                pa.invoice_type= 8 AND
                                pa.document_type= 7 AND
                                pa.payment_type = 1
                            ) 
                    
                    UNION ALL 
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Credit Note' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = ".$attr['invoice_id']."  AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 7 AND
                                pa.document_type= 8 AND
                                pa.payment_type = 1
                            )                     
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Payment' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
				                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 7 AND
                                pa.document_type= 11 AND
                                pa.payment_type = 1
                            )    
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Payment' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 11 AND
                                pa.document_type= 7 AND
                                pa.payment_type = 1
                            )
                    "; //
        } else if ($attr['invoice_type'] == 12) {
            $Sql = "SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.return_invoice_code AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        'Credit Note' AS payment_type
                        FROM return_orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            (
                                pa.payment_id = o.id  AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 2 AND
                                pa.`document_type` = 12 AND
                                pa.payment_type = 2 
                            )
                            
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.return_invoice_code AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        'Credit Note' AS payment_type
                        FROM return_orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                pa.invoice_type= 12 AND
                                pa.`document_type` = 2 AND
                                pa.payment_type = 1 
                            )
                            
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                        
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Payment' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`payment_detail_id` AND
                                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 5 AND
                                pa.document_type = 12
                            )                                
                        )
                         AND
                        pa.payment_type = 1
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                        
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Payment' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`invoice_id` AND
                                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.payment_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 12 AND
                                pa.document_type = 5
                            )                           
                        )
                         AND
                        pa.payment_type = 1

                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Credit Note' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND
                                pa.invoice_id = ".$attr['invoice_id']."  AND 
                                pa.invoice_type= 8 AND
                                pa.document_type= 12 AND
                                pa.payment_type = 1
                            ) 
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Credit Note' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = ".$attr['invoice_id']."  AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 12 AND
                                pa.document_type= 8 AND
                                pa.payment_type = 1
                            )                      
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Payment' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 12 AND
                                pa.document_type= 11 AND
                                pa.payment_type = 1
                            )   
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                        
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Payment' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 11 AND
                                pa.document_type= 12 AND
                                pa.payment_type = 1
                            )
                    "; //
        }

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                if ($Row['id'] > 0) {
                    $result = array();
                    $result['order_id'] = $Row['id'];
                    $result['code'] = $Row['code'];
                    $result['order_code'] = $Row['order_code'];
                    $result['original_amount'] = $Row['original_amount'];
                    $result['paid_amount'] = $Row['paid_amount'];
                    $result['payment_type'] = $Row['payment_type'];
                    $result['currency_code'] = $Row['currency_code'];

                    $result['invoice_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                    $result['allocation_date'] = $this->objGeneral->convert_unix_into_date($Row['allocation_date']);

                    $response['response'][] = $result;
                }
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else
            $response['response'][] = array();

        return $response;
    }

    function get_customer_invoice_listings_for_refund_paid($attr) {
        // print_r($attr);exit;
        $response = array();
        if ($attr['invoice_type'] == 2) { // Credit Note
            $Sql = "SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.sale_invioce_code AS code,                        
                        o.sale_order_code AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        (CASE WHEN o.type = 1 THEN 'Sales Order'
                                ELSE 'Sales Invoice' 
                                END) AS payment_type
                        FROM orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND

                            (
				                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                pa.invoice_type= 2 AND
                                pa.document_type= 1 AND
                                pa.payment_type = 2
                            )
                
                    
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.sale_invioce_code AS code,                        
                        o.sale_order_code AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        (CASE WHEN o.type = 1 THEN 'Sales Order'
                                ELSE 'Sales Invoice' 
                                END) AS payment_type
                        FROM orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = o.id AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 1 AND
                                pa.document_type= 2 AND
                                pa.payment_type = 2
                            )                    
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                       
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Refund' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`payment_detail_id` AND
                                pd.document_type IN (1, 3) AND
                                pd.debit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_id = ".$attr['invoice_id']."  AND 
                                pa.invoice_type= 6 AND
                                pa.`document_type`=2
                            )
                        )
                        AND
                            pa.payment_type = 1
                            UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,                       
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Refund' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`invoice_id` AND
                                pd.document_type IN (1, 3) AND
                                pd.debit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.payment_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type= 2 AND
                                pa.document_type= 6
                            )
                        )
                        AND
                            pa.payment_type = 1
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                       
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Invoice' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.invoice_id = ".$attr['invoice_id']." AND
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND 
                                pa.invoice_type= 7 AND
                                pa.document_type= 2 AND
                                pa.payment_type = 1
                            )     
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                       
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Invoice' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 2 AND
                                pa.document_type= 7 AND
                                pa.payment_type = 2
                            )  
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                       
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Refund' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.invoice_id = ".$attr['invoice_id']." AND
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND 
                                pa.invoice_type= 12 AND
                                pa.document_type= 2 AND
                                pa.payment_type = 1
                            )     
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,                       
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Refund' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND
                                o.postStatus  = 1 AND 
                                pa.invoice_type= 2 AND
                                pa.document_type= 12 AND
                                pa.payment_type = 2
                            )     
                    "; //
        }
        if ($attr['invoice_type'] == 5) { // Payment
            $Sql = "SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.sale_invioce_code AS code,
                        o.sale_order_code AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        (CASE WHEN o.type = 1 THEN 'Sales Order'
                                ELSE 'Sales Invoice' 
                                END) AS payment_type
                        FROM orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_detail_id = $attr[detail_id] AND
                                pa.invoice_id = o.id AND 
                                pa.invoice_type  = 5 AND
                                pa.`document_type` = 1 AND
                                pa.payment_type = 1
                            )
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.sale_invioce_code AS code,
                        o.sale_order_code AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        (CASE WHEN o.type = 1 THEN 'Sales Order'
                                ELSE 'Sales Invoice' 
                                END) AS payment_type
                        FROM orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = o.id AND
                                pa.invoice_id = $attr[detail_id] AND 
                                pa.invoice_type  = 1 AND
                                pa.`document_type` = 5 AND
                                pa.payment_type = 2
                            )
                            
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        (SELECT pds.document_no 
                         FROM payment_details AS pds 
                         WHERE pds.id =pa.invoice_id AND pds.company_id=pa.company_id 
                         LIMIT 1) AS code,
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Refund' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`payment_detail_id` AND
                                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.payment_detail_id = $attr[detail_id] AND 
                                pa.invoice_type= 5 AND
                                pa.document_type = 6
                            )
                        )
                         AND
                        pa.payment_type = 1
                    
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        (SELECT pds.document_no 
                         FROM payment_details AS pds 
                         WHERE pds.id =pa.invoice_id AND pds.company_id=pa.company_id 
                         LIMIT 1) AS code,
                        '' AS order_code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Refund' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                             (
                                pd.id = `pa`.`invoice_id` AND
				                pd.document_type IN (1, 2) AND
                                pd.credit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_id = $attr[detail_id] AND 
                                pa.invoice_type= 6 AND
                                pa.document_type = 5
                            )
                        )
                         AND
                        pa.payment_type = 1
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Invoice' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.invoice_id = $attr[detail_id] AND
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND 
                                pa.invoice_type= 7 AND
                                pa.document_type= 5 AND
                                pa.payment_type = 1
                            )
                            UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Invoice' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.payment_detail_id = $attr[detail_id] AND
                                pa.invoice_id = o.id AND
                                o.postStatus  = 1 AND 
                                pa.invoice_type= 5 AND
                                pa.document_type= 7 AND
                                pa.payment_type = 1
                            ) 

                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Refund' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.invoice_id = $attr[detail_id] AND
                                pa.payment_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 12 AND
                                pa.document_type= 5 AND
                                pa.payment_type = 1
                            )     
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        '' AS order_code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Refund' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.payment_detail_id = $attr[detail_id] AND
                                pa.invoice_id = o.id AND
                                o.postStatus  = 1 AND 
                                pa.invoice_type= 5 AND
                                pa.document_type= 12 AND
                                pa.payment_type = 1
                            )                        
                    "; //
        }
        if ($attr['invoice_type'] == 8) { // Opening balance credit note
            $Sql = "SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.sale_invioce_code AS code,
                        o.sale_order_code AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        (CASE WHEN o.type = 1 THEN 'Sales Order'
                                ELSE 'Sales Invoice' 
                                END) AS payment_type
                        FROM orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                pa.invoice_type = 8 AND
                                pa.document_type = 1 AND
                                pa.payment_type = 1
                            )
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.sale_invioce_code AS code,
                        o.sale_order_code AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        (CASE WHEN o.type = 1 THEN 'Sales Order'
                                ELSE 'Sales Invoice' 
                                END) AS payment_type
                        FROM orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = o.id AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type = 1 AND
                                pa.document_type = 8 AND
                                pa.payment_type = 2
                            )
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Invoice' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_type= 8 AND
                                pa.document_type= 7 AND
                                pa.payment_type = 1
                            )
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Invoice' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.invoice_id = ".$attr['invoice_id']." AND
                                pa.payment_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 7 AND
                                pa.document_type= 8 AND
                                pa.payment_type = 1
                            ) 
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Refund' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            
                            (
				                pd.id = `pa`.`payment_detail_id` AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
				                pd.document_type IN (1, 3) AND
                                pd.debit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_type= 6 AND
                                pa.document_type = 8
                            )                            
                        )
                         AND
                        pa.payment_type = 1      
                        UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Refund' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`invoice_id` AND
                                pa.payment_id = ".$attr['invoice_id']." AND 
				                pd.document_type IN (1, 3) AND
                                pd.debit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_type= 8 AND
                                pa.document_type = 6
                            )                         
                        )
                         AND
                        pa.payment_type = 1      
                    
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Refund' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.invoice_id = ".$attr['invoice_id']." AND
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND 
                                pa.invoice_type= 12 AND
                                pa.document_type= 8 AND
                                pa.payment_type = 1
                            )            
                    
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Refund' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 8 AND
                                pa.document_type= 12 AND
                                pa.payment_type = 1
                            )       
                    ";
        }
        if ($attr['invoice_type'] == 11) { // Bank Opening balance payment
            $Sql = "SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.sale_invioce_code AS code,
                        o.sale_order_code AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        (CASE WHEN o.type = 1 THEN 'Sales Order'
                                ELSE 'Sales Invoice' 
                                END) AS payment_type
                        FROM orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                pa.invoice_type = 11 AND
                                pa.document_type = 1 AND
                                pa.payment_type = 1
                            )
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.sale_invioce_code AS code,
                        o.sale_order_code AS order_code,
                        o.`posting_date`,
                        o.currency_rate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        o.grand_total AS original_amount,
                        (CASE WHEN o.type = 1 THEN 'Sales Order'
                                ELSE 'Sales Invoice' 
                                END) AS payment_type
                        FROM orders AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.payment_id = o.id AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
                                pa.invoice_type = 1 AND
                                pa.document_type = 11 AND
                                pa.payment_type = 2
                            )
                    UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Refund' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
				                pd.id = `pa`.`payment_detail_id` AND
                                pa.invoice_id = ".$attr['invoice_id']." AND 
				                pd.document_type IN (1, 3) AND
                                pd.debit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_type= 6 AND
                                pa.document_type = 11
                            )                            
                        )
                         AND
                        pa.payment_type = 1      
                        UNION ALL
                    SELECT 
                        gjr.id AS id,
                        amount_allocated AS paid_amount,
                        pd.document_no AS code,
                        pd.`posting_date`,
                        pd.cnv_rate,
                        (SELECT code from currency where id = pd.currency_id) as currency_code,
                        (SELECT code from currency where id = pd.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN pd.credit_amount > 0 THEN pd.credit_amount
                            WHEN pd.debit_amount > 0 THEN pd.debit_amount
                        END ) AS original_amount,
                        'Refund' AS payment_type
                        FROM payment_allocation AS pa, payment_details AS pd, `gl_journal_receipt` AS gjr
                    WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                        gjr.id = pd.parent_id AND
                        gjr.type = 2 AND
                        (
                            (
                                pd.id = `pa`.`invoice_id` AND
                                pa.payment_id = ".$attr['invoice_id']." AND 
				                pd.document_type IN (1, 3) AND
                                pd.debit_amount > 0 AND
                                pd.transaction_type = 2 AND
                                pa.invoice_type= 11 AND
                                pa.document_type = 6
                            )                    
                        )
                         AND
                        pa.payment_type = 1      
                        
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Invoice' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.invoice_id = o.id AND
                                o.postStatus  = 1 AND 
                                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_type= 11 AND
                                pa.document_type= 7 AND
                                pa.payment_type = 1
                            )
                        
                            UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Opening Balance Invoice' AS payment_type
                        FROM opening_balance_customer AS o, payment_allocation AS pa
                        WHERE 
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
                                pa.invoice_id = ".$attr['invoice_id']." AND
                                pa.payment_id = o.id AND
                                o.postStatus  = 1 AND 
                                pa.invoice_type= 7 AND
                                pa.document_type= 11 AND
                                pa.payment_type = 1
                            ) 
                        
                    UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Refund' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.invoice_id = ".$attr['invoice_id']." AND
                                pa.payment_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 12 AND
                                pa.document_type= 11 AND
                                pa.payment_type = 1
                            )   
                            UNION ALL
                    SELECT 
                        o.id AS id,
                        amount_allocated AS paid_amount,
                        o.invoiceNo AS code,
                        o.`posting_date`,
                        o.convRate,
                        (SELECT code from currency where id = o.currency_id) as currency_code,
                        (SELECT code from currency where id = o.converted_currency_id) as converted_currency_code,
                        pa.allocation_date,
                        (CASE
                            WHEN o.creditAmount > 0 THEN o.creditAmount
                            WHEN o.debitAmount > 0 THEN o.debitAmount
                        END ) AS original_amount,
                        'Bank Opening Balance Refund' AS payment_type
                        FROM opening_balance_bank AS o, payment_allocation AS pa
                        WHERE  
                            pa.company_id = " . $this->arrUser['company_id'] . " AND
                            
                            (
				                pa.payment_id = ".$attr['invoice_id']." AND
                                pa.invoice_id = o.id AND 
                                o.postStatus  = 1 AND
                                pa.invoice_type= 11 AND
                                pa.document_type= 12 AND
                                pa.payment_type = 1
                            )    
                        ";
        }
        // echo $Sql;exit;  
        $RS = $this->objsetup->CSI($Sql);
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                if ($Row['id'] > 0) {
                    $result = array();
                    $result['order_id'] = $Row['id'];
                    $result['code'] = $Row['code'];
                    $result['order_code'] = $Row['order_code'];
                    $result['original_amount'] = $Row['original_amount'];
                    $result['paid_amount'] = $Row['paid_amount'];
                    $result['payment_type'] = $Row['payment_type'];
                    $result['currency_code'] = $Row['currency_code'];

                    $result['invoice_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                    $result['allocation_date'] = $this->objGeneral->convert_unix_into_date($Row['allocation_date']);

                    $response['response'][] = $result;
                }
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else
            $response['response'][] = array();

        return $response;
    }

    function get_all_orders($attr) {

        // $this->objGeneral->mysql_clean($attr);

        $limit_clause = "";
        $where_clause = "";


        $response = array();

        $Sql = "SELECT  d.*
		  FROM orders  d
		  left  JOIN company on company.id=d.company_id 
		  where  d.status=1  
		  AND type IN(2,3) 
		  AND ( d.company_id=" . $this->arrUser['company_id'] . " 
		  or  company.parent_id=" . $this->arrUser['company_id'] . ")
		  order by d.id DESC"; //


        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;


        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);

                $Row['shipment_date'] = $this->objGeneral->convert_unix_into_date($Row['shipment_date']);
                $Row['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
                $Row['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
                $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
                $Row['document_date'] = $this->objGeneral->convert_unix_into_date($Row['document_date']);
                $Row['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                $Row['dispatch_date'] = $this->objGeneral->convert_unix_into_date($Row['dispatch_date']);
                $Row['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);


                $response['response'][] = $Row;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_order_all_listings($attr) {

        $this->objGeneral->mysql_clean($attr);

        $limit_clause = "";
        $where_clause = "";

        $response = array();

        $Sql = "SELECT  d.*
		FROM orders  d
		left  JOIN company on company.id=d.company_id 
		where  d.status=1  
		AND ( d.company_id=" . $this->arrUser['company_id'] . " 	
		or  company.parent_id=" . $this->arrUser['company_id'] . ")
		" . $where_clause . "
		order by d.id DESC"; //AND type IN(2,3)


        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;


        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $response['response'][] = $Row;
            }
        } else {
            $response['response'][] = array();
        }
        return $response;
    }

    function get_approval_pre_data($attr)
    {
        $Sql = "SELECT * FROM approval_setup WHERE company_id = " . $this->arrUser['company_id'];
        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);
        
        if ($RS->RecordCount() > 0) {
            $response['ack'] = 1;
            while($Row = $RS->FetchRow())
            {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                // 1-> Sales Order Margin Cost, 2-> Sale Order Credit Limit, 3-> Credit Note, 4-> Purchase Order, 5-> Expense Form, 6-> Holiday Form, 7-> Sales Forecast
                if($Row['type'] == '1')
                    $response['margin_analysis_approval_req'] = intval($Row['status']);
                else if($Row['type'] == '2')
                    $response['credit_limit_approval_req'] = intval($Row['status']);
                else if(($Row['type'] == '3' && intval($Row['status']) > 0) || ($Row['type'] == '8' && intval($Row['status']) > 0))
                    $response['credit_note_approval_req'] = intval($Row['status']);
                else if(($Row['type'] == '4'  && intval($Row['status']) > 0 ) || ($Row['type'] == '7'  && intval($Row['status']) > 0))
                    $response['purchase_order_approval_req'] = intval($Row['status']);
                else if($Row['type'] == '5')
                    $response['expense_approval_req'] = intval($Row['status']);
                else if($Row['type'] == '6')
                    $response['holiday_approval_req'] = intval($Row['status']);
            }
        }
        else
        {
            $response['ack'] = 0;
        }

        $Sql1 = "SELECT is_whole_seller FROM financial_settings 
                    WHERE company_id = " . $this->arrUser['company_id'] . " LIMIT 1";
        // echo $Sql; exit;
        $RS1 = $this->objsetup->CSI($Sql1);
        if ($RS1->RecordCount() > 0) {
            if($Row1 = $RS1->FetchRow())
            {
                $response['is_whole_seller'] = $Row1['is_whole_seller'];
            }
        }
        else
        {
            $response['is_whole_seller'] = 0;
        }

        return $response;
    }
    function get_order_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $get_updated_data = (isset($attr['get_updated_data']) && ($attr['get_updated_data'] > 0)) ? 1 : 0;
        $upToDate = date("Y-m-d"); 

        //WHEN (o.bill_to_posting_group_id > 0 AND o.type =0) THEN o.bill_to_posting_group_id
        $Sql = "SELECT o.*, (SELECT COUNT(od.id) FROM order_details AS od WHERE od.order_id = o.id) AS no_of_items,
                            IFNULL(SR_rep_aged_cust_sum(o.sell_to_cust_id,DATE_SUB('$upToDate', INTERVAL 14600 DAY),DATE_ADD('$upToDate', INTERVAL 14600 DAY),o.company_id,'LCY_total',2,'',DATE_ADD('$upToDate', INTERVAL 14600 DAY)), 0) AS customer_balance,
                            (SELECT is_whole_seller FROM financial_settings 
                                WHERE company_id = " . $this->arrUser['company_id'] . " LIMIT 1) AS is_whole_seller,
                            (SELECT posting_start_date FROM financial_settings 
                                WHERE company_id = " . $this->arrUser['company_id'] . " LIMIT 1) AS posting_start_date,
                            (SELECT posting_end_date FROM financial_settings 
                                WHERE company_id = " . $this->arrUser['company_id'] . " LIMIT 1) AS posting_end_date,
                            (SELECT IFNULL(status,0) FROM approval_setup WHERE type = 2 AND company_id = " . $this->arrUser['company_id'] . ") AS credit_limit_approval_req,
                            (SELECT IFNULL(status,0) FROM approval_history AS ah WHERE ah.object_id = o.id AND ah.type = 2 AND ah.company_id = " . $this->arrUser['company_id'] . " ORDER BY ah.id DESC LIMIT 1) AS credit_limit_approval_status,
                            fin.statement_email,
                            fin.reminder_email,
                            fin.invoice_email,
                            (CASE
                                WHEN o.bill_to_posting_group_id > 0 AND o.type <> 2 AND fin.posting_group_id > 0 THEN
                                    o.bill_to_posting_group_id                                
                                ELSE
                                    fin.posting_group_id
                            END) AS bill_to_posting_group_id,
                            c.crm_posting_group_id,
                            c.type AS customer_type,
                            c.customer_code,
                            c.crm_code,
                            (CASE WHEN (LENGTH(c.credit_limit) > 0) THEN c.`credit_limit` ELSE '0' END) AS credit_limit,
                            (CASE WHEN o.currency_id = 0 AND o.type <> 2 THEN
                                    c.currency_id
                                ELSE
                                    o.currency_id
                            END) AS currency,
                            CONCAT_WS(',',fin.statement_email,
                            fin.reminder_email,
                            fin.invoice_email,
                            c.email,
                            group_concat(ac.email SEPARATOR ','),
                            group_concat(ad.email SEPARATOR ','),
                            group_concat(ad.booking_email SEPARATOR ','),
                            fin.email,
                            fin.alt_contact_email) AS c_emails,
                            IFNULL((CASE WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=1) = 1 THEN
                                (SELECT IFNULL(status, 0) AS status FROM approval_history WHERE object_id='".$attr['id']."' AND company_id=" . $this->arrUser['company_id'] . " AND TYPE=1 ORDER BY id DESC LIMIT 1)
                                WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=2) = 1 THEN
                                    2
                            ELSE
                                0
                            END), 0) AS approval_type_1,
                            IFNULL((CASE WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=2) = 1 THEN
                                (SELECT IFNULL(status, 0) AS status FROM approval_history WHERE object_id='".$attr['id']."' AND company_id=" . $this->arrUser['company_id'] . " AND TYPE=2 ORDER BY id DESC LIMIT 1)
                                WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=1) = 1 THEN
                                    2
                            ELSE
                                0
                            END), 0) AS approval_type_2
                    FROM
                        orders AS o
                    LEFT JOIN crm AS c ON c.id = o.sell_to_cust_id
                    LEFT JOIN finance AS fin ON fin.customer_id = o.sell_to_cust_id
                    LEFT JOIN alt_contact AS ac ON ac.acc_id = o.sell_to_cust_id 
                    LEFT JOIN alt_depot AS ad ON ad.acc_id = o.sell_to_cust_id
                    WHERE o.id='".$attr['id']."' AND o.company_id = " . $this->arrUser['company_id'] . "
        ";
        
        /* $subQueryForBuckets = " SELECT  c.id
                                FROM sr_crm_listing c
                                WHERE c.type IN (2,3) AND 
                                      c.company_id=" . $this->arrUser['company_id'] . " ";

        //$subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);
        
        $subQueryForBuckets_crm = " SELECT  c.id
                                    FROM sr_crm_listing c
                                    WHERE c.type = 1 AND 
                                          c.company_id=" . $this->arrUser['company_id'] . " ";

        //$subQueryForBuckets_crm = $this->objsetup->whereClauseAppender($subQueryForBuckets_crm, 40); */


        //echo $subQueryForBuckets;exit;

        // $Sql .= " AND (o.sell_to_cust_id IN ($subQueryForBuckets) OR o.sell_to_cust_id IN ($subQueryForBuckets_crm) OR o.sell_to_cust_id =0 OR o.sell_to_cust_id IS NULL) ";

        $Sql .= " group by id LIMIT 1 "; // adding group by as there is a group_concat inside the query which makes the db return the record even if no record

        // echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql, $attr['moduleName'], sr_ViewPermission);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) { 
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }            

            $Row['currency_id'] = $Row['currency'];
            
            $temp_attr_currency['currency_id'] = $result['currency_id'];
            $currency_arr_local = $this->objsetup->get_currencies_list($temp_attr_currency);

            $Row['currency_arr_local']= $currency_arr_local['response'];           

            $response['marginAnalysisView'] = $this->objsetup->getProfitMarginView(1)['marginAnalysisView']; // 0 means original view, 1 means salesperson view

            // if($Row['type'] == '0')
            // {
                if($Row['customer_type'] != 1)
                {
                    $Row['account_type'] = 1;
                    $Row['sell_to_cust_no'] = $Row['customer_code'];                    
                }

                if($Row['account_type'] == 2 && !($Row['bill_to_posting_group_id']>0))
                {
                    $Row['bill_to_posting_group_id'] = $Row['crm_posting_group_id'];
                }
            // }

            $temp_attr['posting_group_id'] = $Row['bill_to_posting_group_id'];
            $posting_group_arr = $this->objHr->get_vat_group_by_posting_group($temp_attr);
            // if($temp_attr['posting_group_id'] > 0)
            // elseif($Row['account_type'] == 2)
            //     $posting_group_arr = $this->objHr->get_defaultVATgroup_by_posting_group();

            $Row['arr_vat_post_grp_sales'] = ($posting_group_arr['ack'] == 1) ? $posting_group_arr['response'] : array();

            $posting_group = $this->getPostingGrp();
            $Row['arr_posting_grp'] = ($posting_group['ack'] == 1) ? $posting_group['response'] : array();

            $paymentTerms = $this->getPaymentTerms();
            $Row['arr_paymentTerms'] = ($paymentTerms['ack'] == 1) ? $paymentTerms['response'] : array();

            $paymentMethods = $this->getPaymentMethods();
            $Row['arr_paymentMethods'] = ($paymentMethods['ack'] == 1) ? $paymentMethods['response'] : array();

            /* $SqlFileExistance = "SELECT name FROM attachments WHERE type = 2 AND typeId = ".$attr['id']." AND company_id = " . $this->arrUser['company_id'] . " order by id desc LIMIT 1; ";
            // echo $SqlFileExistance;
            $ResultFileExistance = $this->objsetup->CSI($SqlFileExistance);
            $FileName = $ResultFileExistance->FetchRow()['name'];
            //echo $FileName;exit;
            if ((strpos($FileName, 'SO.') !== false && $Row['type'] == 1) || (strpos($FileName, 'SI.') !== false && $Row['type'] != 1)) {
                if ($FileName && (file_exists(TEMPLATES_PATH . '/views/invoice_templates_pdf/' . $FileName))) {
                    $Row['generatedPDFPath'] = WEB_PATH . '/app/views/invoice_templates_pdf/' . $FileName;
                } else {
                    $Row['generatedPDFPath'] = '';
                }
            } else {
                $Row['generatedPDFPath'] = '';
            }
            */
            if($Row['customer_balance'] == '333333333') 
                    $Row['customer_balance'] = 0;
                    
            $Row['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
            $Row['dispatch_date'] = $this->objGeneral->convert_unix_into_date($Row['dispatch_date']);
            $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
            $Row['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
            $Row['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
            $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
            $Row['shipment_date'] = $this->objGeneral->convert_unix_into_date($Row['shipment_date']);
            $Row['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);

            // $Row['PurchaseOrders'] = $this->objSrm->selectLink_SO_PO(".$attr['id'].", 2); // 2nd parameter is for type purchase/sale. 1 for purchase,2 for sale.
            // $Row['PurchaseOrderslisting'] = $this->getPurchaseOrderListings();
            
            $selected_orders = $this->getSelectedPurchaseOrdersToSalesOrder($attr['id']);
            $Row['selectedPurchaseOrders'] = $selected_orders['order_codes'];
            $Row['selectedPurchaseOrdersIDs'] = explode(",", $selected_orders['order_ids']);
            $Row['selectedPOs'] = $selected_orders;
            $Row['customer_emails'] = $Row['c_emails'];
            
            $response['response'] = $Row;
            $attr['customer_id'] = $Row['finance_customer_id'];
            $attr['chk_posting_grp'] = 1;
            /* if ($attr['customer_id']){
                $response['response']['e_emails'] = self::get_e_emails($attr);
                $response['response']['customer_emails'] = self::get_customer_emails($attr);
            } */

            if ($Row['type'] == '0' || ($Row['type'] == '1' && $get_updated_data))  {
                $response['response']['order_finance_details'] = self::get_customer_finance($attr);
                
                $temp_attr['id']=$Row['alt_depo_id'];
                $temp_attr['module_type'] = 1; 
                $temp_attr['acc_id'] = ($Row['finance_customer_id'] > 0) ? $Row['finance_customer_id'] : '0'; 
                if($Row['sell_to_cust_id'] > 0)
                {
                    $response['response']['delivery_address_details'] = $this->objSrm->get_alt_depot_by_id($temp_attr);
                
                    $temp_attr['is_primary']=1;
                    $primary_address_details = $this->objSrm->get_alt_depots($temp_attr);
                    $response['response']['primary_address_details'] = $primary_address_details['record']['result'][0];
                }
                // latest sales person
                
            }
        } else {
            $response['response'] = array();
            $response['bucketFail'] = 1;
        }
        return $response;
    }

    function getPostingGrp(){

        $Sql = "SELECT c.id, c.name  
                FROM  ref_posting_group  c 
                where  c.status = 1  and 
                       c.company_id = " . $this->arrUser['company_id'];

        //echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['name'] = $Row['name'];
                $response['response'][] = $result;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } 
        else {
            $response['response'][] = array();
        }

        return $response;
    }

    function getPaymentTerms(){
        $Sql = "SELECT c.id, c.name,c.days 
                FROM  payment_terms  c 
                where  c.status = 1  and 
                       c.company_id = " . $this->arrUser['company_id'];

        //echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();

                $result['id'] = $Row['id'];
                $result['name'] = $Row['name'];
                $result['description'] = $Row['name'];
                $result['days'] = $Row['days'];
                $result['company_id'] = $Row['company_id'];

                $response['response'][] = $result;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } 
        else {
            $response['response'][] = array();
        }

        return $response;
    }

    function getPaymentMethods(){
        $Sql = "SELECT c.id, c.name 
                FROM  payment_methods  c 
                where  c.status = 1  and 
                       c.company_id = " . $this->arrUser['company_id']." order by c.name ASC";

        //echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();

                $result['id'] = $Row['id'];
                $result['name'] = $Row['name'];
                $result['description'] = $Row['name'];

                $response['response'][] = $result;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } 
        else {
            $response['response'][] = array();
        }

        return $response;
    }

    function get_orderbySelCust($attr) {
        $this->objGeneral->mysql_clean($attr);

        if(isset($attr['selCust'])){

            $key = hash('sha256', SECRET_KEY);
            $iv = substr(hash('sha256', SECRET_IV), 0, 16);
            $outputInvName = openssl_decrypt(base64_decode($attr['selCust']), SECRET_METHOD, $key, 0, $iv);
            $fileName = explode(",",$outputInvName);

            $customerID = $fileName[1];

            $Sql = "SELECT c.id as cid,c.customer_code,c.name,c.company_id
                    FROM crm c
                    WHERE c.type IN (2,3) AND 
                        c.customer_code IS NOT NULL AND 
                        c.name !='' AND 
                        c.id=" . $customerID. "";
            
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $row = array();
                    $attr['cust_id'] = $Row['cid'];
                    $this->arrUser['company_id'] = $Row['company_id'];
                }
                $response['customerID'] = $customerID;
            } else {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['response'][] = array();
                return $response;
            }
        }
        else{
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
            return $response;
        }

        $get_updated_data = (isset($attr['get_updated_data']) && ($attr['get_updated_data'] > 0)) ? 1 : 0;
        $upToDate = date("Y-m-d"); 

        $Sql = "SELECT o.*, (SELECT COUNT(od.id) FROM order_details AS od WHERE od.order_id = o.id) AS no_of_items,
                            IFNULL(SR_rep_aged_cust_sum(o.sell_to_cust_id,DATE_SUB('$upToDate', INTERVAL 14600 DAY),DATE_ADD('$upToDate', INTERVAL 14600 DAY),o.company_id,'LCY_total',2,'',DATE_ADD('$upToDate', INTERVAL 14600 DAY)), 0) AS customer_balance,
                            (SELECT is_whole_seller FROM financial_settings 
                                WHERE company_id = " . $this->arrUser['company_id'] . " LIMIT 1) AS is_whole_seller,
                            (SELECT posting_start_date FROM financial_settings 
                                WHERE company_id = " . $this->arrUser['company_id'] . " LIMIT 1) AS posting_start_date,
                            (SELECT posting_end_date FROM financial_settings 
                                WHERE company_id = " . $this->arrUser['company_id'] . " LIMIT 1) AS posting_end_date,
                            (SELECT IFNULL(status,0) FROM approval_setup WHERE type = 2 AND company_id = " . $this->arrUser['company_id'] . ") AS credit_limit_approval_req,
                            (SELECT IFNULL(status,0) FROM approval_history AS ah WHERE ah.object_id = o.id AND ah.type = 2 AND ah.company_id = " . $this->arrUser['company_id'] . " ORDER BY ah.id DESC LIMIT 1) AS credit_limit_approval_status,
                            fin.statement_email,
                            fin.reminder_email,
                            fin.invoice_email,
                            (CASE
                                WHEN o.bill_to_posting_group_id > 0 AND o.type <> 2 AND fin.posting_group_id > 0 THEN
                                    o.bill_to_posting_group_id 
                                ELSE
                                    fin.posting_group_id
                            END) AS bill_to_posting_group_id,
                            0 AS crm_posting_group_id,
                            c.type AS customer_type,
                            c.customer_code,
                            c.crm_code,
                            (CASE WHEN c.credit_limit > 0 THEN c.`credit_limit` ELSE '0' END) AS credit_limit,
                            (CASE WHEN o.currency_id = 0 AND o.type <> 2 THEN
                                    c.currency_id
                                ELSE
                                    o.currency_id
                            END) AS currency,
                            CONCAT_WS(',',fin.statement_email,
                            fin.reminder_email,
                            fin.invoice_email,
                            c.email,
                            group_concat(ac.email SEPARATOR ','),
                            group_concat(ad.email SEPARATOR ','),
                            group_concat(ad.booking_email SEPARATOR ','),
                            fin.email,
                            fin.alt_contact_email) AS c_emails,
                            IFNULL((CASE WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=1) = 1 THEN
                                (SELECT IFNULL(status, 0) AS status FROM approval_history WHERE object_id=".$attr['id']." AND company_id=" . $this->arrUser['company_id'] . " AND TYPE=1 ORDER BY id DESC LIMIT 1)
                            ELSE
                                0
                            END), 0) AS approval_type_1,
                            IFNULL((CASE WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=2) = 1 THEN
                                (SELECT IFNULL(status, 0) AS status FROM approval_history WHERE object_id=".$attr['id']." AND company_id=" . $this->arrUser['company_id'] . " AND TYPE=2 ORDER BY id DESC LIMIT 1)
                            ELSE
                                0
                            END), 0) AS approval_type_2
                    FROM
                        orders AS o
                    LEFT JOIN crm AS c ON c.id = o.sell_to_cust_id
                    LEFT JOIN finance AS fin ON fin.customer_id = o.sell_to_cust_id
                    LEFT JOIN alt_contact AS ac ON ac.acc_id = o.sell_to_cust_id 
                    LEFT JOIN alt_depot AS ad ON ad.acc_id = o.sell_to_cust_id
                    WHERE o.id='".$attr['id']."' AND o.company_id = " . $this->arrUser['company_id'] . "
        ";

        $Sql .= " group by id LIMIT 1 "; // adding group by as there is a group_concat inside the query which makes the db return the record even if no record

        // echo $Sql."<hr>"; exit;
        // $RS = $this->objsetup->CSI($Sql, $attr['moduleName'], sr_ViewPermission);
        $RS = $this->objsetup->CSI($Sql);

        $response['ack'] = 1;
        $response['error'] = NULL;

        if ($RS->RecordCount() > 0) { 
            $Row = $RS->FetchRow();

            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }

            $temp_attr['posting_group_id'] = $Row['bill_to_posting_group_id'];
            $posting_group_arr = $this->objHr->get_vat_group_by_posting_groupByCompanyID($temp_attr,$this->arrUser['company_id']);

            $Row['currency_id'] = $Row['currency'];
            
            $temp_attr_currency['currency_id'] = $result['currency_id'];
            $currency_arr_local = $this->objsetup->get_currenciesListByCompanyID($temp_attr_currency,$this->arrUser['company_id']);
            $Row['currency_arr_local']= $currency_arr_local['response'];

            $Row['arr_vat_post_grp_sales'] = ($posting_group_arr['ack'] == 1) ? $posting_group_arr['response'] : array();


            $response['marginAnalysisView'] = $this->objsetup->getProfitMarginView(1)['marginAnalysisView']; // 0 means original view, 1 means salesperson view

            // if($Row['type'] == '0')
            {
                if($Row['customer_type'] != 1)
                {
                    $Row['account_type'] = 1;
                    $Row['sell_to_cust_no'] = $Row['customer_code'];
                    
                }
                if($Row['account_type'] == 2)
                {
                    $Row['bill_to_posting_group_id'] = $Row['crm_posting_group_id'];
                }
            }

            if($Row['customer_balance'] == '333333333') 
                    $Row['customer_balance'] = 0;
                    
            $Row['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
            $Row['dispatch_date'] = $this->objGeneral->convert_unix_into_date($Row['dispatch_date']);
            $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
            $Row['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
            $Row['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
            $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
            $Row['shipment_date'] = $this->objGeneral->convert_unix_into_date($Row['shipment_date']);
            $Row['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
            
            $selected_orders = $this->getSelectedPurchaseOrdersToSalesOrder($attr['id']);
            $Row['selectedPurchaseOrders'] = $selected_orders['order_codes'];
            $Row['selectedPurchaseOrdersIDs'] = explode(",", $selected_orders['order_ids']);
            $Row['selectedPOs'] = $selected_orders;
            $Row['customer_emails'] = $Row['c_emails'];
            
            $response['response'] = $Row;
            $attr['customer_id'] = $Row['finance_customer_id'];
            $attr['chk_posting_grp'] = 1;


            if ($Row['type'] == '0' || ($Row['type'] == '1' && $get_updated_data))  {
                $response['response']['order_finance_details'] = self::get_customer_finance($attr);
                
                $temp_attr['id']=$Row['alt_depo_id'];
                $temp_attr['module_type'] = 1; 
                $temp_attr['acc_id'] = ($Row['finance_customer_id'] > 0) ? $Row['finance_customer_id'] : '0'; 
                $response['response']['delivery_address_details'] = $this->objSrm->get_alt_depot_by_id($temp_attr);
                
                $temp_attr['is_primary']=1;
                $primary_address_details = $this->objSrm->get_alt_depots($temp_attr);
                $response['response']['primary_address_details'] = $primary_address_details['record']['result'][0];                
            }
        } else {
            $response['response'] = array();
            $response['bucketFail'] = 1;
        }
        return $response;
    }

    function get_order_itemsbySelCust($attr) {

        if(isset($attr['selCust'])){

            $key = hash('sha256', SECRET_KEY);
            $iv = substr(hash('sha256', SECRET_IV), 0, 16);
            $outputInvName = openssl_decrypt(base64_decode($attr['selCust']), SECRET_METHOD, $key, 0, $iv);
            $fileName = explode(",",$outputInvName);

            $customerID = $fileName[1];

            $Sql = "SELECT c.id as cid,c.customer_code,c.name,c.company_id
                    FROM crm c
                    WHERE c.type IN (2,3) AND 
                        c.customer_code IS NOT NULL AND 
                        c.name !='' AND 
                        c.id=" . $customerID. "";
            
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $row = array();
                    $attr['cust_id'] = $Row['cid'];
                    $this->arrUser['company_id'] = $Row['company_id'];
                }
                $response['customerID'] = $customerID;
            } else {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['response'][] = array();
                return $response;
            }
        }
        else{
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
            return $response;
        }

        $volume = 0;
        $volume_unit = '';
        $weight = 0;
        $weightunit = '';
        $weight_permission = 0;  
        $volume_permission = 0;  

        $Sql4 = "SELECT  SUM(uomsetup.volume * inv.qty) AS volume,
                    SUM((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                        ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                        END)* inv.qty) AS weight,
                    'cm3' AS volume_unit,
                    'kg' AS weightunit,
                    (SELECT weight_permission FROM orders 
                     LEFT JOIN items_weight_setup AS w ON ((w.title = 'Sales Quote' AND orders.type=0) OR 
							   (w.title = 'Sales Order' AND orders.type=1) OR 
							   (w.title = 'Sales Invoice' AND orders.type=2) ) AND 
				orders.company_id = w.company_id WHERE orders.id= '".$attr['order_id']."') AS weight_permission,
                    (SELECT volume_permission FROM orders 
                     LEFT JOIN items_weight_setup AS w ON ((w.title = 'Sales Quote' AND orders.type=0) OR 
							   (w.title = 'Sales Order' AND orders.type=1) OR 
							   (w.title = 'Sales Invoice' AND orders.type=2) ) AND 
				orders.company_id = w.company_id WHERE orders.id= '".$attr['order_id']."') AS volume_permission
                FROM order_details AS inv
                LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id AND inv.type=0
                WHERE inv.order_id='".$attr['order_id']."' ";
        // echo $Sql4."<hr>"; exit;

        $rs4 = $this->objsetup->CSI($Sql4);

        if ($rs4->RecordCount() > 0){
            $volume = $rs4->fields['volume'];
            $volume_unit = $rs4->fields['volume_unit'];
            $weight = $rs4->fields['weight'];
            $weightunit = $rs4->fields['weightunit'];
            $weight_permission = $rs4->fields['weight_permission'];
            $volume_permission = $rs4->fields['volume_permission'];
        }

        $Sql5 = "SELECT   c.id, c.title,CASE
                                            WHEN c.status = 1 THEN 'Active'
                                            WHEN c.status = 0 THEN 'Inactive'
                                            WHEN c.status = 2 THEN 'Deleted'
                                            END AS gl_status
                 FROM  gl_units_of_measure  c
                 where  c.company_id=" . $this->arrUser['company_id'] . " and 
                        c.status <> 2 
                 ORDER BY c.id ASC";
        // echo $Sql5."<hr>"; exit;

        $rs5 = $this->objsetup->CSI($Sql5);

        if ($rs5->RecordCount() > 0){
            while ($Row = $rs5->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['name'] = $Row['title'];
                $result['title'] = $Row['title'];
                $result['status'] = $Row['gl_status'];
                $response['gl_arr_units'][] = $result;
            }
        }


        $this->objGeneral->mysql_clean($attr);
        
          
        $Sql = "SELECT od.*, od.id AS `rank`, uomsetup.volume,
        (CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                                ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                                END) AS weight, 
                                (SELECT dispatchNoteEmail FROM warehouse WHERE id=od.warehouse_id  AND generate=1) AS warehouse_email,
                    (CASE 
                        WHEN od.type = 0 THEN
                            (SELECT IFNULL(sum(wa.quantity), 0)
                                FROM
                                warehouse_allocation as wa
                                WHERE wa.product_id = od.item_id AND wa.order_id = od.order_id AND wa.sale_order_detail_id = od.id
                                AND wa.company_id=". $this->arrUser['company_id'] ." AND wa.warehouse_id = od.warehouse_id AND wa.type = 2 AND wa.sale_return_status = 0)
                        ELSE 0
                    END) AS item_stock_allocation,
                    (CASE 
                        WHEN od.type = 0 THEN
                            (SELECT IFNULL(wa.sale_status, 0)
                                FROM
                                warehouse_allocation as wa
                                WHERE wa.product_id = od.item_id AND wa.order_id = od.order_id AND wa.sale_order_detail_id = od.id
                                AND wa.company_id=". $this->arrUser['company_id'] ." AND wa.warehouse_id = od.warehouse_id AND wa.type = 2 AND wa.sale_return_status = 0
                            GROUP BY wa.sale_order_detail_id)
                    END) AS sale_status
                    FROM order_details AS od
                    LEFT JOIN units_of_measure_setup AS uomsetup ON od.unit_measure_id = uomsetup.id AND od.type=0
                    WHERE od.order_id='".$attr['order_id']."' AND od.ref_prod_id = 0 AND od.company_id=" . $this->arrUser['company_id'] . "
                UNION ALL 


                SELECT o1.*, o2.id+0.1 AS `rank`, NULL AS volume , NULL AS weight, (SELECT dispatchNoteEmail FROM warehouse WHERE id=o2.warehouse_id  AND generate=1) AS warehouse_email,
                        '0' AS item_stock_allocation,
			            '0' AS sale_status
                        FROM order_details  AS o1, order_details AS o2
                        WHERE 
                        o1.ref_prod_id = o2.id AND 
                        o1.order_id = o2.order_id AND
                        o1.order_id='".$attr['order_id']."' AND o1.`ref_prod_id` > 0 AND o1.company_id=" . $this->arrUser['company_id'] . "
                        GROUP BY `rank`
                ORDER BY `rank`";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                 if ($Row['type'] == '1') {

                    if($this->arrUser['company_id'] == 133){

                        // PBI: Requirment In GL For Vat GL Calculation in Vat column instead of general calculation. 
                        $sqlvat = " SELECT gl1.id AS gl1ID,gl1.accountCode AS gl1AccountCode,
                                        gl2.id AS gl2ID,gl2.accountCode AS gl2AccountCode,
                                        gl3.id AS gl3ID,gl3.accountCode AS gl3AccountCode
                                    FROM financial_settings AS fs 
                                    LEFT JOIN gl_account AS gl1 ON gl1.id = fs.VatPosting_gl_account_sale
                                    LEFT JOIN gl_account AS gl2 ON gl2.id = fs.VatPosting_gl_account_purchase
                                    LEFT JOIN gl_account AS gl3 ON gl3.id = fs.VatPosting_gl_account_imp
                                    WHERE fs.company_id='" . $this->arrUser['company_id'] . "' AND 
                                        gl1.company_id='" . $this->arrUser['company_id'] . "' AND
                                        gl2.company_id='" . $this->arrUser['company_id'] . "' AND
                                        gl3.company_id='" . $this->arrUser['company_id'] . "'  ";

                    }
                    else{
                    
                        // PBI: Requirment In GL For Vat GL Calculation in Vat column instead of general calculation. 
                        $sqlvat = "SELECT startRangeCode,endRangeCode 
                                    FROM gl_account 
                                    WHERE id = (SELECT VatPosting_gl_account 
                                                    FROM financial_settings
                                                    WHERE company_id='" . $this->arrUser['company_id'] . "')";
                    }
                    $RSV = $this->objsetup->CSI($sqlvat);
                    
                    if ($RSV->RecordCount() > 0) {
                        while ($RowVat = $RSV->FetchRow()) {
                            foreach ($RowVat as $key => $value) {
                                if (is_numeric($key))
                                    unset($RowVat[$key]);
                            }

                            if($this->arrUser['company_id'] == 133){
                                $Row['vatRange']['gl1AccountCode'] = $RowVat['gl1AccountCode'];
                                $Row['vatRange']['gl2AccountCode'] = $RowVat['gl2AccountCode'];
                                $Row['vatRange']['gl3AccountCode'] = $RowVat['gl3AccountCode'];
                            }
                            else{ 
                                //  print_r($RowVat);
                                $Row['vatRange']['startRangeCode'] = $RowVat['startRangeCode'];
                                $Row['vatRange']['endRangeCode'] = $RowVat['endRangeCode'];
                            }
                        }
                    }
                    
                }
                $response['response'][] = $Row;
            };
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        $response['volume'] = $volume;
        $response['volume_unit'] = $volume_unit;
        $response['weight'] = $weight;
        $response['weightunit'] = $weightunit;
        $response['weight_permission'] = $weight_permission;
        $response['volume_permission'] = $volume_permission;
        return $response;
    }

    function get_e_emails($attr){
        $EmailSql = "SELECT  fin.statement_email, fin.reminder_email, fin.invoice_email FROM (((crm c LEFT JOIN alt_contact ac ON c.id = ac.acc_id) LEFT JOIN alt_depot ad ON c.id = ad.acc_id) LEFT JOIN finance fin ON c.id = fin.customer_id) WHERE c.id = ".$attr['customer_id'].";";
                //echo $EmailSql;exit;
                $RSEmails = $this->objsetup->CSI($EmailSql);
                if ($RSEmails->RecordCount() > 0) {
                    $Row = $RSEmails->FetchRow();
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $Emails = $Row;
                    // $Emails = $Row['email'] .",".$Row['alt_contact'].",".$Row['alt_depot'].",".$Row['alt_depot_booking'].",".$Row['finance_email'].",".$Row['alt_contact_email'].",".$Row['statement_email'].",".$Row['reminder_email'].",".$Row['invoice_email'];
                    // $Emails = str_replace(";",",",$Emails);
                }
        if ($Emails){
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'] = $Emails;
            $response['id'] = $attr['customer_id'];
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_customer_emails($attr){
        
        $EmailSql = "SELECT c.email, 
                        GROUP_CONCAT(ac.email SEPARATOR ',') as alt_contact, 
                        GROUP_CONCAT(ad.email SEPARATOR ',') as alt_depot, 
                        GROUP_CONCAT(ad.booking_email SEPARATOR ',') as alt_depot_booking, 
                        fin.email as finance_email, 
                        fin.alt_contact_email, 
                        fin.statement_email, 
                        fin.reminder_email, 
                        fin.invoice_email 
                    FROM (((crm c LEFT JOIN alt_contact ac ON c.id = ac.acc_id  AND ac.module_type = 1) 
                        LEFT JOIN alt_depot ad ON c.id = ad.acc_id  AND ad.module_type = 1) 
                        LEFT JOIN finance fin ON c.id = fin.customer_id) 
                    WHERE c.id = ".$attr['customer_id'].";";
                //echo $EmailSql;exit;
                $RSEmails = $this->objsetup->CSI($EmailSql);
                if ($RSEmails->RecordCount() > 0) {
                    $Row = $RSEmails->FetchRow();
                    $Emails = $Row['email'] .",".$Row['alt_contact'].",".$Row['alt_depot'].",".$Row['alt_depot_booking'].",".$Row['finance_email'].",".$Row['alt_contact_email'].",".$Row['statement_email'].",".$Row['reminder_email'].",".$Row['invoice_email'];
                    $Emails = str_replace(";",",",$Emails);
                }

        $Emails = array_values(array_unique(array_filter(explode(",",$Emails))));
        if ($Emails){
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['Emails'] = $Emails;
            $response['id'] = $attr['customer_id'];
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function getSelectedPurchaseOrdersToSalesOrder($id)
    {
        $Sql = "SELECT si.id, si.order_code 
                    FROM srm_invoice AS si, link_so_po AS lsp
                    WHERE
                        lsp.saleOrderID = $id AND
                        lsp.purchaseOrderID = si.id";
        $RS = $this->objsetup->CSI($Sql);
        $code = "";
        $ids = "";
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $code .= $Row['order_code'].", ";
                $ids .= $Row['id'].",";
                $response['response'][] = $Row;
            }
            $code = substr($code, 0, -2);
            $ids = substr($ids, 0, -1);
            $response['order_codes'] = $code;
            $response['order_ids'] = $ids;
        }

        return $response;
    }
    function getPurchaseOrderListings($attr) {
        //print_r($attr);
        $response = array();

        $where_clause = "";
        // $where_clause = " AND d.type in (3, 4) ";

        $Sql = "SELECT  d.*
                FROM srm_invoice  d        
                where  d.status=1   AND 
                       d.company_id=" . $this->arrUser['company_id'] . "
                       " . $where_clause . "    
                Order by d.id DESC";
        // echo $Sql;exit;

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['type'] = $Row['type'];
                $result['code'] = $Row['sale_invioce_code'];
                $result['order_code'] = $Row['order_code'];

                /* if ($attr['type'] == 1)
                  $result['code'] = $Row['sale_order_code']; */

                $result['invoice_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                $result['rq_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);

                $result['sell_to_cust_no'] = $Row['sell_to_cust_no'];
                $result['sell_to_cust_name'] = $Row['sell_to_cust_name'];
                $result['sale_order_code'] = $Row['sale_order_code'];
                $result['cust_order_no'] = $Row['cust_order_no'];
                $result['sell_to_contact_no'] = $Row['sell_to_contact_no'];
                $result['order_code'] = $Row['order_code'];
                $result['net_amount'] = $Row['net_amount'];
                $result['currency_id'] = $Row['currency_id'];
                $result['currency_rate'] = $Row['currency_rate'];
                $result['net_amount_converted'] = $Row['net_amount_converted'];
                $result['grand_total'] = $Row['grand_total'];
                /* $result['Salesperson(s)'] = $Row['sale_person']; */

                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else
            $response['response'][] = array();

        return $response;
    }

    function update_posted_sale_invoice($attr) {
        error_reporting(E_ERROR);
        $PurchaseOrderArr = $attr['PurchaseOrderArr'];

        $this->objGeneral->mysql_clean($attr);
        $response = array();

        $update_id = $attr['id'];

        if ($update_id > 0)
            $update_check = "  AND tst.id != '" . $update_id . "'";

        $sell_to_contact_id = ($attr['sell_to_contact_id'] != '') ? $attr['sell_to_contact_id'] : '0';
        $sale_person_id = ($attr['sale_person_id'] != '') ? $attr['sale_person_id'] : '0';
        $alt_depo_id = ($attr['alt_depo_id'] != '') ? $attr['alt_depo_id'] : '0';        
       
        $shipment_method_id = ($attr['shipment_method_id'] != '') ? $attr['shipment_method_id'] : '0';
        $shipment_method_code = ($attr['shipment_method_code'] != '') ? $attr['shipment_method_code']: '';
        $shipping_agent_id = ($attr['shipping_agent_id'] != '') ? $attr['shipping_agent_id'] : '0';
        $freight_charges = ($attr['freight_charges'] != '') ? Round($attr['freight_charges'],2) : '0';
        $delivery_time = ($attr['ship_delivery_time'] != '') ? $attr['ship_delivery_time'] : '0';

        // $bill_to_contact_id = ($attr['bill_to_contact_id'] != '') ? $attr['bill_to_contact_id'] : '0';
        $bill_to_country_id = ($attr['bill_to_country_id'] != '') ? $attr['bill_to_country_id'] : '0';
        $ship_to_country_id = ($attr['ship_to_country_id'] != '') ? $attr['ship_to_country_id'] : '0';
        // $payment_discount = ($attr['payment_discount'] != '') ? Round($attr['payment_discount'],2) : '0';    
        
        // $sell_to_loc_id = ($attr['sell_to_loc_id'] != '') ? $attr['sell_to_loc_id'] : '0';
        // $bill_to_location_id = ($attr['bill_to_location_id'] != '') ? $attr['bill_to_location_id'] : '0';        
        // $bill_to_finance_charges = ($attr['bill_to_finance_charges'] != '') ? Round($attr['bill_to_finance_charges'],2) : '0';
        // $bill_to_finance_charges_type = ($attr['bill_to_finance_charges_type'] != '') ? $attr['bill_to_finance_charges_type'] : '0';
        // $bill_to_insurance_charges = ($attr['bill_to_insurance_charges'] != '') ? Round($attr['bill_to_insurance_charges'],2) : '0';
        // $bill_to_insurance_charges_type = ($attr['bill_to_insurance_charges_type'] != '') ? $attr['bill_to_insurance_charges_type'] : '0';
        $bill_to_bank_id = ($attr['bill_to_bank_id'] != '') ? $attr['bill_to_bank_id'] : '0';
        // $ship_to_contact_id = ($attr['ship_to_contact_id'] != '') ? $attr['ship_to_contact_id'] : '0';
        $payment_method_id = ($attr['payment_method_id'] != '') ? $attr['payment_method_id'] : '0';      

        
        // payment_discount='".$payment_discount."',
           
        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;

        $Sql = "UPDATE orders SET 
                                sell_to_contact_no='".$attr['sell_to_contact_no']."', 
                                sell_to_cust_name='".$attr['sell_to_cust_name']."',
                                sell_to_address='".$attr['sell_to_address']."',
                                sell_to_address2='".$attr['sell_to_address2']."',
                                sell_to_city='".$attr['sell_to_city']."',
                                sell_to_county='".$attr['sell_to_county']."',
                                sell_to_post_code='".$attr['sell_to_post_code']."',
                                country_id='".$attr['country_id']."',
                                sell_to_contact_id='".$sell_to_contact_id."',
                                sale_person_id='".$sale_person_id."',
                                sale_person='".$attr['sale_person']."',
                                cust_phone='".$attr['cust_phone']."',
                                cust_email='".$attr['cust_email']."',
                                cust_order_no='".$attr['cust_order_no']."',
                                
                                bill_to_name='".$attr['bill_to_name']."',
                                bill_to_address='".$attr['bill_to_address']."',
                                bill_to_address2='".$attr['bill_to_address2']."',
                                bill_to_city='".$attr['bill_to_city']."',
                                bill_to_county='".$attr['bill_to_county']."',
                                bill_to_post_code='".$attr['bill_to_post_code']."',
                                bill_to_country_id='".$attr['bill_to_country_id']."',
                                bill_to_contact='".$attr['bill_to_contact']."',
                                bill_to_contact_phone='".$attr['bill_to_contact_phone']."',
                                bill_to_contact_email='".$attr['bill_to_contact_email']."',

                                bill_to_bank_id='".$bill_to_bank_id."',
                                bill_to_bank_name='".$attr['bill_to_bank_name']."',
                                payment_method_code='".$attr['payment_method_code']."',
                                payment_terms_code='".$attr['payment_terms_code']."',
                                payment_method_id='".$payment_method_id."',
                                
                                
                                ship_to_name='".$attr['ship_to_name']."',
                                ship_to_address='".$attr['ship_to_address']."',
                                ship_to_address2='".$attr['ship_to_address2']."',
                                ship_to_city='".$attr['ship_to_city']."',
                                ship_to_county='".$attr['ship_to_county']."',
                                ship_to_post_code='".$attr['ship_to_post_code']."', 
                                book_in_tel='".$attr['book_in_tel']."',
                                comm_book_in_contact='".$attr['comm_book_in_contact']."',
                                book_in_email='".$attr['book_in_email']."',
                                ship_to_contact='".$attr['ship_to_contact']."',
                                alt_depo_id='".$alt_depo_id."',

                                shipment_method_id='".$shipment_method_id."',
                                shipment_method_code='".$shipment_method_code."',
                                shipping_agent_code='".$attr['shipping_agent_code']."',
                                shipping_agent_id='".$shipping_agent_id."',
                                container_no='".$attr['container_no']."',
                                freight_charges='".$freight_charges."',
                                delivery_time='".$delivery_time."', 
                                delivery_date='" . $this->objGeneral->convert_date($attr['delivery_date']) . "',
                                warehouse_booking_ref='".$attr['warehouse_booking_ref']."',
                                customer_warehouse_ref='".$attr['customer_warehouse_ref']."',                                
                                note='".$attr['note']."',
                                externalnote='".$attr['externalnote']."',                                
                                ChangedOn= UNIX_TIMESTAMP (NOW()),
                                ChangedBy='" . $this->arrUser['id'] . "'

                WHERE id = '".$attr['id']."'  
                limit 1";
    

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        $id = $update_id;

        if(sizeof($PurchaseOrderArr)>0){
            $response2 = $this->objSrm->addLink_SO_PO($PurchaseOrderArr, $update_id, 2);
        }
        else{
            $response2 = $this->objSrm->removeLink_SO_PO($update_id,2);
        }

        $this->Conn->commitTrans();
        $this->Conn->autoCommit = true;
        if ($id > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['id'] = $update_id;
            $response['error'] = 'No changes!';
        }

        return $response;
    }

    function add_order($attr) {
        //echo '<pre>';print_r($attr);exit;
        $PurchaseOrderArr = $attr['PurchaseOrderArr'];

        $this->objGeneral->mysql_clean($attr);

        // print_r(floatval(str_replace(",","",$attr['stats']->purchase_cost)));exit;
        $order_no = '';
        $inv_no = '';
        $response = array();
        if ($attr['type'] == 0)
            $order_no = $attr['sale_quote_no'];
        if ($attr['type'] == 1)
            $order_no = $attr['sale_order_no'];
        if ($attr['type'] == 2)
            $inv_no = $attr['sale_order_no'];

        $update_id = $attr['id'];
        // echo "update_id =".$update_id;exit;
        if ($update_id > 0)
            $update_check = "  AND tst.id != '" . $update_id . "'";
        /*
          $data_pass = "   tst.status=1 and tst.type IN (1,2)  AND tst.sale_order_code='" . $attr['sale_order_code'] . "' $update_check";
          $total = $this->objGeneral->count_duplicate_in_sql('orders', $data_pass, $this->arrUser['company_id']);
          if ($total > 0) {
          $response['ack'] = 0;
          $response['error'] = 'Record Already Exists.';
          return $response;
          } */


        $attr['order_date'] = (isset($attr['order_date']))?$attr['order_date']:$attr['offer_date'];
        $order_date = str_replace('/', '-', $attr['order_date']); 
        //invoice_no='".$invoice_no."'


        $sale_order_no = ($attr['sale_order_no'] != '') ? $attr['sale_order_no'] : '0';
        $sell_to_contact_id = ($attr['sell_to_contact_id'] != '') ? $attr['sell_to_contact_id'] : '0';
        $delivery_time = ($attr['delivery_time'] != '') ? $attr['delivery_time'] : '0';
        $campaign_id = ($attr['campaign_id'] != '') ? $attr['campaign_id'] : '0';
        $currency_id = ($attr['currency_ids'] != '') ? $attr['currency_ids'] : '0';
        $converted_currency_id = ($attr['converted_currency_id'] != '') ? $attr['converted_currency_id'] : '0';
        $converted_unit_price = ($attr['converted_unit_price'] != '') ? Round($attr['converted_unit_price'],2) : '0';
        $account_payable_id = ($attr['account_payable_id'] != '') ? $attr['account_payable_id'] : '0';
        $convert_from_forcast = ($attr['convert_from_forcast'] != '') ? $attr['convert_from_forcast'] : '0';
        $purchase_order_id = ($attr['purchase_order_id'] != '') ? $attr['purchase_order_id'] : '0';
        $finance_customer_id = ($attr['bill_to_cust_id'] != '') ? $attr['bill_to_cust_id'] : '0';
        $payment_discount = ($attr['payment_discount'] != '') ? Round($attr['payment_discount'],2) : '0';
        $shipment_method_id = ($attr['shipment_method']->id != '') ? $attr['shipment_method']->id : '0';
        $shipment_method_code = ($attr['shipment_method']->name != '') ? $attr['shipment_method']->name : '';
        $shipping_agent_id = ($attr['shipping_agent_id'] != '') ? $attr['shipping_agent_id'] : '0';
        $freight_charges = ($attr['freight_charges'] != '') ? Round($attr['freight_charges'],2) : '0';
        $alt_depo_id = ($attr['alt_depo_id'] != '') ? $attr['alt_depo_id'] : '0';
        $bill_to_cust_id = ($attr['bill_to_cust_id'] != '') ? $attr['bill_to_cust_id'] : '0';
        $bill_to_contact_id = ($attr['bill_to_contact_id'] != '') ? $attr['bill_to_contact_id'] : '0';
        $sale_person_id = ($attr['sale_person_id'] != '') ? $attr['sale_person_id'] : '0';
        $bill_to_country_id = ($attr['bill_to_country_id'] != '') ? $attr['bill_to_country_id'] : '0';
        $ship_to_country_id = ($attr['ship_to_country_id'] != '') ? $attr['ship_to_country_id'] : '0';
        $segment_id = ($attr['segment_id'] != '') ? $attr['segment_id'] : '0';
        $region_id = ($attr['region_id'] != '') ? $attr['region_id'] : '0';
        $buying_grp_id = ($attr['buying_grp_id'] != '') ? $attr['buying_grp_id'] : '0';
        
        $sell_to_loc_id = ($attr['sell_to_loc_id'] != '') ? $attr['sell_to_loc_id'] : '0';
        $bill_to_location_id = ($attr['bill_to_location_id'] != '') ? $attr['bill_to_location_id'] : '0';
        
        $bill_to_finance_charges = ($attr['bill_to_finance_charges'] != '') ? Round($attr['bill_to_finance_charges'],2) : '0';
        $bill_to_finance_charges_type = ($attr['bill_to_finance_charges_type'] != '') ? $attr['bill_to_finance_charges_type'] : '0';
        $bill_to_insurance_charges = ($attr['bill_to_insurance_charges'] != '') ? Round($attr['bill_to_insurance_charges'],2) : '0';
        $bill_to_insurance_charges_type = ($attr['bill_to_insurance_charges_type'] != '') ? $attr['bill_to_insurance_charges_type'] : '0';
        $bill_to_bank_id = ($attr['bill_to_bank_id'] != '') ? $attr['bill_to_bank_id'] : '0';
        $ship_to_contact_id = ($attr['ship_to_contact_id'] != '') ? $attr['ship_to_contact_id'] : '0';
        $payment_method_id = ($attr['payment_method_id'] != '') ? $attr['payment_method_id'] : '0';
        $anonymous_customer = ($attr['anonymous_customer'] != '') ? $attr['anonymous_customer'] : '0';
          
        $promo_discount = ($attr['stats']->promo_discount != '') ? Round(floatval(str_replace(",","",$attr['stats']->promo_discount)),2) : '0';
        $rebate_price = ($attr['stats']->rebate_price != '') ? Round(floatval(str_replace(",","",$attr['stats']->rebate_price)),2) : '0';
        $storage_cost = ($attr['stats']->storage_cost != '') ? Round(floatval(str_replace(",","",$attr['stats']->storage_cost)),2) : '0';
        $finance_charges = ($attr['stats']->finance_charges != '') ? Round(floatval(str_replace(",","",$attr['stats']->finance_charges)),2) : '0';
        $insurance_charges = ($attr['stats']->insurance_charges != '') ? Round(floatval(str_replace(",","",$attr['stats']->insurance_charges)),2) : '0';
        $grand_total = ($attr['grand_total'] != '') ? $attr['grand_total'] : '0';
                   
        $purchase_cost = ($attr['stats']->purchase_cost != '') ? Round(floatval(str_replace(",","",$attr['stats']->purchase_cost)),2) : '0';
        $org_purchase_cost = ($attr['stats']->org_purchase_cost != '') ? Round(floatval(str_replace(",","",$attr['stats']->org_purchase_cost)),2) : '0';
        $items_original_additional_cost = ($attr['stats']->items_original_additional_cost != '') ? Round(floatval(str_replace(",","",$attr['stats']->items_original_additional_cost)),2) : '0';
        // echo $org_purchase_cost;exit;
        $other_costs = ($attr['stats']->other_costs != '') ? Round(floatval(str_replace(",","",$attr['stats']->other_costs)),2) : '0';

        $stats_item_additional_cost_1 = ($attr['stats']->item_additional_cost[1]->value != '') ? Round(floatval(str_replace(",","",$attr['stats']->item_additional_cost[1]->value)),2) : '0';
        $stats_item_additional_cost_2 = ($attr['stats']->item_additional_cost[2]->value != '') ? Round(floatval(str_replace(",","",$attr['stats']->item_additional_cost[2]->value)),2) : '0';
        $stats_item_additional_cost_3 = ($attr['stats']->item_additional_cost[3]->value != '') ? Round(floatval(str_replace(",","",$attr['stats']->item_additional_cost[3]->value)),2) : '0';
        $stats_item_additional_cost_4 = ($attr['stats']->item_additional_cost[4]->value != '') ? Round(floatval(str_replace(",","",$attr['stats']->item_additional_cost[4]->value)),2) : '0';
        $stats_item_additional_cost_5 = ($attr['stats']->item_additional_cost[5]->value != '') ? Round(floatval(str_replace(",","",$attr['stats']->item_additional_cost[5]->value)),2) : '0';
        
        $stats_item_additional_cost_1_name = $attr['stats']->item_additional_cost[1]->name;
        $stats_item_additional_cost_2_name = $attr['stats']->item_additional_cost[2]->name;
        $stats_item_additional_cost_3_name = $attr['stats']->item_additional_cost[3]->name;
        $stats_item_additional_cost_4_name = $attr['stats']->item_additional_cost[4]->name;
        $stats_item_additional_cost_5_name = $attr['stats']->item_additional_cost[5]->name;
        
        $posting_dateUnConv = "";
        $offer_dateUnConv = "";            

        if(strlen($attr['posting_date']) > 0){
            $posting_dateUnConv = " posting_dateUnConv = '" . $this->objGeneral->convertUnixDateIntoConvDate($attr['posting_date']) . "',";            
        }  

        if(strlen($attr['offer_date']) > 0){
            $offer_dateUnConv = " offer_dateUnConv = '" . $this->objGeneral->convertUnixDateIntoConvDate($attr['offer_date']) . "',";            
        }    

        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;

        if ($update_id == 0) {

            if ($attr['type'] == 0) {
                $order_code_sql = "SELECT SR_GetNextSeq('quotations', " . $this->arrUser['company_id'] . ", 0, 0) AS code";
                $RS = $this->objsetup->CSI($order_code_sql);
                $sale_quote_code = $RS->fields['code'];
                $code = $sale_quote_code;
                $sale_order_code = '';
            } else {

                $order_code_sql = "SELECT SR_GetNextSeq('orders', " . $this->arrUser['company_id'] . ", 0, 0) AS code";
                $RS = $this->objsetup->CSI($order_code_sql);
                $sale_order_code = $RS->fields['code'];
                $code = $sale_order_code;
                $sale_quote_code = '';
            }

            $Sql = "INSERT INTO orders
                SET                    
                    transaction_id = SR_GetNextTransactionID(" . $this->arrUser['company_id'] . ", 2),
                    type='".$attr['type']."',
                    account_type='$attr[account_type]',
                    sale_quote_code='$sale_quote_code',
                    sale_order_code='$sale_order_code',
                    sale_order_no='$sale_order_no',

                    sell_to_cust_id='$attr[sell_to_cust_id]',
                    sell_to_contact_no='$attr[sell_to_contact_no]',
                    sell_to_cust_no='$attr[sell_to_cust_no]',
                    sell_to_cust_name='$attr[sell_to_cust_name]',
                    sell_to_loc_id = $sell_to_loc_id,
                    sell_to_address='$attr[sell_to_address]',
                    sell_to_address2='$attr[sell_to_address2]',
                    sell_to_city='$attr[sell_to_city]',
                    sell_to_county='$attr[sell_to_county]',
                    sell_to_post_code='$attr[sell_to_post_code]',
                    country_id='$attr[country_id]',
                    segment_id='$segment_id',
                    region_id='$region_id',
                    buying_grp_id='$buying_grp_id',
                    sell_to_contact_id='$sell_to_contact_id',
                    sell_to_contact='$attr[sell_to_contact]',
                    sale_person_id='$sale_person_id',
                    sale_person='$attr[sale_person]',
                    cust_phone='$attr[cust_phone]',
                    cust_fax='$attr[cust_fax]',
                    cust_email='$attr[cust_email]',
                    cust_order_no='$attr[cust_order_no]',
                    posting_date='" . $this->objGeneral->convert_date($attr['posting_date']) . "',
                    offer_date='" . $this->objGeneral->convert_date($attr['offer_date']) . "',
                    dispatch_date='" . $this->objGeneral->convert_date($attr['dispatch_date']) . "',
                    requested_delivery_date='" . $this->objGeneral->convert_date($attr['requested_delivery_date']) . "',
                    delivery_date='" . $this->objGeneral->convert_date($attr['delivery_date']) . "',
                    $posting_dateUnConv
                    $offer_dateUnConv
                    bill_to_cust_id='$bill_to_cust_id',   
                    bill_to_location_id = $bill_to_location_id,                 
                    bill_to_cust_no='$attr[bill_to_cust_no]',
                    bill_to_name='$attr[bill_to_name]',
                    bill_to_address='$attr[bill_to_address]',
                    bill_to_address2='$attr[bill_to_address2]',
                    bill_to_city='$attr[bill_to_city]',
                    bill_to_county='$attr[bill_to_county]',
                    bill_to_post_code='$attr[bill_to_post_code]',
                    bill_to_country_id='$attr[bill_to_country_id]',
                    bill_to_contact='$attr[bill_to_contact]',
                    bill_to_contact_id='$bill_to_contact_id',
                    bill_to_contact_phone='$attr[bill_to_contact_phone]',
                    bill_to_contact_email='$attr[bill_to_contact_email]',
                    bill_to_bank_id='$bill_to_bank_id',
                    bill_to_bank_name='$attr[bill_to_bank_name]',
                    payment_terms_code='$attr[payment_terms_code]',
                    payment_discount='$payment_discount',
                    payment_method_id='$payment_method_id',
                    payment_method_code='$attr[payment_method_code]',
                    due_date='" . $this->objGeneral->convert_date($attr['due_date']) . "',
                    
                    bill_to_finance_charges = '$bill_to_finance_charges',
                    bill_to_finance_charges_type = '$bill_to_finance_charges_type',
                    bill_to_insurance_charges ='$bill_to_insurance_charges',
                    bill_to_insurance_charges_type ='$bill_to_insurance_charges_type',
                    currency_id='$currency_id',
                    bill_to_posting_group_id = '$attr[bill_to_posting_group_id]',
                    bill_to_posting_group_name = '$attr[bill_to_posting_group_name]',
                    prev_code = '$attr[prev_code]',
                    
                    ship_to_name='$attr[ship_to_name]',
                    ship_to_address='$attr[ship_to_address]',
                    ship_to_address2='$attr[ship_to_address2]',
                    ship_to_city='$attr[ship_to_city]',
                    ship_to_county='$attr[ship_to_county]',
                    ship_to_post_code='$attr[ship_to_post_code]',
                    ship_to_country_id = $ship_to_country_id,
                    ship_to_contact_id='$ship_to_contact_id',
                    ship_to_contact='$attr[ship_to_contact]',
                    book_in_tel='$attr[book_in_tel]',
                    comm_book_in_contact='$attr[comm_book_in_contact]',
                    book_in_email='$attr[book_in_email]',
                    shipment_method_id='$shipment_method_id',
                    shipment_method_code='$shipment_method_code',
                    shipping_agent_code='$attr[shipping_agent_code]',
                    shipping_agent_id='$shipping_agent_id',
                    container_no='$attr[container_no]',
                    freight_charges='$freight_charges',
                    delivery_time='$delivery_time',
                    ship_delivery_time='$attr[ship_delivery_time]',
                    warehouse_booking_ref='$attr[warehouse_booking_ref]',
                    customer_warehouse_ref='$attr[customer_warehouse_ref]',
                        

                    campaign_id='$campaign_id',
                    campaign_no='$attr[campaign_no]',
                    comm_book_in_no='$attr[comm_book_in_no]',
                    converted_currency_id='$converted_currency_id',
                    converted_currency_code='$attr[converted_currency_code]', 
                    converted_unit_price='$converted_unit_price',
                    purchase_order_id='$purchase_order_id',
                    account_payable_number='$attr[account_payable_number]',
                    purchase_code_number='$attr[purchase_code_number]',                                    
                    account_payable_id='$account_payable_id',
                    user_id='" . $this->arrUser['id'] . "',
                    company_id='" . $this->arrUser['company_id'] . "',
                    convert_from_forcast='$convert_from_forcast',
                    finance_customer_id='$finance_customer_id',
                    alt_depo_id='$alt_depo_id',
                     note='$attr[note]',
                     externalnote='$attr[externalnote]',
                    order_date='" . $this->objGeneral->convert_date($attr['order_date']) . "',
                    shipment_date='" . $this->objGeneral->convert_date($attr['shipment_date']) . "',
                    anonymous_customer = $anonymous_customer,
                    AddedOn=UNIX_TIMESTAMP (NOW()),
                    AddedBy='" . $this->arrUser['id'] . "'
                    
                    ";
        } else {
            $sale_order_code = $attr['sale_order_code'];
            $sale_quote_code = $attr['sale_quote_code'];

            $Sql = "UPDATE orders SET
                    account_type ='$attr[account_type]',
                    sell_to_cust_id='$attr[sell_to_cust_id]',
                    sell_to_contact_no='$attr[sell_to_contact_no]',
                    sell_to_cust_no='$attr[sell_to_cust_no]',
                    sell_to_cust_name='$attr[sell_to_cust_name]',
                    sell_to_loc_id = $sell_to_loc_id,
                    sell_to_address='$attr[sell_to_address]',
                    sell_to_address2='$attr[sell_to_address2]',
                    sell_to_city='$attr[sell_to_city]',
                    sell_to_county='$attr[sell_to_county]',
                    sell_to_post_code='$attr[sell_to_post_code]',
                    country_id='$attr[country_id]',
                    segment_id='$segment_id',
                    region_id='$region_id',
                    buying_grp_id='$buying_grp_id',
                    sell_to_contact_id='$sell_to_contact_id',
                    sell_to_contact='$attr[sell_to_contact]',
                    sale_person_id='$sale_person_id',
                    sale_person='$attr[sale_person]',
                    cust_phone='$attr[cust_phone]',
                    cust_fax='$attr[cust_fax]',
                    cust_email='$attr[cust_email]',
                    cust_order_no='$attr[cust_order_no]',
                    posting_date='" . $this->objGeneral->convert_date($attr['posting_date']) . "',
                    offer_date='" . $this->objGeneral->convert_date($attr['offer_date']) . "',
                    dispatch_date='" . $this->objGeneral->convert_date($attr['dispatch_date']) . "',
                    requested_delivery_date='" . $this->objGeneral->convert_date($attr['requested_delivery_date']) . "',
                    delivery_date='" . $this->objGeneral->convert_date($attr['delivery_date']) . "',
                    $posting_dateUnConv
                    $offer_dateUnConv
                    bill_to_cust_id='$bill_to_cust_id',
                    bill_to_location_id = $bill_to_location_id,                      
                    bill_to_cust_no='$attr[bill_to_cust_no]',
                    bill_to_name='$attr[bill_to_name]',
                    bill_to_address='$attr[bill_to_address]',
                    bill_to_address2='$attr[bill_to_address2]',
                    bill_to_city='$attr[bill_to_city]',
                    bill_to_county='$attr[bill_to_county]',
                    bill_to_post_code='$attr[bill_to_post_code]',
                    bill_to_country_id='$attr[bill_to_country_id]',
                    bill_to_contact='$attr[bill_to_contact]',
                    bill_to_contact_id='$bill_to_contact_id',
                    bill_to_contact_phone='$attr[bill_to_contact_phone]',
                    bill_to_contact_email='$attr[bill_to_contact_email]',
                    bill_to_bank_id='$bill_to_bank_id',
                    bill_to_bank_name='$attr[bill_to_bank_name]',
                    payment_terms_code='$attr[payment_terms_code]',
                    payment_discount='$payment_discount',
                    payment_method_id='$payment_method_id',
                    payment_method_code='$attr[payment_method_code]',
                    due_date='" . $this->objGeneral->convert_date($attr['due_date']) . "',
                    
                    bill_to_finance_charges = '$bill_to_finance_charges',
                    bill_to_finance_charges_type = '$bill_to_finance_charges_type',
                    bill_to_insurance_charges ='$bill_to_insurance_charges',
                    bill_to_insurance_charges_type ='$bill_to_insurance_charges_type',
                    currency_id='$currency_id',
                    bill_to_posting_group_id = '$attr[bill_to_posting_group_id]',
                    bill_to_posting_group_name = '$attr[bill_to_posting_group_name]',
                    prev_code = '$attr[prev_code]',
                    
                    ship_to_name='$attr[ship_to_name]',
                    ship_to_address='$attr[ship_to_address]',
                    ship_to_address2='$attr[ship_to_address2]',
                    ship_to_city='$attr[ship_to_city]',
                    ship_to_county='$attr[ship_to_county]',
                    ship_to_post_code='$attr[ship_to_post_code]',
                    ship_to_country_id = $ship_to_country_id,
                    ship_to_contact_id='$ship_to_contact_id',
                    ship_to_contact='$attr[ship_to_contact]',
                    book_in_tel='$attr[book_in_tel]',
                    comm_book_in_contact='$attr[comm_book_in_contact]',
                    book_in_email='$attr[book_in_email]',
                    shipment_method_id='$shipment_method_id',
                    shipment_method_code='$shipment_method_code',
                    shipping_agent_code='$attr[shipping_agent_code]',
                    shipping_agent_id='$shipping_agent_id',
                    container_no='$attr[container_no]',
                    freight_charges='$freight_charges',
                    delivery_time='$delivery_time',
                    ship_delivery_time='$attr[ship_delivery_time]',
                    warehouse_booking_ref='$attr[warehouse_booking_ref]',
                    customer_warehouse_ref='$attr[customer_warehouse_ref]',
                        

                    campaign_id='$campaign_id',
                    campaign_no='$attr[campaign_no]',
                    comm_book_in_no='$attr[comm_book_in_no]',
                    converted_currency_id='$converted_currency_id',
                    converted_currency_code='$attr[converted_currency_code]', 
                    converted_unit_price='$converted_unit_price',
                    purchase_order_id='$purchase_order_id',
                    account_payable_number='$attr[account_payable_number]',
                    purchase_code_number='$attr[purchase_code_number]',                                    
                    account_payable_id='$account_payable_id',
                    convert_from_forcast='$convert_from_forcast',
                    finance_customer_id='$finance_customer_id',
                    alt_depo_id='$alt_depo_id',
                     note='$attr[note]',
                     externalnote='$attr[externalnote]',
                    order_date='" . $this->objGeneral->convert_date($attr['order_date']) . "',
                    shipment_date='" . $this->objGeneral->convert_date($attr['shipment_date']) . "',
                    anonymous_customer = $anonymous_customer,
                    ChangedOn= UNIX_TIMESTAMP (NOW()),
                    ChangedBy='" . $this->arrUser['id'] . "', 
                    promo_discount = $promo_discount,
                    rebate_price = $rebate_price,
                    storage_cost = $storage_cost,
                    finance_charges = $finance_charges,
                    insurance_charges = $insurance_charges,
                    purchase_cost = $purchase_cost,
                    org_purchase_cost = $org_purchase_cost,      
                    items_original_additional_cost = $items_original_additional_cost,
                    other_costs = $other_costs,
                    stats_item_additional_cost_1 = $stats_item_additional_cost_1,
                    stats_item_additional_cost_2 = $stats_item_additional_cost_2,
                    stats_item_additional_cost_3 = $stats_item_additional_cost_3,
                    stats_item_additional_cost_4 = $stats_item_additional_cost_4,
                    stats_item_additional_cost_5 = $stats_item_additional_cost_5,
                    stats_item_additional_cost_1_name = '$stats_item_additional_cost_1_name',
                    stats_item_additional_cost_2_name = '$stats_item_additional_cost_2_name',
                    stats_item_additional_cost_3_name = '$stats_item_additional_cost_3_name',
                    stats_item_additional_cost_4_name = '$stats_item_additional_cost_4_name',
                    stats_item_additional_cost_5_name = '$stats_item_additional_cost_5_name'                   
                    WHERE id = ".$attr['id']." AND type <=1 AND company_id='" . $this->arrUser['company_id'] . "' limit 1";
        }

        /* 
        remaining_amount='" . $grand_total . "', 
                            setteled_amount='0'
        */

        // echo $Sql; exit;
        // $RS = $this->objsetup->CSI($Sql);
        $module_name = "";
        if ($attr['type'] == 0)
            $module_name = "sale_quote";
        else if ($attr['type'] == 1)
            $module_name = "sale_order";

        if ($update_id == 0) {
            $RS = $this->objsetup->CSI($Sql, $module_name, sr_AddPermission);
        } else {
            $RS = $this->objsetup->CSI($Sql, $module_name, sr_AddEditPermission);

            $sqlA = "SELECT count(ah.id) AS ttl
                     FROM approval_history AS ah 
                     WHERE  ah.object_id=".$update_id." AND 
                            ah.type IN (1,2) AND  
                            ah.company_id = '" . $this->arrUser['company_id'] . "'";

            // echo $sqlA;exit;
            $RSA = $this->objsetup->CSI($sqlA);

            if ($RSA->RecordCount() > 0) {
                $RowA = $RSA->FetchRow();
                $ttlCount =  $RowA['ttl'];

                if($ttlCount > 0){

                    $sqlb = 'UPDATE approval_history SET 
                                                        source_code =  "'.$attr['sell_to_cust_no'].'",
                                                        source_name =  "'.$attr['sell_to_cust_name'].'"
                            WHERE object_id ='.$update_id.'  AND  
                                  type IN (1,2) AND
                                  company_id = ' . $this->arrUser['company_id'] . ' ';

                    $this->objsetup->CSI($sqlb);
                }
            }
        }

        if ($update_id == 0) {
            $id = $this->Conn->Insert_ID();
            if ($id > 0) {
                $Sql = "SELECT id FROM ref_crm_order_stages 
                    WHERE module_id = 1 and company_id='" . $this->arrUser['company_id'] . "' and status = 1 ORDER BY `rank`";
                // echo $Sql; exit;

                $RS = $this->objsetup->CSI($Sql);
                $stage_count = 0;
                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {
                        $Sql2 = "INSERT INTO ref_order_stage_list
                                SET    
                                    order_id = $id,
                                    ref_stage_id = $Row[id],
                                    company_id = " . $this->arrUser['company_id'] . ", 
                                    user_id = " . $this->arrUser['id'] . ", ";
                        if ($stage_count == 0) {
                            $stage_count = 1;
                            $Sql2 .=" state = 'active'";
                        } else
                            $Sql2 .=" state = 'outstanding'";

                        // echo $Sql2;exit;
                        $RS2 = $this->objsetup->CSI($Sql2);
                    }
                }
                /* // just to update cache
                $Sql1 = "update orders set changedOn=UNIX_TIMESTAMP (NOW()) WHERE id=$id; -- just to update cache for order stage";
                // echo $Sql1;exit;
                $RS1 = $this->objsetup->CSI($Sql1); */
            }
        }
        else {
            $id = $update_id; //$this->Conn->Affected_Rows();
        }
        // $response2 = $this->objSrm->addLink_SO_PO($PurchaseOrderArr, $update_id, 2);

        if($update_id > 0){

            $Sql2 = "UPDATE orders SET 
                                    remaining_amount='" . $grand_total . "', 
                                    setteled_amount='0'
                     WHERE id = ".$update_id." AND 
                            type <=1 AND
                            company_id='" . $this->arrUser['company_id'] . "' AND 
                            (setteled_amount = 0 OR setteled_amount IS NULL)  
                     limit 1";

            // echo $Sql2;exit;
            $this->objsetup->CSI($Sql2);
        }

        if(sizeof($PurchaseOrderArr)>0){
            $response2 = $this->objSrm->addLink_SO_PO($PurchaseOrderArr, $update_id, 2);
        }
        else{
            $response2 = $this->objSrm->removeLink_SO_PO($update_id,2);
        }


        $this->Conn->commitTrans();
        $this->Conn->autoCommit = true;
        if ($id > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['sale_quote_code'] = $sale_quote_code;
            $response['sale_order_code'] = $sale_order_code;
            $response['order_date'] = (isset($order_date))?date('Y-m-d', strtotime($order_date)):'';
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['id'] = $update_id;
            $response['sale_quote_code'] = $sale_quote_code;
            $response['sale_order_code'] = $sale_order_code;
            $response['order_date'] = '';
            $response['error'] = 'No changes!';
        }

        return $response;
    }

    function updateLinkPO($attr) {

        $PurchaseOrderArr = $attr['PurchaseOrderArr'];
        $update_id = $attr['id'];

        if(sizeof($PurchaseOrderArr)>0){
            $response2 = $this->objSrm->addLink_SO_PO($PurchaseOrderArr, $update_id, 2);
        }
        
        $response['ack'] = 1;
        $response['error'] = NULL;     

        return $response;
    }

    function convert_to_invoice($attr) {
        //print_r($attr);exit;
        $sale_invoice_no = ($attr['sale_invoice_no'] != '') ? $attr['sale_invoice_no'] : '0';
        $Sql = "UPDATE orders       SET    type = 2  ,    sale_invioce_no = '" . $sale_invoice_no . "'  , sale_invioce_code = '" . $attr['sale_invoice_code'] . "' WHERE id = ".$attr['id']."  Limit 1";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        /*
          SET type='3',invoice_no=".$code['number'].",purchase_code_number='".$attr['purchase_code_number']."',purchase_code_id='".$attr['purchase_code_id']."' */

        $response['ack'] = 1;
        $response['error'] = NULL;
        return $response;
    }

    // Order Invoicing
    //-------------------------------------------

    function order_invoice($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "UPDATE orders
				SET  bill_to_cust_id='$attr[bill_to_cust_id]',bill_to_cust_no='$attr[bill_to_cust_no]',bill_to_contact_id='$attr[bill_to_contact_id]',payable_bank='$attr[payable_bank]',payment_terms_code='$attr[payment_terms_code]',bill_to_name='$attr[bill_to_name]',
				due_date='" . $this->objGeneral->convert_date($attr[due_date]) . "'
				,bill_to_address='$attr[bill_to_address]',payment_discount='$attr[payment_discount]',bill_to_address2='$attr[bill_to_address2]',payment_method_id='$attr[payment_method_id]',payment_method_code='$attr[payment_method_code]',bill_to_city='$attr[bill_to_city]',price_including_vat='$attr[price_including_vat]',bill_to_county='$attr[bill_to_county]',bill_to_post_code='$attr[bill_to_post_code]',bill_to_contact='$attr[bill_to_contact]'
				WHERE id = ".$attr['id']." limit 1";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

// Order Shipping
//-------------------------------------------

    function order_shipping($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "UPDATE orders
				SET  alt_depo_id='$attr[alt_depo_id]',shipment_method_id='$attr[shipment_method_id]',shipment_method_code='$attr[shipment_method_code]',shipping_agent_code='$attr[shipping_agent_code]',ship_to_name='$attr[ship_to_name]',shipping_agent_id='$attr[shipping_agent_id]',ship_to_address='$attr[ship_to_address]',ship_to_address2='$attr[ship_to_address2]',freight_charges='$attr[freight_charges]',ship_to_city='$attr[ship_to_city]',container_no='$attr[container_no]',ship_to_county='$attr[ship_to_county]',ship_to_post_code='$attr[ship_to_post_code]',shipment_date='" . $this->objGeneral->convert_date($attr[shipment_date]) . "',ship_to_contact='$attr[ship_to_contact]',ship_delivery_time='$attr[ship_delivery_time]',book_in_tel='$attr[book_in_tel]',warehouse_booking_ref='$attr[warehouse_booking_ref]',customer_warehouse_ref='$attr[customer_warehouse_ref]',location_code='$attr[location_code]'
				WHERE id = ".$attr['id']." ";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

// Order products
//--------------------------------------

    function order_products($attr) {
        $this->objGeneral->mysql_clean($attr);

        $SqlQuote = "UPDATE orders
                        SET  
                            net_amount='$attr[net_amount]',
                            grand_total='$attr[grand_total]',
                            tax_rate='$attr[tax_rate]',
                            tax_amount='$attr[tax_amount]',
                            remaining_amount='" . $attr[grand_total] . "', 
                            setteled_amount='0'
                        WHERE id = ".$attr['id']."";

        $SqlQuote = "UPDATE order_details
				SET  qty='$attr[qty]',unit_price='$attr[unit_price]',vat='$attr[vat]',vat_id='$attr[vat_id]',vat_value='$attr[vat_value]',item_name='$attr[item_name]',item_id='$attr[item_id]',total_price='$attr[total_price]',unit_measure='$attr[unit_measure]',unit_measure_id='$attr[unit_measure_id]',unit_parent_id='$attr[unit_parent_id]',unit_qty='$attr[unit_qty]',cat_id='$attr[cat_id]',order_id='".$attr['id']."',conv_unit_price='$attr[conv_unit_price]'
				WHERE id = ".$attr['id']."";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($SqlQuote);

        $Sqldel = " DELETE FROM payment_allocation 
                    WHERE invoice_id = '" . $attr['id']. "' AND 
                        company_id =	'" . $this->arrUser['company_id'] . "' AND 
                        invoice_type =5 AND 
                        document_type = 1 AND 
                        module_type =1 AND 
                        transaction_type = 1 ";
        // echo $Sqldel ;exit;
        $RS = $this->objsetup->CSI($Sqldel);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function add_order_items($attr) {
        // $order_date = $this->objGeneral->convert_date($attr['offer_date']);
        /* if ($attr['currency_id'])
          $c_rate = $this->objGeneral->get_convert_price(0, $attr['currency_id'], $attr['offer_date'], $this->arrUser['company_id']);
          else
          $c_rate = '0'; */

        // $this->Conn->beginTrans();
        // $this->Conn->autoCommit = false;

        $net_amount = ($attr['net_amount'] != '') ? Round($attr['net_amount'],2) : '0';
        $grand_total = ($attr['grand_total'] != '') ? Round($attr['grand_total'],2) : '0';
        $tax_amount = ($attr['tax_amount'] != '') ? Round($attr['tax_amount'],2) : '0';
        $tax_rate = ($attr['tax_rate'] != '') ? $attr['tax_rate'] : '0';
        $net_amount_converted = ($attr['net_amount_converted'] != '') ? Round($attr['net_amount_converted'],2) : '0';
        $converted_currency_id = ($attr['converted_currency_id'] != '') ? $attr['converted_currency_id'] : '0';
        $converted_currency_code = ($attr['converted_currency_code'] != '') ? $attr['converted_currency_code'] : '';
        $grand_total_converted = ($attr['grand_total_converted'] != '') ? Round($attr['grand_total_converted'],2) : '0';
        $tax_amount_converted = ($attr['tax_amount_converted'] != '') ? Round($attr['tax_amount_converted'],2) : '0';
        $items_net_total = ($attr['items_net_total'] != '') ? Round($attr['items_net_total'],2) : '0';
        $items_net_discount = ($attr['items_net_discount'] != '') ? Round($attr['items_net_discount'],2) : '0';
        $items_net_vat = ($attr['items_net_vat'] != '') ? Round($attr['items_net_vat'],2) : '0';
        $convert_from_forcast = ($attr['convert_from_forcast'] != '') ? $attr['convert_from_forcast'] : '0';
        $currency_rate = ($attr['currency_rate'] != '' && $attr['currency_rate'] > 0) ? $attr['currency_rate'] : '1';

        // $Sql = "UPDATE orders SET	
        //             net_amount='$net_amount', 
        //             grand_total='$grand_total', 
        //             tax_amount='$tax_amount',
        //             tax_rate='$tax_rate',
        //             note='".addslashes($attr[note])."' ,	
        //             net_amount_converted='$net_amount_converted', 
        //             converted_currency_id='$converted_currency_id',
        //             converted_currency_code='$converted_currency_code',
        //             grand_total_converted='$grand_total_converted',
        //             tax_amount_converted='$tax_amount_converted',
        //             items_net_total='$items_net_total',
        //             items_net_discount='$items_net_discount',
        //             items_net_vat='$items_net_vat',
        //             currency_rate =$currency_rate,
        //             offer_date='" . $this->objGeneral->convert_date($attr['offer_date']) . "',
        //             convert_from_forcast='$convert_from_forcast' WHERE id = ".$attr['order_id']." AND type <=1 AND company_id='" . $this->arrUser['company_id'] . "' limit 1";

        // echo    $Sql;exit;
        // $RS = $this->objsetup->CSI($Sql); // called update global data from js after adding items

        // $Sql = "Delete From order_details  WHERE order_id = ".$attr['order_id']."";
        // $RS = $this->objsetup->CSI($Sql);

        $chk = false;
        // $order_date = strtotime(date('Y-m-d'));
        // print_r($attr['items']);exit;
        foreach ($attr['items'] as $index => $item) {

            $unit_qty = ($item->units->quantity != '') ? $item->units->quantity : '0';
            // $standard_price             = ($item->standard_price != '' && floatval($item->standard_price) > 0) ? $item->standard_price : "NULL";
            $standard_price = ($item->standard_price != '' && is_numeric($item->standard_price)) ? Round($item->standard_price,5) : "NULL";

            $qty = ($item->qty != '' && floatval($item->qty) > 0) ? $item->qty : "NULL";
            // $total_price = (isset($item->total_price)) ? Round($item->total_price,2) : Round((floatval($qty) * floatval($standard_price)),2);
            $total_price = ($item->total_price != '') ? $item->total_price : '0';

            $default_unit_measure_id = (isset($item->default_units->id) && $item->default_units->id != '') ? $item->default_units->id : '0';
            $default_unit_qty = (isset($item->default_units->quantity) && $item->default_units->quantity != '') ? $item->default_units->quantity : '0';
            $default_unit_name = (isset($item->default_units->name) && $item->default_units->name != '') ? $item->default_units->name : '0';
            $unit_measure_id = (isset($item->units->id) && $item->units->id != '') ? $item->units->id : '0';

            $cat_id = ($item->category_id != '') ? $item->category_id : '0';
            $brand_id = ($item->brand_id != '') ? $item->brand_id : '0';
            $conv_unit_price = (isset($item->conv_unit_price) && $item->conv_unit_price != '') ? Round($item->conv_unit_price,2) : '0';
            $sale_unit_id = ($item->sale_unit_id != '') ? $item->sale_unit_id : '0';
            $purchase_unit_id = ($item->purchase_unit_id != '') ? $item->purchase_unit_id : '0';
            $warehouse_id = ($item->warehouses != '') ? $item->warehouses : '0';
            $primary_unit_of_measure_id = ($item->primary_unit_of_measure_id != '') ? $item->primary_unit_of_measure_id : '0';
            $stock_check = ($item->stock_check != '') ? $item->stock_check : '0';
            $rawMaterialProduct = ($item->rawMaterialProduct != '') ? $item->rawMaterialProduct : '0';
            $raw_material_gl_id = ($item->raw_material_gl_id != '') ? $item->raw_material_gl_id : '0';
            
            $discount_type = ($item->discount_type_id->id != '') ? $item->discount_type_id->id : '0';
            $discount = ($item->discount != '') ? Round($item->discount,2) : '0';
            $discount_price = ($item->discount_price != '') ? Round($item->discount_price,2) : '0';
            $vat_id = ($item->vat_id != '') ? $item->vat_id : '0';
            $vat_name = ($item->vats->name != '') ? $item->vats->name : '';
            $vat_value = ($item->vats->vat_value != '') ? Round($item->vats->vat_value,2) : '0';
            $vat_price = ($item->vat_price != '') ? Round($item->vat_price,2) : '0';
            $ref_prod_id = ($item->ref_prod_id != '') ? $item->ref_prod_id : '0';
            $ref_id = ($item->ref_id != '') ? $item->ref_id : '0';
            
            $promotion_id = ($item->promotion_id != '') ? $item->promotion_id : '0';
            $costing_method_id = ($item->costing_method_id != '') ? $item->costing_method_id : '0';
            $standard_purchase_cost = ($item->standard_purchase_cost != '') ? Round($item->standard_purchase_cost,2) : '0';
            $item_converted_price = Round(((int)$standard_price / (int)$currency_rate), 2);
            $item_cost = ($item->item_cost != '') ? Round($item->item_cost,2) : '0';
            $item_org_cost = ($item->item_org_cost != '') ? Round($item->item_org_cost,2) : '0';
            $item_additional_cost = ($item->item_additional_cost != '') ? Round($item->item_additional_cost,2) : '0';
            $item_org_additional_cost = ($item->item_org_additional_cost != '') ? Round($item->item_org_additional_cost,2) : '0';
            $item_frieght_charges = ($item->item_frieght_charges != '') ? Round($item->item_frieght_charges,2) : '0';
            $item_finance_charges = ($item->item_finance_charges != '') ? Round($item->item_finance_charges,2) : '0';
            $item_insurance_charges = ($item->item_insurance_charges != '') ? Round($item->item_insurance_charges,2) : '0';
            
            
            $item_rebate = ($item->rebate != '') ? $item->rebate : '0';
            $ec_goods = ($item->ec_goods != '') ? $item->ec_goods->id : '0';
            $ec_description = ($item->ec_description != '') ? $item->ec_description->id : '0';
            
            
            $description = addslashes($item->description);
            $product_code = addslashes($item->product_code);
            $warehouse_name = addslashes($item->warehouse_name);
            $unit_name = ($item->units->name != "") ? $item->units->name : "";
            if (isset($item->update_id) && $item->update_id != '') {

                $rawMaterialProduct = 0;
                $SqlQuote = "UPDATE order_details SET  
                            qty=$qty,
                            unit_price=$standard_price,
                            item_converted_price=$item_converted_price,
                            vat_id='" . $vat_id . "',
                            vat_name='" . $vat_name . "',
                            vat_price=" . $vat_price . ",
                            vat_value='" . $vat_value . "',
                            item_name='" . addslashes($item->description) . "',
                            product_code='" . addslashes($item->product_code) . "',
                            item_id='$item->id',
                            costing_method_id='$costing_method_id',
                            standard_purchase_cost='$standard_purchase_cost',
                            total_price='$total_price',
                            unit_measure='" . $item->units->name . "',
                            unit_measure_id='" . $unit_measure_id . "',
                            unit_parent_id='0',
                            unit_qty='" . $unit_qty . "',
                            default_unit_measure=" . $default_unit_name . ",
                            default_unit_measure_id='" . $default_unit_measure_id . "',
                            default_unit_qty='" . $default_unit_qty . "',
                            cat_id='$cat_id',
                            category_id='$cat_id',
                            brand_id='$brand_id',
                            order_id='".$attr['order_id']."',
                            conv_unit_price='$conv_unit_price',
                            type='$item->item_type' ,
                            discount_type='" . $discount_type . "',
                            discount='$discount',
                            discount_price='$discount_price',
                            sale_unit_id='$sale_unit_id',
                            purchase_unit_id='$purchase_unit_id',
                            warehouse_id='" . $warehouse_id . "',
                            warehouse='" . addslashes($item->warehouse_name) . "',
                            ref_prod_id = $ref_prod_id,
                            ref_id = $ref_id,
                            promotion_id = $promotion_id,
	                        item_cost = $item_cost,
                            item_org_cost = $item_org_cost,
                            item_additional_cost = $item_additional_cost,
                            item_org_additional_cost = $item_org_additional_cost,
                            item_frieght_charges = $item_frieght_charges,
                            item_finance_charges = $item_finance_charges,
                            item_insurance_charges = $item_insurance_charges,
                            item_rebate = $item_rebate,
                            ec_goods = $ec_goods,
                            ec_description = $ec_description,
	                        primary_unit_of_measure_id='" . $primary_unit_of_measure_id . "' ,
                            primary_unit_of_measure_name='" . $item->primary_unit_of_measure_name . "' , 
                            stock_check='$stock_check', 
                            rawMaterialProduct = $rawMaterialProduct,
                            raw_material_gl_id = $raw_material_gl_id,
                            raw_material_gl_code = '".$item->raw_material_gl_code."',
                            raw_material_gl_name = '".$item->raw_material_gl_name."'
                            WHERE id = '" . $item->update_id . "'  AND company_id=" . $this->arrUser['company_id'] . " AND (SELECT IFNULL(o.type,0) FROM orders AS o WHERE o.id=".$attr['order_id']." AND company_id=" . $this->arrUser['company_id'] . "  LIMIT 1) <=1 LIMIT 1";
                // echo $SqlQuote;exit;
                $RS = $this->objsetup->CSI($SqlQuote);
                $id = $item->update_id;
            } else {
                if ($item->item_type == 1) {
                    if ($ref_prod_id == $attr['items'][$index - 1]->id) {
                        $ref_prod_id = $id; // previously inserted ID
                    }
                }
                $SqlQuote = "INSERT INTO order_details
                            (qty,
                            unit_price,
                            item_converted_price,
                            vat_id,
                            vat_name,
                            vat_value,
                            vat_price,
                            item_name,
                            product_code,
                            item_id,
                            costing_method_id,
                            standard_purchase_cost,
                            total_price,
                            unit_measure,
                            unit_measure_id,
                            unit_parent_id,
                            unit_qty,
                            default_unit_measure,
                            default_unit_measure_id,
                            default_unit_qty,
                            cat_id,
                            category_id,
                            brand_id,
                            order_id,
                            conv_unit_price,
                            type,
                            discount_type,
                            discount,
                            discount_price,
                            sale_unit_id,
                            purchase_unit_id,
                            warehouse_id,
                            warehouse,
	                        ref_prod_id,
                            ref_id,
                            promotion_id,
                            item_cost,
                            item_org_cost,
                            item_additional_cost,                            
                            item_org_additional_cost,                            
                            item_frieght_charges,
                            item_finance_charges,
                            item_insurance_charges,
                            item_rebate,
                            ec_goods,
                            ec_description,
                            company_id,
                            user_id,
	                        primary_unit_of_measure_id,
                            primary_unit_of_measure_name,
                            stock_check,
                            rawMaterialProduct,
                            raw_material_gl_id,
                            raw_material_gl_code,
                            raw_material_gl_name)
                        SELECT
                            $qty,
                            $standard_price,
                            $item_converted_price,
                            \"$vat_id\",
                            \"$vat_name\",
                            \"$vat_value\",
                            \"$vat_price\",
                            \"$description\",
                            \"$product_code\",
                            $item->id,
                            $costing_method_id,
                            $standard_purchase_cost,
                            $total_price,
                            \"$unit_name\",
                            \"$unit_measure_id\",
                            0,
                            \"$unit_qty\",
                            \"$default_unit_name\",
                            \"$default_unit_measure_id\",
                            \"$default_unit_qty\",
                            $cat_id,
                            $cat_id,
                            $brand_id,
                            ".$attr['order_id'].",
                            $conv_unit_price,
                            $item->item_type ,
                            \"$discount_type\",
                            $discount,
                            $discount_price,
                            $sale_unit_id,
                            $purchase_unit_id,
                            \"$warehouse_id\",
                            \"$warehouse_name\",
                             $ref_prod_id,
                             $ref_id,
                             $promotion_id,
                             $item_cost,
                             $item_org_cost,
                             $item_additional_cost,                            
                             $item_org_additional_cost,                            
                             $item_frieght_charges,
                             $item_finance_charges,
                             $item_insurance_charges,
                             $item_rebate,
                             $ec_goods,
                             $ec_description,
                            ".$this->arrUser['company_id'].",
                            ".$this->arrUser['id'].",
                            \"$primary_unit_of_measure_id\" ,
                            \"$item->primary_unit_of_measure_name\",
                            $stock_check,
                            $rawMaterialProduct,
                            $raw_material_gl_id,
                            \"$item->raw_material_gl_code\",
                            \"$item->raw_material_gl_name\"
                        FROM widgetone
                        WHERE (SELECT IFNULL(o.type,0) FROM orders AS o WHERE o.id=".$attr['order_id']." AND company_id=" . $this->arrUser['company_id'] . "  LIMIT 1) <=1 LIMIT 1";
                // echo $SqlQuote;exit;
                $RS = $this->objsetup->CSI($SqlQuote);

                $id = $this->Conn->Insert_ID();
                // if ($item->item_type == 0 && $stock_check == '0' && empty($attr[convert_from_forcast]))
                //     self::add_stock_allocated_external($attr);
            }
            // echo $SqlQuote."---";    
            /*
              $RS = $this->objsetup->CSI($SqlQuote);
              if ($this->Conn->Affected_Rows() > 0)
              $chk = true;
              else
              $chk = false; */
        }

        if ($id) {
            $this->Conn->commitTrans();
            $this->Conn->autoCommit = true;
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function add_single_order_item($attr) {
        $item = $attr['item'];
        // print_r($item);exit;
        $unit_qty = ($item->units->quantity != '') ? $item->units->quantity : '0';
        // $standard_price             = ($item->standard_price != '' && intval($item->standard_price) > 0) ? $item->standard_price : "NULL";
        // $standard_price = ($item->standard_price != '' && is_numeric($item->standard_price)) ? $item->standard_price : "NULL";
        $standard_price = ($item->standard_price != '' && is_numeric($item->standard_price)) ? Round($item->standard_price,5) : "NULL";
        $qty = ($item->qty != '' && intval($item->qty) > 0) ? $item->qty : "NULL";

        $total_price = ($item->total_price != '') ? $item->total_price : '0';

        $default_unit_measure_id = (isset($item->default_units->id) && $item->default_units->id != '') ? $item->default_units->id : '0';
        $unit_measure_id = (isset($item->units->id) && $item->units->id != '') ? $item->units->id : '0';
        $default_unit_qty = (isset($item->default_units->quantity) && $item->default_units->quantity != '') ? $item->default_units->quantity : '0';
        $default_unit_name = (isset($item->default_units->name) && $item->default_units->name != '') ? $item->default_units->name : '0';

        $cat_id = ($item->category_id != '') ? $item->category_id : '0';
        $brand_id = ($item->brand_id != '') ? $item->brand_id : '0';
            
        $conv_unit_price = (isset($item->conv_unit_price) && $item->conv_unit_price != '') ? $item->conv_unit_price : '0';
        $sale_unit_id = ($item->sale_unit_id != '') ? $item->sale_unit_id : '0';
        $purchase_unit_id = ($item->purchase_unit_id != '') ? $item->purchase_unit_id : '0';
        $warehouse_id = ($item->warehouses != '') ? $item->warehouses : '0';
        $primary_unit_of_measure_id = ($item->primary_unit_of_measure_id != '') ? $item->primary_unit_of_measure_id : '0';
        $stock_check = ($item->stock_check != '') ? $item->stock_check : '0';
        $rawMaterialProduct = ($item->rawMaterialProduct != '') ? $item->rawMaterialProduct : '0';
        $raw_material_gl_id = ($item->raw_material_gl_id != '') ? $item->raw_material_gl_id : '0';
        
        $discount_type = ($item->discount_type_id->id != '') ? $item->discount_type_id->id : '0';
        $discount = ($item->discount != '') ? $item->discount : '0';
        $discount_price = ($item->discount_price != '') ? $item->discount_price : '0';
        
        $vat_id = ($item->vat_id != '') ? $item->vat_id : '0';
        $vat_name = ($item->vats->name != '') ? $item->vats->name : '';
        $vat_value = ($item->vats->vat_value != '') ? $item->vats->vat_value : '0';
        $costing_method_id = ($item->costing_method_id != '') ? $item->costing_method_id : '0';
        $standard_purchase_cost = ($item->standard_purchase_cost != '') ? $item->standard_purchase_cost : '0';
        $vat_price = ($item->vat_price != '') ? $item->vat_price : '0';

        $currency_rate = ($item->currency_rate != '' && $item->currency_rate > 0) ? $item->currency_rate : 1;
        $item_converted_price = Round(($standard_price / $currency_rate), 2);
        $item_cost = ($item->item_cost != '') ? $item->item_cost : '0';
        $item_org_cost = ($item->item_org_cost != '') ? $item->item_org_cost : '0';
        $item_rebate = ($item->item_rebate != '') ? $item->item_rebate : '0';
        $ec_goods = ($item->ec_goods != '') ? $item->ec_goods->id : '0';
        $ec_description = ($item->ec_description != '') ? $item->ec_description->id : '0';
            
        
        $description = addslashes($item->description);
        $product_code = addslashes($item->product_code);
        $warehouse_name = addslashes($item->warehouse_name);
        $unit_name = ($item->units->name != "") ? $item->units->name : "";

        if (isset($item->update_id) && $item->update_id != '') {

            $rawMaterialProduct = 0;

            $SqlQuote = "UPDATE order_details SET  
                            qty=$qty,
                            unit_price=$standard_price,
                            vat_id='" . $vat_id . "',
                            vat_name='" . $vat_name . "',
                            vat_value='" . $vat_value . "',
                            vat_price='" . $vat_price . "',
                            item_name='" . addslashes($item->description) . "',
                            product_code='" . addslashes($item->product_code) . "',
                            item_id='$item->id',
                            costing_method_id='$costing_method_id',
                            standard_purchase_cost='$standard_purchase_cost',
                            total_price='$total_price',
                            unit_measure='" . $item->units->name . "',
                            unit_measure_id='" . $unit_measure_id . "',
                            unit_parent_id='0',
                            unit_qty='" . $unit_qty . "',
                            default_unit_measure=" . $default_unit_name . ",
                            default_unit_measure_id='" . $default_unit_measure_id . "',
                            default_unit_qty='" . $default_unit_qty . "',
                            cat_id='$cat_id',
                            category_id='$cat_id',
                            brand_id='$brand_id',
                            order_id='$item->order_id',
                            conv_unit_price='$conv_unit_price',
                            type='$item->item_type' ,
                            discount_type='" . $discount_type . "',
                            discount='$discount',
                            discount_price='$discount_price',                            
                            sale_unit_id='$sale_unit_id',
                            purchase_unit_id='$purchase_unit_id',
                            item_cost = $item_cost,
                            item_org_cost = $item_org_cost,
                            item_rebate = $item_rebate,
                            warehouse_id='" . $warehouse_id . "',
                            ec_goods = $ec_goods,
                            ec_description = $ec_description,
                            warehouse='" . addslashes($item->warehouse_name) . "'
	                        ,primary_unit_of_measure_id='" . $primary_unit_of_measure_id . "' ,
                            primary_unit_of_measure_name='" . $item->primary_unit_of_measure_name . "' , 
                            stock_check='$stock_check', 
                            rawMaterialProduct = $rawMaterialProduct,
                            raw_material_gl_id = $raw_material_gl_id,
                            raw_material_gl_code = '".$item->raw_material_gl_code."',
                            raw_material_gl_name = '".$item->raw_material_gl_name."'
                            WHERE id = '" . $item->update_id . "'  AND company_id=" . $this->arrUser['company_id'] . " AND (SELECT IFNULL(o.type,0) FROM orders AS o WHERE o.id=$item->order_id AND company_id=" . $this->arrUser['company_id'] . ") <=1 LIMIT 1";
            // echo $SqlQuote;exit;
            $RS = $this->objsetup->CSI($SqlQuote);
            $id = $item->update_id;
            $updated = $id;//$this->Conn->Affected_Rows();
        } else {
            $SqlQuote = "INSERT INTO order_details
                            (qty,
                            unit_price,
                            vat_id,
                            vat_name,
                            vat_value,
                            vat_price,
                            item_name,
                            product_code,
                            item_id,
                            costing_method_id,
                            standard_purchase_cost,
                            total_price,
                            unit_measure,
                            unit_measure_id,
                            unit_parent_id,
                            unit_qty,
                            default_unit_measure,
                            default_unit_measure_id,
                            default_unit_qty,
                            cat_id,
                            category_id,
                            brand_id,
                            order_id,
                            conv_unit_price,
                            type,
                            discount_type,
                            discount,
                            discount_price,                            
                            sale_unit_id,
                            purchase_unit_id,
                            item_cost,
                            item_org_cost,
                            item_rebate,
                            ec_goods,
                            ec_description,
                            company_id,
                            user_id,
	                        warehouse_id,
                            warehouse'
	                        ,primary_unit_of_measure_id,
                            primary_unit_of_measure_name,
                            stock_check,
                            rawMaterialProduct,
                            raw_material_gl_id,
                            raw_material_gl_code,
                            raw_material_gl_name)
                    SELECT 
                            $qty,
                            $standard_price,
                            \"$vat_id\",
                            \"$vat_name\",
                            \"$vat_value\",
                            \"$vat_price\",
                            \"$description\",
                            \"$product_code\",
                            $item->id,
                            $costing_method_id,
                            $standard_purchase_cost,
                            $total_price',
                            \"$unit_name\",
                            \"$unit_measure_id\",
                            0,
                            \"$unit_qty\",
                            " . $default_unit_name . ",
                            \"$default_unit_measure_id\",
                            \"$default_unit_qty\",
                            $cat_id,
                            $cat_id,
                            $brand_id,
                            $item->order_id,
                            $conv_unit_price,
                            $item->item_type ,
                            \"$discount_type\",
                            $discount,
                            $discount_price,                            
                            $sale_unit_id,
                            $purchase_unit_id,
                             $item_cost,
                             $item_org_cost,
                             $item_rebate,
                             $ec_goods,
                             $ec_description,
                            " . $this->arrUser['company_id'] . ",
                            " . $this->arrUser['id'] . ",
                            \"$warehouse_id\",
                            \"$warehouse_name\",
                            \"$primary_unit_of_measure_id\" ,
                            \"$item->primary_unit_of_measure_name\",
                            $stock_check,
                            $rawMaterialProduct,
                            $raw_material_gl_id,
                            \"$item->raw_material_gl_code\"
                            \"$item->raw_material_gl_name\"
                        FROM widgetone
                        WHERE (SELECT IFNULL(o.type,0) FROM orders AS o WHERE o.id=".$attr['order_id']." AND company_id=" . $this->arrUser['company_id'] . " LIMIT 1) <=1 LIMIT 1";
            // echo $SqlQuote;exit;
            $RS = $this->objsetup->CSI($SqlQuote);

            $id = $this->Conn->Insert_ID();
            $updated = $id;
            /* if ($item->item_type == 0 && $stock_check == '0' && empty($attr[convert_from_forcast]))
                self::add_stock_allocated_external($attr); */
        }
        if ($updated > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['id'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function add_single_return_order_item($attr) {

        $item = $attr['item'];
        // print_r($item);exit;
        $unit_qty = ($item->units->quantity != '') ? $item->units->quantity : '0';
        // $standard_price             = ($item->standard_price != '' && intval($item->standard_price) > 0) ? $item->standard_price : "NULL";
        // $standard_price = ($item->standard_price != '' && is_numeric($item->standard_price)) ? $item->standard_price : "NULL";
        $standard_price = ($item->standard_price != '' && is_numeric($item->standard_price)) ? Round($item->standard_price,5) : "NULL";

        $qty = ($item->qty != '' && intval($item->qty) > 0) ? $item->qty : "NULL";

        $total_price = ($item->total_price != '') ? $item->total_price : '0';

        $default_unit_measure_id = (isset($item->default_units->id) && $item->default_units->id != '') ? $item->default_units->id : '0';
        $unit_measure_id = (isset($item->units->id) && $item->units->id != '') ? $item->units->id : '0';
        $default_unit_qty = (isset($item->default_units->quantity) && $item->default_units->quantity != '') ? $item->default_units->quantity : '0';
        $default_unit_name = (isset($item->default_units->name) && $item->default_units->name != '') ? $item->default_units->name : '0';

        $cat_id = ($item->category_id != '') ? $item->category_id : '0';
        $brand_id = ($item->brand_id != '') ? $item->brand_id : '0';
        $conv_unit_price = (isset($item->conv_unit_price) && $item->conv_unit_price != '') ? $item->conv_unit_price : '0';
        $sale_unit_id = ($item->sale_unit_id != '') ? $item->sale_unit_id : '0';
        $purchase_unit_id = ($item->purchase_unit_id != '') ? $item->purchase_unit_id : '0';
        $warehouse_id = ($item->warehouses != '') ? $item->warehouses : '0';
        $primary_unit_of_measure_id = ($item->primary_unit_of_measure_id != '') ? $item->primary_unit_of_measure_id : '0';
        $stock_check = ($item->stock_check != '') ? $item->stock_check : '0';
        $rawMaterialProduct = ($item->rawMaterialProduct != '') ? $item->rawMaterialProduct : '0';
        $raw_material_gl_id = ($item->raw_material_gl_id != '') ? $item->raw_material_gl_id : '0';
        
        $discount_type = ($item->discount_type_id->id != '') ? $item->discount_type_id->id : '0';
        $discount = ($item->discount != '') ? $item->discount : '0';
        $discount_price = ($item->discount_price != '') ? $item->discount_price : '0';
        $vat_id = ($item->vat_id != '') ? $item->vat_id : '0';
        $vat_name = ($item->vats->name != '') ? $item->vats->name : '';
        $vat_value = ($item->vats->vat_value != '') ? $item->vats->vat_value : '0';
        $costing_method_id = ($item->costing_method_id != '') ? $item->costing_method_id : '0';
        $standard_purchase_cost = ($item->standard_purchase_cost != '') ? $item->standard_purchase_cost : '0';
        $vat_price = ($item->vat_price != '') ? $item->vat_price : '0';

        $ec_goods = ($item->ec_goods != '') ? $item->ec_goods->id : '0';
        $ec_description = ($item->ec_description != '') ? $item->ec_description->id : '0';
        
        
        $description = addslashes($item->description);
        $product_code = addslashes($item->product_code);
        $warehouse_name = addslashes($item->warehouse_name);
        $unit_name = ($item->units->name != "") ? $item->units->name : "";


        if (isset($item->update_id) && $item->update_id != '') {

            $rawMaterialProduct = 0;
            
            $SqlQuote = "UPDATE return_order_details SET  
                            qty=$qty,
                            unit_price=$standard_price,
                            vat_id='" . $vat_id . "',
                            vat_name='" . $vat_name . "',
                            vat_price='" . $vat_price . "',
                            vat_value='" . $vat_value . "',
                            item_name='" . addslashes($item->description) . "',
                            product_code='" . addslashes($item->product_code) . "',
                            item_id='$item->id',
                            costing_method_id='$costing_method_id',
                            standard_purchase_cost='$standard_purchase_cost',
                            total_price='$total_price',
                            unit_measure='" . $item->units->name . "',
                            unit_measure_id='" . $unit_measure_id . "',
                            unit_parent_id='0',
                            unit_qty='" . $unit_qty . "',
                            default_unit_measure=" . $default_unit_name . ",
                            default_unit_measure_id='" . $default_unit_measure_id . "',
                            default_unit_qty='" . $default_unit_qty . "',
                            cat_id='$cat_id',
                            category_id='$cat_id',
                            brand_id='$brand_id',
                            order_id='$item->order_id',
                            conv_unit_price='$conv_unit_price',
                            type='$item->item_type' ,
                            discount_type='" . $discount_type . "',
                            discount='$discount',
                            discount_price='$discount_price',                            
                            sale_unit_id='$sale_unit_id',
                            purchase_unit_id='$purchase_unit_id',
                            warehouse_id='" . $warehouse_id . "',
                            ec_goods = $ec_goods,
                            ec_description = $ec_description,
                            warehouse='" . addslashes($item->warehouse_name) . "'
	                        ,primary_unit_of_measure_id='" . $primary_unit_of_measure_id . "' ,
                            primary_unit_of_measure_name='" . $item->primary_unit_of_measure_name . "' , 
                            stock_check='$stock_check', 
                            rawMaterialProduct = $rawMaterialProduct,
                            raw_material_gl_id = $raw_material_gl_id,
                            raw_material_gl_code = '".$item->raw_material_gl_code."',
                            raw_material_gl_name = '".$item->raw_material_gl_name."'
                            WHERE id = '" . $item->update_id . "' AND company_id=" . $this->arrUser['company_id'] . " AND (SELECT IFNULL(o.type,0) FROM return_orders AS o WHERE o.id=$item->order_id AND company_id=" . $this->arrUser['company_id'] . "  LIMIT 1) <= 1 LIMIT 1";
            // echo $SqlQuote;exit;
            $RS = $this->objsetup->CSI($SqlQuote);
            $id = $item->update_id;
            $updated = $id;//$this->Conn->Affected_Rows();
        } else {
            $SqlQuote = "INSERT INTO return_order_details
                            (qty,
                            unit_price,
                            vat_id,
                            vat_name,
                            vat_price,
                            vat_value,
                            item_name,
                            product_code,
                            item_id,
                            costing_method_id,
                            standard_purchase_cost,
                            total_price,
                            unit_measure,
                            unit_measure_id,
                            unit_parent_id,
                            unit_qty,
                            default_unit_measure,
                            default_unit_measure_id,
                            default_unit_qty,
                            cat_id,
                            category_id,
                            brand_id,
                            order_id,
                            conv_unit_price,
                            type,
                            discount_type,
                            discount,
                            discount_price,                            
                            sale_unit_id,
                            purchase_unit_id,
                            warehouse_id,
                            ec_goods,
                            ec_description,
                            company_id,
                            user_id,
                            warehouse,
                            primary_unit_of_measure_id,
                            primary_unit_of_measure_name, 
                            stock_check,
                            rawMaterialProduct,
                            raw_material_gl_id,
                            raw_material_gl_code,
                            raw_material_gl_name)
                    SELECT
                            $qty,
                            $standard_price,
                            \"$vat_id\",
                            \"$vat_name\",
                            \"$vat_price\",
                            \"$vat_value\",
                            \"$description\",
                            \"$product_code\",
                            $item->id,
                            $costing_method_id,
                            $standard_purchase_cost,
                            $total_price,
                            \" $unit_name\",
                            \"$unit_measure_id\",
                            0,
                            \"$unit_qty\",
                            " . $default_unit_name . ",
                            \"$default_unit_measure_id\",
                            \"$default_unit_qty\",
                            $cat_id,
                            $cat_id,
                            $brand_id,
                            $item->order_id,
                            $conv_unit_price,
                            $item->item_type ,
                            \"$discount_type\",
                            $discount,
                            $discount_price,                            
                            $sale_unit_id,
                            $purchase_unit_id,
                            \"$warehouse_id\",
                            $ec_goods,
                            $ec_description,
                            " . $this->arrUser['company_id'] . ",
                            " . $this->arrUser['id'] . ",
                            \"$warehouse_name\"
                            \"$primary_unit_of_measure_id\" ,
                            \"$item->primary_unit_of_measure_name\", 
                            $stock_check,
                            $rawMaterialProduct,
                            $raw_material_gl_id,
                            \"$item->raw_material_gl_code\",
                            \"$item->raw_material_gl_name\"
                        FROM widgetone
                        WHERE
                            (SELECT IFNULL(o.type,0) FROM return_orders AS o WHERE o.id=$item->order_id AND company_id=" . $this->arrUser['company_id'] . ") <= 1 LIMIT 1";
            // echo $SqlQuote;exit;
            $RS = $this->objsetup->CSI($SqlQuote);

            $id = $this->Conn->Insert_ID();
            $updated = $id;
            // if ($item->item_type == 0 && $stock_check == '0' && empty($attr[convert_from_forcast]))
            //     self::add_stock_allocated_external($attr);
        }
        if ($updated > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['id'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function get_order_items($attr) {

        $volume = 0;
        $volume_unit = '';
        $weight = 0;
        $weightunit = '';
        $weight_permission = 0;  
        $volume_permission = 0;  

        $Sql4 = "SELECT  SUM(uomsetup.volume * inv.qty) AS volume,
                    SUM((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                        ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                        END)* inv.qty) AS weight,
                    'cm3' AS volume_unit,
                    'kg' AS weightunit,
                    (SELECT weight_permission FROM orders 
                     LEFT JOIN items_weight_setup AS w ON ((w.title = 'Sales Quote' AND orders.type=0) OR 
							   (w.title = 'Sales Order' AND orders.type=1) OR 
							   (w.title = 'Sales Invoice' AND orders.type=2) ) AND 
				orders.company_id = w.company_id WHERE orders.id= '".$attr['order_id']."') AS weight_permission,
                    (SELECT volume_permission FROM orders 
                     LEFT JOIN items_weight_setup AS w ON ((w.title = 'Sales Quote' AND orders.type=0) OR 
							   (w.title = 'Sales Order' AND orders.type=1) OR 
							   (w.title = 'Sales Invoice' AND orders.type=2) ) AND 
				orders.company_id = w.company_id WHERE orders.id= '".$attr['order_id']."') AS volume_permission
                FROM order_details AS inv
                LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id AND inv.type=0
                WHERE inv.order_id='".$attr['order_id']."' ";
        // echo $Sql4."<hr>"; exit;

        $rs4 = $this->objsetup->CSI($Sql4);

        if ($rs4->RecordCount() > 0){
            $volume = $rs4->fields['volume'];
            $volume_unit = $rs4->fields['volume_unit'];
            $weight = $rs4->fields['weight'];
            $weightunit = $rs4->fields['weightunit'];
            $weight_permission = $rs4->fields['weight_permission'];
            $volume_permission = $rs4->fields['volume_permission'];
        }


        $this->objGeneral->mysql_clean($attr); //
        /* $Sql = "SELECT order_details.* 	, product.product_code as pcode	,	 
          (SELECT category.name FROM category WHERE  product.category_id=category.id) as category_name,
          (SELECT brand.brandname FROM brand  WHERE  brand.id=product.brand_id) as brand_name
          FROM order_details
          JOIN product ON (order_details.item_id = product.id)
          WHERE order_id='".$attr['order_id']."'
          "; */
        /* $Sql = "SELECT *
          FROM order_details es
          WHERE     es.order_id='".$attr['order_id']."'
          order by es.id"; */

        $Sql3 = "SELECT sell_to_cust_id,bill_to_posting_group_id 
                 From orders
                 WHERE id='".$attr['order_id']."'";
        //echo $Sql3."<hr>"; exit;

        $rs3 = $this->objsetup->CSI($Sql3);

        if ($rs3->RecordCount() > 0){
            $bill_to_posting_group_id = $rs3->fields['bill_to_posting_group_id'];
            $custId = $rs3->fields['sell_to_cust_id'];

            $temp_attr['posting_group_id'] = $bill_to_posting_group_id;
            $posting_group_arr = $this->objHr->get_vat_group_by_posting_group($temp_attr);
            $response['arr_vat_post_grp_sales'] = ($posting_group_arr['ack'] == 1) ? $posting_group_arr['response'] : array();
        }
 
        /*$Sql = "SELECT od.*, od.id AS `rank`, (SELECT dispatchNoteEmail FROM warehouse WHERE id=od.warehouse_id  AND generate='1') AS warehouse_email,
                    (CASE 
                        WHEN od.type = 0 THEN
                            (SELECT IFNULL(sum(wa.quantity), 0)
                                FROM
                                warehouse_allocation as wa
                                WHERE wa.product_id = od.item_id AND wa.order_id = od.order_id AND wa.sale_order_detail_id = od.id
                                AND wa.company_id=". $this->arrUser['company_id'] ." AND wa.warehouse_id = od.warehouse_id AND wa.type = 2 AND wa.sale_return_status = 0)
                        ELSE 0
                    END) AS item_stock_allocation,
                    (CASE 
                        WHEN od.type = 0 THEN
                            (SELECT IFNULL(wa.sale_status, 0)
                                FROM
                                warehouse_allocation as wa
                                WHERE wa.product_id = od.item_id AND wa.order_id = od.order_id AND wa.sale_order_detail_id = od.id
                                AND wa.company_id=". $this->arrUser['company_id'] ." AND wa.warehouse_id = od.warehouse_id AND wa.type = 2 AND wa.sale_return_status = 0
                            GROUP BY wa.sale_order_detail_id)
                    END) AS sale_status
                    FROM order_details AS od
                    WHERE od.order_id='".$attr['order_id']."' AND od.ref_prod_id = 0 AND od.company_id=" . $this->arrUser['company_id'] . "
                UNION ALL 


                SELECT o1.*, o2.id+0.1 AS `rank`, (SELECT dispatchNoteEmail FROM warehouse WHERE id=o2.warehouse_id  AND generate='1') AS warehouse_email,
                        '0' AS item_stock_allocation,
			            '0' AS sale_status
                        FROM order_details  AS o1, order_details AS o2
                        WHERE 
                        o1.ref_prod_id = o2.id AND 
                        o1.order_id = o2.order_id AND
                        o1.order_id='".$attr['order_id']."' AND o1.`ref_prod_id` > 0 AND o1.company_id=" . $this->arrUser['company_id'] . "
                        GROUP BY `rank`
                ORDER BY `rank`";*/
          
        $Sql = "SELECT od.*, od.id AS `rank`, uomsetup.volume,
                    (CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                          ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                          END) AS weight, 
                    (SELECT dispatchNoteEmail 
                     FROM warehouse 
                     WHERE id=od.warehouse_id AND generate='1') AS warehouse_email,
                    (CASE WHEN od.type = 0 THEN
                           (SELECT IFNULL(sum(wa.quantity), 0)
                            FROM warehouse_allocation as wa
                            WHERE wa.product_id = od.item_id AND wa.order_id = od.order_id AND wa.sale_order_detail_id = od.id AND 
                                  wa.company_id=". $this->arrUser['company_id'] ." AND 
                                  wa.warehouse_id = od.warehouse_id AND
                                  wa.type = 2 AND 
                                  wa.sale_return_status = 0)
                        ELSE 0
                        END) AS item_stock_allocation,
                    (CASE WHEN od.type = 0 THEN
                           (SELECT IFNULL(wa.sale_status, 0)
                            FROM warehouse_allocation as wa
                            WHERE wa.product_id = od.item_id AND wa.order_id = od.order_id AND wa.sale_order_detail_id = od.id AND 
                                  wa.company_id=". $this->arrUser['company_id'] ." AND 
                                  wa.warehouse_id = od.warehouse_id AND 
                                  wa.type = 2 AND 
                                  wa.sale_return_status = 0
                            GROUP BY wa.sale_order_detail_id)
                        END) AS sale_status
                    FROM order_details AS od
                    LEFT JOIN units_of_measure_setup AS uomsetup ON od.unit_measure_id = uomsetup.id AND od.type=0
                    WHERE od.order_id='".$attr['order_id']."' AND 
                          od.ref_prod_id = 0 AND 
                          od.company_id=" . $this->arrUser['company_id'] . "

                UNION ALL 

                SELECT o1.*, o2.id+0.1 AS `rank`, NULL AS volume , NULL AS weight, 
                        (SELECT dispatchNoteEmail FROM warehouse WHERE id=o2.warehouse_id  AND generate='1') AS warehouse_email,
                        '0' AS item_stock_allocation,
			            '0' AS sale_status
                FROM order_details  AS o1, order_details AS o2
                WHERE   o1.ref_prod_id = o2.id AND 
                        o1.order_id = o2.order_id AND
                        o1.order_id='".$attr['order_id']."' AND 
                        o1.`ref_prod_id` > 0 AND 
                        o1.company_id=" . $this->arrUser['company_id'] . "
                GROUP BY `rank`
                ORDER BY `rank`";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                 if ($Row['type'] == '1') {

                    if($this->arrUser['company_id'] == 133){

                        // PBI: Requirment In GL For Vat GL Calculation in Vat column instead of general calculation. 
                        $sqlvat = " SELECT gl1.id AS gl1ID,gl1.accountCode AS gl1AccountCode,
                                        gl2.id AS gl2ID,gl2.accountCode AS gl2AccountCode,
                                        gl3.id AS gl3ID,gl3.accountCode AS gl3AccountCode
                                    FROM financial_settings AS fs 
                                    LEFT JOIN gl_account AS gl1 ON gl1.id = fs.VatPosting_gl_account_sale
                                    LEFT JOIN gl_account AS gl2 ON gl2.id = fs.VatPosting_gl_account_purchase
                                    LEFT JOIN gl_account AS gl3 ON gl3.id = fs.VatPosting_gl_account_imp
                                    WHERE fs.company_id='" . $this->arrUser['company_id'] . "' AND 
                                        gl1.company_id='" . $this->arrUser['company_id'] . "' AND
                                        gl2.company_id='" . $this->arrUser['company_id'] . "' AND
                                        gl3.company_id='" . $this->arrUser['company_id'] . "'  ";

                    }
                    else{
                    
                        // PBI: Requirment In GL For Vat GL Calculation in Vat column instead of general calculation. 
                        $sqlvat = "SELECT startRangeCode,endRangeCode 
                            FROM gl_account 
                            WHERE id = (SELECT VatPosting_gl_account 
                                            FROM financial_settings
                                            WHERE company_id='" . $this->arrUser['company_id'] . "')";
                    }

                    $RSV = $this->objsetup->CSI($sqlvat);
                    
                    if ($RSV->RecordCount() > 0) {
                        while ($RowVat = $RSV->FetchRow()) {
                            foreach ($RowVat as $key => $value) {
                                if (is_numeric($key))
                                    unset($RowVat[$key]);
                            }
                        
                            if($this->arrUser['company_id'] == 133){
                                $Row['vatRange']['gl1AccountCode'] = $RowVat['gl1AccountCode'];
                                $Row['vatRange']['gl2AccountCode'] = $RowVat['gl2AccountCode'];
                                $Row['vatRange']['gl3AccountCode'] = $RowVat['gl3AccountCode'];
                            }
                            else{                                
                                //  print_r($RowVat);
                                $Row['vatRange']['startRangeCode'] = $RowVat['startRangeCode'];
                                $Row['vatRange']['endRangeCode'] = $RowVat['endRangeCode'];
                            }
                        }
                    }
                    
                }
               /*  if ($Row['type'] == '0') {
                    $temp_attr['item_id'] = $Row['item_id'];
                    $temp_attr['order_id'] = $Row['order_id'];
                    $temp_attr['wh_id'] = $Row['warehouse_id'];
                    $temp_attr['sale_order'] = 1;
                    $temp_attr['sale_order_detail_id'] = $Row['id'];

                    require_once(SERVER_PATH . "/classes/Saleswarehouse.php");
                    $ObjWH = new Saleswarehouse($this->arrUser);
                    $Row['item_stock_allocation'] = $ObjWH->get_order_stock_allocation($temp_attr);
                } */
                $response['response'][] = $Row;
            };
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        $response['volume'] = $volume;
        $response['volume_unit'] = $volume_unit;
        $response['weight'] = $weight;
        $response['weightunit'] = $weightunit;
        $response['weight_permission'] = $weight_permission;
        $response['volume_permission'] = $volume_permission;
        return $response;
    }

    function get_warehouse_remaining_stock($attr) {
        $this->objGeneral->mysql_clean($attr);

        $limit_clause = $where_clause = "";


        $response = array();
        $Sql = 'SELECT sum(sum(quantity) - IFNULL((SELECT sum(sa.quantity) 
                                                    FROM warehouse_allocation sa
                                                    WHERE sa.warehouse_id = ' . $attr['warehouse_id'] . ' AND sa.type = 2 and 
                                                        sa.product_id = ' . $attr['item_id'] . ' and warehouse_allocation.container_no = sa.container_no and 
                                                        sa.company_id=' . $this->arrUser['company_id'] . ' ),0)) as avail_qty 
        	FROM warehouse_allocation 
                
                WHERE type = 1 and warehouse_allocation.status = 1 and purchase_status in (2,3) and product_id = ' . $attr['item_id'] . ' and warehouse_id = ' . $attr['warehouse_id'] . ' and warehouse_allocation.company_id=' . $this->arrUser['company_id'] . ' group by warehouse_allocation.`container_no` LIMIT 1';

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            $response['avail_qty'] = $Row['avail_qty'];
            $response['ack'] = 1;
            $response['error'] = NULL;
            // 
        } else {
            $response['avail_qty'] = 0;
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function get_warehouse_avail_stock($attr) {
        $this->objGeneral->mysql_clean($attr);

        $limit_clause = $where_clause = "";
        $response = array();

        $Sql = 'SELECT sum(quantity) - IFNULL((SELECT sum(sa.quantity) FROM warehouse_allocation sa 
                                                WHERE sa.warehouse_id = ' . $attr['warehouse_id'] . ' AND sa.type = 2 and sa.product_id = ' . $attr['item_id'] . ' and sa.company_id=' . $this->arrUser['company_id'] . ' ),0) as avail_qty 
                FROM warehouse_allocation 
                WHERE type = 1 and warehouse_allocation.status = 1 and purchase_status in (2,3) and product_id = ' . $attr['item_id'] . ' and warehouse_id = ' . $attr['warehouse_id'] . ' and warehouse_allocation.company_id=' . $this->arrUser['company_id'] . ' ';

        //echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            $response['avail_qty'] = $Row['avail_qty'];
            $response['ack'] = 1;
            $response['error'] = NULL;
            //
        } else {
            $response['avail_qty'] = 0;
            $response['ack'] = 0;
            $response['error'] = 'No record found!';
        }
        return $response;
    }

    // RETURN ORDER
//--------------------------------------


    function convert_return_order_to_invoice($attr) {
        //print_r($attr);exit;

        $Sql = "UPDATE return_orders  SET   return_invoice_code = '" . $attr['return_invoice_code'] . "', type = 2  WHERE id = ".$attr['id']."  Limit 1";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);


        $response['ack'] = 1;
        $response['error'] = NULL;
        return $response;
    }

    function getReturnOrderSelCustlistings($attr) {
        global $objFilters;
        $response = array();

        if(isset($attr['selCust'])){

            $key = hash('sha256', SECRET_KEY);
            $iv = substr(hash('sha256', SECRET_IV), 0, 16);
            $outputInvName = openssl_decrypt(base64_decode($attr['selCust']), SECRET_METHOD, $key, 0, $iv);
            $fileName = explode(",",$outputInvName);

            $customerID = $fileName[1];

            $Sql = "SELECT c.id as cid,c.customer_code,c.name,c.company_id,
                            company.name as compName,company.url,company.address,
                            company.address_2,company.county,company.postcode,company.telephone,
                            company.fax,company.city,company.logo
                    FROM crm c
                    LEFT JOIN company on company.id = c.company_id
                    WHERE c.type IN (2,3) AND 
                        c.customer_code IS NOT NULL AND 
                        c.name !='' AND 
                        c.id=" . $customerID. "";
            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $row = array();
                    $attr['cust_id'] = $Row['cid'];
                    $this->arrUser['company_id'] = $Row['company_id'];

                    $attr['compName'] = $Row['compName'];
                    $attr['compURL'] = $Row['url'];
                    $attr['address'] = $Row['address'];
                    $attr['address_2'] = $Row['address_2'];
                    $attr['county'] = $Row['county'];
                    $attr['postcode'] = $Row['postcode'];
                    $attr['telephone'] = $Row['telephone'];
                    $attr['fax'] = $Row['fax'];
                    $attr['city'] = $Row['city'];
                    $attr['logo'] = $Row['logo'];
                }
                $response['customerID'] = $customerID;
            } else {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['response'][] = array();
                return $response;
            }
        }
        else{
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
            return $response;
        }

        // echo '<pre>';print_r($attr);exit;

        //$this->objGeneral->mysql_clean($attr);
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
        $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        
        $where_clause .= "AND tbl.type in (3,".$attr['type'].") ";
        $moduleNameForCount = "Credit Note";

        $response['compName'] = $attr['compName'];
        $response['compURL'] = $attr['compURL'];
        $response['address'] = $attr['address'];
        $response['address_2'] = $attr['address_2'];
        $response['county'] = $attr['county'];
        $response['postcode'] = $attr['postcode'];
        $response['telephone'] = $attr['telephone'];
        $response['fax'] = $attr['fax'];
        $response['city'] = $attr['city'];
        $response['logo'] = $attr['logo'];      

        
        // echo '<pre>';print_r($where_clause);exit;

        if (isset($attr['cust_id']))
            $where_clause .= "AND tbl.sell_to_cust_id  = '$attr[cust_id]' ";


        /* $Sql = "SELECT  d.id, d.return_order_code,d.return_invoice_code, d.order_return_date, d.sell_to_cust_name, d.sell_to_post_code, d.sell_to_city, d.sell_to_cust_no , d.cust_phone,
                        d.sell_to_address, d.sell_to_county, d.type, d.sell_to_contact_no, d.net_amount, d.grand_total,d.sale_person, d.posting_date, d.offer_date, d.requested_delivery_date,
                         currency.code as crcode
                FROM return_orders  d
                left  JOIN company on company.id=d.company_id
                left JOIN currency on currency.id=d.currency_id

                where  d.status=1 and ( d.company_id=" . $this->arrUser['company_id'] . " or  company.parent_id=" . $this->arrUser['company_id'] . ")
                " . $where_clause . "
                order by d.id DESC"; */


        //codemark 2
        $Sql = "select * from (SELECT d.*                                      
                            FROM sr_return_order_listing_sel d
                            WHERE  d.status = 1  AND d.company_id=" . $this->arrUser['company_id'] . ") as tbl
                WHERE 1 " . $where_clause . "  ";
        // echo $Sql;exit;

        $subQueryForBuckets = "SELECT  c.id
            from sr_crm_listing  c
            where  c.id IS NOT NULL ";
        $subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);
        //echo $subQueryForBuckets;exit;

        $Sql .= " AND (tbl.sell_to_cust_id IS NULL OR tbl.sell_to_cust_id = 0 OR tbl.sell_to_cust_id IN ($subQueryForBuckets) )";

        //echo $Sql;exit;

        if ($order_clause == "")
            $order_type = "Order by tbl.return_order_code DESC";
        else
            $order_type = $order_clause;

        $total_limit = pagination_limit;
        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;
        $RS = $this->objsetup->CSI($response['q']);
        // $RS = $this->objsetup->CSI($response['q'], "sale_return", sr_ViewPermission);
        $response['q'] = '';
        //$RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                $result = array();
                $result['id'] = $Row['id'];

                /* $result['code'] = $Row['return_order_code'];
                  $result['Name'] = $Row['sell_to_cust_name'];
                  $result['contact_person'] = $Row['sell_to_contact_no'];
                  $result['type'] = $Row['type']; */

                // $result['credit_note_date'] = $this->objGeneral->convert_unix_into_date($Row['order_return_date']);
                $result['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
                $result['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $result['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
                

                $result['return_order_code'] = $Row['return_order_code'];
                $result['return_invoice_code'] = $Row['return_invoice_code'];
                $result['current_stage'] = $Row['current_stage'];
                $result['sell_to_cust_no'] = $Row['sell_to_cust_no'];
                $result['sell_to_cust_name'] = $Row['sell_to_cust_name'];
                $result['sell_to_address'] = $Row['sell_to_address'];
                $result['sell_to_address2'] = $Row['sell_to_address2'];
                $result['sell_to_post_code'] = $Row['sell_to_post_code'];
                $result['sell_to_city'] = $Row['sell_to_city'];
                $result['sell_to_county'] = $Row['sell_to_county'];
                $result['country_code'] = $Row['country_code'];
                $result['cust_phone'] = $Row['cust_phone'];
                $result['cust_email'] = $Row['cust_email'];
                $result['sale_invoice'] = $Row['sale_invoice'];                
                $result['prev_code'] = $Row['prev_code'];
                $result['cust_order_no'] = $Row['cust_order_no'];       

                $result['bill_to_contact'] = $Row['bill_to_contact'];
                $result['sale_person'] = $Row['sale_person'];
                $result['grand_total'] = $Row['grand_total'];
                $result['currency_id'] = $Row['currency_id'];
                $result['currency_code'] = $Row['currency_code'];
                $result['bill_to_posting_group_name'] = $Row['bill_to_posting_group_name'];
                $result['segment'] = $Row['segment'];
                $result['net_amount'] = $Row['net_amount'];
                $result['tax_amount'] = $Row['tax_amount'];
                $result['finance_charges_exists'] = $Row['finance_charges_exists'];
                $result['insurance_charges_exists'] = $Row['insurance_charges_exists'];                
                
                $result['ship_to_address'] = $Row['ship_to_address'];
                $result['ship_to_address2'] = $Row['ship_to_address2'];
                $result['ship_to_city'] = $Row['ship_to_city'];
                $result['ship_to_county'] = $Row['ship_to_county'];
                $result['ship_to_post_code'] = $Row['ship_to_post_code'];
                $result['book_in_tel'] = $Row['book_in_tel'];
                $result['comm_book_in_contact'] = $Row['comm_book_in_contact'];
                $result['book_in_email'] = $Row['book_in_email'];
                $result['warehouse_booking_ref'] = $Row['warehouse_booking_ref'];
                $result['customer_warehouse_ref'] = $Row['customer_warehouse_ref'];
                $result['shipping_agent_code'] = $Row['shipping_agent_code'];
                $result['shipment_method_code'] = $Row['shipment_method_code'];
                
                $result['total_items'] = $Row['total_items'];
                $result['total_allocated'] = $Row['total_allocated'];
                $result['total_dispatched'] = $Row['total_dispatched'];
                $result['partially_allocated'] = $Row['partially_allocated'];
                $result['emailCount'] = $Row['emailCount'];
                $result['documentCNCount'] = $Row['documentCNCount'];
                $result['documentPCNCount'] = $Row['documentPCNCount'];
                $result['approval_status_1'] = $Row['approval_status_1'];

                $response['response'][] = $result;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $tableName = "";
        // if ($attr['type'] == 1)
        //     $tableName = "CreditNotes";
        // else if ($attr['type'] == 2)
            $tableName = "PostedCreditNotesPortal";
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData($tableName);//print_r($response);exit;
        return $response;
    }

    function get_return_order_listings($attr) {
        global $objFilters;


        //$this->objGeneral->mysql_clean($attr);
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
        $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        //echo $where_clause;exit;
        if ($attr['type'] == 1){
            $where_clause .= "AND tbl.type in (".$attr['type'].") ";
            $moduleNameForCount = "Credit Note";
        }
        else{
            $where_clause .= "AND tbl.type in (3,".$attr['type'].") ";
            $moduleNameForCount = "Credit Note";
        }

        $response = array();


        $Sql = "SELECT  d.id, d.return_order_code,d.return_invoice_code, d.order_return_date, d.sell_to_cust_name, d.sell_to_post_code, d.sell_to_city, d.sell_to_cust_no , d.cust_phone,
                        d.sell_to_address, d.sell_to_county, d.type, d.sell_to_contact_no, d.net_amount, d.grand_total,d.sale_person, d.posting_date, d.offer_date, d.requested_delivery_date,
                         currency.code as crcode
                FROM return_orders  d
                left  JOIN company on company.id=d.company_id
                left JOIN currency on currency.id=d.currency_id

                where  d.status=1 and ( d.company_id=" . $this->arrUser['company_id'] . " or  company.parent_id=" . $this->arrUser['company_id'] . ")
                " . $where_clause . "
                order by d.id DESC";


        //codemark 2
        $Sql = "select * from (SELECT d.*, 
                            (SELECT COUNT(*) FROM document_association AS da WHERE da.record_id = d.id AND da.module_type='document' AND da.additional like '% unposted' AND da.record_type = '$moduleNameForCount') AS documentCNCount,
                            (SELECT COUNT(*) FROM document_association AS da WHERE da.record_id = d.id AND da.module_type='document' AND da.additional like '% posted' AND da.record_type = '$moduleNameForCount') AS documentPCNCount,
                            (SELECT COUNT(*) FROM document_association AS da, email_save as es WHERE es.id = da.module_id and es.type = 1 and da.record_id = d.id AND da.module_type='email' AND da.record_type = '$moduleNameForCount') AS emailCount,
                            (SELECT (CASE 
                                        WHEN status = 0 THEN 
                                            'Queued for Approval'
                                        WHEN status = 1 THEN 
                                            'Awaiting Approval'
                                        WHEN status = 2 THEN 
                                            'Approved'
                                        WHEN status = 3 OR status = 4 OR status = 5 THEN 
                                            'Disapproved'
                                        WHEN status = 7 THEN 
                                            'On Hold'
                                        ELSE    
                                            '-'
                                    END)
                                FROM approval_history AS ah 
                                WHERE ah.object_id=d.id AND ah.type = 3 ORDER BY ah.id DESC LIMIT 1
                            ) AS approval_status_1,
                            (SELECT (CASE 
                                        WHEN status = 0 THEN 
                                            'Queued for Approval'
                                        WHEN status = 1 THEN 
                                            'Awaiting Approval'
                                        WHEN status = 2 THEN 
                                            'Approved'
                                        WHEN status = 3 OR status = 4 OR status = 5 THEN 
                                            'Disapproved'
                                        WHEN status = 7 THEN 
                                            'On Hold'
                                        ELSE    
                                            '-'
                                    END)
                                FROM approval_history AS ah 
                                WHERE ah.object_id=d.id AND ah.type = 8 ORDER BY ah.id DESC LIMIT 1
                            ) AS approval_status_2,
                            (CASE WHEN COALESCE((SELECT gltxn.vatPosted   FROM gl_account_txn AS gltxn  
                             WHERE gltxn.object_id = d.id AND gltxn.company_id = d.company_id AND gltxn.type = 2 AND gltxn.vatPosted = 1 LIMIT 1),0)>0 THEN 'Yes'
                             ELSE 'No' END) AS vatPosted,
                             (SELECT sale_order_code FROM orders AS ord 
                              WHERE ord.id = d.sale_invoice_id AND ord.company_id = d.company_id
                              LIMIT 1) AS sale_order_code 
                FROM sr_return_order_listing_sel d
                WHERE  d.status = 1  AND d.company_id=" . $this->arrUser['company_id'] . ") as tbl where 1 " . $where_clause . "  ";
        //echo $Sql;exit;
        
        $subQueryForBuckets = " SELECT  c.id
                                FROM sr_crm_listing c
                                WHERE c.type IN (2,3) AND 
                                      c.company_id=" . $this->arrUser['company_id'] . " ";

        $subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);
        //echo $subQueryForBuckets;exit;

        $Sql .= " AND (tbl.sell_to_cust_id IS NULL OR tbl.sell_to_cust_id = 0 OR tbl.sell_to_cust_id IN ($subQueryForBuckets) )";

        //echo $Sql;exit;

        if ($order_clause == ""){
            
            // $order_type = "Order by tbl.return_order_code DESC";
            if ($attr['type'] == 1)
               $order_type = "ORDER BY tbl.offer_date DESC,tbl.return_order_code DESC";
            elseif ($attr['type'] == 2)
                $order_type = "ORDER BY tbl.posting_date DESC,tbl.return_invoice_code DESC";
        }            
        else
            $order_type = $order_clause;

        $total_limit = pagination_limit;
        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        //echo $response['q'];exit;
        // $RS = $this->objsetup->CSI($response['q']);
        $RS = $this->objsetup->CSI($response['q'], "sale_return", sr_ViewPermission);
        $response['q'] = '';
        //$RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                $result = array();
                $result['id'] = $Row['id'];
                $result['vatPosted'] = $Row['vatPosted'];

                /* $result['code'] = $Row['return_order_code'];
                  $result['Name'] = $Row['sell_to_cust_name'];
                  $result['contact_person'] = $Row['sell_to_contact_no'];
                  $result['type'] = $Row['type']; */

                // $result['credit_note_date'] = $this->objGeneral->convert_unix_into_date($Row['order_return_date']);
                $result['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
                $result['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $result['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
                

                $result['return_order_code'] = $Row['return_order_code'];
                $result['return_invoice_code'] = $Row['return_invoice_code'];
                $result['current_stage'] = $Row['current_stage'];
                $result['sell_to_cust_no'] = $Row['sell_to_cust_no'];
                $result['sell_to_cust_name'] = $Row['sell_to_cust_name'];

                $result['sell_to_address'] = $Row['sell_to_address'];
                $result['sell_to_address2'] = $Row['sell_to_address2'];
                $result['sell_to_post_code'] = $Row['sell_to_post_code'];
                $result['sell_to_city'] = $Row['sell_to_city'];
                $result['sell_to_county'] = $Row['sell_to_county'];
                $result['country_code'] = $Row['country_code'];
                $result['cust_phone'] = $Row['cust_phone'];
                $result['cust_email'] = $Row['cust_email'];
                $result['sale_invoice'] = $Row['sale_invoice'];
                $result['sale_order_code'] = $Row['sale_order_code'];
                
                $result['prev_code'] = $Row['prev_code'];
                $result['cust_order_no'] = $Row['cust_order_no'];

                

                // $result['sell_to_contact_no']   = $Row['sell_to_contact_no'];
                $result['bill_to_contact'] = $Row['bill_to_contact'];

                $result['sale_person'] = $Row['sale_person'];
                $result['grand_total'] = $Row['grand_total']; //$Row['net_amount'];
                $result['currency_id'] = $Row['currency_id'];
                $result['currency_code'] = $Row['currency_code'];
                $result['bill_to_posting_group_name'] = $Row['bill_to_posting_group_name'];
                $result['segment'] = $Row['segment'];
                $result['net_amount'] = $Row['net_amount'];
                $result['tax_amount'] = $Row['tax_amount'];
                $result['finance_charges_exists'] = $Row['finance_charges_exists'];
                $result['insurance_charges_exists'] = $Row['insurance_charges_exists'];
                
                
                $result['ship_to_address'] = $Row['ship_to_address'];
                $result['ship_to_address2'] = $Row['ship_to_address2'];
                $result['ship_to_city'] = $Row['ship_to_city'];
                $result['ship_to_county'] = $Row['ship_to_county'];
                $result['ship_to_post_code'] = $Row['ship_to_post_code'];
                $result['book_in_tel'] = $Row['book_in_tel'];
                $result['comm_book_in_contact'] = $Row['comm_book_in_contact'];
                $result['book_in_email'] = $Row['book_in_email'];
                $result['warehouse_booking_ref'] = $Row['warehouse_booking_ref'];
                $result['customer_warehouse_ref'] = $Row['customer_warehouse_ref'];
                $result['shipping_agent_code'] = $Row['shipping_agent_code'];
                $result['shipment_method_code'] = $Row['shipment_method_code'];
                
                $result['total_items'] = $Row['total_items'];
                $result['total_allocated'] = $Row['total_allocated'];
                $result['total_dispatched'] = $Row['total_dispatched'];
                $result['partially_allocated'] = $Row['partially_allocated'];
                $result['emailCount'] = $Row['emailCount'];
                $result['documentCNCount'] = $Row['documentCNCount'];
                $result['documentPCNCount'] = $Row['documentPCNCount'];
                $result['approval_status_1'] = $Row['approval_status_1'];
                $result['approval_status_2'] = $Row['approval_status_2'];
                
                // $result['Currency Code']    = $Row['crcode'];
                // $result['Amount']           = $Row['net_amount'];
                // $result['Amount (incl VAT)']= $Row['grand_total'];
                // $result['Salesperson(s)']   = $Row['sale_person'];


                $response['response'][] = $result;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $tableName = "";
        if ($attr['type'] == 1)
            $tableName = "CreditNotes";
        else if ($attr['type'] == 2)
            $tableName = "PostedCreditNotes";
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData($tableName);//print_r($response);exit;
        return $response;
    }

    function get_return_order_by_id($attr) {
        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT ro.*, (SELECT COUNT(od.id) FROM return_order_details AS od WHERE od.order_id = ro.id) AS no_of_items,
                    fin.statement_email,fin.reminder_email,fin.invoice_email,
                    (CASE
                        WHEN ro.bill_to_posting_group_id > 0 AND ro.type <> 2 AND fin.posting_group_id > 0 THEN
                            ro.bill_to_posting_group_id 
                        ELSE
                            fin.posting_group_id
                    END) AS bill_to_posting_group_id,
                    (CASE WHEN ro.currency_id = 0 AND ro.type <> 2 THEN
                            c.currency_id
                        ELSE
                            ro.currency_id
                    END) AS currency,
                    CONCAT_WS(',',fin.statement_email,
                                fin.reminder_email,
                                fin.invoice_email,
                                c.email,
                                group_concat(ac.email SEPARATOR ','),
                                group_concat(ad.email SEPARATOR ','),
                                group_concat(ad.booking_email SEPARATOR ','),
                                fin.email,
                                fin.alt_contact_email) AS c_emails,
                        IFNULL((CASE WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=3) = 1 THEN
                                (SELECT IFNULL(status, 0) AS status FROM approval_history WHERE object_id=".$attr['id']." AND company_id=" . $this->arrUser['company_id'] . " AND TYPE=3 ORDER BY id DESC LIMIT 1)
                                WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=8) = 1 THEN
                                    2
                                ELSE
                                    0
                        END), 0) AS approval_type_1,
                        IFNULL((CASE WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=8) = 1 THEN
                                (SELECT IFNULL(status, 0) AS status FROM approval_history WHERE object_id=".$attr['id']." AND company_id=" . $this->arrUser['company_id'] . " AND TYPE=8 ORDER BY id DESC LIMIT 1)
                                WHEN (SELECT STATUS FROM approval_setup WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=3) = 1 THEN
                                    2
                                ELSE
                                    0
                        END), 0) AS approval_type_2
                    FROM return_orders AS ro
                    LEFT JOIN crm AS c ON c.id = ro.sell_to_cust_id
                    LEFT JOIN finance AS fin ON fin.customer_id = ro.sell_to_cust_id
                    LEFT JOIN alt_contact AS ac ON ac.acc_id = ro.sell_to_cust_id 
                    LEFT JOIN alt_depot AS ad ON ad.acc_id = ro.sell_to_cust_id
				WHERE ro.id='".$attr['id']."' AND ro.company_id = " . $this->arrUser['company_id'];
                

        /* $subQueryForBuckets = "SELECT  c.id
            from sr_crm_listing  c
            where  c.id IS NOT NULL "; */
        
        /* $subQueryForBuckets = " SELECT  c.id
                                FROM sr_crm_listing c
                                WHERE c.type IN (2,3) AND 
                                      c.company_id=" . $this->arrUser['company_id'] . " ";

        //$subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);
        //echo $subQueryForBuckets;exit;

        $Sql .= " AND (ro.sell_to_cust_id = 0 OR ro.sell_to_cust_id IS NULL OR ro.sell_to_cust_id IN ($subQueryForBuckets)) "; */

        $Sql .= " group by id LIMIT 1 "; // adding group by as there is a group_concat inside the query which makes the db return the record even if no record

        // echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);
        $response['ack'] = 1;
        $response['error'] = NULL;
        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();
            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }

            $SqlFileExistance = "SELECT name FROM attachments WHERE type = 5 AND typeId = ".$attr['id']." AND company_id = " . $this->arrUser['company_id'] . "; ";
            //echo $SqlFileExistance;
            $ResultFileExistance = $this->objsetup->CSI($SqlFileExistance);
            $FileName = $ResultFileExistance->FetchRow()['name'];
            if ($FileName && (file_exists(TEMPLATES_PATH . '/views/invoice_templates_pdf/' . $FileName))) {
                $Row['generatedPDFPath'] = WEB_PATH . '/app/views/invoice_templates_pdf/' . $FileName;
            } else {
                $Row['generatedPDFPath'] = '';
            }

            $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
            $Row['shipment_date'] = $this->objGeneral->convert_unix_into_date($Row['shipment_date']);
            $Row['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
            $Row['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
            $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
            $Row['document_date'] = $this->objGeneral->convert_unix_into_date($Row['document_date']);
            $Row['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
            $Row['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
            $Row['receipt_date'] = $this->objGeneral->convert_unix_into_date($Row['receipt_date']);

            $temp_attr['posting_group_id'] = $Row['bill_to_posting_group_id'];
            $posting_group_arr = $this->objHr->get_vat_group_by_posting_group($temp_attr);
            $Row['arr_vat_post_grp_sales'] = ($posting_group_arr['ack'] == 1) ? $posting_group_arr['response'] : array();

            $Row['currency_id'] = $Row['currency'];
            $temp_attr_currency['currency_id'] = $Row['currency_id'];
            $currency_arr_local = $this->objsetup->get_currencies_list($temp_attr_currency);
            $Row['currency_arr_local']= $currency_arr_local['response'];


            $response['response'] = $Row;
            $attr['customer_id'] = $Row['sell_to_cust_id'];
            $attr['chk_posting_grp'] = 1;
            $response['response']['customer_emails'] = $Row['c_emails'];
            $response['response']['c_emails'] = '';
            if ($attr['customer_id']){
                // $response['response']['e_emails'] = self::get_e_emails($attr);
                // $response['response']['customer_emails'] = self::get_customer_emails($attr);
            }
            /* if ($Row['type'] == '0' || $Row['type'] == '1') {
                $response['response']['order_finance_details'] = self::get_customer_finance($attr);
            } */
        } else {
            $response['response'] = array();
            $response['bucketFail'] = 1;
        }        
        return $response;
    }

    function add_return_order($attr) {
        $srLogTrace = array();

        $srLogTrace['ErrorCode'] = '';
        $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
        $srLogTrace['Function'] = __FUNCTION__;
        $srLogTrace['CLASS'] = __CLASS__;
        $srLogTrace['Parameter1'] = 'Enter';
        $srLogTrace['ErrorMessage'] = "";

        $this->objsetup->SRTraceLogsPHP($srLogTrace);

        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;

        $PurchaseOrderArr = $attr['PurchaseOrderArr'];

        $this->objGeneral->mysql_clean($attr);
        $order_no = '';
        $inv_no = '';
        $response = array();
        if ($attr['type'] == 1)
            $order_no = $attr['sale_order_no'];
        if ($attr['type'] == 2)
            $inv_no = $attr['sale_order_no'];

        $update_id = $attr['id'];
        // echo "update_id =".$update_id;exit;
        /* if ($update_id > 0)
          $update_check = "  AND tst.id != '" . $update_id . "'";

          $data_pass = "   tst.status=1 and tst.type IN (1,2)  AND tst.return_order_code='" . $attr['return_order_code'] . "' $update_check";
          $total = $this->objGeneral->count_duplicate_in_sql('return_orders', $data_pass, $this->arrUser['company_id']);
          if ($total > 0) {
          $response['ack'] = 0;
          $response['error'] = 'Record Already Exists.';
          return $response;
          }
         */

        $order_date = (isset($attr['order_date']))?str_replace('/', '-', $attr['order_date']):'';
        //str_replace('/', '-', $attr['order_date']); //invoice_no='".$invoice_no."'

        $return_order_no = ($attr['return_order_no'] != '') ? $attr['return_order_no'] : '0';
        $sell_to_contact_id = ($attr['sell_to_contact_id'] != '') ? $attr['sell_to_contact_id'] : '0';
        $delivery_time = ($attr['delivery_time'] != '') ? $attr['delivery_time'] : '0';
        $campaign_id = ($attr['campaign_id'] != '') ? $attr['campaign_id'] : '0';
        $converted_currency_id = ($attr['converted_currency_id'] != '') ? $attr['converted_currency_id'] : '0';
        $converted_unit_price = ($attr['converted_unit_price'] != '') ? Round($attr['converted_unit_price'],2) : '0';
        $account_payable_id = ($attr['account_payable_id'] != '') ? $attr['account_payable_id'] : '0';
        $convert_from_forcast = ($attr['convert_from_forcast'] != '') ? $attr['convert_from_forcast'] : '0';
        $purchase_order_id = ($attr['purchase_order_id'] != '') ? $attr['purchase_order_id'] : '0';
        $finance_customer_id = ($attr['bill_to_cust_id'] != '') ? $attr['bill_to_cust_id'] : '0';
        $payment_discount = ($attr['payment_discount'] != '') ? Round($attr['payment_discount'],2) : '0';
        $shipment_method_id = ($attr['shipment_method']->id != '') ? $attr['shipment_method']->id : '0';
        $shipment_method_code = ($attr['shipment_method']->name != '') ? $attr['shipment_method']->name : '';
        $shipping_agent_id = ($attr['shipping_agent_id'] != '') ? $attr['shipping_agent_id'] : '0';
        $freight_charges = ($attr['freight_charges'] != '') ? Round($attr['freight_charges'],2) : '0';
        $alt_depo_id = ($attr['alt_depo_id'] != '') ? $attr['alt_depo_id'] : '0';
        $bill_to_cust_id = ($attr['bill_to_cust_id'] != '') ? $attr['bill_to_cust_id'] : '0';
        $bill_to_contact_id = ($attr['bill_to_contact_id'] != '') ? $attr['bill_to_contact_id'] : '0';
        $currency_ids = ($attr['currency_ids'] != '') ? $attr['currency_ids'] : '0';
        $sale_person_id = ($attr['sale_person_id'] != '') ? $attr['sale_person_id'] : '0';
        $country_id = ($attr['country_id'] != '') ? $attr['country_id'] : '0';
        
        // $bill_to_finance_charges_id         = ($attr['bill_to_finance_charges_id'] != '') ? $attr['bill_to_finance_charges_id'] : '0';
        // $bill_to_insurance_charges_id         = ($attr['bill_to_insurance_charges_id'] != '') ? $attr['bill_to_insurance_charges_id'] : '0';

        $segment_id = ($attr['segment_id'] != '') ? $attr['segment_id'] : '0';
        $region_id = ($attr['region_id'] != '') ? $attr['region_id'] : '0';
        $buying_grp_id = ($attr['buying_grp_id'] != '') ? $attr['buying_grp_id'] : '0';
        $bill_to_finance_charges = ($attr['bill_to_finance_charges'] != '') ? Round($attr['bill_to_finance_charges'],2) : '0';
        $bill_to_finance_charges_type = ($attr['bill_to_finance_charges_type'] != '') ? $attr['bill_to_finance_charges_type'] : '0';
        $bill_to_insurance_charges = ($attr['bill_to_insurance_charges'] != '') ? Round($attr['bill_to_insurance_charges'],2) : '0';
        $bill_to_insurance_charges_type = ($attr['bill_to_insurance_charges_type'] != '') ? $attr['bill_to_insurance_charges_type'] : '0';
        $bill_to_bank_id = ($attr['bill_to_bank_id'] != '') ? $attr['bill_to_bank_id'] : '0';
        $ship_to_contact_id = ($attr['ship_to_contact_id'] != '') ? $attr['ship_to_contact_id'] : '0';
        $payment_method_id = ($attr['payment_method_id'] != '') ? $attr['payment_method_id'] : '0';
        $anonymous_customer = ($attr['anonymous_customer'] != '') ? $attr['anonymous_customer'] : '0';
        $bill_to_posting_group_id = ($attr['bill_to_posting_group_id'] != '') ? $attr['bill_to_posting_group_id'] : '0';
        $bill_to_country_id = ($attr['bill_to_country_id'] != '') ? $attr['bill_to_country_id'] : '0';
        $ship_to_country_id = ($attr['ship_to_country_id'] != '') ? $attr['ship_to_country_id'] : '0';


        // check duplicate customer_order_no
        if($attr['cust_order_no']!=''){
            if($attr['id']){
                $where = " AND id != '".$attr['id']."'";
            }else{
                $where = '';
            }
            $SqlC = "SELECT id FROM return_orders WHERE company_id=".$this->arrUser['company_id']." AND cust_order_no='$attr[cust_order_no]' ".$where;
            $RSC = $this->objsetup->CSI($SqlC);
            if ($RSC->RecordCount() > 0) {
                $response['ack'] = 0;
                $response['error'] = "Claim No. is already exist!";
                return $response; exit;
            }
        }
        
        
        
        if ($attr['sale_invoice_id'] != '') {
            $sale_invoice_id = $attr['sale_invoice_id'];
            $sale_invoice = $attr['sale_invoice'];
            $sale_invoice_type = ($attr['sale_invoice_type'] != '') ? $attr['sale_invoice_type'] : '0';
        } else {
            $sale_invoice_id = '0';
            $sale_invoice_type = '0';
            $sale_invoice = '';
        }

        
        $posting_dateUnConv = "";
        
        if($attr['posting_date'] > 0){
            $posting_dateUnConv = " posting_dateUnConv = '" . $this->objGeneral->convertUnixDateIntoConvDate($attr['posting_date']) . "',";            
        }  

        if ($update_id == 0) {
            // convert_from_forcast='$convert_from_forcast',
            // finance_customer_id='$finance_customer_id',

            $order_code_sql = "SELECT SR_GetNextSeq('return_orders', " . $this->arrUser['company_id'] . ", 0, 0) AS code";
            $RS = $this->objsetup->CSI($order_code_sql);
            $return_order_code = $RS->fields['code'];


            $Sql = "INSERT INTO return_orders
                SET
                    transaction_id = SR_GetNextTransactionID(" . $this->arrUser['company_id'] . ", 2),
                    type='".$attr['type']."',
                    prev_code='$attr[prev_code]',
                    return_order_code='$return_order_code',
                    return_order_no='$return_order_no',
                    sell_to_cust_id='$attr[sell_to_cust_id]',
                    sell_to_contact_no='$attr[sell_to_contact_no]',
                    sell_to_cust_no='$attr[sell_to_cust_no]',
                    sell_to_contact_id='$sell_to_contact_id',
                    sell_to_cust_name='$attr[sell_to_cust_name]',
                    sell_to_address='$attr[sell_to_address]',
                    delivery_time='$delivery_time',
                    sell_to_address2='$attr[sell_to_address2]',
                    cust_order_no='$attr[cust_order_no]',
                    sale_invoice_id = $sale_invoice_id,
                    sale_invoice_type = $sale_invoice_type,
                    sale_invoice = '$sale_invoice',
                    sell_to_city='$attr[sell_to_city]',

                    bill_to_posting_group_id = '$bill_to_posting_group_id',
                    bill_to_posting_group_name = '$attr[bill_to_posting_group_name]',
                    bill_to_finance_charges = '$bill_to_finance_charges',
                    bill_to_finance_charges_type = '$bill_to_finance_charges_type',
                    bill_to_insurance_charges ='$bill_to_insurance_charges',
                    bill_to_insurance_charges_type ='$bill_to_insurance_charges_type',
                    bill_to_country_id = '$bill_to_country_id',
                    bill_to_contact_phone='$attr[bill_to_contact_phone]',
                    bill_to_contact_email='$attr[bill_to_contact_email]',
                    
                    bill_to_contact='$attr[bill_to_contact]',
                    sell_to_county='$attr[sell_to_county]',
                    campaign_id='$campaign_id',
                    campaign_no='$attr[campaign_no]',
                    payable_bank='$attr[payable_bank]',
                    sell_to_contact='$attr[sell_to_contact]',
                    sale_person_id='$sale_person_id',
                    sale_person='$attr[sale_person]',
                    cust_phone='$attr[cust_phone]',
                    cust_fax='$attr[cust_fax]',
                    cust_email='$attr[cust_email]',
                    currency_id='$currency_ids',
                    comm_book_in_no='$attr[comm_book_in_no]',
                    book_in_email='$attr[book_in_email]',
                    comm_book_in_contact='$attr[comm_book_in_contact]',
                    converted_currency_id='$converted_currency_id',
                    converted_currency_code='$attr[converted_currency_code]', 
                    currency_rate='$attr[currency_rate]', 
                    converted_unit_price='$converted_unit_price',
                    sell_to_post_code='$attr[sell_to_post_code]',
                    purchase_order_id='$purchase_order_id',
                    account_payable_number='$attr[account_payable_number]',
                    country_id='$country_id',
                    segment_id='$segment_id',
                    region_id='$region_id',
                    buying_grp_id='$buying_grp_id',
                    purchase_code_number='$attr[purchase_code_number]',                                    
                    account_payable_id='$account_payable_id',
                    user_id='" . $this->arrUser['id'] . "',
                    company_id='" . $this->arrUser['company_id'] . "',
                    bill_to_cust_id='$bill_to_cust_id',                    
                    payment_discount='$payment_discount',
                    alt_depo_id='$alt_depo_id',
                    shipment_method_id='$shipment_method_id',
                    shipment_method_code='$shipment_method_code',
                    shipping_agent_code='$attr[shipping_agent_code]',
                    ship_to_name='$attr[ship_to_name]',
                    shipping_agent_id='$shipping_agent_id',
                    ship_to_address='$attr[ship_to_address]',
                    ship_to_address2='$attr[ship_to_address2]',
                    freight_charges='$freight_charges',
                    ship_to_city='$attr[ship_to_city]',
                    container_no='$attr[container_no]',
                    ship_to_county='$attr[ship_to_county]',
                    ship_to_post_code='$attr[ship_to_post_code]',
                    ship_to_country_id = '$ship_to_country_id',
                    ship_to_contact='$attr[ship_to_contact]',
                    ship_delivery_time='$attr[ship_delivery_time]',
                    book_in_tel='$attr[book_in_tel]',
                    anonymous_customer = $anonymous_customer,
                    note='$attr[note]',
                    AddedBy = '" . $this->arrUser['id'] . "',
                    AddedOn = UNIX_TIMESTAMP (NOW()),
                    $posting_dateUnConv
                    posting_date='" . $this->objGeneral->convert_date($attr['posting_date']) . "',
                    offer_date='" . $this->objGeneral->convert_date($attr['offer_date']) . "',
                    order_return_date='" . $this->objGeneral->convert_date($attr['order_return_date']) . "',
                    requested_delivery_date='" . $this->objGeneral->convert_date($attr['requested_delivery_date']) . "',
                    delivery_date='" . $this->objGeneral->convert_date($attr['delivery_date']) . "',
                    due_date='" . $this->objGeneral->convert_date($attr['due_date']) . "',
                    shipment_date='" . $this->objGeneral->convert_date($attr['shipment_date']) . "'";
        } else {
            $return_order_code = $attr['return_order_code'];

            $Sql = "UPDATE return_orders
				        SET
                        sell_to_cust_id='$attr[sell_to_cust_id]',
                        sell_to_cust_no='$attr[sell_to_cust_no]',
                        prev_code='$attr[prev_code]',
                        sell_to_contact_id='$sell_to_contact_id',
                        sell_to_contact_no='$attr[sell_to_contact_no]',
                        sell_to_cust_name='$attr[sell_to_cust_name]',
                        sell_to_address='$attr[sell_to_address]',
                        delivery_time='$delivery_time',
                        sell_to_address2='$attr[sell_to_address2]',
                        cust_order_no='$attr[cust_order_no]',
                        sale_invoice_id = $sale_invoice_id,
                        sale_invoice_type = $sale_invoice_type,
                        sale_invoice = '$sale_invoice',
                        sell_to_city='$attr[sell_to_city]',
                        sell_to_county='$attr[sell_to_county]',
                        campaign_id='$campaign_id',
                        campaign_no='$attr[campaign_no]',
                        sell_to_contact='$attr[sell_to_contact]',
                        sale_person_id='$sale_person_id',
                        sale_person='$attr[sale_person]',
                        cust_phone='$attr[cust_phone]',
                        cust_fax='$attr[cust_fax]',
                        cust_email='$attr[cust_email]',
                        currency_id='$currency_ids',
                        comm_book_in_no='$attr[comm_book_in_no]',
                        book_in_email='$attr[book_in_email]',
                        comm_book_in_contact='$attr[comm_book_in_contact]',
                        converted_currency_id='$converted_currency_id',
                        converted_currency_code='$attr[converted_currency_code]',				             
                        currency_rate='$attr[currency_rate]', 
                        converted_unit_price='$converted_unit_price',
                        sell_to_post_code='$attr[sell_to_post_code]',
                        account_payable_number='$attr[account_payable_number]',
                        account_payable_id='$account_payable_id',
                        country_id='$country_id',
                        segment_id='$segment_id',
                        region_id='$region_id',
                        buying_grp_id='$buying_grp_id',
                        bill_to_cust_id='$bill_to_cust_id',
                        bill_to_cust_no='$attr[bill_to_cust_no]',
                        bill_to_contact_id='$bill_to_contact_id',
                        bill_to_posting_group_id = '$bill_to_posting_group_id',
                        bill_to_posting_group_name = '$attr[bill_to_posting_group_name]',
                        bill_to_finance_charges = '$bill_to_finance_charges',
                        bill_to_finance_charges_type = '$bill_to_finance_charges_type',
                        bill_to_insurance_charges ='$bill_to_insurance_charges',
                        bill_to_insurance_charges_type ='$bill_to_insurance_charges_type',
                        bill_to_country_id = '$bill_to_country_id',
                        bill_to_contact_phone='$attr[bill_to_contact_phone]',
                        bill_to_contact_email='$attr[bill_to_contact_email]',
                        bill_to_contact='$attr[bill_to_contact]',
                    
                        payable_bank='$attr[payable_bank]',
                        payment_terms_code='$attr[payment_terms_code]',
                        bill_to_name='$attr[bill_to_name]',
                        bill_to_address='$attr[bill_to_address]',
                        payment_discount='$payment_discount',
                        bill_to_address2='$attr[bill_to_address2]',
                        payment_method_id='$payment_method_id',
                        payment_method_code='$attr[payment_method_code]',
                        bill_to_city='$attr[bill_to_city]',
                        bill_to_county='$attr[bill_to_county]',
                        bill_to_post_code='$attr[bill_to_post_code]',
                        alt_depo_id='$alt_depo_id',
                        shipment_method_id='$shipment_method_id',
                        shipment_method_code='$shipment_method_code',
                        shipping_agent_code='$attr[shipping_agent_code]',
                        ship_to_name='$attr[ship_to_name]',
                        shipping_agent_id='$shipping_agent_id',
                        ship_to_address='$attr[ship_to_address]',
                        ship_to_address2='$attr[ship_to_address2]',
                        freight_charges='$freight_charges',
                        ship_to_city='$attr[ship_to_city]',
                        container_no='$attr[container_no]',
                        ship_to_county='$attr[ship_to_county]',
                        ship_to_post_code='$attr[ship_to_post_code]',
                        ship_to_country_id = '$ship_to_country_id',
                        ship_to_contact='$attr[ship_to_contact]',
                        ship_delivery_time='$attr[ship_delivery_time]',
                        book_in_tel='$attr[book_in_tel]',
                        warehouse_booking_ref='$attr[warehouse_booking_ref]',
                        customer_warehouse_ref='$attr[customer_warehouse_ref]',
                        location_code='$attr[location_code]',
                        anonymous_customer = $anonymous_customer,
                        note='$attr[note]',
                        purchase_order_id='$purchase_order_id'	,
                        
                        ChangedBy = '" . $this->arrUser['id'] . "',
                        ChangedOn = UNIX_TIMESTAMP (NOW()),
                        $posting_dateUnConv
                    
                        posting_date='" . $this->objGeneral->convert_date($attr['posting_date']) . "',
                        offer_date='" . $this->objGeneral->convert_date($attr['offer_date']) . "',
                        order_return_date='" . $this->objGeneral->convert_date($attr['order_return_date']) . "',
                        requested_delivery_date='" . $this->objGeneral->convert_date($attr['requested_delivery_date']) . "',
                        delivery_date='" . $this->objGeneral->convert_date($attr['delivery_date']) . "',
                        due_date='" . $this->objGeneral->convert_date($attr['due_date']) . "',
                        shipment_date='" . $this->objGeneral->convert_date($attr['shipment_date']) . "'

                        WHERE id = ".$attr['id']."  AND company_id=" . $this->arrUser['company_id'] . " AND type =1 limit 1";
        }

        // echo $Sql; exit;
        // $RS = $this->objsetup->CSI($Sql);


        if ($update_id == 0)
            $RS = $this->objsetup->CSI($Sql, "sale_return", sr_AddPermission);
        else{

            $RS = $this->objsetup->CSI($Sql, "sale_return", sr_AddEditPermission);

            $sqlA = "SELECT count(ah.id) AS ttl
                     FROM approval_history AS ah 
                     WHERE  ah.object_id=".$update_id." AND 
                            ah.type IN (3) AND  
                            ah.company_id = '" . $this->arrUser['company_id'] . "'";

            // echo $sqlA;exit;
            $RSA = $this->objsetup->CSI($sqlA);

            if ($RSA->RecordCount() > 0) {
                $RowA = $RSA->FetchRow();
                $ttlCount =  $RowA['ttl'];

                if($ttlCount > 0){

                    $sqlb = 'UPDATE approval_history SET 
                                                        source_code =  "'.$attr['sell_to_cust_no'].'",
                                                        source_name =  "'.$attr['sell_to_cust_name'].'"
                            WHERE object_id ='.$update_id.' AND 
                                  type IN (3) AND  
                                  company_id = ' . $this->arrUser['company_id'] . ' ';

                    $this->objsetup->CSI($sqlb);
                }
            }
        }


        if ($update_id == 0) {
            $id = $this->Conn->Insert_ID();
            if ($id > 0) {
                $Sql = "SELECT id FROM ref_crm_order_stages 
                    WHERE module_id = 4 and company_id='" . $this->arrUser['company_id'] . "' and status = 1 ORDER BY `rank`";
                // echo $Sql; exit;

                $RS = $this->objsetup->CSI($Sql);
                $stage_count = 0;
                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {
                        $Sql2 = "INSERT INTO ref_order_stage_list
                                SET    
                                    order_id = $id,
                                    ref_stage_id = $Row[id],
                                    company_id = " . $this->arrUser['company_id'] . ", 
                                    user_id = " . $this->arrUser['id'] . ", ";
                        if ($stage_count == 0) {
                            $stage_count = 1;
                            $Sql2 .=" state = 'active'";
                        } else
                            $Sql2 .=" state = 'outstanding'";

                        // echo $Sql2;exit;
                        $RS2 = $this->objsetup->CSI($Sql2);
                    }
                }

                // just to update cache
                $Sql1 = "update return_orders set changedOn=UNIX_TIMESTAMP (NOW()) WHERE id=$id; -- just to update cache for order stage";
                // echo $Sql1;exit;
                $RS1 = $this->objsetup->CSI($Sql1);
            }
        }
        else {
            $id = $update_id; //$this->Conn->Affected_Rows();
        }

        // $response2 = $this->objSrm->addLink_SO_PO($PurchaseOrderArr, $update_id, 2);

        if(sizeof($PurchaseOrderArr)>0){
            $response2 = $this->objSrm->addLink_SO_PO($PurchaseOrderArr, $update_id, 2);
        }
        else{
            $response2 = $this->objSrm->removeLink_SO_PO($update_id,2);
        }


        if ($id > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['return_order_code'] = $return_order_code;
            $response['order_date'] = $order_date;//date('Y-m-d', $order_date);
            $response['error'] = NULL;
            $this->Conn->commitTrans();
            $this->Conn->autoCommit = true;

            $srLogTrace = array();

            $srLogTrace['ErrorCode'] = '';
            $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
            $srLogTrace['Function'] = __FUNCTION__;
            $srLogTrace['CLASS'] = __CLASS__;
            $srLogTrace['Parameter1'] = 'Exit';
            $srLogTrace['ErrorMessage'] = "";

            $this->objsetup->SRTraceLogsPHP($srLogTrace);
        } else {
            $response['ack'] = 1;
            $response['id'] = $update_id;
            $response['return_order_code'] = $return_order_code;
            $response['order_date'] = '';
            $response['error'] = 'No changes!';
            $this->Conn->commitTrans();
            $this->Conn->autoCommit = true;

            $srLogTrace = array();

            $srLogTrace['ErrorCode'] = '';
            $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
            $srLogTrace['Function'] = __FUNCTION__;
            $srLogTrace['CLASS'] = __CLASS__;
            $srLogTrace['Parameter1'] = 'Exit';
            $srLogTrace['ErrorMessage'] = "";

            $this->objsetup->SRTraceLogsPHP($srLogTrace);
        }

        return $response;
    }

    function get_invoices_for_credit_notes($attr) {
        // print_r($attr);exit;
        $this->objGeneral->mysql_clean($attr);

        $response = array();

        $Sql = "SELECT 
                    '1' AS type,
                    o.id, o.sale_order_code, o.sale_invioce_code, o.posting_date, o.offer_date, o.delivery_date, o.tax_amount, o.net_amount, o.grand_total, currency.code AS currency_code
                    FROM orders o 
                    LEFT JOIN currency ON currency.id = currency_id
                    
                    WHERE o.sell_to_cust_id = ".$attr['crm_id']."  AND o.type IN (2,3) AND o.status = 1 AND o.sale_invioce_code IS NOT NULL  
               UNION
                SELECT '2' AS type, o.id, '-' AS sale_order_code, o.invoiceNo AS sale_invioce_code, o.posting_date, '-' AS offer_date, '-' AS delivery_date, 0 AS tax_amount, o.debitAmount AS net_amount, o.debitAmount AS grand_total, currency.code AS currency_code
                    FROM opening_balance_customer AS o
                        LEFT JOIN currency ON currency.id = currency_id
                WHERE
                        o.moduleID = ".$attr['crm_id']." AND
                        o.docType = 1 AND
                        o.type = 1 AND
                        postStatus = 1   
                ORDER BY posting_date DESC";
        /*

         */
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);


        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['order_code'] = $Row['sale_order_code'];
                $result['invoice_code'] = $Row['sale_invioce_code'];
                $result['invoice_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
                $result['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                $result['currency_code'] = $Row['currency_code'];
                $result['tax_amount'] = $Row['tax_amount'];
                $result['net_amount'] = $Row['net_amount'];
                $result['amount'] = $Row['grand_total'];
                $result['type'] = $Row['type'];

                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['total'] = $total;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    // function generate_pdf_invoice($filename){
    //     require_once(SERVER_PATH . '/libraries/mpdf/mpdf/mpdf.php');
    //     $objpdf = new mPDF();
    //     $file = file_get_contents(WEB_PATH. '/app/views/invoice_templates/'.$filename.'.html');
    //     $objpdf->WriteHTML($file);
    //     $objpdf->Output(TEMPLATES_PATH. '/views/invoice_templates_pdf/'.$filename.'.pdf', 'F');
    //     $response['ack'] = 1;
    //     return $response;
    // }

    function print_invoice_vals($attr) {
        // print_r($attr);exit;
        $separate_by_allocation = (isset($attr['separate_by_allocation']) && $attr['separate_by_allocation'] != '') ? 1 : 0;
        $separate_by_warehouse = (isset($attr['separate_by_warehouse']) && $attr['separate_by_warehouse'] != '') ? 1 : 0;
        $templateType = $attr['templateType'];       
        if($templateType=='salesQuote'){
            $SQ = "
            SELECT (CASE WHEN o.bill_to_posting_group_id = c.crm_posting_group_id  THEN 0
                    WHEN (c.crm_posting_group_id IS NULL OR c.crm_posting_group_id  = 0) THEN 0
                    ELSE c.crm_posting_group_id
                    END) AS posting_group_id
            FROM doc_header dh
            LEFT JOIN orders o ON o.id=dh.doc_id
            LEFT JOIN crm c ON c.id=o.sell_to_cust_id 
            WHERE dh.doc_id=".$attr['id']." AND dh.type = ".$attr['type']." ";
            $RS = $this->objsetup->CSI($SQ);
            if ($RS->RecordCount() > 0) {
                // echo 'inside if';exit;
                if ($Row = $RS->FetchRow()) {
                    // print_r($Row);exit;
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $posting_grp_id = $Row['posting_group_id'];
                   //echo $posting_grp_id;exit;
                    if($posting_grp_id>0){
                        $SQ1 = "SELECT
                                    SUM(
                                        ordd.total_price  * c.vat / 100
                                    ) AS vat_price
                            FROM vat_posting_grp_setup AS c 
                            LEFT JOIN ref_posting_group AS postgrp ON postgrp.id=c.postingGrpID
                            LEFT JOIN vat ON vat.id=c.vatRateID
                            LEFT JOIN order_details AS ordd  ON  ordd.order_id = ".$attr['id']."
                            WHERE postgrp.id = $posting_grp_id AND postgrp.company_id='".$this->arrUser['company_id']."' AND 
                            ordd.vat_id=vat.id AND c.company_id='".$this->arrUser['company_id']."'";
                        //echo $SQ1;exit;
                        $RS2 = $this->objsetup->CSI($SQ1);
                        if ($Row2 = $RS2->FetchRow()) {
                            foreach ($Row2 as $key => $value) {
                                if (is_numeric($key))
                                    unset($Row2[$key]);
                            }
                            $vat_price = $Row2['vat_price']; 

                            // update posting group
                            $Sql_2 = "UPDATE orders set bill_to_posting_group_id = '".$posting_grp_id."',tax_amount = '".$vat_price."' WHERE id = '".$attr['id']."' AND company_id='".$this->arrUser['company_id']."' LIMIT 1";
                            $RS_2 = $this->objsetup->CSI($Sql_2);
                        }
                    }

                }
            }
        }
        $Sql = "CALL SR_Create_Print_Template(" . $this->arrUser['company_id'] . "," . $this->arrUser['id'] . ",".$attr['id'].",".$attr['type'].", $separate_by_allocation, $separate_by_warehouse);";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        $RS->close();
        if ($RS->fields['Result'] == 1) {
            $obj = new Customer();
            $response = $obj->get_doc_header($attr,$this->arrUser['company_id']);
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        // print_r($response);exit;
        // require_once(SERVER_PATH . "/classes/General.php");        
        // $objGeneral = new General($this->arrUser);
        // if($attr['type'] == 1){
        //     $objGeneral->generate_pdf_invoice("purchase_order", $response);
        // } elseif ($attr['type'] == 2){
        //     $objGeneral->generate_pdf_invoice("sales_order", $response);            
        // } elseif ($attr['type'] == 3){
        //    $objGeneral->generate_pdf_invoice("debit_note", $response);            
        // } elseif ($attr['type'] == 4){
        //     $objGeneral->generate_pdf_invoice("credit_note", $response);            
        // }

        return $response;
    }
    
    function bulkPrintInvoiceVals($attr) {        

        // echo "<pre>";print_r($attr);
        $rejectedPdfCounter = 0;
        $module = $attr['module'];       
        $Option = $attr['Option'];   
        $OptionType = $attr['OptionType'];   
        $company_logo_url = $attr['company_logo_url'];   

        if($Option == 'saveAsPdf'){

            $createdPdfLinks = array();
            $createdPdfLinks1 = array();

            if($module == 'SalesQuotes'){
                $recordType = 0; 
            }
            else if($module == 'SalesOrders'){
                $recordType = 1;
            }
            else if($module == 'SalesInvoices'){
                $recordType = 2;
            }
            else if($module == 'PostedCreditNotes' || $module == 'CreditNotes'){                            

                if($module == 'CreditNotes'){
                    $recordType = 1;
                }
                else if($module == 'PostedCreditNotes'){
                    $recordType = 2;
                }
            }
            else if($module == 'DebitNotes' || $module == 'PostedDebitNotes'){

                if($module == 'DebitNotes'){
                    $recordType = 1;
                }
                else if($module == 'PostedDebitNotes'){
                    $recordType = 2;
                }
            }
            else if($module == 'purchaseOrder' || $module == 'purchaseInvoice'){
                                            
                if($module == 'purchaseOrder'){
                    $recordType = 3;
                }
                else if($module == 'purchaseInvoice'){
                    $recordType = 1;
                }
            }            

            foreach($attr['emailOrderList'] as $rec){ 

                if($rec->id >0)
                    $result = $this->CreatePrintTemplate($rec->id,$OptionType,$company_logo_url,$recordType);//$rec->type

                if($result['ack'] == 1){
                    $alpha = explode("?alpha=", $result['file_url'])[1];
                    $key = hash('sha256', SECRET_KEY);
                    $iv = substr(hash('sha256', SECRET_IV), 0, 16);
                    $outputInvName = openssl_decrypt(base64_decode($alpha), SECRET_METHOD, $key, 0, $iv);
                        
                    
                    // $fileName = explode(".",$outputInvName);
                    
                    // $pdfName = $fileName[1].'.pdf';
                    // print_r($pdfName); exit;
                    

                    $createdPdfLinks1[] = APP_PATH ."upload/attachments/". $outputInvName;
                    $createdPdfLinks[] = $result['file_url'];
                    $createdPdfCounter++;                
                }
                else
                    $rejectedPdfCounter++; 
            }

            
            if($createdPdfCounter >0){
            
                $zipFile = $this->bulkPrintToZip($createdPdfLinks1, $module);

                
                $file_url = WEB_PATH . "upload/attachments/" . $module. ".zip";
                
                if(file_exists($zipFile)){
                   
                    $response['ack'] = 1; 

                    $key = hash('sha256', SECRET_KEY);
                    $iv = substr(hash('sha256', SECRET_IV), 0, 16);
                    $outputInvName = openssl_encrypt($module, SECRET_METHOD, $key, 0, $iv);
                    $outputInvName = base64_encode($outputInvName);

                    $response['file_url'] = WEB_PATH . '/api/setup/invoice?zip='.$outputInvName; 
                    $response['invoiceName'] = $invoiceName;
                }


                $response['ack'] = 1;
                $response['createdPdfCounter'] = $createdPdfCounter;
                $response['createdZipFile'] = $zipFile;
                $response['rejectedPdfCounter'] = $rejectedPdfCounter;
                $response['PdfLinks'] = $createdPdfLinks;
            }
            else{
                $response['ack'] = 0; 
                $response['createdPdfCounter'] = 0;
                $response['rejectedPdfCounter'] = $rejectedPdfCounter;
            } 

        } 
        elseif($Option == 'email'){ 

            // if($module == 'SalesQuotes')  $module = 'SalesQuotes';
            // elseif($module == 'SalesOrders')  $module = 'SalesOrders';      
            // elseif($module == 'SalesInvoices')  $module = 'SalesInvoices';      
            // elseif($module == 'PostedCreditNotes')  $module = 'PostedCreditNotes';      
            // elseif($module == 'DebitNotes')  $module = 'DebitNotes';      
            // elseif($module == 'PostedDebitNotes')  $module = 'PostedDebitNotes';   

            if($module == 'purchaseOrder')  $module = 'PurchaseOrders';      
            elseif($module == 'purchaseInvoice')  $module = 'PurchaseInvoices';      

            $id = "";
            $Sql = "SELECT id,json 
                    FROM auto_email_templates 
                    WHERE company_id = " . $this->arrUser['company_id'] . " AND 
                        template_name = '$module'";
            //echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                $record = $RS->FetchRow();
                $id = $record['id'];
                $txt = $record['json'];
            }
            else{
                // $filePath = SERVER_PATH . "/autoEmailTemplates/SalesInvoices.json";
                $filePath = SERVER_PATH . "/autoEmailTemplates/$module.json";

                $myfile = fopen($filePath , "r");
                $txt = fread($myfile, filesize($filePath));
                fclose($myfile);
            }

            $response['rejectedInvoices'] = array();  
            $response['rejectedInvoicesReason'] = array();  
            $response['sendEmailInvoices'] = array();  
            $response['EmailAddressMissing'] = array();  
            $response['payableBankMissing'] = array();  
            

            $rejectedInvoicesCounter = 0;  
            $sendEmailInvoicesCounter = 0; 
            $noRecordExist = 0; 

            if ($txt){
                $response['id'] = $id;
                $txt = preg_replace('/\R+/', " ", $txt);
                $response['template'] = json_decode($txt);

                $senderEmailID = $response['template']->senderEmail;            
                $templateSubject = strip_tags($response['template']->templateSubject);            
                $templateBody = $response['template']->templateBody;   

                if($senderEmailID>0) 
                    $clientConfiguration = $this->getClientConfigurationByVirtualEmail($senderEmailID);

                // print_r($clientConfiguration);

                if(!empty($clientConfiguration)){
                    foreach($attr['emailOrderList'] as $rec){

                        if($rec->id >0){

                            //Mail object initialization
                            $mail = new \SendGrid\Mail\Mail();

                            $invoice_email = '';
                            $invoiceEmail = '';
                            $invoiceCode = '';
                            $invoiceName = ''; 

                            $get_last_id = 0;
                            $attachmentPath =  '';
                            $bank_account_id = 0;

                            if($module == 'SalesQuotes' || $module == 'SalesOrders' || $module == 'SalesInvoices' ||
                            $module == 'PostedCreditNotes' || $module == 'CreditNotes'){

                                $Sql2 = "SELECT finance.invoice_email,crm.id 
                                        FROM finance,crm 
                                        WHERE finance.company_id = ".$this->arrUser['company_id']." AND 
                                            finance.customer_id = crm.id AND 
                                            crm.company_id = ".$this->arrUser['company_id']." AND 
                                            crm.customer_code = '".$rec->sell_to_cust_no."'";
                                // echo $Sql2;exit;
                                $RS2 = $this->objsetup->CSI($Sql2);

                                $invoiceEmail = $RS2->fields['invoice_email'];
                                $crmID = $RS2->fields['id'];

                                $account_id = $crmID;
                            }
                            else if($module == 'PurchaseOrders' || $module == 'PurchaseInvoices'){

                                $Sql2 = "SELECT srm_finance.purchaseOrderEmail,srm.id 
                                        FROM srm_finance,srm 
                                        WHERE srm_finance.company_id = ".$this->arrUser['company_id']." AND 
                                            srm_finance.supplier_id = srm.id AND 
                                            srm.company_id = ".$this->arrUser['company_id']." AND 
                                            srm.supplier_code = '".$rec->sell_to_cust_no."'";
                                // echo $Sql2;exit;
                                $RS2 = $this->objsetup->CSI($Sql2);

                                $invoiceEmail = $RS2->fields['purchaseOrderEmail'];
                                $srmID = $RS2->fields['id'];

                                $account_id = $srmID;
                            }
                            else if($module == 'DebitNotes' || $module == 'PostedDebitNotes'){

                                $Sql2 = "SELECT srm_finance.debitNoteEmail,srm.id 
                                        FROM srm_finance,srm 
                                        WHERE srm_finance.company_id = ".$this->arrUser['company_id']." AND 
                                            srm_finance.supplier_id = srm.id AND 
                                            srm.company_id = ".$this->arrUser['company_id']." AND 
                                            srm.supplier_code = '".$rec->supplierNo."'";
                                // echo $Sql2;exit;
                                $RS2 = $this->objsetup->CSI($Sql2);

                                $invoiceEmail = $RS2->fields['debitNoteEmail'];
                                $srmID = $RS2->fields['id'];

                                $account_id = $srmID;
                            }

                            $moduleName = '';
                            $recordName = '';
                            $recordId = 0;

                            if($module == 'SalesQuotes' || $module == 'SalesOrders' || $module == 'SalesInvoices'){

                                $Sql2 = "SELECT bill_to_bank_id 
                                        FROM orders 
                                        WHERE id = '".$rec->id."'";

                                // echo $Sql2;exit;
                                $RS2 = $this->objsetup->CSI($Sql2);

                                $bank_account_id = $RS2->fields['bill_to_bank_id'];
                            }

                            if($module == 'SalesQuotes'){
                                $invoiceCode = $rec->sale_quote_code;

                                $invoiceName = 'SQ.'.$invoiceCode.'.'.$this->arrUser['company_id'] .'.pdf';
                                $recordName = $invoiceCode.' - '.$rec->sell_to_cust_name;

                                $emailSubject = str_replace('[[sales_quote_no]]', $invoiceCode, $templateSubject);
                                $emailBody = str_replace('[[sales_quote_no]]', $invoiceCode, $templateBody);

                                $moduleName = 'Sales';
                                $moduleId = 3;
                                $recordId = $rec->id;
                                $recordType = 0; 
                            }
                            else if($module == 'SalesOrders'){
                                $invoiceCode = $rec->sale_order_code;
                                $salesQuoteCode = $rec->sale_quote_code;
                                
                                $invoiceName = 'SO.'.$invoiceCode.'.'.$this->arrUser['company_id'] .'.pdf';
                                if($salesQuoteCode != ''){
                                    $recordName = $salesQuoteCode.'/'.$invoiceCode.' - '.$rec->sell_to_cust_name;
                                } else {
                                    $recordName = $invoiceCode.' - '.$rec->sell_to_cust_name;
                                }
                                

                                $emailSubject = str_replace('[[sales_order_no]]', $invoiceCode, $templateSubject);
                                $emailBody = str_replace('[[sales_order_no]]', $invoiceCode, $templateBody);

                                $moduleName = 'Sales';
                                $moduleId = 3;
                                $recordId = $rec->id;
                                $recordType = 1;
                            }
                            else if($module == 'SalesInvoices'){
                                $invoiceCode = $rec->sale_invioce_code;

                                $invoiceName = 'SI.'.$invoiceCode.'.'.$this->arrUser['company_id'] .'.pdf';
                                $recordName = $rec->sale_order_code.'/'.$invoiceCode.' - '.$rec->sell_to_cust_name;

                                $emailSubject = str_replace('[[sales_invoice_no]]', $invoiceCode, $templateSubject);
                                $emailBody = str_replace('[[sales_invoice_no]]', $invoiceCode, $templateBody);

                                $moduleName = 'Sales';
                                $moduleId = 3;
                                $recordId = $rec->id;
                                $recordType = 2;
                            }
                            else if($module == 'PostedCreditNotes' || $module == 'CreditNotes'){                            

                                if($module == 'CreditNotes'){

                                    $invoiceCode = $rec->return_order_code;                            
                                    $recordName = $invoiceCode.' - '.$rec->sell_to_cust_name;

                                    // echo $recordName; exit;
                                    $emailSubject = str_replace('[[credit_note_no]]', $invoiceCode, $templateSubject);
                                    $emailBody = str_replace('[[credit_note_no]]', $invoiceCode, $templateBody); 

                                    $moduleName = 'Credit Note';
                                    $invoiceName = 'CN.'.$invoiceCode.'.'.$this->arrUser['company_id'] .'.pdf';
                                    $recordType = 1;
                                }
                                else if($module == 'PostedCreditNotes'){

                                    $invoiceCode = $rec->return_invoice_code;                            
                                    $recordName = $rec->return_order_code.'/'.$invoiceCode.' - '.$rec->sell_to_cust_name;

                                    $emailSubject = str_replace('[[credit_note_no]]', $invoiceCode, $templateSubject);
                                    $emailBody = str_replace('[[credit_note_no]]', $invoiceCode, $templateBody); 

                                    $moduleName = 'Credit Note';
                                    $invoiceName = 'PCN.'.$invoiceCode.'.'.$this->arrUser['company_id'] .'.pdf';
                                    $recordType = 2;
                                }

                                $bank_account_id = 1;

                                $moduleId = 4;
                                $recordId = $rec->id;
                            }
                            else if($module == 'DebitNotes' || $module == 'PostedDebitNotes'){

                                if($module == 'DebitNotes'){

                                    $invoiceCode = $rec->debitNoteCode;                            
                                    $recordName = $invoiceCode.' - '.$rec->supplierName;
                                    //$rec->return_order_code.'/'.

                                    $emailSubject = str_replace('[[debit_note_no]]', $invoiceCode, $templateSubject);
                                    $emailBody = str_replace('[[debit_note_no]]', $invoiceCode, $templateBody);  
                                    
                                    $moduleName = 'Debit Note';
                                    $invoiceName = 'DN.'.$invoiceCode.'.'.$this->arrUser['company_id'] .'.pdf';
                                    $recordType = 1;
                                }
                                else if($module == 'PostedDebitNotes'){

                                    $invoiceCode = $rec->invoice_code;                            
                                    $recordName = $rec->debitNoteCode.'/'.$invoiceCode.' - '.$rec->supplierName;

                                    $emailSubject = str_replace('[[posted_debit_note_no]]', $invoiceCode, $templateSubject);
                                    $emailBody = str_replace('[[posted_debit_note_no]]', $invoiceCode, $templateBody); 

                                    $moduleName = 'Debit Note';
                                    $invoiceName = 'PDN.'.$invoiceCode.'.'.$this->arrUser['company_id'] .'.pdf';
                                    $recordType = 2;
                                }

                                $Sql2 = "SELECT bank_account_id 
                                        FROM srm_order_return 
                                        WHERE id = '".$rec->id."'";

                                // echo $Sql2;exit;
                                $RS2 = $this->objsetup->CSI($Sql2);

                                $bank_account_id = $RS2->fields['bank_account_id'];

                                $moduleId = 5;
                                $recordId = $rec->id;
                            }
                            else if($module == 'PurchaseOrders' || $module == 'PurchaseInvoices'){
                                                        
                                if($module == 'PurchaseOrders'){

                                    $invoiceCode = $rec->order_code;
                                    $recordName = $invoiceCode.' - '.$rec->sell_to_cust_name; //$rec->order_code.'/'.

                                    $emailSubject = str_replace('[[purchase_order_no]]', $invoiceCode, $templateSubject);
                                    $emailBody = str_replace('[[purchase_order_no]]', $invoiceCode, $templateBody);
                                    $moduleName = 'Purchase';
                                    $invoiceName = 'PO.'.$invoiceCode.'.'.$this->arrUser['company_id'] .'.pdf';

                                    $recordType = 3;
                                }
                                else if($module == 'PurchaseInvoices'){

                                    $invoiceCode = $rec->invoice_code; 
                                    $recordName = $rec->order_code.'/'.$invoiceCode.' - '.$rec->sell_to_cust_name; 

                                    $emailSubject = str_replace('[[purchase_invoice_no]]', $invoiceCode, $templateSubject);
                                    $emailBody = str_replace('[[purchase_invoice_no]]', $invoiceCode, $templateBody); 

                                    $moduleName = 'Purchase';
                                    $invoiceName = 'PI.'.$invoiceCode.'.'.$this->arrUser['company_id'] .'.pdf';
                                    $recordType = 1;
                                }

                                $Sql2 = "SELECT bank_account_id 
                                        FROM srm_invoice 
                                        WHERE id = '".$rec->id."'";

                                // echo $Sql2;exit;
                                $RS2 = $this->objsetup->CSI($Sql2);

                                $bank_account_id = $RS2->fields['bank_account_id'];
                                $moduleId = 6;
                                $recordId = $rec->id;
                            }
                            $emailSubject = html_entity_decode($emailSubject);
                            $basePath = UPLOAD_PATH . 'attachments/';
                            $file_url = $basePath . $invoiceName;    

                            // if ($pdfLink !== false){
                            /* if (file_exists($file_url)){                       

                                $key = hash('sha256', SECRET_KEY);
                                $iv = substr(hash('sha256', SECRET_IV), 0, 16);
                                $outputInvName = openssl_encrypt($invoiceName, SECRET_METHOD, $key, 0, $iv);
                                $outputInvName = base64_encode($outputInvName);
                                $outputInvNamePath = WEB_PATH . '/api/setup/invoice?alpha='.$outputInvName;

                                $emailBody .= "<a target='_blank' href='$outputInvNamePath'>Preview Invoice</a>";
                            } 
                            else{ */
                                
                                $OptionType = $attr['OptionType'];   
                                $company_logo_url = $attr['company_logo_url']; 

                                $result = $this->CreatePrintTemplate($recordId,$OptionType,$company_logo_url,$recordType);

                                if($result['ack'] == 1){

                                    $outputInvNamePath = $result['file_url'];
                                    $invoiceName = $result['invoiceName'];
                                    // print_r($outputInvNamePath);exit;
                                    $emailBody = str_replace('[[View Document]]',"<a target='_blank' href='$outputInvNamePath'> View Document </a>", $emailBody);  
                                    // $emailBody .= "<a target='_blank' href='$outputInvNamePath'>View Document </a>";
                                }
                                else
                                    $rejectedPdfCounter++;  

                            // }                   
                            
                            $emailDetails = array(
                                "to"         => array_unique(explode(';',$invoiceEmail)),
                                "cc"         => "",
                                "from" => $clientConfiguration['username'],
                                "fromName" => $clientConfiguration['alias'],
                                "subject" => $emailSubject,
                                "body" => $emailBody,
                                "attachment" => ''
                            );
                            
                            if($invoiceEmail){ // && $bank_account_id>0
                                try {
                        
                                    //Recipients
                                    $mail->setFrom($emailDetails['from'], $emailDetails['fromName']);
                                    for ($k = 0; $k < count($emailDetails['to']); $k++) {
                                        $mail->AddTo($emailDetails['to'][$k]);
                                    }

                                    /* $Sql3 = "SELECT * FROM attachments WHERE name IN ('$invoiceName')";
                                    // echo $Sql3;exit;
                                    $RS3 = $this->objsetup->CSI($Sql3);
                                    if ($RS3->RecordCount() > 0) {
                                        $fileResults = [];

                                        while($Row = $RS3->FetchRow())
                                        {
                                            foreach ($Row as $key => $value) {
                                                if (is_numeric($key))
                                                    unset($Row[$key]);
                                            }

                                            $mail->addAttachment($Row['path'], $Row['name']);
                                        }
                                    } */
                                    if (file_exists(UPLOAD_PATH . 'attachments' . '/'.$invoiceName)){

                                        $attachmentPath = UPLOAD_PATH . 'attachments' . '/'.$invoiceName;
                                        $filename = $invoiceName;
                                        $file_encoded = base64_encode(file_get_contents($attachmentPath));
                                        // $attachment = new \SendGrid\Mail\Attachment();
                                        // $attachment->setType("application/text");
                                        // $attachment->setContent($file_encoded);
                                        // $attachment->setDisposition("attachment");
                                        // $attachment->setFilename($filename);
                                        // $mail->addAttachment($attachment);
                                        //Content
                                        $mail->setSubject($emailDetails['subject']);
                                        $mail->addContent("text/html",$emailDetails['body']);
                                        // $mail->AltBody = $emailDetails['body'];
                                        //$mail->send();
                                        // $mail->CharSet = 'UTF-8'; //before sending it of course
                                        try {
                                            $response2 = $this->sendgrid->send($mail);   
                                            $response2 =  (array) $response2;
                                            foreach ($response as $key => $value) {
                                                if (strpos($key, "statusCode") > -1){
                                                    $response['statusCode'] = $value;
                                                }
                                                else if (strpos($key, "body") > -1){
                                                    $response['body'] = json_decode($value);
                                                }
                                            }
                                            if ($response['statusCode'] == 202){
                                                $response['message'] =  "E-mail sent successfully";
                                                $response['ack'] = 1;
                                            }
                                            else{
                                                $response['mailObj'] = $mail;
                                                $response['ack'] = 0;
                                                $response['message'] =  $response['body']->errors[0]->message;
                                            }
                                            $response['sentData'][] = $response2;
                                            array_push($response['sendEmailInvoices'],$invoiceCode);  //$rec->sale_invioce_code                              
                                            $sendEmailInvoicesCounter++;

                                            $SqlInsert = "INSERT INTO email_save 
                                                                        SET
                                                                            email_address_from='" . $emailDetails['from'] . "',
                                                                            email_address_to='" . implode(";",array_unique(explode(';',$invoiceEmail))) . "',
                                                                            email_subject='" . $emailDetails['subject'] . "',
                                                                            sender_id='" . $this->arrUser['id'] . "',
                                                                            account_id='".$account_id."',
                                                                            record_name='".$recordName."',
                                                                            email_body= '" . base64_encode(trim(stripslashes($emailDetails['body'] ))) . "',
                                                                            email_header= 'abc',
                                                                            module_id= '" . $moduleId . "',
                                                                            module_name= '" . $moduleName . "',
                                                                            company_id= '" . $this->arrUser['company_id'] . "',
                                                                            user_id='" . $this->arrUser['id'] . "',
                                                                            date_added='" . current_date_time . "', 
                                                                            type = 1,
                                                                            virtualEmail = '".$senderEmailID."'"; 

                                            $RS = $this->objsetup->CSI($SqlInsert);
                                            $get_last_id = $this->Conn->Insert_ID();
                                            if($moduleName){
                                            $associationsSql = "INSERT INTO document_association
                                                                                SET
                                                                                    module_type     =   'email',
                                                                                    module_id       =   '$get_last_id',
                                                                                    record_type     =   '$moduleName',
                                                                                    record_id       =   '$recordId',
                                                                                    record_name     =   '$recordName',
                                                                                    AddedBy         =   '" . $this->arrUser['id'] . "',
                                                                                    AddedOn         =   '".current_date_time."'";

                                            // echo $associationsSql;exit;
                                            $RSAssociation = $this->objsetup->CSI($associationsSql); 
                                            }
                                            // $response['associationSql'][] = $associationsSql;
                                            // $Insert = " INSERT INTO general_email_attachments (email_id, attachment_id) 
                                            //             SELECT $get_last_id, id 
                                            //             FROM attachments 
                                            //             WHERE path = '$attachmentPath'
                                            //             order by id desc 
                                            //             LIMIT 1";

                                            // // echo $Insert;exit;
                                            // $RS = $this->objsetup->CSI($Insert);         
                                        } catch (Exception $e) {
                                            $response2['message'] =  $e->getMessage();
                                            $response2['mailObj'] = $mail;
                                            $response2['ack'] = 0;
                                            $response['rola'][] = $response2;
                                            array_push($response['rejectedInvoicesReason'],$e->getMessage());
                                            // echo 'Caught exception: '.  $e->getMessage(). "\n";
                                        }                      // Set email format to HTML
                                                            
                                        // $mail->CharSet = 'UTF-8'; //before sending it of course
                                    }                                                               
                                    else{
                                        $rejectedInvoicesCounter++; 
                                        array_push($response['rejectedInvoicesReason'],'PDF not found '.$invoiceCode);
                                        array_push($response['rejectedInvoices'],$invoiceCode); // $rec->sale_invioce_code                                    
                                    }

                                } catch (Exception $e) {
                                    $response['configIssue'] = 1;
                                    $response['message'] =   $mail->ErrorInfo;
                                    $response['mailObj'] = $mail;
                                    $response['debug'] = $mail->smtp->smtp_errors;

                                    array_push($response['rejectedInvoicesReason'],$mail->ErrorInfo);
                                    array_push($response['rejectedInvoices'],$invoiceCode);// $rec->sale_invioce_code
                                    $rejectedInvoicesCounter++; 
                                }
                            }
                            else{
                                /* if(!($bank_account_id>0)){ 
                                    array_push($response['payableBankMissing'],$invoiceCode);
                                    // array_push($response['rejectedInvoicesReason'],'Payable Bank is missing for '.$invoiceCode);
                                }
                                else */
                                if(!($invoiceEmail)){ 
                                    array_push($response['EmailAddressMissing'],$invoiceCode);
                                    // array_push($response['rejectedInvoicesReason'],'Invoice Email is missing for '.$invoiceCode);
                                }
                                else{
                                    array_push($response['rejectedInvoices'],$invoiceCode);// $rec->sale_invioce_code
                                }

                                $rejectedInvoicesCounter++; 
                            }
                        }
                        else
                            $noRecordExist++; 
                    } 
                }
                else{

                    $response['error'] = 'Email configuration does not exist.';  
                    array_push($response['rejectedInvoicesReason'],'Email configuration does not exist.');          
                    $response['rejectedInvoices'] = array(); 
                    $rejectedInvoicesCounter++;   
                }

                if(count($response['payableBankMissing']) >0 ){

                    $invoiceCodeString = '';
                    foreach($response['payableBankMissing'] as $rec){
                        $invoiceCodeString .= $rec.', ';
                    }

                    array_push($response['rejectedInvoicesReason'],'The Payable Bank is missing for following records '.substr($invoiceCodeString,0,-2));
                }

                if(count($response['EmailAddressMissing']) >0 ){

                    $invoiceCodeString = '';
                    foreach($response['EmailAddressMissing'] as $rec){
                        $invoiceCodeString .= $rec.', ';
                    }

                    array_push($response['rejectedInvoicesReason'],'The Recipient Email is missing for following records '.substr($invoiceCodeString,0,-2));
                }

                // if(count($response['rejectedInvoices']) >0 ){
                if($rejectedInvoicesCounter >0 && $sendEmailInvoicesCounter >0 ){
                    $response['ack'] = 2;
                    $response['error'] = $response['rejectedInvoicesReason'];
                    $response['rejectedInvoicesCounter'] = $rejectedInvoicesCounter;
                    $response['sendEmailInvoicesCounter'] = $sendEmailInvoicesCounter;
                }
                else if($sendEmailInvoicesCounter >0 ){            
                    $response['ack'] = 1;
                    $response['error'] = null;
                    $response['rejectedInvoicesCounter'] = $rejectedInvoicesCounter;
                    $response['sendEmailInvoicesCounter'] = $sendEmailInvoicesCounter;
                }
                else{            
                    $response['ack'] = 0;
                    $response['error'] = $response['rejectedInvoicesReason'];
                    $response['rejectedInvoicesCounter'] = $rejectedInvoicesCounter;
                    $response['sendEmailInvoicesCounter'] = $sendEmailInvoicesCounter;
                }
            }
            else{            
                $response['ack'] = 0;
                $response['error'] = 'Invoice template does not exist.'; //Sale           
                $response['rejectedInvoices'] = array();            
            }
        }

        // echo '<pre>';
        // print_r($response);exit;

        return $response;
    }

    function CreatePrintTemplate($recID,$OptionType,$company_logo_url,$recType){
        // $recID = '';

        // echo $recNo;exit;

        /* if($OptionType == 1){
            $Sql = "SELECT id 
                    FROM crm 
                    WHERE company_id = ".$this->arrUser['company_id']." AND 
                          customer_code = '".$recNo."'";
            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            // $invoiceEmail = $RS->fields['invoice_email'];
            $recID = $RS->fields['id'];

        } */

        $response = array();
        $result = array();
        $invoiceName = '';

        $Sql2 = "DELETE FROM doc_header WHERE doc_id = $recID AND TYPE=$OptionType AND company_id = ".$this->arrUser['company_id'];
        //  echo $Sql2;exit;
        $RS2 = $this->objsetup->CSI($Sql2);

        $Sql3 = "DELETE FROM doc_detail WHERE doc_header_id = $recID AND doc_header_type=$OptionType AND company_id = ".$this->arrUser['company_id'];
        //  echo $Sql3;exit;
        $RS3 = $this->objsetup->CSI($Sql3);

        $Sql4 = "SELECT id,additionalInformation 
                 FROM company 
                 WHERE id = " . $this->arrUser['company_id'] . " ";

        // echo $Sql4;exit;
        $RS4 = $this->objsetup->CSI($Sql4);

        $additionalInformation = '';

        if ($RS4->fields['id'] > 0) 
            $additionalInformation = $RS4->fields['additionalInformation'];
        if($OptionType == 1){ //Sales Order

            $Sql4 = "INSERT INTO doc_header ( company_id, doc_id, TYPE, order_no, invoice_no, supp_cust_no, NAME, address_1, address_2, city, postcode, county, 
                                            contact_person, telephone, email, salesperson, cust_order_no, invoice_date, order_date, date_dispatched, req_recpt_del_date, delivery_date, payable_bank, payment_terms, due_date, payment_method, currency, AddedOn, AddedBy, PrintedOn, PrintedBy, notes, bank_name, account_name, sort_code, swift_code, account_no, iban, com_name, com_address_1, com_address_2, com_city, com_county, com_postcode, com_telephone, com_fax, vat_reg_no, bill_to_cust_no, cust_vat_reg_no, net_amount, grand_total, tax_amount, discount, ship_name, ship_address_1, ship_address_2, ship_city, ship_county, ship_postcode, posting_group, quote_no, user_id, cust_wh_ref, shipping_agent_code, warehouse_booking_ref, ship_ref_no, ship_delivery_time, additional_information)  
                    SELECT ".$this->arrUser['company_id'].", $recID , 1, inv.sale_order_code, inv.sale_invioce_code, inv.sell_to_cust_no, inv.sell_to_cust_name, 
                            inv.sell_to_address, inv.sell_to_address2, inv.sell_to_city, inv.sell_to_post_code, inv.sell_to_county, inv.sell_to_contact_id, inv.cust_phone, inv.cust_email, inv.sale_person, inv.cust_order_no, inv.posting_date, inv.offer_date, inv.dispatch_date, inv.requested_delivery_date, inv.delivery_date, inv.bill_to_bank_name, inv.payment_terms_code, inv.due_date, inv.payment_method_code, c.code, UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", externalnote, b.name, b.account_name, b.sort_code, b.swift_code, b.account_no, b.iban, com.name, com.address, com.address_2, com.city, com.county, com.postcode, com.telephone, com.fax, f.vat_reg_no, sell_to_cust_no, fi.vat_number, inv.net_amount, inv.grand_total, inv.tax_amount, inv.items_net_discount, inv.ship_to_name, inv.ship_to_address, inv.ship_to_address2, inv.ship_to_city, inv.ship_to_county, inv.ship_to_post_code, (SELECT NAME FROM ref_posting_group WHERE id=fi.posting_group_id), inv.sale_quote_code, " . $this->arrUser['id'] . ", inv.customer_warehouse_ref, inv.shipping_agent_code, inv.warehouse_booking_ref, inv.container_no, inv.ship_delivery_time, com.additionalInformation
                    FROM orders AS inv
                    LEFT JOIN finance AS fi ON fi.customer_id = inv.sell_to_cust_id
                    LEFT JOIN financial_settings AS f ON f.company_id = inv.company_id
                    LEFT JOIN company AS com ON com.id = inv.company_id
                    LEFT JOIN bank_account AS b ON b.id = inv.bill_to_bank_id
                    LEFT JOIN currency AS c ON c.id = inv.currency_id
                    WHERE inv.id=$recID ";
            //  echo $Sql4;exit;
            $RS4 = $this->objsetup->CSI($Sql4);



            $Sql5 = "INSERT INTO doc_detail (doc_header_id, doc_header_type, company_id, TYPE,number,description,quantity,uom,warehouse,unit_price,discount_type,discount,
                                             vat_rate, total_amount,vat, discount_price,warehouse_id, warehouse_address_1, warehouse_address_2, warehouse_city, warehouse_county, warehouse_post_code, warehouse_telephone, case_qty, pallet_qty,volume,volume_unit,weightUnit,weight)  
				     SELECT $recID,1,".$this->arrUser['company_id'].",inv.type,inv.product_code,inv.item_name,inv.qty,inv.unit_measure,inv.warehouse,
                            inv.unit_price,inv.discount_type, inv.discount,inv.vat_name, inv.total_price,
                            inv.vat_price, inv.discount_price,inv.warehouse_id, w.address_1, w.address_2, w.city, w.county, w.postcode, w.phone, (SELECT MIN(inv.qty/us.quantity) FROM units_of_measure_setup AS us, units_of_measure AS u WHERE us.product_id=inv.item_id AND u.title='Case' AND u.company_id=".$this->arrUser['company_id']." AND us.company_id=".$this->arrUser['company_id']." AND us.cat_id=u.id) AS CaseQty,(SELECT MIN(inv.qty/us.quantity) FROM units_of_measure_setup AS us, units_of_measure AS u WHERE us.product_id=inv.item_id AND u.title='Pallet' AND u.company_id=".$this->arrUser['company_id']." AND us.company_id=".$this->arrUser['company_id']." AND us.cat_id=u.id) PalletQty,
                            (uomsetup.volume * inv.qty),
                            (CASE WHEN uomsetup.DimensionType = 1 THEN 5 ELSE uomsetup.volume_unit END),
                            uomsetup.weightunit,
                            ((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                                ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                                END) * inv.qty) AS weight
                    FROM order_details AS inv
                    LEFT JOIN warehouse AS w ON inv.warehouse_id = w.id
                    LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id
                    WHERE inv.order_id = $recID 
                    ORDER BY inv.id ASC";
            //  echo $Sql5;exit;

            $RS5 = $this->objsetup->CSI($Sql5);   

            $volume = 0;
            $volume_unit = '';
            $weight = 0;
            $weightunit = '';
            $weight_permission = 0;  
            $volume_permission = 0;  

            $Sqla = "SELECT  SUM(uomsetup.volume * inv.qty) AS volume,
                        SUM((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                            ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                            END)* inv.qty) AS weight,
                        'cm3' AS volume_unit,
                        'kg' AS weightunit,
                        (SELECT weight_permission FROM orders 
                        LEFT JOIN items_weight_setup AS w ON ((w.title = 'Sales Quote' AND orders.type=0) OR 
                                (w.title = 'Sales Order' AND orders.type=1) OR 
                                (w.title = 'Sales Invoice' AND orders.type=2) ) AND 
                    orders.company_id = w.company_id WHERE orders.id= '$recID') AS weight_permission,
                        (SELECT volume_permission FROM orders 
                        LEFT JOIN items_weight_setup AS w ON ((w.title = 'Sales Quote' AND orders.type=0) OR 
                                (w.title = 'Sales Order' AND orders.type=1) OR 
                                (w.title = 'Sales Invoice' AND orders.type=2) ) AND 
                    orders.company_id = w.company_id WHERE orders.id= '$recID') AS volume_permission
                    FROM order_details AS inv
                    LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id AND inv.type=0
                    WHERE inv.order_id='$recID' ";
            //echo $Sqla."<hr>"; exit;

            $rsa = $this->objsetup->CSI($Sqla);

            if ($rsa->RecordCount() > 0){
                $volume = $rsa->fields['volume'];
                $volume_unit = $rsa->fields['volume_unit'];
                $weight = $rsa->fields['weight'];
                $weightunit = $rsa->fields['weightunit'];
                $weight_permission = $rsa->fields['weight_permission'];
                $volume_permission = $rsa->fields['volume_permission'];
            }


            $Sql6 = "SELECT * from doc_header WHERE doc_id = $recID AND type = 1 LIMIT 1";
            //  echo $Sql6;exit;

            $RS6 = $this->objsetup->CSI($Sql6); 

            if ($RS6->RecordCount() > 0) {
                
                if ($Row = $RS6->FetchRow()) {
                    
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    
                    $Row['delivery_date'] = (intval($Row['delivery_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['delivery_date']) : '';
                    $Row['order_date'] = (intval($Row['order_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['order_date']) : '';
                    $Row['due_date'] = (intval($Row['due_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['due_date']) : '';
                    $Row['req_recpt_del_date'] = (intval($Row['req_recpt_del_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['req_recpt_del_date']) : '';
                    $Row['cn_date'] = (intval($Row['cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['cn_date']) : '';
                    $Row['date_dispatched'] = (intval($Row['date_dispatched']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['date_dispatched']) : '';
                    $Row['invoice_date'] = (intval($Row['invoice_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['invoice_date']) : '';
                    $Row['supp_cn_date'] = (intval($Row['supp_cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['supp_cn_date']) : 0;
                    $Row['receipt_date'] = (intval($Row['receipt_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['receipt_date']) : 0;
                    
                    $Row['doc_details_arr'] = self::get_doc_details($recID, $OptionType, 0, $this->arrUser['company_id']);

                    $Row['discount'] = 0;

                    $Row['totalVolume'] = $volume;
                    $Row['totalvolume_unit'] = $volume_unit;
                    $Row['totalweightunit'] = $weightunit;
                    $Row['totalweight'] = $weight;
                    $Row['weight_permission'] = $weight_permission;
                    $Row['volume_permission'] = $volume_permission;

                    foreach ($Row['doc_details_arr'] as $rec) {
                        $Row['discount'] += $rec['discount'];
                    }

                    if($Row['discount'] > 0){
                        $counter =0;
                        $Row['discount'] = 0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {

                            $discount_amount = 0;

                            if($rec['discount_type'] == 'Value'){
                                $discount_amount = $rec['discount'];
                            }
                            elseif($rec['discount_type'] == 'Percentage'){
                                $discount_amount = ((($rec['quantity'] * $rec['unit_price']) * $rec['discount']) / 100);
                            }
                            else{
                                $discount_amount = $rec['quantity'] * $rec['discount'];
                            }

                            $Row['doc_details_arr'][$counter]['discount_amount'] = $discount_amount;
                            $Row['discount'] += ROUND($discount_amount,2);

                            if($rec['discount'] != 0) $Row['doc_details_arr'][$counter]['discountchk'] = 1;

                            $Row['doc_details_arr'][$counter]['volume_permission'] = $volume_permission;
                            $Row['doc_details_arr'][$counter]['weight_permission'] = $weight_permission;
                            $counter ++;
                        }  
                    }
                    else{
                        $counter =0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {
                            $Row['doc_details_arr'][$counter]['volume_permission'] = $volume_permission;
                            $Row['doc_details_arr'][$counter]['weight_permission'] = $weight_permission;
                            $counter ++;
                        }
                    }

                    $Row['shipData'] = 0;

                    if($Row['ship_name'] || $Row['ship_address_1'] || $Row['ship_address_2'] || $Row['ship_city'] || $Row['ship_postcode']){
                        $Row['shipData'] = 1;
                    }
                    
                    $Row['company_logo_url'] = $company_logo_url;
                    //"SalesOrders"


                    if($recType == 0){
                        $Row['templateType'] = 'salesQuote';
                        $invoiceName = 'SQ.'.$Row['quote_no'].'.'.$this->arrUser['company_id'] .'.pdf';
                    }
                    elseif($recType == 1){
                        $Row['templateType'] = 'salesOrder';
                        $invoiceName = 'SO.'.$Row['order_no'].'.'.$this->arrUser['company_id'] .'.pdf';
                    }
                    elseif($recType == 2){
                        $Row['templateType'] = 'salesInvoice';
                        $invoiceName = 'SI.'.$Row['invoice_no'].'.'.$this->arrUser['company_id'] .'.pdf';
                    }
                    // $attachmentPath = UPLOAD_PATH . 'attachments' . '/'.$invoiceName;

                    $basePath = UPLOAD_PATH . 'attachments/';
                    $file_url = $basePath . $invoiceName; 

                    $Row['printableAddInfo'] = $additionalInformation;                  

                    $response['response'] = $Row;
                }
                // error_reporting(E_ALL);
                $result = "";
                $server_output = "";

                // $result->template->shortid = "r1gu5oJ13N";

                // if($this->arrUser['company_id'] == 2) $result->template->shortid = "40Xj4YP3vZ";
                // else $result->template->shortid = "r1gu5oJ13N";

                $result->template->shortid = "40Xj4YP3vZ";

                $result->data = $response;

                // print_r(json_encode($result));exit;

                // $url = 'http://silverowreports.azurewebsites.net/api/report';
                $url = 'https://silverowjsreport2.azurewebsites.net/api/report';

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_POST, 1);

                curl_setopt($ch, CURLOPT_POSTFIELDS,json_encode($result));  //Post Fields
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                
                $reqheaders = [
                    'Authorization: "Basic '.base64_encode("admin:admin123").'"',
                    'Content-Type: application/json'              
                ];

                curl_setopt($ch, CURLOPT_HTTPHEADER, $reqheaders);
                

                $server_output = curl_exec ($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

                $errors = curl_error($ch);

                // print_r($errors);exit;

                curl_close ($ch);               
                // header("Content-type:application/pdf");                
                
                try {
                    // if (file_exists($file_url)) unlink($file_url);
                    // unlink($file_url);
                    // Open the file to get existing content 

                    // echo $file_url;
                    $open = file_get_contents($file_url); 

                    // phpinfo();                    
                    // Append a new person to the file 
                    // $open .= $server_output; 
                    
                    // Write the contents back to the file 
                    file_put_contents($file_url, $server_output); 

                } catch (HttpException $ex) {
                    echo $ex;
                    $response['file_url'] = $ex;
                    $response['invoiceName'] = '';
                    exit;
                } 
                

                if(file_exists($file_url)){
                    // $response['rejectedPdfCounter'] = 0;
                    // $response['createdPdfCounter'] = 1;
                    $response['ack'] = 1; 

                    $key = hash('sha256', SECRET_KEY);
                    $iv = substr(hash('sha256', SECRET_IV), 0, 16);
                    $outputInvName = openssl_encrypt($invoiceName, SECRET_METHOD, $key, 0, $iv);
                    $outputInvName = base64_encode($outputInvName);

                    $response['file_url'] = WEB_PATH . '/api/setup/document?alpha='.$outputInvName; 
                    $response['invoiceName'] = $invoiceName; 
                }
                else{
                    $response['ack'] = 0; 
                    $response['file_url'] = ''; 
                    $response['invoiceName'] = '';
                }                               
            }
            else{            
                $response['ack'] = 0;  
                $response['file_url'] = ''; 
                $response['invoiceName'] = '';    
                // $response['error'] = null;
                // $response['rejectedPdfCounter'] = 0;
                // $response['createdPdfCounter'] = 0;         
            } 
            // print_r($response);exit;            
            return $response;               
        }
        elseif($OptionType == 2){ //Purchase Order

            $Sql4 = "INSERT INTO doc_header ( company_id, doc_id, TYPE, order_no,invoice_no, supp_cust_no, NAME, address_1, address_2, 
                                            city, postcode, county, contact_person, telephone, email, purchaser, consignment_no, supplier_order_no, invoice_date, supplier_invoice_no, order_date, req_recpt_del_date, receipt_date, payable_bank, payment_terms, payment_method, due_date, currency, AddedOn, AddedBy, PrintedOn, PrintedBy, com_name, com_address_1, com_address_2, com_city, com_county, com_postcode, com_telephone, com_fax, bank_name, account_name, sort_code,swift_code, account_no, iban, notes, net_amount, grand_total, tax_amount, bill_to_cust_no, ship_name, ship_address_1, ship_address_2, ship_city, ship_county, ship_postcode, supp_vat_reg, posting_group, vat_reg_no, user_id)  
                    SELECT ".$this->arrUser['company_id'].", $recID, 2, inv.order_code, inv.invoice_code, inv.sell_to_cust_no, inv.sell_to_cust_name, 
                            inv.sell_to_address, inv.sell_to_address2, inv.sell_to_city, inv.sell_to_post_code, inv.sell_to_county, inv.sell_to_contact_no, 
                            inv.cust_phone, inv.cust_email, inv.srm_purchase_code, inv.comm_book_in_no, inv.cust_order_no, inv.invoice_date, inv.supp_order_no, 
                            inv.order_date, inv.requested_delivery_date, inv.receiptDate, inv.payable_bank, pt.name, pm.name, inv.due_date, c.code, 
                            UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", com.name, com.address, 
                            com.address_2, com.city, com.county, com.postcode, com.telephone, com.fax, b.name, b.account_name, b.sort_code, b.swift_code, b.account_no, b.iban, 
                            inv.note, inv.net_amount, inv.grand_total, inv.tax_amount, inv.bill_to_cust_no, inv.ship_to_name, inv.ship_to_address, inv.ship_to_address2, inv.ship_to_city, inv.ship_to_county, inv.ship_to_post_code, fi.vat_number, (SELECT NAME FROM ref_posting_group WHERE id=fi.posting_group_id), f.vat_reg_no, " . $this->arrUser['id'] . "
                    FROM srm_invoice AS inv
                    LEFT JOIN srm_finance AS fi ON fi.supplier_id = inv.sell_to_cust_id
                    LEFT JOIN financial_settings AS f ON f.company_id = inv.company_id
                    LEFT JOIN srm_payment_methods AS pm ON pm.id = inv.payment_method_id
                    LEFT JOIN srm_payment_terms AS pt ON pt.id = inv.payment_terms_code
                    LEFT JOIN currency AS c ON c.id = inv.currency_id
                    LEFT JOIN company AS com ON com.id = inv.company_id
                    LEFT JOIN bank_account AS b ON b.id = inv.bank_account_id
                    WHERE inv.id = $recID
                    GROUP BY inv.id ";
            //  echo $Sql4;exit;
            $RS4 = $this->objsetup->CSI($Sql4);

            $Sql5 = "INSERT INTO doc_detail (doc_header_id, doc_header_type, company_id, TYPE,number,description,quantity,uom,
                                             warehouse,unit_price, discount_type, discount,vat_rate,vat,total_amount, discount_amount,volume,volume_unit,weightUnit,weight)  
                    SELECT $recID, 2, ".$this->arrUser['company_id'].",inv.type,inv.product_code,inv.product_name,inv.qty,inv.unit_measure,inv.warehouse,inv.unit_price,inv.discount_type,inv.discount,inv.vat,inv.vat_price,inv.total_price,inv.discount_price,
                    (uomsetup.volume * inv.qty),
                    (CASE WHEN uomsetup.DimensionType = 1 THEN 5 ELSE uomsetup.volume_unit END),
                    uomsetup.weightunit,
                    ((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                        ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                        END)* inv.qty) AS weight
                    FROM srm_invoice_detail AS inv
                    LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id
                    WHERE inv.invoice_id = $recID ";
            //  echo $Sql5;exit;
            $RS5 = $this->objsetup->CSI($Sql5);

            $volume = 0;
            $volume_unit = '';
            $weight = 0;
            $weightunit = '';
            $weight_permission = 0;  
            $volume_permission = 0;    

            $Sqla = "SELECT  SUM(uomsetup.volume * inv.qty) AS volume,
                        'cm3' AS volume_unit,
                        SUM((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                            ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                            END)* inv.qty) AS weight,
                        'kg' AS weightunit,weight_permission,volume_permission
                    FROM srm_invoice_detail AS inv
                    LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id
                    LEFT JOIN items_weight_setup AS w ON w.title = 'Purchase Order' AND inv.company_id = w.company_id
                    WHERE inv.invoice_id='$recID' AND inv.type=0";
            //echo $Sqla."<hr>"; exit;

            $rsa = $this->objsetup->CSI($Sqla);

            if ($rsa->RecordCount() > 0){
                $volume = $rsa->fields['volume'];
                $volume_unit = $rsa->fields['volume_unit'];
                $weight = $rsa->fields['weight'];
                $weightunit = $rsa->fields['weightunit'];
                $weight_permission = $rsa->fields['weight_permission'];
                $volume_permission = $rsa->fields['volume_permission'];
            }

            $Sql6 = "SELECT * from doc_header WHERE doc_id = $recID AND type = 2 LIMIT 1";
            //  echo $Sql6;exit;

            $RS6 = $this->objsetup->CSI($Sql6); 

            if ($RS6->RecordCount() > 0) {
                
                if ($Row = $RS6->FetchRow()) {
                    
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    
                    $Row['delivery_date'] = (intval($Row['delivery_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['delivery_date']) : '';
                    $Row['order_date'] = (intval($Row['order_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['order_date']) : '';
                    $Row['due_date'] = (intval($Row['due_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['due_date']) : '';
                    $Row['req_recpt_del_date'] = (intval($Row['req_recpt_del_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['req_recpt_del_date']) : '';
                    $Row['cn_date'] = (intval($Row['cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['cn_date']) : '';
                    $Row['date_dispatched'] = (intval($Row['date_dispatched']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['date_dispatched']) : '';
                    $Row['invoice_date'] = (intval($Row['invoice_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['invoice_date']) : '';
                    $Row['supp_cn_date'] = (intval($Row['supp_cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['supp_cn_date']) : 0;
                    $Row['receipt_date'] = (intval($Row['receipt_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['receipt_date']) : 0;
                    
                    $Row['doc_details_arr'] = self::get_doc_details($recID, $OptionType, 0, $this->arrUser['company_id']);

                    $Row['discount'] = 0;
                    
                    $Row['totalVolume'] = $volume;
                    $Row['totalvolume_unit'] = $volume_unit;
                    $Row['totalweightunit'] = $weightunit;
                    $Row['totalweight'] = $weight;
                    $Row['weight_permission'] = $weight_permission;
                    $Row['volume_permission'] = $volume_permission;

                    foreach ($Row['doc_details_arr'] as $rec) {
                        $Row['discount'] += $rec['discount'];
                    }

                    if($Row['discount'] > 0){
                        $counter =0;
                        $Row['discount'] = 0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {

                            $discount_amount = 0;

                            if($rec['discount_type'] == 'Value'){
                                $discount_amount = $rec['discount'];
                            }
                            elseif($rec['discount_type'] == 'Percentage'){
                                $discount_amount = ((($rec['quantity'] * $rec['unit_price']) * $rec['discount']) / 100);
                            }
                            else{
                                $discount_amount = $rec['quantity'] * $rec['discount'];
                            }

                            $Row['doc_details_arr'][$counter]['discount_amount'] = $discount_amount;
                            $Row['discount'] += ROUND($discount_amount,2);

                            if($rec['discount'] != 0) $Row['doc_details_arr'][$counter]['discountchk'] = 1;   

                            $Row['doc_details_arr'][$counter]['volume_permission'] = $volume_permission;
                            $Row['doc_details_arr'][$counter]['weight_permission'] = $weight_permission;
                            $counter ++;
                        }  
                    }                    
                    else{
                        $counter =0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {
                            $Row['doc_details_arr'][$counter]['volume_permission'] = $volume_permission;
                            $Row['doc_details_arr'][$counter]['weight_permission'] = $weight_permission;
                            $counter ++;
                        }
                    }
                    $Row['shipData'] = 0;

                    if($Row['ship_name'] || $Row['ship_address_1'] || $Row['ship_address_2'] || $Row['ship_city'] || $Row['ship_postcode']){
                        $Row['shipData'] = 1;
                    }
                    
                    $Row['company_logo_url'] = $company_logo_url;   
                    $Row['printableAddInfo'] = $additionalInformation;                   
                    
                    if($recType == 2 || $recType == 3){

                        $Row['templateType'] = 'purchaseOrder';
                        $invoiceName = 'PO.'.$Row['order_no'].'.'.$this->arrUser['company_id'] .'.pdf';

                        $basePath = UPLOAD_PATH . 'attachments/';
                        $file_url = $basePath . $invoiceName;                    

                        $response['response'] = $Row;

                        $result = "";
                        $server_output = "";

                        $result->template->shortid = "r1eEV7H-hN";
                        $result->data = $response;
                    }
                    elseif($recType == 1){

                        $Row['templateType'] = 'purchaseInvoice';
                        $invoiceName = 'PI.'.$Row['invoice_no'].'.'.$this->arrUser['company_id'] .'.pdf';

                        $basePath = UPLOAD_PATH . 'attachments/';
                        $file_url = $basePath . $invoiceName;                    

                        $response['response'] = $Row;

                        $result = "";
                        $server_output = "";

                        $result->template->shortid = "BklSqUU-2V";
                        $result->data = $response;
                    }                    
                }
                // error_reporting(E_ALL);                

                // $url = 'http://silverowreports.azurewebsites.net/api/report';
                $url = 'https://silverowjsreport2.azurewebsites.net/api/report';

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_POST, 1);

                curl_setopt($ch, CURLOPT_POSTFIELDS,json_encode($result));  //Post Fields
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                
                $reqheaders = [
                    'Authorization: "Basic '.base64_encode("admin:admin123").'"',
                    'Content-Type: application/json'              
                ];

                curl_setopt($ch, CURLOPT_HTTPHEADER, $reqheaders);
                

                $server_output = curl_exec ($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

                $errors = curl_error($ch);

                // print_r($errors);exit;

                curl_close ($ch);                    
                
                try {
                    // if (file_exists($file_url)) unlink($file_url);

                    // Open the file to get existing content 
                    $open = file_get_contents($file_url); 
                    
                    // Write the contents back to the file 
                    file_put_contents($file_url, $server_output); 

                } catch (HttpException $ex) {
                    echo $ex;
                    $response['file_url'] = $ex;
                    $response['invoiceName'] = '';
                    exit;
                }                 

                if(file_exists($file_url)){
                    $response['ack'] = 1; 

                    $key = hash('sha256', SECRET_KEY);
                    $iv = substr(hash('sha256', SECRET_IV), 0, 16);
                    $outputInvName = openssl_encrypt($invoiceName, SECRET_METHOD, $key, 0, $iv);
                    $outputInvName = base64_encode($outputInvName);

                    $response['file_url'] = WEB_PATH . '/api/setup/document?alpha='.$outputInvName; 
                    $response['invoiceName'] = $invoiceName; 
                }
                else{
                    $response['ack'] = 0; 
                    $response['file_url'] = ''; 
                    $response['invoiceName'] = ''; 
                }                               
            }
            else{            
                $response['ack'] = 0;  
                $response['file_url'] = '';   
                $response['invoiceName'] = '';     
            } 
            // print_r($response);exit;            
            return $response; 
        }
        elseif($OptionType == 3){ // Debit Note

            $Sql4 = "INSERT INTO doc_header (company_id, doc_id, TYPE, order_no,supp_cust_no, NAME, apply_to_pi_si, address_1, address_2, city, 
                                            postcode, county, contact_person, telephone, email, purchaser, supplier_ref_no, supp_cn_date, supp_cn_no, date_dispatched, supplier_receipt_date, delivery_date,payable_bank, payment_terms, payment_method, currency, AddedOn, AddedBy, PrintedOn, PrintedBy, notes,com_name, com_address_1, com_address_2, com_city, com_county, com_postcode, com_telephone, com_fax, debit_code, shipment_date, invoice_no,    net_amount, grand_total, tax_amount, discount,       vat_reg_no, supplier_order_no, supp_vat_reg, posting_group, user_id, bank_name, account_name, sort_code, swift_code, account_no, iban) 
                    SELECT ".$this->arrUser['company_id'].", $recID, 3, inv.debitNoteCode, inv.supplierNo, inv.supplierName, inv.purchaseInvoice,
                            inv.supplierAddress,inv.supplierAddress2, inv.supplierCity, inv.supplierPostCode, inv.supplierCounty, inv.supplierContactName, inv.supplierContactTelephone, inv.supplierContactEmail, inv.Purchaser, inv.supplierReferenceNo, inv.supplierCreditNoteDate, inv.supplierCreditNoteNo, inv.dispatchDate, inv.supplierReceiptDate, inv.deliveryDate,inv.payable_bank, pt.name, pm.name, c.code, UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", inv.note, com.name, com.address, com.address_2, com.city, com.county, com.postcode, com.telephone, com.fax, inv.invoice_code, inv.shipment_date, inv.invoice_code,inv.net_amount, inv.grand_total, inv.tax_amount, inv.items_net_discount, f.vat_reg_no, inv.supplierNo, fi.vat_number, (SELECT NAME FROM ref_posting_group WHERE id=fi.posting_group_id), " . $this->arrUser['id'] . ", b.name,b.account_name, b.sort_code, b.swift_code, b.account_no, b.iban
                    FROM srm_order_return AS inv
                    LEFT JOIN srm_finance AS fi ON fi.supplier_id = inv.supplierID
                    LEFT JOIN srm_payment_methods AS pm ON pm.id = inv.payment_method_id
                    LEFT JOIN srm_payment_terms AS pt ON pt.id = inv.payment_terms_code
                    LEFT JOIN financial_settings AS f ON f.company_id = inv.company_id
                    LEFT JOIN currency AS c ON c.id = inv.currency_id
                    LEFT JOIN company AS com ON com.id = inv.company_id
                    LEFT JOIN bank_account AS b ON b.id = inv.bank_account_id
                    WHERE inv.id = $recID";
            //  echo $Sql4;exit;
            $RS4 = $this->objsetup->CSI($Sql4);

            $Sql5 = "INSERT INTO doc_detail (doc_header_id, doc_header_type, company_id, TYPE,number,description,quantity,uom,warehouse,
                                             unit_price, discount_type, discount,vat_rate, total_amount,volume,volume_unit,weightUnit,weight)  
                    SELECT $recID,3,".$this->arrUser['company_id'].",inv.type,inv.product_code,inv.product_name,inv.qty,inv.unit_measure,inv.warehouse,inv.unit_price,inv.discount_type,inv.discount,inv.vat,inv.total_price,(uomsetup.volume * inv.qty),
                    (CASE WHEN uomsetup.DimensionType = 1 THEN 5 ELSE uomsetup.volume_unit END),                    uomsetup.weightunit,
                    ((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                        ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                        END) * inv.qty) AS weight
                    FROM srm_order_return_detail AS inv
                    LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id AND inv.type = 0 
                    WHERE inv.invoice_id = $recID ";
            //  echo $Sql5;exit;
            $RS5 = $this->objsetup->CSI($Sql5);

            $volume = 0;
            $volume_unit = '';
            $weight = 0;
            $weightunit = '';
            $weight_permission = 0;  
            $volume_permission = 0;  

            $Sqla = "SELECT  SUM(uomsetup.volume * inv.qty) AS volume,
                        'cm3' AS volume_unit,
                        SUM((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                            ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                            END)* inv.qty) AS weight,
                        'kg' AS weightunit,weight_permission,volume_permission
                    FROM srm_order_return_detail AS inv
                    LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id AND inv.type=0
                    LEFT JOIN items_weight_setup AS w ON w.title = 'Debit Note' AND inv.company_id = w.company_id
                    WHERE inv.invoice_id='$recID' ";
            //echo $Sqla."<hr>"; exit;

            $rsa = $this->objsetup->CSI($Sqla);

            if ($rsa->RecordCount() > 0){
                $volume = $rsa->fields['volume'];
                $volume_unit = $rsa->fields['volume_unit'];
                $weight = $rsa->fields['weight'];
                $weightunit = $rsa->fields['weightunit'];
                $weight_permission = $rsa->fields['weight_permission'];
                $volume_permission = $rsa->fields['volume_permission'];
            }

            $Sql6 = "SELECT * from doc_header WHERE doc_id = $recID AND type = 3 LIMIT 1";
            //  echo $Sql6;exit;

            $RS6 = $this->objsetup->CSI($Sql6); 

            if ($RS6->RecordCount() > 0) {
                
                if ($Row = $RS6->FetchRow()) {
                    
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    
                    $Row['delivery_date'] = (intval($Row['delivery_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['delivery_date']) : '';
                    $Row['order_date'] = (intval($Row['order_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['order_date']) : '';
                    $Row['due_date'] = (intval($Row['due_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['due_date']) : '';
                    $Row['req_recpt_del_date'] = (intval($Row['req_recpt_del_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['req_recpt_del_date']) : '';
                    $Row['cn_date'] = (intval($Row['cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['cn_date']) : '';
                    $Row['date_dispatched'] = (intval($Row['date_dispatched']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['date_dispatched']) : '';
                    $Row['invoice_date'] = (intval($Row['invoice_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['invoice_date']) : '';
                    $Row['supp_cn_date'] = (intval($Row['supp_cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['supp_cn_date']) : 0;
                    $Row['receipt_date'] = (intval($Row['receipt_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['receipt_date']) : 0;
                    $Row['shipment_date'] = (intval($Row['shipment_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['shipment_date']) : 0;
                    
                    $Row['doc_details_arr'] = self::get_doc_details($recID, $OptionType, 0, $this->arrUser['company_id']);

                    $Row['discount'] = 0;

                    $Row['totalVolume'] = $volume;
                    $Row['totalvolume_unit'] = $volume_unit;
                    $Row['totalweightunit'] = $weightunit;
                    $Row['totalweight'] = $weight;
                    $Row['weight_permission'] = $weight_permission;
                    $Row['volume_permission'] = $volume_permission;


                    foreach ($Row['doc_details_arr'] as $rec) {
                        $Row['discount'] += $rec['discount'];
                    }

                    if($Row['discount'] > 0){
                        $counter =0;
                        $Row['discount'] = 0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {

                            $discount_amount = 0;

                            if($rec['discount_type'] == 'Value'){
                                $discount_amount = $rec['discount'];
                            }
                            elseif($rec['discount_type'] == 'Percentage'){
                                $discount_amount = ((($rec['quantity'] * $rec['unit_price']) * $rec['discount']) / 100);
                            }
                            else{
                                $discount_amount = $rec['quantity'] * $rec['discount'];
                            }

                            $Row['doc_details_arr'][$counter]['discount_amount'] = $discount_amount;
                            $Row['discount'] += ROUND($discount_amount,2);

                            if($rec['discount'] != 0)  $Row['doc_details_arr'][$counter]['discountchk'] = 1;  

                            $Row['doc_details_arr'][$counter]['volume_permission'] = $volume_permission;
                            $Row['doc_details_arr'][$counter]['weight_permission'] = $weight_permission;
                            $counter ++;
                        }  
                    }
                    else{
                        $counter =0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {
                            $Row['doc_details_arr'][$counter]['volume_permission'] = $volume_permission;
                            $Row['doc_details_arr'][$counter]['weight_permission'] = $weight_permission;
                            $counter ++;
                        }
                    }

                    $Row['shipData'] = 0;

                    if($Row['ship_name'] || $Row['ship_address_1'] || $Row['ship_address_2'] || $Row['ship_city'] || $Row['ship_postcode']){
                        $Row['shipData'] = 1;
                    }
                    
                    $Row['company_logo_url'] = $company_logo_url;
                    $Row['printableAddInfo'] = $additionalInformation;                      
                    
                    if($recType == 1){
                        $Row['templateType'] = 'debitNote';
                        $invoiceName = 'DN.'.$Row['order_no'].'.'.$this->arrUser['company_id'] .'.pdf';
                    }
                    elseif($recType == 2){
                        $Row['templateType'] = 'postedDebitNote';
                        $invoiceName = 'PDN.'.$Row['invoice_no'].'.'.$this->arrUser['company_id'] .'.pdf';
                    }

                    $basePath = UPLOAD_PATH . 'attachments/';
                    $file_url = $basePath . $invoiceName;                    

                    $response['response'] = $Row;
                }

                // error_reporting(E_ALL);
                $result = "";
                $server_output = "";

                $result->template->shortid = "HJQ3pU-h4";
                $result->data = $response;

                // echo '<pre>';print_r($result);exit;

                // $url = 'http://silverowreports.azurewebsites.net/api/report';
                $url = 'https://silverowjsreport2.azurewebsites.net/api/report';

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_POST, 1);

                curl_setopt($ch, CURLOPT_POSTFIELDS,json_encode($result));  //Post Fields
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                
                $reqheaders = [
                    'Authorization: "Basic '.base64_encode("admin:admin123").'"',
                    'Content-Type: application/json'              
                ];

                curl_setopt($ch, CURLOPT_HTTPHEADER, $reqheaders);
                

                $server_output = curl_exec ($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

                $errors = curl_error($ch);

                // print_r($errors);exit;

                curl_close ($ch);                    
                
                try {
                    // if (file_exists($file_url)) unlink($file_url);

                    // Open the file to get existing content 
                    $open = file_get_contents($file_url); 
                    
                    // Write the contents back to the file 
                    file_put_contents($file_url, $server_output); 

                } catch (HttpException $ex) {
                    echo $ex;
                    $response['file_url'] = $ex;
                    $response['invoiceName'] = '';
                    exit;
                }                 

                if(file_exists($file_url)){
                    $response['ack'] = 1; 

                    $key = hash('sha256', SECRET_KEY);
                    $iv = substr(hash('sha256', SECRET_IV), 0, 16);
                    $outputInvName = openssl_encrypt($invoiceName, SECRET_METHOD, $key, 0, $iv);
                    $outputInvName = base64_encode($outputInvName);

                    $response['file_url'] = WEB_PATH . '/api/setup/document?alpha='.$outputInvName; 
                    $response['invoiceName'] = $invoiceName; 
                }
                else{
                    $response['ack'] = 0; 
                    $response['file_url'] = ''; 
                    $response['invoiceName'] = ''; 
                }                               
            }
            else{            
                $response['ack'] = 0;  
                $response['file_url'] = ''; 
                $response['invoiceName'] = '';       
            } 
            // print_r($response);exit;            
            return $response; 
        }
        elseif($OptionType == 4){ // Cedit Note

            $Sql4 = "INSERT INTO doc_header ( company_id, doc_id, TYPE, order_no, cust_code, NAME, apply_to_pi_si, address_1, address_2, city, postcode, 
                                            county, contact_person, email, telephone, salesperson, cn_date, order_date, req_recpt_del_date, receipt_date, currency, AddedOn, AddedBy, PrintedOn, PrintedBy, notes, com_name, com_address_1, com_address_2, com_city, com_county, com_postcode, com_telephone, com_fax, bill_to_cust_no, discount, grand_total, net_amount,tax_amount, vat,shipping_agent_code, shipment_method_code, cust_vat_reg_no , ship_name, ship_address_1, ship_address_2, ship_city, ship_county, ship_postcode, credit_code, bank_name,account_name,  sort_code, swift_code, account_no, iban, vat_reg_no, supp_vat_reg, posting_group, cust_order_no, invoice_no, user_id) 
                    SELECT ".$this->arrUser['company_id'].", $recID, 4, inv.return_order_code, inv.sell_to_cust_no, inv.sell_to_cust_name,
                            inv.sale_invoice,inv.sell_to_address, inv.sell_to_address2, inv.sell_to_city, inv.sell_to_post_code, inv.sell_to_county, inv.sell_to_contact_no, inv.cust_email, inv.cust_phone, inv.sale_person, inv.posting_date, inv.offer_date, inv.requested_delivery_date, inv.delivery_date, c.code, UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", inv.note, com.name, com.address, com.address_2, com.city, com.county, com.postcode, com.telephone, com.fax, inv.bill_to_cust_no, inv.items_net_discount,  inv.grand_total, inv.net_amount,inv.tax_amount,inv.items_net_vat, inv.shipping_agent_code, inv.shipment_method_code, fi.vat_number, inv.ship_to_name, inv.ship_to_address, inv.ship_to_address2, inv.ship_to_city, inv.ship_to_county, inv.ship_to_post_code, inv.return_invoice_code, b.display_name, b.account_name, b.sort_code, b.swift_code, b.account_no, b.iban, f.vat_reg_no, fi.vat_number, (SELECT NAME FROM ref_posting_group WHERE id=fi.posting_group_id), inv.cust_order_no, inv.return_invoice_code, " . $this->arrUser['id'] . "
                    FROM return_orders AS inv
                    LEFT JOIN currency AS c ON c.id = inv.currency_id
                    LEFT JOIN company AS com ON com.id = inv.company_id
                    LEFT JOIN finance AS fi ON fi.customer_id = inv.sell_to_cust_id
                    LEFT JOIN bank_account AS b ON b.id = fi.bank_account_id
                    LEFT JOIN financial_settings AS f ON f.company_id = inv.company_id
                    WHERE inv.id = $recID ";
            //  echo $Sql4;exit;
            $RS4 = $this->objsetup->CSI($Sql4);

            $Sql5 = "INSERT INTO doc_detail (doc_header_id, doc_header_type, company_id, TYPE,number,description,quantity,uom,warehouse,unit_price, 
                                             discount_type, discount,vat_rate,original_amount, discount_amount,volume,volume_unit,weightUnit,weight)  
                    SELECT $recID,4,".$this->arrUser['company_id'].", inv.type,inv.product_code,inv.item_name,inv.qty,inv.unit_measure,inv.warehouse,inv.unit_price,
                           inv.discount_type,inv.discount,inv.vat_name,inv.total_price,inv.discount_price,
                    (uomsetup.volume * inv.qty),
                    (CASE WHEN uomsetup.DimensionType = 1 THEN 5 ELSE uomsetup.volume_unit END),
                    uomsetup.weightunit,
                    ((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                        ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                        END) * inv.qty) AS weight
                    FROM return_order_details AS inv
                    LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id AND inv.type=0
                    WHERE inv.order_id = $recID 
                    ORDER BY inv.id ASC ";
            //  echo $Sql5;exit;
            $RS5 = $this->objsetup->CSI($Sql5);

            $volume = 0;
            $volume_unit = '';
            $weight = 0;
            $weightunit = '';
            $weight_permission = 0;  
            $volume_permission = 0;  

            $Sqla = "SELECT  SUM(uomsetup.volume * inv.qty) AS volume,
                        SUM((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                            ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                            END)* inv.qty) AS weight,
                        'cm3' AS volume_unit,
                        'kg' AS weightunit,
                        (SELECT weight_permission FROM return_orders 
                        LEFT JOIN items_weight_setup AS w ON ((w.title = 'Credit Note' AND return_orders.type=1) OR 
                                (w.title = 'Posted Credit Note' AND return_orders.type=2) ) AND 
                    return_orders.company_id = w.company_id WHERE return_orders.id= '$recID') AS weight_permission,
                        (SELECT volume_permission FROM return_orders 
                        LEFT JOIN items_weight_setup AS w ON ((w.title = 'Credit Note' AND return_orders.type=1) OR 
                                (w.title = 'Posted Credit Note' AND return_orders.type=2) ) AND 
                    return_orders.company_id = w.company_id WHERE return_orders.id= '$recID') AS volume_permission
                    FROM return_order_details AS inv
                    LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id AND inv.type=0
                    WHERE inv.order_id='$recID' ";
            //echo $Sqla."<hr>"; exit;

            $rsa = $this->objsetup->CSI($Sqla);

            if ($rsa->RecordCount() > 0){
                $volume = $rsa->fields['volume'];
                $volume_unit = $rsa->fields['volume_unit'];
                $weight = $rsa->fields['weight'];
                $weightunit = $rsa->fields['weightunit'];
                $weight_permission = $rsa->fields['weight_permission'];
                $volume_permission = $rsa->fields['volume_permission'];
            }

            $Sql6 = "SELECT * from doc_header WHERE doc_id = $recID AND type = 4 LIMIT 1";
            //  echo $Sql6;exit;

            $RS6 = $this->objsetup->CSI($Sql6); 

            if ($RS6->RecordCount() > 0) {
                
                if ($Row = $RS6->FetchRow()) {
                    
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    
                    $Row['delivery_date'] = (intval($Row['delivery_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['delivery_date']) : '';
                    $Row['order_date'] = (intval($Row['order_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['order_date']) : '';
                    $Row['due_date'] = (intval($Row['due_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['due_date']) : '';
                    $Row['req_recpt_del_date'] = (intval($Row['req_recpt_del_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['req_recpt_del_date']) : '';
                    $Row['cn_date'] = (intval($Row['cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['cn_date']) : '';
                    $Row['date_dispatched'] = (intval($Row['date_dispatched']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['date_dispatched']) : '';
                    $Row['invoice_date'] = (intval($Row['invoice_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['invoice_date']) : '';
                    $Row['supp_cn_date'] = (intval($Row['supp_cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['supp_cn_date']) : 0;
                    $Row['receipt_date'] = (intval($Row['receipt_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['receipt_date']) : 0;
                    
                    $Row['doc_details_arr'] = self::get_doc_details($recID, $OptionType, 0, $this->arrUser['company_id']);

                    $Row['discount'] = 0;

                    $Row['totalVolume'] = $volume;
                    $Row['totalvolume_unit'] = $volume_unit;
                    $Row['totalweightunit'] = $weightunit;
                    $Row['totalweight'] = $weight;
                    $Row['weight_permission'] = $weight_permission;
                    $Row['volume_permission'] = $volume_permission;

                    foreach ($Row['doc_details_arr'] as $rec) {
                        $Row['discount'] += $rec['discount'];
                    }

                    if($Row['discount'] > 0){
                        $counter =0;
                        $Row['discount'] = 0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {

                            $discount_amount = 0;

                            if($rec['discount_type'] == 'Value'){
                                $discount_amount = $rec['discount'];
                            }
                            elseif($rec['discount_type'] == 'Percentage'){
                                $discount_amount = ((($rec['quantity'] * $rec['unit_price']) * $rec['discount']) / 100);
                            }
                            else{
                                $discount_amount = $rec['quantity'] * $rec['discount'];
                            }

                            $Row['doc_details_arr'][$counter]['discount_amount'] = $discount_amount;
                            $Row['discount'] += ROUND($discount_amount,2);

                            if($rec['discount'] != 0)  $Row['doc_details_arr'][$counter]['discountchk'] = 1;  

                            $Row['doc_details_arr'][$counter]['volume_permission'] = $volume_permission;
                            $Row['doc_details_arr'][$counter]['weight_permission'] = $weight_permission;
                            $counter ++;
                        }  
                    }
                    else{
                        $counter =0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {
                            $Row['doc_details_arr'][$counter]['volume_permission'] = $volume_permission;
                            $Row['doc_details_arr'][$counter]['weight_permission'] = $weight_permission;
                            $counter ++;
                        }
                    }

                    $Row['shipData'] = 0;

                    if($Row['ship_name'] || $Row['ship_address_1'] || $Row['ship_address_2'] || $Row['ship_city'] || $Row['ship_postcode']){
                        $Row['shipData'] = 1;
                    }
                    
                    $Row['company_logo_url'] = $company_logo_url;
                    $Row['printableAddInfo'] = $additionalInformation;  
                    
                    if($recType == 1){
                        $Row['templateType'] = 'creditNote';
                        $invoiceName = 'CN.'.$Row['order_no'].'.'.$this->arrUser['company_id'] .'.pdf';
                    }
                    elseif($recType == 2){
                        $Row['templateType'] = 'postedCreditNote';
                        $invoiceName = 'PCN.'.$Row['invoice_no'].'.'.$this->arrUser['company_id'] .'.pdf';
                    }

                    $basePath = UPLOAD_PATH . 'attachments/';
                    $file_url = $basePath . $invoiceName;                    

                    $response['response'] = $Row;
                }
                //echo '<pre>';print_r($response);exit;
                // error_reporting(E_ALL);
                $result = "";
                $server_output = "";

                $result->template->shortid = "SyltHmDW3V";
                $result->data = $response;

                // echo '<pre>';print_r($result);exit;

                // $url = 'http://silverowreports.azurewebsites.net/api/report';
                $url = 'https://silverowjsreport2.azurewebsites.net/api/report';

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_POST, 1);

                curl_setopt($ch, CURLOPT_POSTFIELDS,json_encode($result));  //Post Fields
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                
                $reqheaders = [
                    'Authorization: "Basic '.base64_encode("admin:admin123").'"',
                    'Content-Type: application/json'              
                ];

                curl_setopt($ch, CURLOPT_HTTPHEADER, $reqheaders);
                

                $server_output = curl_exec ($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

                $errors = curl_error($ch);

                // print_r($errors);exit;

                curl_close ($ch);                    
                
                try {
                    // if (file_exists($file_url)) unlink($file_url);

                    // Open the file to get existing content 
                    $open = file_get_contents($file_url); 
                    
                    // Write the contents back to the file 
                    file_put_contents($file_url, $server_output); 

                } catch (HttpException $ex) {
                    echo $ex;
                    $response['file_url'] = $ex; 
                    $response['invoiceName'] = ''; 
                    exit;
                }                 

                if(file_exists($file_url)){
                    $response['ack'] = 1; 

                    $key = hash('sha256', SECRET_KEY);
                    $iv = substr(hash('sha256', SECRET_IV), 0, 16);
                    $outputInvName = openssl_encrypt($invoiceName, SECRET_METHOD, $key, 0, $iv);
                    $outputInvName = base64_encode($outputInvName);

                    $response['file_url'] = WEB_PATH . '/api/setup/document?alpha='.$outputInvName; 
                    $response['invoiceName'] = $invoiceName;
                }
                else{
                    $response['ack'] = 0; 
                    $response['file_url'] = ''; 
                    $response['invoiceName'] = '';
                }                               
            }
            else{            
                $response['ack'] = 0;  
                $response['file_url'] = ''; 
                $response['invoiceName'] = '';       
            } 
            // print_r($response);exit;            
            return $response; 
        }      

    }
    
    /// creating xml
    function bulkXmlInvoiceVals($attr) {        

        // echo "<pre>";print_r($attr);
        $rejectedXMLCounter = 0;
        $createdXMLCounter = 0;
        $module = $attr['module'];       
        $Option = $attr['Option'];   
        $OptionType = $attr['OptionType'];   

        if($Option == 'xml'){

            $rejectedXMLMsg = '';          

            foreach($attr['emailOrderList'] as $rec){ 

                if($rec->id >0){

                    $result = $this->CreatePrintTemplateXml($rec->id,$OptionType);

                    if($result['ack'] == 1){
                        $createdXMLCounter++;                
                    }
                    else{

                        if($result['errorCode'] == '0'){
                            $rejectedXMLMsg  .= $result['errorMsg'].'. ';
                        }
                        else{
                            $rejectedXMLMsg  .= $result['errorCode'].'. ';
                        }

                        $rejectedXMLCounter++; 
                    }
                }
                else
                    $rejectedXMLCounter++; 
            }

            // print_r($createdXMLCounter);exit; 
            
            if($createdXMLCounter >0){

                $response['ack'] = 1;
                $response['createdXMLCounter'] = $createdXMLCounter;
                $response['rejectedXMLCounter'] = $rejectedXMLCounter;
                $response['rejectedXMLMsg'] = $rejectedXMLMsg;
            }
            else{
                $response['ack'] = 0; 
                $response['createdXMLCounter'] = 0;
                $response['rejectedXMLCounter'] = $rejectedXMLCounter;
                $response['rejectedXMLMsg'] = $rejectedXMLMsg;
            } 
        } 

        return $response;
    }

    function CreatePrintTemplateXml($recID,$OptionType){

        $response = array();
        $result = array();
        $invoiceName = '';

        $currentTime = date("H:i:s", time());

        /* $Sql2 = "DELETE FROM doc_header 
                 WHERE doc_id = $recID AND 
                       TYPE=$OptionType AND 
                       company_id = ".$this->arrUser['company_id'];
        //  echo $Sql2;exit;

        $RS2 = $this->objsetup->CSI($Sql2);

        $Sql3 = "DELETE FROM doc_detail 
                 WHERE doc_header_id = $recID AND 
                        doc_header_type=$OptionType AND 
                        company_id = ".$this->arrUser['company_id'];
        //  echo $Sql3;exit;

        $RS3 = $this->objsetup->CSI($Sql3); */

        $Sql1 = "SELECT id,rec_id,invoice_number,e_invoice_number 
                 FROM e_invoice_portal_uploads 
                 WHERE rec_id = $recID AND 
                       type = $OptionType AND
                       company_id = " . $this->arrUser['company_id'] . " 
                 LIMIT 1 ";
        // echo $Sql1;exit;
        $RS1 = $this->objsetup->CSI($Sql1);

        if ($RS1->fields['id'] > 0){
            $rec_id = $RS1->fields['rec_id'];
            $invoice_number = $RS1->fields['invoice_number'];
            $e_invoice_number = $RS1->fields['e_invoice_number'];

            $response['ack'] = 0; 
            $response['errorCode'] = 0;
            $response['errorMsg'] = $invoice_number.' uploaded with E-invoice No.= '.$e_invoice_number;

            return $response;
        }

        $Sql2 = "SELECT id,CONCAT('LEV',(RIGHT(e_invoice_number,LENGTH(e_invoice_number)-3))+1) AS eInvoiceNumber
                 FROM e_invoice_portal_uploads
                 WHERE company_id = " . $this->arrUser['company_id'] . " 
                 ORDER BY id DESC 
                 LIMIT 1 ";
        // echo $Sql2;exit;
        $RS2 = $this->objsetup->CSI($Sql2);

        $newE_InvoiceID = 1;
        $eInvoiceNumber = 'LEV2020000'.str_pad($newE_InvoiceID, 6, '0', STR_PAD_LEFT);

        if ($RS2->fields['id'] > 0){ 
            $eInvoiceNumber = $RS2->fields['eInvoiceNumber'];
        }
        // $eInvoiceNumber = 'LEV2020000000004';

        if($OptionType == 1){ //Sales Order

            $Sql3 = "SELECT inv.id,cu.nicename AS country,cu.iso AS countryISOo,
                            inv.shipment_method_id,inv.shipping_agent_id,inv.container_no
                     FROM orders AS inv
                     LEFT JOIN country cu on cu.id = inv.country_id
                     WHERE inv.id=$recID ";
        }
        else{

            $Sql3 = "SELECT inv.id,cu.nicename AS country,cu.iso AS countryISOo
                     FROM srm_invoice AS inv
                     LEFT JOIN country cu on cu.id = inv.country
                     WHERE inv.id=$recID ";
        }

        // echo $Sql3;exit;
        $RS3 = $this->objsetup->CSI($Sql3);

        $endUserCountry = '';
        $endUserCountryISO = '';
        $endUserDeliveryTerm = '';
        $endUserModeOfTransport = '';
        $endUserCustomsID = '';

        if ($RS3->fields['id'] > 0){
            $endUserCountry = $RS3->fields['country'];
            $endUserCountryISO = $RS3->fields['countryISO'];
            $endUserDeliveryTerm = $RS3->fields['shipment_method_id'];
            $endUserModeOfTransport = $RS3->fields['shipping_agent_id'];
            // $endUserCustomsID = '2201.90.00.00.11';//$RS3->fields['container_no'];
        }

        if($endUserDeliveryTerm == 1) $endUserDeliveryTerm = 'CFR';
        elseif($endUserDeliveryTerm == 2) $endUserDeliveryTerm = 'CIF';
        elseif($endUserDeliveryTerm == 3) $endUserDeliveryTerm = 'CIP';
        elseif($endUserDeliveryTerm == 4) $endUserDeliveryTerm = 'CPT';
        elseif($endUserDeliveryTerm == 5) $endUserDeliveryTerm = 'DAF';
        elseif($endUserDeliveryTerm == 6) $endUserDeliveryTerm = 'DDP';
        elseif($endUserDeliveryTerm == 7) $endUserDeliveryTerm = 'DDU';
        elseif($endUserDeliveryTerm == 8) $endUserDeliveryTerm = 'DEQ';
        elseif($endUserDeliveryTerm == 9) $endUserDeliveryTerm = 'DES';
        elseif($endUserDeliveryTerm == 10) $endUserDeliveryTerm = 'EXW';
        elseif($endUserDeliveryTerm == 11) $endUserDeliveryTerm = 'FAS';
        elseif($endUserDeliveryTerm == 12) $endUserDeliveryTerm = 'FCA';
        elseif($endUserDeliveryTerm == 13) $endUserDeliveryTerm = 'FOB';

        if($OptionType == 1){ //Sales Order

            $Sql3 = "SELECT inv.id,fn.taxOfficeName,note,e_archive_chk
                     FROM orders AS inv
                     LEFT JOIN finance fn on fn.customer_id = inv.sell_to_cust_id
                     WHERE inv.id=$recID ";
        }
        else{

            $Sql3 = "SELECT inv.id,fn.taxOfficeName,note
                     FROM srm_invoice AS inv
                     LEFT JOIN srm_finance fn on fn.supplier_id = inv.sell_to_cust_id
                     WHERE inv.id=$recID ";
        }

        // echo $Sql3;exit;
        $RS3 = $this->objsetup->CSI($Sql3);

        $endUserTaxOfficeName= '';
        $endUserE_archiveChk= '';
        $notes= '';

        if ($RS3->fields['id'] > 0){
            $endUserTaxOfficeName = $RS3->fields['taxOfficeName'];
            $endUserE_archiveChk = $RS3->fields['e_archive_chk'];
            $notes = $RS3->fields['note'];
        }

        $Sql4 = "SELECT c.id,c.additionalInformation,c.name,c.url,c.address,
                        c.address_2,c.city,c.county,c.postcode,c.email,c.telephone,
                        c.fax,fs.vat_number,fs.company_reg_no,fs.vat_reg_no,
                        cu.nicename AS country,cu.iso AS countryISO,fs.taxOfficeName
                 FROM company AS c
                 LEFT JOIN financial_settings AS fs ON c.id = fs.company_id
                 LEFT JOIN country AS cu on cu.id=c.country_id
                 WHERE c.id = " . $this->arrUser['company_id'] . "
                 LIMIT 1 ";

        // echo $Sql4;exit;
        $RS4 = $this->objsetup->CSI($Sql4);

        $additionalInformation = '';
        $companyName = '';
        $companyURL = '';
        $companyAddress = '';
        $companyAddress2 = '';
        $companyCity = '';
        $companyCounty = '';
        $companyPostCode = '';
        $companyEmail = '';
        $companyTelephone = '';
        $companyFax = '';
        $companyReg_no = '';
        $companyvat_reg_no = '';
        $companyCountry = '';
        $companyCountryISO = '';
        $companyTaxOfficeName = '';

        if ($RS4->fields['id'] > 0){
            $additionalInformation = $RS4->fields['additionalInformation'];
            $companyName = $RS4->fields['name'];
            $companyURL = $RS4->fields['url'];
            $companyAddress = $RS4->fields['address'];
            $companyAddress2 = $RS4->fields['address_2'];
            $companyCity = $RS4->fields['city'];
            $companyCounty = $RS4->fields['county'];
            $companyPostCode = $RS4->fields['postcode'];
            $companyEmail = $RS4->fields['email'];
            $companyTelephone = $RS4->fields['telephone'];
            $companyFax = $RS4->fields['fax'];
            $companyReg_no = $RS4->fields['company_reg_no'];
            $companyvat_reg_no = $RS4->fields['vat_reg_no'];
            $companyCountry = $RS4->fields['country'];
            $companyCountryISO = $RS4->fields['countryISO'];
            $companyTaxOfficeName = $RS4->fields['taxOfficeName'];
        }

        if(strlen($companyCounty) == 0){
            $companyCounty = $companyCity;
        }

        if($OptionType == 1){ //Sales Order

            $Sql1 = "SELECT id 
                     FROM doc_header 
                     WHERE doc_id = $recID AND
                            TYPE=$OptionType AND
                            company_id = ".$this->arrUser['company_id'];
            //  echo $Sql1;exit;

            $RS1 = $this->objsetup->CSI($Sql1);

            if (!($RS1->fields['id'] > 0)){

                $Sql4 = "INSERT INTO doc_header ( company_id, doc_id, TYPE, order_no, invoice_no, supp_cust_no, NAME, address_1, address_2, city, postcode,county, 
                                                contact_person, telephone, email, salesperson, cust_order_no, invoice_date, order_date, date_dispatched, req_recpt_del_date, delivery_date, payable_bank, payment_terms, due_date, payment_method, currency, AddedOn, AddedBy, PrintedOn, PrintedBy, notes, bank_name, account_name, sort_code, swift_code, account_no, iban, com_name, com_address_1, com_address_2, com_city, com_county, com_postcode, com_telephone, com_fax, vat_reg_no, bill_to_cust_no, cust_vat_reg_no, net_amount, grand_total, tax_amount, discount, ship_name, ship_address_1, ship_address_2, ship_city, ship_county, ship_postcode, posting_group, quote_no, user_id, cust_wh_ref, shipping_agent_code, warehouse_booking_ref, ship_ref_no, ship_delivery_time, additional_information)  
                        SELECT ".$this->arrUser['company_id'].", $recID , 1, inv.sale_order_code, inv.sale_invioce_code, inv.sell_to_cust_no, inv.sell_to_cust_name, 
                                inv.sell_to_address, inv.sell_to_address2, inv.sell_to_city, inv.sell_to_post_code, inv.sell_to_county, inv.sell_to_contact_id, inv.cust_phone, inv.cust_email, inv.sale_person, inv.cust_order_no, inv.posting_date, inv.offer_date, inv.dispatch_date, inv.requested_delivery_date, inv.delivery_date, inv.bill_to_bank_name, inv.payment_terms_code, inv.due_date, inv.payment_method_code, c.code, UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", note, b.name, b.account_name, b.sort_code, b.swift_code, b.account_no, b.iban, com.name, com.address, com.address_2, com.city, com.county, com.postcode, com.telephone, com.fax, f.vat_reg_no, sell_to_cust_no, fi.vat_number, inv.net_amount, inv.grand_total, inv.tax_amount, inv.items_net_discount, inv.ship_to_name, inv.ship_to_address, inv.ship_to_address2, inv.ship_to_city, inv.ship_to_county, inv.ship_to_post_code, (SELECT NAME FROM ref_posting_group WHERE id=fi.posting_group_id), inv.sale_quote_code, " . $this->arrUser['id'] . ", inv.customer_warehouse_ref, inv.shipping_agent_code, inv.warehouse_booking_ref, inv.container_no, inv.ship_delivery_time, com.additionalInformation
                        FROM orders AS inv
                        LEFT JOIN finance AS fi ON fi.customer_id = inv.sell_to_cust_id
                        LEFT JOIN financial_settings AS f ON f.company_id = inv.company_id
                        LEFT JOIN company AS com ON com.id = inv.company_id
                        LEFT JOIN bank_account AS b ON b.id = inv.bill_to_bank_id
                        LEFT JOIN currency AS c ON c.id = inv.currency_id
                        WHERE inv.id=$recID ";
                //  echo $Sql4;exit;
                $RS4 = $this->objsetup->CSI($Sql4);



                $Sql5 = "INSERT INTO doc_detail (doc_header_id, doc_header_type, company_id, TYPE,number,description,quantity,uom,warehouse,unit_price,discount_type,discount,
                                                vat_rate, total_amount,vat, discount_price,warehouse_id, warehouse_address_1, warehouse_address_2, warehouse_city, warehouse_county, warehouse_post_code, warehouse_telephone)  
                        SELECT $recID,1,".$this->arrUser['company_id'].",inv.type,inv.product_code,inv.item_name,inv.qty,inv.unit_measure,inv.warehouse,
                                inv.unit_price,inv.discount_type, inv.discount,inv.vat_name, inv.total_price,
                                inv.vat_price, inv.discount_price,inv.warehouse_id, w.address_1, w.address_2, w.city, w.county, w.postcode, w.phone
                        FROM order_details AS inv
                        LEFT JOIN warehouse AS w ON inv.warehouse_id = w.id
                        LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id
                        WHERE inv.order_id = $recID 
                        ORDER BY inv.id ASC";
                //  echo $Sql5;exit;

                $RS5 = $this->objsetup->CSI($Sql5);  
            }


            $Sql6 = "SELECT * from doc_header WHERE doc_id = $recID AND type = 1 LIMIT 1";
            //  echo $Sql6;exit;

            $RS6 = $this->objsetup->CSI($Sql6); 

            $lineCount = 0;

            $invoiceLineData = '<Invoice-Lines>';

            if ($RS6->RecordCount() > 0) {
                
                if ($Row = $RS6->FetchRow()) {
                    
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    
                    $order_date = $this->objGeneral->convertUnixIntoYMD_FormateDate($Row['order_date']);
                    $invoice_date = $this->objGeneral->convertUnixIntoYMD_FormateDate($Row['invoice_date']);

                    $invoice_no = $Row['invoice_no'];
                    $supp_cust_no = $Row['supp_cust_no'];
                    $custName = $Row['name'];
                    $custAddress_1 = $Row['address_1'];
                    $custAddress_2 = $Row['address_2'];
                    $custcity = $Row['city'];
                    $custpostcode = $Row['postcode'];
                    $custcountry = $Row['country'];
                    $custcounty = $Row['county'];
                    $telephone = $Row['telephone'];
                    $custemail = $Row['email'];
                    $com_fax = $Row['com_fax'];
                    // $notes = $Row['notes'];

                    $custShip_name = $Row['ship_name'];
                    $custShip_address_1 = $Row['ship_address_1'];
                    $custShip_address_2 = $Row['ship_address_2'];
                    $custShip_city = $Row['ship_city'];
                    $custShip_county = $Row['ship_county'];

                    if(strlen($custShip_county) == 0){
                        $custShip_county = $custShip_city;
                    }

                    $custPostingGrp = $Row['posting_group'];

                    if(strlen($custcounty) == 0){
                        $custcounty = $custcity;
                    }

                    $vat_reg_no = $Row['vat_reg_no'];                    
                    $cust_vat_reg_no = $Row['cust_vat_reg_no'];                    

                    $net_amount = $Row['net_amount'];
                    $grand_total = $Row['grand_total'];
                    $total_amount = $Row['total_amount'];
                    $tax_amount = $Row['tax_amount'];

                    $supp_vat_reg = $Row['supp_vat_reg'];
                    // $order_date = $Row['order_date'];
                    $currency = $Row['currency'];
                    $cust_order_no = $Row['cust_order_no'];
                    
                    $Row['doc_details_arr'] = self::get_doc_details($recID, $OptionType, 0, $this->arrUser['company_id']);

                     foreach ($Row['doc_details_arr'] as $rec) {
                        $Row['discount'] += $rec['discount'];
                    }

                    if($Row['discount'] > 0){
                        $counter =0;
                        $Row['discount'] = 0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {

                            $discount_amount = 0;

                            if($rec['discount_type'] == 'Value'){
                                $discount_amount = $rec['discount'];
                            }
                            elseif($rec['discount_type'] == 'Percentage'){
                                $discount_amount = ((($rec['quantity'] * $rec['unit_price']) * $rec['discount']) / 100);
                            }
                            else{
                                $discount_amount = $rec['quantity'] * $rec['discount'];
                            }

                            $Row['doc_details_arr'][$counter]['discount_amount'] = $discount_amount;
                            $Row['discount'] += ROUND($discount_amount,2);

                            if($rec['discount'] != 0) $Row['doc_details_arr'][$counter]['discountchk'] = 1;
                            $counter ++;
                        }  
                    }
                    else{
                        $counter =0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {
                            $counter ++;
                        }
                    } 

                    $taxArray = array();
                    $invoiceTaxSummaryData = ''; 
                    

                    foreach ($Row['doc_details_arr'] as $rec) {

                        $lineCount++;
                        /*  <TaxRate>'.$rec['vat_rate'].'</TaxRate>*/
                        $uom = '';
                        $shippingUOM = '';

                        if(strtolower($rec['uom']) == 'unit'){
                            $uom = 'EA';
                            $shippingUOM = 'NF';
                        }
                        elseif(strtolower($rec['uom']) == 'case'){
                            $uom = 'BX'; //CS
                            $shippingUOM = 'ED';
                        }
                        elseif(strtolower($rec['uom']) == 'pallet'){
                            $uom = 'PF';
                            $shippingUOM = 'PX';
                        }
                        elseif(strtolower($rec['uom']) == 'kg' || strtolower($rec['uom']) == 'kilogram'){
                            $uom = 'KGM';
                            $shippingUOM = 'KG';
                        }
                        elseif(strtolower($rec['uom']) == 'gram'){
                            $uom = 'GRM';
                            $shippingUOM = 'BG';
                        }
                        elseif(strtolower($rec['uom']) == 'piece'){
                            $uom = 'EA';
                            $shippingUOM = 'NF';
                        }
                        elseif(strtolower($rec['uom']) == 'container'){
                            $uom = 'CH';
                            $shippingUOM = 'CN';
                        }
                        else{
                            $uom = 'EA';
                            $shippingUOM = 'NA';
                        }                        

                        $vatRate = '';
                        $taxRate = '';

                        if($rec['vat_rate'] == '20% VAT'){
                            $vatRate = '%20';
                            $taxRate = '20.00';
                        }
                        elseif($rec['vat_rate'] == '18% VAT'){
                            $vatRate = '%18';
                            $taxRate = '18.00';
                        }
                        elseif($rec['vat_rate'] == '5% VAT'){
                            $vatRate = '%5';
                            $taxRate = '5.00';
                        }
                        elseif($rec['vat_rate'] == '1% VAT'){
                            $vatRate = '%1';
                            $taxRate = '1.00';
                        }
                        elseif($rec['vat_rate'] == '8% VAT'){
                            $vatRate = '%8';
                            $taxRate = '8.00';
                        }
                        elseif($rec['vat_rate'] == 'Exempt'){
                            $vatRate = '%0';
                            $taxRate = '0.00';
                        }                        
                        elseif($rec['vat_rate'] == 'Zero Rated'){
                            $vatRate = '%0';
                            $taxRate = '0.00';
                        }

                        $taxArray[$rec['vat_rate']]['vat'] += $rec['vat'];
                        $taxArray[$rec['vat_rate']]['vat_rate'] = $vatRate;
                        $taxArray[$rec['vat_rate']]['taxRate'] = $taxRate;

                        $taxArray[$rec['vat_rate']]['totalAmount'] += $rec['total_amount'];

                        $invoiceLineData .= '<Line>';

                        $invoiceLineData .= '
                            <Line-Item>
                                <LineNumber>'.$lineCount.'</LineNumber>
                                <ManufacturerItemCode>'.$rec['number'].'</ManufacturerItemCode>
                                <ItemName>'.$rec['description'].'</ItemName>
                                <InvoiceQuantity>'.$rec['quantity'].'</InvoiceQuantity>
                                <UnitOfMeasure>'.$uom.'</UnitOfMeasure>
                                <InvoiceUnitNetPrice>'.$rec['unit_price'].'</InvoiceUnitNetPrice>
                                <NetAmount>'.$rec['total_amount'].'</NetAmount>
                                <TaxAmount>'.$rec['vat'].'</TaxAmount>
                            </Line-Item>
                            ';

                        $endUserCustomsID = $rec['gtipNo'];//'2201.90.00.00.11';


                        if($custPostingGrp == 'TR'){

                            $invoiceLineData .= '
                                <Line-Tax>
                                    <Tax>
                                        <TaxRate>'.$taxRate.'</TaxRate>
                                        <TaxCategoryCode>0015</TaxCategoryCode>
                                        <TaxCategory>Katma Değer Vergisi</TaxCategory>
                                        <TaxAmount>'.$rec['vat'].'</TaxAmount>
                                        <TaxableAmount>'.$rec['total_amount'].'</TaxableAmount>
                                    </Tax>
                                </Line-Tax>';
                        }
                        else{

                            $invoiceLineData .= '
                                <Line-Consignments>
                                    <Consignment>
                                        <DeliveryTerms>
                                            <DeliveryTerm>
                                                <DeliveryTermNumber>'.$endUserDeliveryTerm.'</DeliveryTermNumber>
                                            </DeliveryTerm>
                                        </DeliveryTerms>

                                        <Consignment-Parties>
                                            <DeliveryAddress>
                                                <District>'.$custShip_county.'</District>
                                                <StreetName>'.$custShip_address_1.'</StreetName>
                                                <CityName>'.$custShip_city.'</CityName>
                                                <CountryName>'.$endUserCountry.'</CountryName>
                                            </DeliveryAddress>
                                        </Consignment-Parties>

                                        <Consignment-Shipment>
                                            <GoodItems>
                                                <GoodItem>
                                                    <CustomsID>'.$endUserCustomsID.'</CustomsID>
                                                </GoodItem>
                                            </GoodItems>

                                            <ShipmentsStage>
                                                <ShipmentStage>
                                                    <ModeOfTransport>'.$endUserModeOfTransport.'</ModeOfTransport>
                                                </ShipmentStage>
                                            </ShipmentsStage>

                                            <Transports>
                                                <Transport>
                                                    <Packages>
                                                        <Package>
                                                            <PackageQuantity>'.$rec['quantity'].'</PackageQuantity>
                                                            <PackageTypeCode>'.$shippingUOM.'</PackageTypeCode>
                                                        </Package>
                                                    </Packages>
                                                </Transport>
                                            </Transports>

                                        </Consignment-Shipment>
                                    </Consignment>
                                </Line-Consignments>';

                            $invoiceLineData .= '
                                <Line-Tax>
                                    <Tax>
                                        <TaxRate>'.$taxRate.'</TaxRate>
                                        <TaxCategoryCode>0015</TaxCategoryCode>
                                        <TaxCategory>Katma Değer Vergisi</TaxCategory>
                                        <TaxAmount>'.$rec['vat'].'</TaxAmount>
                                        <TaxableAmount>'.$rec['total_amount'].'</TaxableAmount>
                                        <TaxExemptionReasonCode>301</TaxExemptionReasonCode>
                                        <TaxExemptionReason>11/1-a Mal İhracatı</TaxExemptionReason>
                                    </Tax>
                                </Line-Tax>';
                        }

                        $invoiceLineData .= '</Line>';
                    }  // ('.$vatRate.')         

                    $response['response'] = $Row;
                }

                $invoiceLineData .= '</Invoice-Lines>';

                

                $invoiceHeadersDetails = '';
                $invoicePartiesDetails = '';

                if($endUserE_archiveChk >0 && $custPostingGrp == 'TR'){

                    $invoiceHeadersDetails = '<InvoiceProfile>EA</InvoiceProfile><MessageType>S</MessageType>';

                    $invoicePartiesDetails = '<Buyer>
                    <TaxID>'.$cust_vat_reg_no.'</TaxID>
                    <IDType>VKN</IDType>
                    <Name>'.$custName.'</Name>
                    <StreetName>'.$custAddress_1.'</StreetName>
                    <District>'.$custcounty.'</District>
                    <CityName>'.$custcity.'</CityName>
                    <CountryName>'.$endUserCountry.'</CountryName>
                    <Country>'.$endUserCountryISO.'</Country>
                    <PhoneNumber>'.$telephone.'</PhoneNumber>
                    <TaxOfficeName>'.$endUserTaxOfficeName.'</TaxOfficeName>
                    <Fax>'.$com_fax.'</Fax>
                    </Buyer>
                
                    <Seller>
                    <TaxID>'.$companyvat_reg_no.'</TaxID>
                    <IDType>VKN</IDType>
                    <Name>'.$companyName.'</Name>
                    <StreetName>'.$companyAddress2.'</StreetName>
                    <BuildingName>'.$companyAddress.'</BuildingName>
                    <District>'.$companyCounty.'</District>
                    <CityName>'.$companyCity.'</CityName>
                    <PostalCode>'.$companyPostCode.'</PostalCode>
                    <CountryName>'.$companyCountry.'</CountryName>
                    <Country>'.$companyCountryISO.'</Country>
                    <PhoneNumber>'.$companyTelephone.'</PhoneNumber>
                    <TaxOfficeName>'.$companyTaxOfficeName.'</TaxOfficeName>
                    <Fax>'.$companyFax.'</Fax>
                    <Website>'.$companyURL.'</Website>
                    </Seller>';


                    $invoiceTaxSummaryData .= '<Tax-Summary>';                

                    foreach ($taxArray as $taxRec) {

                        $invoiceTaxSummaryData .= '<Tax-Summary-Line>
                        <TaxRate>'.$taxRec['taxRate'].'</TaxRate>
                        <TaxCategoryCode>0015</TaxCategoryCode>
                        <TaxCategory>Katma Değer Vergisi</TaxCategory>
                        <TaxAmount>'.$taxRec['vat'].'</TaxAmount>
                        <TaxableAmount>'.$taxRec['totalAmount'].'</TaxableAmount>
                        </Tax-Summary-Line>';
                    }//Katma Değer Vergisi ('.$taxRec['vat_rate'].')

                    $invoiceTaxSummaryData .= '</Tax-Summary>'; 

                    // echo $invoiceTaxSummaryData;
                    // exit;
                }
                elseif($custPostingGrp == 'TR'){

                    $invoiceHeadersDetails = '<InvoiceProfile>BI</InvoiceProfile><MessageType>S</MessageType>';

                    $invoicePartiesDetails = '<Buyer>
                    <TaxID>'.$cust_vat_reg_no.'</TaxID>
                    <IDType>VKN</IDType>
                    <Name>'.$custName.'</Name>
                    <StreetName>'.$custAddress_1.'</StreetName>
                    <District>'.$custcounty.'</District>
                    <CityName>'.$custcity.'</CityName>
                    <CountryName>'.$endUserCountry.'</CountryName>
                    <Country>'.$endUserCountryISO.'</Country>
                    <PhoneNumber>'.$telephone.'</PhoneNumber>
                    <TaxOfficeName>'.$endUserTaxOfficeName.'</TaxOfficeName>
                    <Fax>'.$com_fax.'</Fax>
                    </Buyer>
                
                    <Seller>
                    <TaxID>'.$companyvat_reg_no.'</TaxID>
                    <IDType>VKN</IDType>
                    <Name>'.$companyName.'</Name>
                    <StreetName>'.$companyAddress2.'</StreetName>
                    <BuildingName>'.$companyAddress.'</BuildingName>
                    <District>'.$companyCounty.'</District>
                    <CityName>'.$companyCity.'</CityName>
                    <PostalCode>'.$companyPostCode.'</PostalCode>
                    <CountryName>'.$companyCountry.'</CountryName>
                    <Country>'.$companyCountryISO.'</Country>
                    <PhoneNumber>'.$companyTelephone.'</PhoneNumber>
                    <TaxOfficeName>'.$companyTaxOfficeName.'</TaxOfficeName>
                    <Fax>'.$companyFax.'</Fax>
                    <Website>'.$companyURL.'</Website>
                    </Seller>';


                    $invoiceTaxSummaryData .= '<Tax-Summary>';                

                    foreach ($taxArray as $taxRec) {

                        $invoiceTaxSummaryData .= '<Tax-Summary-Line>
                        <TaxRate>'.$taxRec['taxRate'].'</TaxRate>
                        <TaxCategoryCode>0015</TaxCategoryCode>
                        <TaxCategory>Katma Değer Vergisi</TaxCategory>
                        <TaxAmount>'.$taxRec['vat'].'</TaxAmount>
                        <TaxableAmount>'.$taxRec['totalAmount'].'</TaxableAmount>
                        </Tax-Summary-Line>';
                    }//Katma Değer Vergisi ('.$taxRec['vat_rate'].')

                    $invoiceTaxSummaryData .= '</Tax-Summary>'; 

                    // echo $invoiceTaxSummaryData;
                    // exit;

                }
                else{

                    $invoiceHeadersDetails = '<InvoiceProfile>IH</InvoiceProfile><MessageType>I</MessageType>';

                    $invoicePartiesDetails = '<Buyer>
                    <TaxID>1460415308</TaxID>
                    <IDType>VKN</IDType>
                    <Name>GÜMRÜK VE TİCARET BAKANLIĞI BİLGİ İŞLEM DAİRESİ BAŞKANLIĞI</Name>
                    <StreetName>Üniversiteler Mahallesi Dumlupınar Bulvarı</StreetName>
                    <BuildingNumber>151</BuildingNumber>
                    <District>Çankaya</District>
                    <CityName>Ankara</CityName>
                    <CountryName>Türkiye</CountryName>
                    <Country>TR</Country>
                    <TaxOfficeName>Ulus</TaxOfficeName>
                    </Buyer>
                    
                    <BuyerCustomerParty>
                    <TaxID>EXPORT</TaxID>
                    <IDType>PARTYTYPE</IDType>
                    <Name>'.$custName.'</Name>
                    <StreetName>'.$custAddress_1.'</StreetName>
                    <District>'.$custcounty.'</District>
                    <CityName>'.$custcity.'</CityName>
                    <CountryName>'.$endUserCountry.'</CountryName>
                    <Country>'.$endUserCountryISO.'</Country>
                    <TaxRegistrationName>'.$custName.'</TaxRegistrationName>
                    <PhoneNumber>'.$telephone.'</PhoneNumber>
                    <Fax>'.$com_fax.'</Fax>
                    <TaxOfficeName>'.$endUserTaxOfficeName.'</TaxOfficeName>
                    </BuyerCustomerParty>
                
                    <Seller>
                    <TaxID>'.$companyvat_reg_no.'</TaxID>
                    <IDType>VKN</IDType>
                    <TaxOfficeName>'.$companyTaxOfficeName.'</TaxOfficeName>
                    <Name>'.$companyName.'</Name>
                    <StreetName>'.$companyAddress2.'</StreetName>
                    <BuildingName>'.$companyAddress.'</BuildingName>
                    <District>'.$companyCounty.'</District>
                    <CityName>'.$companyCity.'</CityName>
                    <PostalCode>'.$companyPostCode.'</PostalCode>
                    <CountryName>'.$companyCountry.'</CountryName>
                    <Country>'.$companyCountryISO.'</Country>
                    <PhoneNumber>'.$companyTelephone.'</PhoneNumber>
                    <Fax>'.$companyFax.'</Fax>
                    <Website>'.$companyURL.'</Website>
                    </Seller> ';

                    $invoiceTaxSummaryData .= '<Tax-Summary>';                

                    foreach ($taxArray as $taxRec) {

                        $invoiceTaxSummaryData .= '<Tax-Summary-Line>
                        <TaxRate>'.$taxRec['taxRate'].'</TaxRate>
                        <TaxCategoryCode>0015</TaxCategoryCode>
                        <TaxCategory>Katma Değer Vergisi</TaxCategory>
                        <TaxAmount>'.$taxRec['vat'].'</TaxAmount>
                        <TaxableAmount>'.$taxRec['totalAmount'].'</TaxableAmount>
                        <TaxExemptionReasonCode>301</TaxExemptionReasonCode>
                        <TaxExemptionReason>11/1-a Mal İhracatı</TaxExemptionReason>
                        </Tax-Summary-Line>';
                    }//Katma Değer Vergisi ('.$taxRec['vat_rate'].')

                    $invoiceTaxSummaryData .= '</Tax-Summary>'; 

                    // echo $invoiceTaxSummaryData;
                    // exit;

                }
                //<Remarks>SO: '.$invoice_no.'</Remarks>

                $xml_string = 'Name=9991032012059EC&Password=vShFBTXxb&PartnerIln=9990000001049&DocumentType=INVOIC&DocumentVersion=ECOD.TR.2&DocumentStandard=XML&DocumentTest=T&ControlNumber=1&DocumentContent=<Document-Invoice>
                <Invoice-Header>
                    <InvoiceNumber>'.$eInvoiceNumber.'</InvoiceNumber>
                    <InvoiceDate>'.$invoice_date.'</InvoiceDate>
                    <DocumentFunctionCode>O</DocumentFunctionCode>
                    '.$invoiceHeadersDetails.'
                    <Remarks>'.$notes.'</Remarks>
                    <Order>
                        <BuyerOrderNumber>'.$invoice_no.'</BuyerOrderNumber>
                        <BuyerOrderDate>'.$invoice_date.'</BuyerOrderDate>
                        <SupplierOrderNumber>'.$cust_order_no.'</SupplierOrderNumber>
                    </Order>
                    <Currency>
                        <InvoiceCurrency>'.$currency.'</InvoiceCurrency>
                        <TaxCurrency>'.$currency.'</TaxCurrency>
                    </Currency>
                    <Payment>
                        <PaymentMeans>42</PaymentMeans>
                    </Payment>
                </Invoice-Header>
                <Invoice-Parties>                
                '.$invoicePartiesDetails.'                
                </Invoice-Parties>
                '.$invoiceLineData.'
                <Invoice-Summary>
                    <TotalLines>1</TotalLines>
                    <TotalNetAmount>'.$net_amount.'</TotalNetAmount>
                    <TotalTaxableAmount>'.$net_amount.'</TotalTaxableAmount>
                    <TotalTaxAmount>'.$tax_amount.'</TotalTaxAmount>
                    <TotalGrossAmount>'.$grand_total.'</TotalGrossAmount>
                    <TotalPayableAmount>'.$grand_total.'</TotalPayableAmount> 
                    '.$invoiceTaxSummaryData.'  
                </Invoice-Summary>
                </Document-Invoice>&Timeout=5000';

                /* 
                <Tax-Summary><Tax-Summary-Line><TaxRate>18.0</TaxRate><TaxCategoryCode>0015</TaxCategoryCode><TaxCategory>Katma Değer Vergisi (%18)</TaxCategory><TaxAmount>'.$tax_amount.'</TaxAmount><TaxableAmount>'.$net_amount.'</TaxableAmount></Tax-Summary-Line></Tax-Summary>
                 */

                // echo '<pre>';print_r($xml_string);
                // exit;

                $headers = array(
                    "Content-type: application/x-www-form-urlencoded",
                    "Accept: text/xml",
                    "SOAPAction: http://www.comarch.com/Send"
                ); 

                $url = 'https://www.ecod.pl/EcodWebService/EDIservice.asmx/Send';

                $CURL = curl_init();
                curl_setopt($CURL, CURLOPT_URL, $url);
                curl_setopt($CURL, CURLOPT_POST,true); 
                curl_setopt($CURL, CURLOPT_POSTFIELDS, $xml_string); 
                // curl_setopt($CURL, CURLOPT_HEADER, 1); 
                curl_setopt($CURL, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($CURL, CURLOPT_SSL_VERIFYHOST, false);
                curl_setopt($CURL, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($CURL, CURLOPT_HTTPHEADER, $headers);                
                // curl_setopt($CURL, curlOPT_VERBOSE, 1);
                // // var_dump(class_exists("SOAPClient"));             
                
                try {
                    // Write the contents back to the file 
                    $xmlResponse = curl_exec($CURL);
                    curl_close ($CURL);
                    // $info = curl_getinfo($CURL);
                    // print_r($info['request_header']);

                    // $curlInfo = curl_getinfo($CURL, CURLINFO_HTTP_CODE);
                    // $errors = curl_error($CURL);
                    // echo '<pre>';print_r($xml_string);                    
                    
                    // libxml_use_internal_errors(true);
                    $xml = simplexml_load_string((string)$xmlResponse);

                    // echo '<pre>';
                    // print_r($xml);
                    // echo $xml->Res;
                    // echo '###############';
                    // echo 'info=';print_r($curlInfo);
                    // echo 'error=';print_r($errors);                    
                    // exit;

                    if($xml->Res == '00000000'){//invoice_number,e_invoice_number

                        $Sql7 = "INSERT INTO e_invoice_portal_uploads
                                                    SET 
                                                        rec_id = $recID,
                                                        invoice_number = '$invoice_no',
                                                        e_invoice_number = '$eInvoiceNumber',
                                                        type = 1,
                                                        status = 1,
                                                        company_id = ".$this->arrUser['company_id'].",
                                                        AddedBy = ".$this->arrUser['id'].",
                                                        AddedOn = UNIX_TIMESTAMP(NOW()),
                                                        ChangedBy = '".$this->arrUser['id']."',
                                                        ChangedOn = UNIX_TIMESTAMP (NOW())";
                        //  echo $Sql7;exit;
                        $RS7 = $this->objsetup->CSI($Sql7);

                        $response['ack'] = 1;
                        $response['errorCode'] = '00000000';
                        $response['errorMsg'] = '00000000';
                    }
                    else{
                        $response['ack'] = 0; 
                        $response['errorCode'] = $xml->Res;
                        $response['errorMsg'] = '';
                    }

                } catch (HttpException $ex) {
                    echo $ex;
                    $response['ack'] = 0; 
                    $response['errorCode'] = 0;
                    $response['errorMsg'] = $ex;
                    exit;
                }
            }
            else{            
                $response['ack'] = 0;          
            }   
                       
        } 
        else if($OptionType == 2){ //Purchase Order

            $Sql1 = "SELECT id 
                     FROM doc_header 
                     WHERE doc_id = $recID AND
                            TYPE=$OptionType AND
                            company_id = ".$this->arrUser['company_id'];
            //  echo $Sql1;exit;

            $RS1 = $this->objsetup->CSI($Sql1);

            if (!($RS1->fields['id'] > 0)){

                $Sql4 = "INSERT INTO doc_header ( company_id, doc_id, TYPE, order_no,invoice_no, supp_cust_no, NAME, address_1, address_2, 
                                                city, postcode, county, contact_person, telephone, email, purchaser, consignment_no, supplier_order_no, invoice_date, supplier_invoice_no, order_date, req_recpt_del_date, receipt_date, payable_bank, payment_terms, payment_method, due_date, currency, AddedOn, AddedBy, PrintedOn, PrintedBy, com_name, com_address_1, com_address_2, com_city, com_county, com_postcode, com_telephone, com_fax, bank_name, account_name, sort_code,swift_code, account_no, iban, notes, net_amount, grand_total, tax_amount, bill_to_cust_no, ship_name, ship_address_1, ship_address_2, ship_city, ship_county, ship_postcode, supp_vat_reg, posting_group, vat_reg_no, user_id)  
                        SELECT ".$this->arrUser['company_id'].", $recID, 2, inv.order_code, inv.invoice_code, inv.sell_to_cust_no, inv.sell_to_cust_name, 
                                inv.sell_to_address, inv.sell_to_address2, inv.sell_to_city, inv.sell_to_post_code, inv.sell_to_county, inv.sell_to_contact_no, 
                                inv.cust_phone, inv.cust_email, inv.srm_purchase_code, inv.comm_book_in_no, inv.cust_order_no, inv.invoice_date, inv.supp_order_no, 
                                inv.order_date, inv.requested_delivery_date, inv.receiptDate, inv.payable_bank, pt.name, pm.name, inv.due_date, c.code, 
                                UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", UNIX_TIMESTAMP(NOW()), " . $this->arrUser['id'] . ", com.name, com.address, 
                                com.address_2, com.city, com.county, com.postcode, com.telephone, com.fax, b.name, b.account_name, b.sort_code, b.swift_code, b.account_no, b.iban, 
                                inv.note, inv.net_amount, inv.grand_total, inv.tax_amount, inv.bill_to_cust_no, inv.ship_to_name, inv.ship_to_address, inv.ship_to_address2, inv.ship_to_city, inv.ship_to_county, inv.ship_to_post_code, fi.vat_number, (SELECT NAME FROM ref_posting_group WHERE id=fi.posting_group_id), f.vat_reg_no, " . $this->arrUser['id'] . "
                        FROM srm_invoice AS inv
                        LEFT JOIN srm_finance AS fi ON fi.supplier_id = inv.sell_to_cust_id
                        LEFT JOIN financial_settings AS f ON f.company_id = inv.company_id
                        LEFT JOIN srm_payment_methods AS pm ON pm.id = inv.payment_method_id
                        LEFT JOIN srm_payment_terms AS pt ON pt.id = inv.payment_terms_code
                        LEFT JOIN currency AS c ON c.id = inv.currency_id
                        LEFT JOIN company AS com ON com.id = inv.company_id
                        LEFT JOIN bank_account AS b ON b.id = inv.bank_account_id
                        WHERE inv.id = $recID
                        GROUP BY inv.id ";
                //  echo $Sql4;exit;
                $RS4 = $this->objsetup->CSI($Sql4);

                $Sql5 = "INSERT INTO doc_detail (doc_header_id, doc_header_type, company_id, TYPE,number,description,quantity,uom,
                                                warehouse,unit_price, vat,discount_type, discount,vat_rate,total_amount, discount_amount)  
                        SELECT $recID, 2, ".$this->arrUser['company_id'].",inv.type,inv.product_code,inv.product_name,inv.qty,inv.unit_measure,inv.warehouse,inv.unit_price,inv.vat_price,inv.discount_type,inv.discount,inv.vat,inv.total_price,inv.discount_price
                        FROM srm_invoice_detail AS inv
                        LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id
                        WHERE inv.invoice_id = $recID ";
                //  echo $Sql5;exit;
                $RS5 = $this->objsetup->CSI($Sql5); 
            }


            $Sql6 = "SELECT * from doc_header WHERE doc_id = $recID AND type = 2 LIMIT 1";
            //  echo $Sql6;exit;

            $RS6 = $this->objsetup->CSI($Sql6); 

            $lineCount = 0;

            $invoiceLineData = '<Invoice-Lines>';

            if ($RS6->RecordCount() > 0) {
                
                if ($Row = $RS6->FetchRow()) {
                    
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $order_date = $this->objGeneral->convertUnixIntoYMD_FormateDate($Row['order_date']);
                    $invoice_date = $this->objGeneral->convertUnixIntoYMD_FormateDate($Row['invoice_date']);

                    $invoice_no = $Row['invoice_no'];
                    $supp_cust_no = $Row['supp_cust_no'];
                    $custName = $Row['name'];
                    $custAddress_1 = $Row['address_1'];
                    $custAddress_2 = $Row['address_2'];
                    $custcity = $Row['city'];
                    $custpostcode = $Row['postcode'];
                    $custcountry = $Row['country'];
                    $custcounty = $Row['county'];
                    $telephone = $Row['telephone'];
                    $custemail = $Row['email'];
                    $com_fax = $Row['com_fax'];

                    // $notes = $Row['notes'];

                    if(strlen($custcounty) == 0){
                        $custcounty = $custcity;
                    }

                    $vat_reg_no = $Row['vat_reg_no'];                    
                    $cust_vat_reg_no = $Row['cust_vat_reg_no'];                    

                    $net_amount = $Row['net_amount'];
                    $grand_total = $Row['grand_total'];
                    $total_amount = $Row['total_amount'];
                    $tax_amount = $Row['tax_amount'];

                    $supp_vat_reg = $Row['supp_vat_reg'];
                    // $order_date = $Row['order_date'];
                    $currency = $Row['currency'];
                    $cust_order_no = $Row['cust_order_no'];
                    
                    $Row['doc_details_arr'] = self::get_doc_details($recID, $OptionType, 0, $this->arrUser['company_id']);

                    foreach ($Row['doc_details_arr'] as $rec) {
                        $Row['discount'] += $rec['discount'];
                    }

                    if($Row['discount'] > 0){
                        $counter =0;
                        $Row['discount'] = 0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {

                            $discount_amount = 0;

                            if($rec['discount_type'] == 'Value'){
                                $discount_amount = $rec['discount'];
                            }
                            elseif($rec['discount_type'] == 'Percentage'){
                                $discount_amount = ((($rec['quantity'] * $rec['unit_price']) * $rec['discount']) / 100);
                            }
                            else{
                                $discount_amount = $rec['quantity'] * $rec['discount'];
                            }

                            $Row['doc_details_arr'][$counter]['discount_amount'] = $discount_amount;
                            $Row['discount'] += ROUND($discount_amount,2);

                            if($rec['discount'] != 0) $Row['doc_details_arr'][$counter]['discountchk'] = 1;
                            $counter ++;
                        }  
                    }
                    else{
                        $counter =0;
                        
                        foreach ($Row['doc_details_arr'] as $rec) {
                            $counter ++;
                        }
                    } 

                    $taxArray = array();
                    $invoiceTaxSummaryData = '';                    

                    foreach ($Row['doc_details_arr'] as $rec) {

                        $lineCount++;

                        // <TaxRate>'.$rec['vat_rate'].'</TaxRate>

                        $uom = '';

                        if(strtolower($rec['uom']) == 'unit'){
                            $uom = 'EA';
                        }
                        elseif(strtolower($rec['uom']) == 'case'){
                            $uom = 'XCS';
                        }
                        elseif(strtolower($rec['uom']) == 'pallet'){
                            $uom = 'XPX';
                        }
                        elseif(strtolower($rec['uom']) == 'kg' || strtolower($rec['uom']) == 'kilogram'){
                            $uom = 'KGM';
                        }
                        elseif(strtolower($rec['uom']) == 'gram'){
                            $uom = 'GRM';
                        }                        
                        elseif(strtolower($rec['uom']) == 'piece'){
                            $uom = 'EA';
                        }
                        elseif(strtolower($rec['uom']) == 'container'){
                            $uom = 'CH';
                        }
                        else{
                            $uom = 'XYZ';
                        }                        

                        $vatRate = '';
                        $taxRate = '';

                        if($rec['vat_rate'] == '20% VAT'){
                            $vatRate = '%20';
                            $taxRate = '20.00';
                        }
                        elseif($rec['vat_rate'] == '18% VAT'){
                            $vatRate = '%18';
                            $taxRate = '18.00';
                        }
                        elseif($rec['vat_rate'] == '5% VAT'){
                            $vatRate = '%5';
                            $taxRate = '5.00';
                        }
                        elseif($rec['vat_rate'] == '1% VAT'){
                            $vatRate = '%1';
                            $taxRate = '1.00';
                        }
                        elseif($rec['vat_rate'] == '8% VAT'){
                            $vatRate = '%8';
                            $taxRate = '8.00';
                        }
                        elseif($rec['vat_rate'] == 'Exempt'){
                            $vatRate = '%0';
                            $taxRate = '0.00';
                        }                        
                        elseif($rec['vat_rate'] == 'Zero Rated'){
                            $vatRate = '%0';
                            $taxRate = '0.00';
                        }

                        $taxArray[$rec['vat_rate']]['vat'] += $rec['vat'];
                        $taxArray[$rec['vat_rate']]['vat_rate'] = $vatRate;
                        $taxArray[$rec['vat_rate']]['taxRate'] = $taxRate;

                        $taxArray[$rec['vat_rate']]['totalAmount'] += $rec['total_amount'];

                        $invoiceLineData .= '<Line>
                        <Line-Item>
                            <LineNumber>'.$lineCount.'</LineNumber>
                            <ManufacturerItemCode>'.$rec['number'].'</ManufacturerItemCode>
                            <ItemName>'.$rec['description'].'</ItemName>
                            <InvoiceQuantity>'.$rec['quantity'].'</InvoiceQuantity>
                            <UnitOfMeasure>'.$uom.'</UnitOfMeasure>
                            <InvoiceUnitNetPrice>'.$rec['unit_price'].'</InvoiceUnitNetPrice>
                            <NetAmount>'.$rec['total_amount'].'</NetAmount>
                            <TaxAmount>'.$rec['vat'].'</TaxAmount>
                        </Line-Item>
                        <Line-Tax>
                            <Tax>
                                <TaxRate>'.$taxRate.'</TaxRate>
                                <TaxCategoryCode>0015</TaxCategoryCode>
                                <TaxCategory>Katma Değer Vergisi</TaxCategory>
                                <TaxAmount>'.$rec['vat'].'</TaxAmount>
                                <TaxableAmount>'.$rec['total_amount'].'</TaxableAmount>
                            </Tax>
                        </Line-Tax>
                        </Line>';
                    } 
                    //Katma Değer Vergisi ('.$vatRate.')          

                    $response['response'] = $Row;
                }

                $invoiceLineData .= '</Invoice-Lines>';

                $invoiceTaxSummaryData .= '<Tax-Summary>';                

                foreach ($taxArray as $taxRec) {

                    $invoiceTaxSummaryData .= '<Tax-Summary-Line>
                        <TaxRate>'.$taxRec['taxRate'].'</TaxRate>
                        <TaxCategoryCode>0015</TaxCategoryCode>
                        <TaxCategory>Katma Değer Vergisi</TaxCategory>
                        <TaxAmount>'.$taxRec['vat'].'</TaxAmount>
                        <TaxableAmount>'.$taxRec['totalAmount'].'</TaxableAmount>
                    </Tax-Summary-Line>';
                }//Katma Değer Vergisi ('.$taxRec['vat_rate'].')

                $invoiceTaxSummaryData .= '</Tax-Summary>'; 

                //

                $xml_string = 'Name=9991032012059EC&Password=vShFBTXxb&PartnerIln=9990000001049&DocumentType=INVOIC&DocumentVersion=ECOD.TR.2&DocumentStandard=XML&DocumentTest=T&ControlNumber=1&DocumentContent=<Document-Invoice>
                <Invoice-Header>
                    <InvoiceNumber>'.$eInvoiceNumber.'</InvoiceNumber>
                    <InvoiceDate>'.$invoice_date.'</InvoiceDate>
                    <InvoiceTime>'.$currentTime.'</InvoiceTime>
                    <DocumentFunctionCode>O</DocumentFunctionCode>
                    <InvoiceProfile>EA</InvoiceProfile>
                    <MessageType>S</MessageType>
                    <Remarks>'.$notes.'</Remarks>
                    
                    <Order>
                        <BuyerOrderNumber>'.$invoice_no.'</BuyerOrderNumber>
                        <BuyerOrderDate>'.$invoice_date.'</BuyerOrderDate>
                    </Order>
                    
                    <Currency>
                        <InvoiceCurrency>'.$currency.'</InvoiceCurrency>
                        <TaxCurrency>'.$currency.'</TaxCurrency>
                    </Currency>
                    
                    <Payment>
                        <PaymentMeans>42</PaymentMeans>
                    </Payment>
                </Invoice-Header>
                
                <Invoice-Parties>

                    <Buyer>
                        <TaxID>'.$companyvat_reg_no.'</TaxID>
                        <IDType>VKN</IDType>
                        <Name>'.$companyName.'</Name>
                        <StreetName>'.$companyAddress2.'</StreetName>
                        <BuildingName>'.$companyAddress.'</BuildingName>
                        <District>'.$companyCounty.'</District>
                        <CityName>'.$companyCity.'</CityName>
                        <CountryName>'.$companyCountry.'</CountryName>
                        <Country>'.$companyCountryISO.'</Country>
                        <PhoneNumber>'.$companyTelephone.'</PhoneNumber>
                        <TaxOfficeName>'.$companyTaxOfficeName.'</TaxOfficeName>
                        <Fax>'.$companyFax.'</Fax>
                    </Buyer>
                    
                    <Seller>
                        <TaxID>'.$supp_vat_reg.'</TaxID>
                        <IDType>VKN</IDType>
                        <Name>'.$custName.'</Name>
                        <StreetName>'.$custAddress_2.'</StreetName>
                        <BuildingName>'.$custAddress_1.'</BuildingName>
                        <District>'.$custcounty.'</District>
                        <CityName>'.$custcity.'</CityName>
                        <PostalCode>'.$companyPostCode.'</PostalCode>
                        <CountryName>'.$endUserCountry.'</CountryName>
                        <Country>'.$endUserCountryISO.'</Country>
                        <PhoneNumber>'.$telephone.'</PhoneNumber>
                        <Fax>'.$com_fax.'</Fax>
                        <Website>'.$companyURL.'</Website>
                    </Seller> 
                
                </Invoice-Parties>

                '.$invoiceLineData.'
                
                <Invoice-Summary>
                    <TotalLines>1</TotalLines>
                    <TotalNetAmount>'.$net_amount.'</TotalNetAmount>
                    <TotalTaxableAmount>'.$net_amount.'</TotalTaxableAmount>
                    <TotalTaxAmount>'.$tax_amount.'</TotalTaxAmount>
                    <TotalGrossAmount>'.$grand_total.'</TotalGrossAmount>
                    <TotalPayableAmount>'.$grand_total.'</TotalPayableAmount>

                    '.$invoiceTaxSummaryData.'               
                
                </Invoice-Summary>
                </Document-Invoice>&Timeout=5000';

                /* 
                <Tax-Summary><Tax-Summary-Line><TaxRate>18.0</TaxRate><TaxCategoryCode>0015</TaxCategoryCode><TaxCategory>Katma Değer Vergisi (%18)</TaxCategory><TaxAmount>'.$tax_amount.'</TaxAmount><TaxableAmount>'.$net_amount.'</TaxableAmount></Tax-Summary-Line></Tax-Summary>  */

                $headers = array(
                    "Content-type: application/x-www-form-urlencoded",
                    "Accept: text/xml",
                    "SOAPAction: http://www.comarch.com/Send"
                ); 

                $url = 'https://www.ecod.pl/EcodWebService/EDIservice.asmx/Send';

                $CURL = curl_init();
                curl_setopt($CURL, CURLOPT_URL, $url);
                curl_setopt($CURL, CURLOPT_POST,true); 
                curl_setopt($CURL, CURLOPT_POSTFIELDS, $xml_string); 
                // curl_setopt($CURL, CURLOPT_HEADER, 1); 
                curl_setopt($CURL, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($CURL, CURLOPT_SSL_VERIFYHOST, false);
                curl_setopt($CURL, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($CURL, CURLOPT_HTTPHEADER, $headers);                
                // curl_setopt($CURL, curlOPT_VERBOSE, 1);
                // // var_dump(class_exists("SOAPClient"));             
                
                try {
                    // Write the contents back to the file 
                    $xmlResponse = curl_exec($CURL);
                    curl_close ($CURL);
                    // $info = curl_getinfo($CURL);
                    // print_r($info['request_header']);

                    // $curlInfo = curl_getinfo($CURL, CURLINFO_HTTP_CODE);
                    // $errors = curl_error($CURL);
                    // echo '<pre>';print_r($xml_string);                    
                    
                    // libxml_use_internal_errors(true);
                    $xml = simplexml_load_string((string)$xmlResponse);

                    // echo '<pre>';
                    // print_r($xml);
                    // echo $xml->Res;
                    // echo '###############';
                    // echo 'info=';print_r($curlInfo);
                    // echo 'error=';print_r($errors);                    
                    // exit;

                    if($xml->Res == '00000000'){

                        $Sql7 = "INSERT INTO e_invoice_portal_uploads
                                                    SET 
                                                        rec_id = $recID,
                                                        invoice_number = '$invoice_no',
                                                        e_invoice_number = '$eInvoiceNumber',
                                                        type = 2,
                                                        status = 1,
                                                        company_id = ".$this->arrUser['company_id'].",
                                                        AddedBy = ".$this->arrUser['id'].",
                                                        AddedOn = UNIX_TIMESTAMP(NOW()),
                                                        ChangedBy = '".$this->arrUser['id']."',
                                                        ChangedOn = UNIX_TIMESTAMP (NOW())";
                        //  echo $Sql7;exit;
                        $RS7 = $this->objsetup->CSI($Sql7);

                        $response['ack'] = 1;
                        $response['errorCode'] = '00000000';
                        $response['errorMsg'] = '00000000';
                    }
                    else{
                        $response['ack'] = 0; 
                        $response['errorCode'] = $xml->Res;
                        $response['errorMsg'] = '';
                    }

                } catch (HttpException $ex) {
                    echo $ex;
                    $response['ack'] = 0; 
                    $response['errorCode'] = 0;
                    $response['errorMsg'] = $ex;
                    exit;
                }
            }
            else{            
                $response['ack'] = 0;          
            }   
                       
        } 
        // print_r($response);exit;
        return $response; 
    }

    function getClientConfigurationByVirtualEmail ($id){
        $Sql = "SELECT
                    username,
                    alias
                FROM virtual_emails ve 
                WHERE ve.id = $id";
        //  echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        $results = array();

        if ($RS->RecordCount() > 0) {
            while ($row = $RS->FetchRow()) {
                $results = array('username' => $row['username'], 'alias' => $row['alias']);
            }
        }
        //print_r($results);exit;
        return $results;
    }

    function get_doc_header($attr,$companyID) {
        $templateType = $attr['templateType'];       
        $separate_by_warehouse = (isset($attr['separate_by_warehouse']) && $attr['separate_by_warehouse'] != '') ? 1 : 0;
       
        $Sql2 = "SELECT * from doc_header WHERE doc_id = ".$attr['id']." AND type = ".$attr['type']." LIMIT 1";

        // echo $Sql2;exit;
        $RS1 = $this->objsetup->CSI($Sql2);
        if ($RS1->RecordCount() > 0) {
            // echo 'inside if';exit;
            if ($Row = $RS1->FetchRow()) {
                // print_r($Row);exit;
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                // print_r($Row);exit;
                $Row['delivery_date'] = (intval($Row['delivery_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['delivery_date']) : '';
                $Row['order_date'] = (intval($Row['order_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['order_date']) : '';
                $Row['due_date'] = (intval($Row['due_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['due_date']) : '';
                $Row['req_recpt_del_date'] = (intval($Row['req_recpt_del_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['req_recpt_del_date']) : '';
                $Row['cn_date'] = (intval($Row['cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['cn_date']) : '';
                $Row['date_dispatched'] = (intval($Row['date_dispatched']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['date_dispatched']) : '';
                $Row['invoice_date'] = (intval($Row['invoice_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['invoice_date']) : '';
                $Row['supp_cn_date'] = (intval($Row['supp_cn_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['supp_cn_date']) : 0;
                $Row['receipt_date'] = (intval($Row['receipt_date']) > 0) ? $this->objGeneral->convert_unix_into_date($Row['receipt_date']) : 0;
                
                $Row['doc_details_arr'] = self::get_doc_details($Row['doc_id'], $attr['type'], $separate_by_warehouse, $companyID);

                 if(isset($templateType)){
                    $Row['volumePermission'] = self::getVolumeWeightPermission($templateType,1,$companyID);
                    $Row['weightPermission'] = self::getVolumeWeightPermission($templateType,2,$companyID);
                    // exit;
                }  

                $Row['discount'] = 0;

                foreach ($Row['doc_details_arr'] as $rec) {
                    $Row['discount'] += $rec['discount'];
                }

                if($Row['discount'] > 0){
                    $counter =0;
                    $Row['discount'] = 0;
                    
                    foreach ($Row['doc_details_arr'] as $rec) {

                        $discount_amount = 0;

                        if($rec['discount_type'] == 'Value'){
                            $discount_amount = $rec['discount'];
                        }
                        elseif($rec['discount_type'] == 'Percentage'){
                            $discount_amount = ((($rec['quantity'] * $rec['unit_price']) * $rec['discount']) / 100);
                        }
                        else{
                            $discount_amount = $rec['quantity'] * $rec['discount'];
                        }

                        $Row['doc_details_arr'][$counter]['discount_amount'] = $discount_amount;
                        $Row['discount'] += $discount_amount;

                        if($rec['discount'] != 0) $Row['doc_details_arr'][$counter]['discountchk'] = 1;
                        
                        $counter ++;
                    }  
                }

                $response['response'] = $Row;
            }
            $response['ack'] = 1;
        } else
            $response['ack'] = 0;

        return $response;
    }

    function getVolumeWeightPermission ($templateName,$type,$companyID){

        if($templateName == 'receiptNote'){
            $title = 'Goods Receipt Note';
        } 
        else if($templateName == 'purchaseOrder' || $templateName == 'purchaseInvoice'){
            $title = 'Purchase Order';
        }    
        else if($templateName == 'postedCreditNote'){
            $title = 'Posted Credit Note';
        }    
        else if($templateName == 'creditNote'){
            $title = 'Credit Note';
        }
        else if($templateName == 'salesDelivery'){
            $title = 'Delivery Note';
        }
        else if($templateName == 'salesWarehouse'){
            $title = 'Warehouse Instructions';
        }
        else if($templateName == 'salesQuote'){
            $title = 'Sales Quote';
        }
        else if($templateName == 'salesOrder'){
            $title = 'Sales Order';
        }
        else if($templateName == 'salesInvoice'){
            $title = 'Sales Invoice'; // Transfer Order & Posted Transfer Order
        }  
        else if($templateName == 'debitNote' || $templateName == 'postedDebitNote'){
            $title = 'Debit Note';
        }
        else if($templateName == 'TransferOrder'){
            $title = 'Transfer Order'; // Transfer Order & Posted Transfer Order
        }
        else if($templateName == 'PostedTransferOrder'){
            $title = 'Posted Transfer Order'; // Transfer Order & Posted Transfer Order
        }
        // print_r($this->arrUser);

        $Sql = "SELECT  weight_permission,volume_permission
                FROM items_weight_setup
                WHERE  title = '$title' AND company_id = '" . $companyID . "' limit 1";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
           $Row = $RS->FetchRow();

        //    echo $type;exit;

                if($type == 1) 
                    return $Row['volume_permission'];
                else if($type == 2) 
                    return $Row['weight_permission'];

        } else
            return 0;
    }

    function get_doc_details($id, $type, $separate_by_warehouse, $company_id) {
        $response = array();
        $order_by = '';

        if($separate_by_warehouse == 1)
        {
            $order_by = " ORDER BY dd.warehouse_id, dd.id";
        }
        else
        {
            $order_by = " ORDER BY dd.id";
        }

        $Sql = "SELECT dd.*,
                       dd.number AS moduleCode,
                       (CASE WHEN dd.volume_unit = 1 THEN 'mm'
                            WHEN dd.volume_unit = 2 THEN 'cm'
                            WHEN dd.volume_unit = 3 THEN 'in'
                            WHEN dd.volume_unit = 4 THEN 'm'
                            WHEN dd.volume_unit = 5 THEN 'cm3'
                            ELSE ''
                            END) AS volumeUnit,
                        (CASE WHEN dd.volume >0 THEN volume
                            ELSE '0'
                            END) AS volume,
                        (CASE WHEN dd.weight >0 THEN weight
                            ELSE '0'
                            END) AS weight,
				       'kg' AS weightUnit2,

                       (CASE WHEN (dd.company_id=133 AND dd.type =0 ) THEN (SELECT p.gtipNo FROM product AS p WHERE p.product_code =  dd.number AND p.company_id=133)
                       ELSE ''
                       END ) AS gtipNo 
                FROM doc_detail AS dd
                WHERE 
                        dd.doc_header_id = $id AND 
                        dd.company_id= $company_id AND 
                        dd.doc_header_type = $type $order_by";
        // echo $Sql;exit;
        /* (CASE WHEN weightUnit = 1 THEN 'g'
                            WHEN weightUnit = 2 THEN 'Kg'
                            ELSE ''
                            END) AS weightUnit2 */
        $RS = $this->objsetup->CSI($Sql);
        $prev_wh_id = 0;
        $count = 0;
        if ($RS->RecordCount() > 0) {
            if($separate_by_warehouse == 1)
            {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_wh_id != $Row['warehouse_id'])
                    {
                        $prev_wh_id = $Row['warehouse_id'];
                        $count = $count + 1;
                    }
                    $response[$count][] = $Row;
                }
            }
            else
            {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $response[] = $Row;
                }
            }

        }
        return $response;
    }

    function convertQuoteToPurchaseOrder($attr) {
        $this->objGeneral->mysql_clean($attr);

        $response = array();

        $Sql = "CALL SR_OrderConvertionsBtwSalePurchase('" . $attr['id'] . "'," . $this->arrUser['company_id'] . "," . $this->arrUser['id'] . ");";
        // echo $Sql;
        // exit;
        $Rs = $this->objsetup->CSI($Sql);

        if ($Rs->fields['Result'] > 0) {
            $response['ack'] = 1;
            $response['id'] = $Rs->fields['Result'];
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Conversion Fails!';
        }
        return $response;
    }

    function convert_quote_to_sale_order($attr) {
        $this->objGeneral->mysql_clean($attr);

        $response = array();
        $id = ($attr['id'] != '') ? $attr['id'] : 0;
        $Sql = "UPDATE orders SET 
                    converted_to_so_on = UNIX_TIMESTAMP(NOW()),
                    converted_to_so_by = ".$this->arrUser['id'].",
                    converted_to_so_by_name = '".addslashes($this->arrUser['user_name'])."',
                    type=1, 
                    sale_order_code= SR_GetNextSeq('orders', " . $this->arrUser['company_id'] . ", 0, 0) 
                    WHERE id = $id AND company_id = " . $this->arrUser['company_id'];
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $Cache_Sql = "UPDATE product SET force_update = !force_update 
                            WHERE company_id = " . $this->arrUser['company_id'] ." AND 
                                    id IN (SELECT item_id FROM order_details WHERE order_details.order_id=$id AND order_details.type=0 AND order_details.company_id = " . $this->arrUser['company_id'] . ")";
            $Cache_RS = $this->objsetup->CSI($Cache_Sql);

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }
        return $response;
    }

    function navigate_invoice($attr) {
        /* if($attr['type'] == 1)
          {
          $Sql = "SELECT
          o.posting_date,
          o.sale_invioce_code AS document_no,
          gat.gl_account_code,
          gat.gl_account_name AS description,
          o.bill_to_cust_no AS source_no,
          o.bill_to_insurance_charges AS finance_charges,
          o.bill_to_insurance_charges_type AS finance_charges_type,
          (SELECT code from currency where id = o.currency_id) as currency_code,
          o.cust_order_no AS external_doc_no,
          gat.debit_amount/(CASE WHEN gat.txnType = 1 THEN -- transaction type is 1 and additionalCostID null means the amount is converted
          (CASE WHEN gat.additionalCostID IS NOT NULL THEN
          (SELECT currency_rate FROM gl_account_additional_cost_txn AS glTxn
          WHERE gat.additionalCostID = glTxn.id)
          ELSE
          1
          END)
          ELSE o.currency_rate END ) AS debit_amount,
          gat.credit_amount/(CASE WHEN gat.txnType = 1 THEN
          (CASE WHEN gat.additionalCostID IS NOT NULL THEN
          (SELECT currency_rate FROM gl_account_additional_cost_txn AS glTxn
          WHERE gat.additionalCostID = glTxn.id)
          ELSE
          1
          END)
          ELSE o.currency_rate END ) AS credit_amount,
          '-' AS balancing_acc_type,
          '-' AS balancing_acc_no,
          (SELECT first_name FROM employees WHERE id=gat.AddedBy) AS user_id,
          gat.transaction_id
          FROM gl_account_txn AS gat, orders as o
          WHERE
          o.id = gat.object_id AND
          object_id = $attr[object_id] AND
          gat.type = ".$attr['type']." AND
          gat.company_id = '".$this->arrUser['company_id']."'";
          }
          else if($attr['type'] == 2)
          {
          $Sql = "SELECT
          o.posting_date,
          o.return_invoice_code AS document_no,
          gat.gl_account_code,
          gat.gl_account_name AS description,
          o.bill_to_cust_no AS source_no,
          o.bill_to_insurance_charges AS finance_charges,
          o.bill_to_insurance_charges_type AS finance_charges_type,
          (SELECT code from currency where id = o.currency_id) as currency_code,
          o.cust_order_no AS external_doc_no,
          gat.debit_amount/o.currency_rate AS debit_amount,
          gat.credit_amount/o.currency_rate AS credit_amount,
          '-' AS balancing_acc_type,
          '-' AS balancing_acc_no,
          (SELECT first_name FROM employees WHERE id=gat.AddedBy) AS user_id,
          gat.transaction_id
          FROM gl_account_txn AS gat, return_orders as o
          WHERE
          o.id = gat.object_id AND
          object_id = $attr[object_id] AND
          gat.type = ".$attr['type']." AND
          gat.company_id = '".$this->arrUser['company_id']."'";
          }
          else if($attr['type'] == 3)
          {
          $Sql = "SELECT
          o.invoice_date AS posting_date,
          o.invoice_code AS document_no,
          gat.gl_account_code,
          gat.gl_account_name AS description,
          o.bill_to_cust_no AS source_no,
          '-' AS finance_charges,
          '-' AS finance_charges_type,
          (SELECT code from currency where id = o.currency_id) as currency_code,
          o.cust_order_no AS external_doc_no,
          gat.debit_amount/(CASE WHEN (gat.txnType = 1 AND EXISTS(SELECT 1 FROM gl_account_additional_cost_txn AS glTxn
          WHERE  gat.additionalCostID = glTxn.id AND
          glTxn.currencyID = (SELECT c.currency_id FROM company AS c WHERE c.id=".$this->arrUser['company_id']." ))) THEN 1
          WHEN (gat.txnType = 1 AND EXISTS(SELECT 1 FROM gl_account_additional_cost_txn AS glTxn
          WHERE gat.additionalCostID = glTxn.id AND
          glTxn.currencyID <> (SELECT c.currency_id FROM company AS c WHERE c.id=".$this->arrUser['company_id']." ))) THEN
          (SELECT SR_GetConversionRateByDate(glTxn.postingDate,glTxn.currencyID,".$this->arrUser['company_id'].")
          FROM gl_account_additional_cost_txn AS glTxn
          WHERE  gat.additionalCostID = glTxn.id )

          ELSE o.currency_rate END ) AS debit_amount ,
          gat.credit_amount/(CASE WHEN (gat.txnType = 1 AND EXISTS(SELECT 1 FROM gl_account_additional_cost_txn AS glTxn
          WHERE  gat.additionalCostID = glTxn.id AND
          glTxn.currencyID = (SELECT c.currency_id FROM company AS c WHERE c.id=".$this->arrUser['company_id']." ))) THEN 1
          WHEN (gat.txnType = 1 AND EXISTS(SELECT 1 FROM gl_account_additional_cost_txn AS glTxn
          WHERE gat.additionalCostID = glTxn.id AND
          glTxn.currencyID <> (SELECT c.currency_id FROM company AS c WHERE c.id=".$this->arrUser['company_id']." ))) THEN
          (SELECT SR_GetConversionRateByDate(glTxn.postingDate,glTxn.currencyID,".$this->arrUser['company_id'].")
          FROM gl_account_additional_cost_txn AS glTxn
          WHERE  gat.additionalCostID = glTxn.id )

          ELSE o.currency_rate END ) AS credit_amount,
          '-' AS balancing_acc_type,
          '-' AS balancing_acc_no,
          (SELECT first_name FROM employees WHERE id=gat.AddedBy) AS user_id,
          gat.transaction_id
          FROM gl_account_txn AS gat, srm_invoice as o
          WHERE
          o.id = gat.object_id AND
          object_id = $attr[object_id] AND
          gat.type = ".$attr['type']." AND
          gat.company_id = '".$this->arrUser['company_id']."'";

          //  /o.currency_rate AS debit_amount,
          // /o.currency_rate AS credit_amount
          }
          else if($attr['type'] == 4)
          {
          $Sql = "SELECT
          o.supplierCreditNoteDate AS posting_date,
          o.invoice_code AS document_no,
          gat.gl_account_code,
          gat.gl_account_name AS description,
          o.supplierNo AS source_no,
          '-' AS finance_charges,
          '-' AS finance_charges_type,
          (SELECT code from currency where id = o.currency_id) as currency_code,
          o.cust_order_no AS external_doc_no,
          gat.debit_amount/o.currency_rate AS debit_amount,
          gat.credit_amount/o.currency_rate AS credit_amount,
          '-' AS balancing_acc_type,
          '-' AS balancing_acc_no,
          (SELECT first_name FROM employees WHERE id=gat.AddedBy) AS user_id,
          gat.transaction_id
          FROM gl_account_txn AS gat, srm_order_return as o
          WHERE
          o.id = gat.object_id AND
          object_id = $attr[object_id] AND
          gat.type = ".$attr['type']." AND
          gat.company_id = '".$this->arrUser['company_id']."'";
          } */

        $Sql = "SELECT 
                    invoice_dateUnConv AS posting_date,
                    object_code AS document_no,
                    gl_account_code,
                    gl_account_name AS description,
                    object_no AS source_no,
                    financeCharges,
                    '-' AS finance_charges_type,
                    object_code AS external_doc_no,
                    debit_amount_LCY AS debit_amount,
                    credit_amount_LCY AS credit_amount,
                    '-' AS balancing_acc_type,
                    balanceAccountNumber AS balancing_acc_no,
                    postedBy AS user_id,
                    DebitorCreditSign,
                    transaction_id
                    FROM gl_account_txn
                    WHERE  object_id = ".$attr['object_id']." AND type = ".$attr['type']." AND company_id = '" . $this->arrUser['company_id'] . "' ORDER BY transaction_id";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        if ($RS->RecordCount() > 0) {
            // echo 'inside if';exit;
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                // $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);

                if ($Row['posting_date'] != 0 && $Row['posting_date'] != '')
                    $Row['posting_date'] = date("d/m/Y", strtotime($Row['posting_date']));

                if ($attr['type'] == 1)
                    $Row['document_type'] = "Sales Invoice";
                else if ($attr['type'] == 2)
                    $Row['document_type'] = "Credit Note";
                else if ($attr['type'] == 3)
                    $Row['document_type'] = "Purchase Invoice";
                else if ($attr['type'] == 4)
                    $Row['document_type'] = "Debit Note";
                else if ($attr['type'] == 5)
                    $Row['document_type'] = "General Ledger";
                else if ($attr['type'] == 6)
                    $Row['document_type'] = "Opening Balance Bank Entry";
                else if ($attr['type'] == 7)
                    $Row['document_type'] = "Opening Balance Stock Entry";
                else if ($attr['type'] == 8)
                    $Row['document_type'] = "Opening Balance Customer Entry";
                else if ($attr['type'] == 9)
                    $Row['document_type'] = "Opening Balance Supplier Entry";
                else if ($attr['type'] == 10)
                    $Row['document_type'] = "Opening Balance GL Entry";
                else if ($attr['type'] == 11)
                    $Row['document_type'] = "Item Journal";


                if ($Row['finance_charges_type'] == 1)
                    $Row['finance_charges'] = $Row['finance_charges'] . " %";
                else
                    $Row['finance_charges'] = $Row['finance_charges'] . " " . $Row['currency_code'];


                // if ($attr['type'] == 3 || $attr['type'] == 4)
                {
                    if (floatval($Row['credit_amount']) < 0) {
                        $Row['debit_amount'] = ($Row['credit_amount'] * -1);
                        $Row['credit_amount'] = 0;
                    } else if (floatval($Row['debit_amount']) < 0) {
                        $Row['credit_amount'] = ($Row['debit_amount'] * -1);
                        $Row['debit_amount'] = 0;
                    }

                    if (floatval($Row['credit_amount']) > 0)
                        $Row['amount'] = ($Row['credit_amount'] * -1);
                    else if (floatval($Row['debit_amount']) > 0)
                        $Row['amount'] = $Row['debit_amount'];
                    else
                        $Row['amount'] = 0; 
                }

                // $Row['credit_amount'] = ($Row['credit_amount'] > 0) ? $Row['credit_amount'] : "";
                // $Row['debit_amount'] = ($Row['debit_amount'] > 0) ? $Row['debit_amount'] : "";


                $response['response'][] = $Row;
            }

            $response['ack'] = 1;

            if ($attr['type'] == 1){//Sales Invoice

                $Sql = "SELECT posted_on,posted_by_name
                        FROM orders				
                        WHERE id='" . $attr['object_id']. "' AND 
                              company_id = '" . $this->arrUser['company_id'] . "' 
                        LIMIT 1";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    $Row = $RS->FetchRow();

                    $posted_on = $this->objGeneral->convert_unix_into_datetime($Row['posted_on']);
                    $posted_by_name = $Row['posted_by_name'];
                } else{
                    $posted_on = '';
                    $posted_by_name = '';
                }
            }
            else if ($attr['type'] == 2){//Credit Note

                $Sql = "SELECT posted_on,posted_by_name
                        FROM return_orders				
                        WHERE id='" . $attr['object_id']. "' AND 
                              company_id = '" . $this->arrUser['company_id'] . "' 
                        LIMIT 1";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    $Row = $RS->FetchRow();
                    
                    $posted_on = $this->objGeneral->convert_unix_into_datetime($Row['posted_on']);
                    $posted_by_name = $Row['posted_by_name'];
                } else{
                    $posted_on = '';
                    $posted_by_name = '';
                }
            }
            else if ($attr['type'] == 3){//Purchase Invoice

                $Sql = "SELECT posted_on,posted_by_name
                        FROM srm_invoice				
                        WHERE id='" . $attr['object_id']. "' AND 
                              company_id = '" . $this->arrUser['company_id'] . "' 
                        LIMIT 1";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    $Row = $RS->FetchRow();

                    $posted_on = $this->objGeneral->convert_unix_into_datetime($Row['posted_on']);
                    $posted_by_name = $Row['posted_by_name'];
                } else{
                    $posted_on = '';
                    $posted_by_name = '';
                }
            }
            else if ($attr['type'] == 4){//Debit Note

                $Sql = "SELECT posted_on,posted_by_name
                        FROM srm_order_return				
                        WHERE id='" . $attr['object_id']. "' AND 
                              company_id = '" . $this->arrUser['company_id'] . "' 
                        LIMIT 1";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    $Row = $RS->FetchRow();

                    $posted_on = $this->objGeneral->convert_unix_into_datetime($Row['posted_on']);
                    $posted_by_name = $Row['posted_by_name'];
                } else{
                    $posted_on = '';
                    $posted_by_name = '';
                }
            }

            $response['posted_on'] = $posted_on;
            $response['posted_by_name'] = $posted_by_name;
        } else
            $response['ack'] = 0;

        return $response;
    }

    function postAllOrders($attr) {
        $this->objGeneral->mysql_clean($attr);
        $InvoiceSql = '';
        $response = array();
        $all_count = count(explode(',', $attr['ids']));
        $success_count = 0;

        $Trs_id_sql = "SELECT UUID() AS transaction_id";
        $RS = $this->objsetup->CSI($Trs_id_sql);
        $trs_id = $RS->fields['transaction_id'];


        // IS ORDER, CONTAIN ITEMS, GRAND TOTAL > 0, Sales person assigned, shipping address specified, finance details are given
        $type = $attr['type'];
        $sale_return_status = "";
        if ($type == 1) { // orders
            $order_table = 'orders';
            $order_details_table = 'order_details';
            $sale_return_status = " AND sale_return_status = 0 ";
        } else { // credit note
            $order_table = 'return_orders';
            $order_details_table = 'return_order_details';
            $sale_return_status = " AND sale_return_status = 1 ";
        }
        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;

        $Sql = "SELECT o.id AS order_id,
                        o.type,
                        COUNT(od.id) AS total_items
                    FROM $order_table AS o, $order_details_table AS od
                    WHERE 
                        o.id = od.order_id AND
                        o.id IN ($attr[ids]) AND
                        o.type = 1 AND 
                        o.grand_total >= 0 AND
                        o.sale_person_id > 0 AND
                        o.alt_depo_id > 0 AND
                        o.bill_to_posting_group_id > 0
                GROUP BY o.id";
        // echo $Sql;exit;

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {

            while ($Row = $RS->FetchRow()) {
                $check_items_qty_price = "SELECT * 
                                            FROM $order_details_table
                                            WHERE order_id= $Row[order_id] AND
                                                (qty = 0 OR qty IS NULL OR unit_price = 0 OR unit_price IS NULL)";
                // echo $check_items_qty_price;exit;
                $RS1 = $this->objsetup->CSI($check_items_qty_price);
                if ($RS1->RecordCount() == 0) { // does not contain items with qty or price =0
                    $check_allocation = "SELECT * 
                                            FROM $order_details_table AS od
                                            WHERE od.order_id= $Row[order_id] AND
                                                od.type = 0 AND od.stock_check = 1 AND
                                                (
                                                    0 = (SELECT IFNULL(SUM(quantity), 0)
                                                            FROM warehouse_allocation 
                                                            WHERE 
                                                            sale_order_detail_id = od.id AND
                                                            TYPE = 2 AND sale_status > 0 $sale_return_status)
                                                    OR
                                                    od.qty <> (SELECT IFNULL(SUM(quantity), 0)
                                                            FROM warehouse_allocation 
                                                            WHERE 
                                                            sale_order_detail_id = od.id AND
                                                            TYPE = 2 AND sale_status > 0 $sale_return_status)
                                                )";
                    // echo $check_allocation;exit;
                    $RS2 = $this->objsetup->CSI($check_allocation);
                    if ($RS2->RecordCount() == 0) { // does not contain items with partially allocation

                        /* require_once(SERVER_PATH . "/classes/Saleswarehouse.php");
                          $ObjWH = new Saleswarehouse($this->arrUser);
                          $procedure_res = $ObjWH->invoice_stock($Row);
                          // print_r($procedure_res);exit;
                          if($procedure_res['ack'] == 1)
                          {
                          $success_count = $success_count + 1;
                          }
                          unset($ObjWH); */
                        /* $InvoiceSql = "CALL SR_Sales_Invoice_Post(".$Row['order_id'].", 
                          1,
                          ".$this->arrUser['company_id'].",
                          ".$this->arrUser['id'].");";
                          // echo $InvoiceSql;exit;
                          $RS3 = $this->objsetup->CSI($InvoiceSql);
                          if($RS3->fields['Result'] == 1)
                          {
                          $RS3->close();
                          $this->Conn->next_result();
                          $success_count = $success_count + 1;
                          } */

                        $insertSQL = "INSERT INTO orders_bulk_to_invoices SET
                                        order_id = $Row[order_id],
                                        type = $type,
                                        company_id = " . $this->arrUser['company_id'] . ", 
                                        user_id = " . $this->arrUser['id'] . ",
                                        unique_id = '$trs_id'
                                        ";
                        // echo $insertSQL;exit;
                        $RS3 = $this->objsetup->CSI($insertSQL);
                        $success_count = $success_count + 1;
                    }
                }
            }
        }
        $InvoiceSql = "CALL SR_Bulk_Posting('$trs_id')";
        // echo $InvoiceSql;exit;
        $RS4 = $this->objsetup->CSI($InvoiceSql);
        $this->Conn->commitTrans();
        $this->Conn->autoCommit = true;

        $response['ack'] = 1;
        $response['all_count'] = $all_count;
        $response['success_count'] = $success_count;

        return $response;
    }

    /*
      function add_return_order($attr)
      {
      $this->objGeneral->mysql_clean($attr);
      $order_no = '';
      $inv_no = '';
      $response = array();


      $data_pass = "   tst.return_order_no='" . $attr[return_order_no] . "'
      AND  tst.return_order_code='" . $attr[return_order_code] . "' ";
      $total = $this->objGeneral->count_duplicate_in_sql('return_orders', $data_pass, $this->arrUser['company_id']);


      if ($total > 0) {
      $response['ack'] = 0;
      $response['info'] = 'Add';
      $response['error'] = 'Record Already Exists.';
      $response['msg'] = 'Record Already Exists.';
      return $response;
      }


      $order_date = str_replace('/', '-', $attr['order_date']);
      $Sql = "INSERT INTO return_orders
      SET return_order_code='$attr[return_order_code]',return_order_no='$attr[return_order_no]'
      ,order_id = '".$attr['order_id']."', order_no='$attr[order_no]' ,invoice_no='$attr[invoice_no]'
      ,type='".$attr['type']."'  ,sell_to_cust_id='$attr[sell_to_cust_id]',sell_to_contact_no='$attr[sell_to_contact_no]'
      ,sell_to_cust_no='$attr[sell_to_cust_no]',sell_to_contact_id='$attr[sell_to_contact_id]'
      ,sell_to_cust_name='$attr[sell_to_cust_name]'
      ,delivery_date='" . $this->objGeneral->convert_date($attr[delivery_date]) . "'
      ,sell_to_address='$attr[sell_to_address]',delivery_time='$attr[delivery_time]'
      ,sell_to_address2='$attr[sell_to_address2]',cust_order_no='$attr[cust_order_no]'
      ,sell_to_city='$attr[sell_to_city]',sell_to_county='$attr[sell_to_county]'
      ,campaign_id='$attr[campaign_id]',campaign_no='$attr[campaign_no]'
      ,sell_to_contact='$attr[sell_to_contact]',sale_person_id='$attr[sale_person_id]'
      ,sale_person='$attr[sale_person]',cust_phone='$attr[cust_phone]',cust_fax='$attr[cust_fax]'
      ,cust_email='$attr[cust_email]',currency_id='$attr[currency_ids]',comm_book_in_no='$attr[comm_book_in_no]',book_in_email='$attr[book_in_email]',comm_book_in_contact='$attr[comm_book_in_contact]',converted_currency_id='$attr[converted_currency_id]',converted_currency_code='$attr[converted_currency_code]',converted_unit_price='$attr[converted_unit_price]',sell_to_post_code='$attr[sell_to_post_code]',purchase_order_id='$attr[purchase_order_id]',account_payable_number='$attr[account_payable_number]'
      ,country_id='$attr[country_id]',account_payable_id='$attr[account_payable_id]'
      ,order_date='" . $this->objGeneral->convert_date($attr['order_date']) . "',requested_delivery_date='" . $this->objGeneral->convert_date($attr['requested_delivery_date']) . "',order_return_date='" . $this->objGeneral->convert_date($attr['order_return_date']) . "'
      ,user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "' ,posting_date='" . $this->objGeneral->convert_date($attr['posting_date']) . "'
      ";

      //  echo $Sql."<hr>"; exit;
      $RS = $this->objsetup->CSI($Sql);
      $id = $this->Conn->Insert_ID();

      if ($id > 0) {
      $response['ack'] = 1;
      $response['id'] = $id;
      $response['order_date'] = date('Y-m-d', $order_date);
      $response['error'] = NULL;
      } else {
      $response['ack'] = 0;
      $response['id'] = 0;
      $response['order_date'] = '';
      $response['error'] = 'Record not inserted!';
      }

      return $response;
      } */

    function update_return_order($attr) {
        $this->objGeneral->mysql_clean($attr);
        $response = array();

        $data_pass = "   tst.return_order_no='" . $attr['return_order_no'] . "' 
		AND  tst.return_order_code='" . $attr['return_order_code'] . "' tst.id <> ".$attr['id']." ";
        $total = $this->objGeneral->count_duplicate_in_sql('return_orders', $data_pass, $this->arrUser['company_id']);


        if ($total > 0) {
            $response['ack'] = 0;
            $response['info'] = 'Update';
            $response['error'] = 'Record Already Exists.';
            $response['msg'] = 'Record Already Exists.';
            return $response;
        }

        $Sql = "UPDATE return_orders
		SET  
		 order_id = '".$attr['order_id']."', order_no='$attr[order_no]' ,invoice_no='$attr[invoice_no]'
		 
		 ,sell_to_cust_id='$attr[sell_to_cust_id]'
		 ,sell_to_contact_no='$attr[sell_to_contact_no]',sell_to_cust_no='$attr[sell_to_cust_no]'
		 ,sell_to_contact_id='$attr[sell_to_contact_id]'
		 ,sell_to_cust_name='$attr[sell_to_cust_name]'
		 ,delivery_date='" . $this->objGeneral->convert_date($attr[delivery_date]) . "'
		 ,sell_to_address='$attr[sell_to_address]',delivery_time='$attr[delivery_time]'
		 ,sell_to_address2='$attr[sell_to_address2]',cust_order_no='$attr[cust_order_no]'
		 ,sell_to_city='$attr[sell_to_city]',sell_to_county='$attr[sell_to_county]'
		 ,campaign_id='$attr[campaign_id]',campaign_no='$attr[campaign_no]'
		 ,sell_to_contact='$attr[sell_to_contact]',sale_person_id='$attr[sale_person_id]'
		 ,sale_person='$attr[sale_person]',cust_phone='$attr[cust_phone]'
		 ,cust_fax='$attr[cust_fax]',cust_email='$attr[cust_email]',currency_id='$attr[currency_ids]'
		 ,comm_book_in_no='$attr[comm_book_in_no]',book_in_email='$attr[book_in_email]'
		 ,comm_book_in_contact='$attr[comm_book_in_contact]'
		 ,converted_currency_id='$attr[converted_currency_id]'
		 ,converted_currency_code='$attr[converted_currency_code]'
		  ,converted_unit_price='$attr[converted_unit_price]'
		 ,sell_to_post_code='$attr[sell_to_post_code]',purchase_order_id='$attr[purchase_order_id]'
		 ,account_payable_number='$attr[account_payable_number]',country_id='$attr[country_id]'
		 ,account_payable_id='$attr[account_payable_id]'
		,order_date='" . $this->objGeneral->convert_date($attr['order_date']) . "'
		,requested_delivery_date='" . $this->objGeneral->convert_date($attr['requested_delivery_date']) . "'
		,order_return_date='" . $this->objGeneral->convert_date($attr['order_return_date']) . "'
		 ,posting_date='" . $this->objGeneral->convert_date($attr['posting_date']) . "'
		
		WHERE id = ".$attr['id']." limit 1";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    // update Credit Note Invoice After Posting
    //-------------------------------------------

    function updateCreditNoteInvoice($attr) {
        $srLogTrace = array();

        $srLogTrace['ErrorCode'] = '';
        $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
        $srLogTrace['Function'] = __FUNCTION__;
        $srLogTrace['CLASS'] = __CLASS__;
        $srLogTrace['Parameter1'] = 'Enter';
        $srLogTrace['ErrorMessage'] = "";

        $this->objsetup->SRTraceLogsPHP($srLogTrace);

        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;

        $PurchaseOrderArr = $attr['PurchaseOrderArr'];

        $this->objGeneral->mysql_clean($attr);

        $response = array();

        $update_id = $attr['id'];

        $sell_to_contact_id = ($attr['sell_to_contact_id'] != '') ? $attr['sell_to_contact_id'] : '0';
        // $delivery_time = ($attr['delivery_time'] != '') ? $attr['delivery_time'] : '0';
        $shipment_method_id = ($attr['shipment_method_id']>0) ? $attr['shipment_method_id'] : '0';
        $shipment_method_code = ($attr['shipment_method_code'] != '') ? $attr['shipment_method_code'] : '';
        $shipping_agent_id = ($attr['shipping_agent_id'] >0) ? $attr['shipping_agent_id'] : '0';
        $freight_charges = ($attr['freight_charges'] != '') ? Round($attr['freight_charges'],2) : '0';
        $alt_depo_id = ($attr['alt_depo_id'] != '') ? $attr['alt_depo_id'] : '0';
        $bill_to_cust_id = ($attr['bill_to_cust_id'] != '') ? $attr['bill_to_cust_id'] : '0';
        $bill_to_contact_id = ($attr['bill_to_contact_id'] != '') ? $attr['bill_to_contact_id'] : '0';
        // $currency_ids = ($attr['currency_ids'] != '') ? $attr['currency_ids'] : '0';
        $sale_person_id = ($attr['sale_person_id'] != '') ? $attr['sale_person_id'] : '0';
        $country_id = ($attr['country_id'] != '') ? $attr['country_id'] : '0';

        $ship_to_contact_id = ($attr['ship_to_contact_id'] != '') ? $attr['ship_to_contact_id'] : '0';
        $payment_method_id = ($attr['payment_method_id'] != '') ? $attr['payment_method_id'] : '0';
        $bill_to_country_id = ($attr['bill_to_country_id'] != '') ? $attr['bill_to_country_id'] : '0';
        $ship_to_country_id = ($attr['ship_to_country_id'] != '') ? $attr['ship_to_country_id'] : '0';       

        $Sql = "UPDATE return_orders
                    SET
                    sell_to_contact_id='$sell_to_contact_id',
                    sell_to_contact_no='$attr[sell_to_contact_no]',
                    sell_to_cust_name='$attr[sell_to_cust_name]',
                    sell_to_address='$attr[sell_to_address]',
                    -- delivery_time='$delivery_time',
                    sell_to_address2='$attr[sell_to_address2]',
                    cust_order_no='$attr[cust_order_no]',
                    sell_to_city='$attr[sell_to_city]',
                    sell_to_county='$attr[sell_to_county]',
                    sale_person_id='$sale_person_id',
                    sale_person='$attr[sale_person]',
                    cust_phone='$attr[cust_phone]',
                    cust_fax='$attr[cust_fax]',
                    cust_email='$attr[cust_email]',
                    comm_book_in_no='$attr[comm_book_in_no]',
                    book_in_email='$attr[book_in_email]',
                    comm_book_in_contact='$attr[comm_book_in_contact]',
                    sell_to_post_code='$attr[sell_to_post_code]',
                    country_id='$country_id', 
                    bill_to_country_id = '$bill_to_country_id',
                    bill_to_contact_phone='$attr[bill_to_contact_phone]',
                    bill_to_contact_email='$attr[bill_to_contact_email]',
                    bill_to_contact='$attr[bill_to_contact]',               

                    bill_to_name='$attr[bill_to_name]',
                    bill_to_address='$attr[bill_to_address]', 
                    bill_to_address2='$attr[bill_to_address2]',  
                    bill_to_city='$attr[bill_to_city]',
                    bill_to_county='$attr[bill_to_county]',
                    bill_to_post_code='$attr[bill_to_post_code]',
                    alt_depo_id='$alt_depo_id',
                    shipment_method_id='$shipment_method_id',
                    shipment_method_code='$shipment_method_code',
                    shipping_agent_code='$attr[shipping_agent_code]',
                    ship_to_name='$attr[ship_to_name]',
                    shipping_agent_id='$shipping_agent_id',
                    ship_to_address='$attr[ship_to_address]',
                    ship_to_address2='$attr[ship_to_address2]',
                    freight_charges='$freight_charges',
                    ship_to_city='$attr[ship_to_city]',
                    container_no='$attr[container_no]',
                    ship_to_county='$attr[ship_to_county]',
                    ship_to_post_code='$attr[ship_to_post_code]',
                    ship_to_country_id = '$ship_to_country_id',
                    ship_to_contact='$attr[ship_to_contact]',
                    ship_delivery_time='$attr[ship_delivery_time]',
                    book_in_tel='$attr[book_in_tel]',
                    warehouse_booking_ref='$attr[warehouse_booking_ref]',
                    customer_warehouse_ref='$attr[customer_warehouse_ref]',
                    note='$attr[note]',                    
                    ChangedBy = '" . $this->arrUser['id'] . "',
                    ChangedOn = UNIX_TIMESTAMP (NOW()),               
                    
                    delivery_date='" . $this->objGeneral->convert_date($attr['delivery_date']) . "'

                WHERE id = ".$attr['id']." 
                limit 1";
        

        // echo $Sql; exit;
        // $RS = $this->objsetup->CSI($Sql);

        $RS = $this->objsetup->CSI($Sql, "sale_return", sr_AddEditPermission);
        
        $id = $update_id;

        /* if(sizeof($PurchaseOrderArr)>0){
            $response2 = $this->objSrm->addLink_SO_PO($PurchaseOrderArr, $update_id, 2);
        }
        else{
            $response2 = $this->objSrm->removeLink_SO_PO($update_id,2);
        } */


        if ($id > 0) {
            $response['ack'] = 1;
            $response['id'] = $id;
            $response['return_order_code'] = $return_order_code;
            $response['error'] = NULL;
            $this->Conn->commitTrans();
            $this->Conn->autoCommit = true;

            $srLogTrace = array();

            $srLogTrace['ErrorCode'] = '';
            $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
            $srLogTrace['Function'] = __FUNCTION__;
            $srLogTrace['CLASS'] = __CLASS__;
            $srLogTrace['Parameter1'] = 'Exit';
            $srLogTrace['ErrorMessage'] = "";

            $this->objsetup->SRTraceLogsPHP($srLogTrace);
        } else {
            $response['ack'] = 1;
            $response['id'] = $update_id;
            $response['return_order_code'] = $return_order_code;
            $response['order_date'] = '';
            $response['error'] = 'No changes!';
            $this->Conn->commitTrans();
            $this->Conn->autoCommit = true;

            $srLogTrace = array();

            $srLogTrace['ErrorCode'] = '';
            $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
            $srLogTrace['Function'] = __FUNCTION__;
            $srLogTrace['CLASS'] = __CLASS__;
            $srLogTrace['Parameter1'] = 'Exit';
            $srLogTrace['ErrorMessage'] = "";

            $this->objsetup->SRTraceLogsPHP($srLogTrace);
        }

        return $response;
    }

    // Order Invoicing
    //-------------------------------------------

    function order_return_invoice($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "UPDATE return_orders
				SET  bill_to_cust_id='$attr[bill_to_cust_id]',bill_to_cust_no='$attr[bill_to_cust_no]',bill_to_contact_id='$attr[bill_to_contact_id]',payable_bank='$attr[payable_bank]',payment_terms_code='$attr[payment_terms_code]',bill_to_name='$attr[bill_to_name]'
				,due_date='" . $this->objGeneral->convert_date($attr[due_date]) . "',
				bill_to_address='$attr[bill_to_address]',payment_discount='$attr[payment_discount]',bill_to_address2='$attr[bill_to_address2]',payment_method_id='$attr[payment_method_id]',payment_method_code='$attr[payment_method_code]',bill_to_city='$attr[bill_to_city]',price_including_vat='$attr[price_including_vat]',bill_to_county='$attr[bill_to_county]',bill_to_post_code='$attr[bill_to_post_code]',bill_to_contact='$attr[bill_to_contact]'
				WHERE id = ".$attr['id']." limit 1";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

// Order Shipping
//-------------------------------------------

    function return_order_shipping($attr) {
        $this->objGeneral->mysql_clean($attr);

        $Sql = "UPDATE return_orders
				SET  alt_depo_id='$attr[alt_depo_id]',shipment_method_id='$attr[shipment_method_id]',shipment_method_code='$attr[shipment_method_code]',shipping_agent_code='$attr[shipping_agent_code]',ship_to_name='$attr[ship_to_name]',shipping_agent_id='$attr[shipping_agent_id]',ship_to_address='$attr[ship_to_address]',ship_to_address2='$attr[ship_to_address2]',freight_charges='$attr[freight_charges]',ship_to_city='$attr[ship_to_city]',container_no='$attr[container_no]',ship_to_county='$attr[ship_to_county]',ship_to_post_code='$attr[ship_to_post_code]',
				shipment_date='" . $this->objGeneral->convert_date($attr[shipment_date]) . "',
				ship_to_contact='$attr[ship_to_contact]',ship_delivery_time='$attr[ship_delivery_time]',book_in_tel='$attr[book_in_tel]',warehouse_booking_ref='$attr[warehouse_booking_ref]',customer_warehouse_ref='$attr[customer_warehouse_ref]',location_code='$attr[location_code]'
				WHERE id = ".$attr['id']." limit 1";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

// Order products
//--------------------------------------

    function return_order_products($attr) {
        $this->objGeneral->mysql_clean($attr);

        $SqlQuote = "UPDATE return_orders
				SET  net_amount='$attr[net_amount]',grand_total='$attr[grand_total]',tax_rate='$attr[tax_rate]',tax_amount='$attr[tax_amount]'
				WHERE id = ".$attr['id']."";

        $SqlQuote = "UPDATE return_order_details
				SET  qty='$attr[qty]',unit_price='$attr[unit_price]',vat='$attr[vat]',vat_id='$attr[vat_id]',vat_value='$attr[vat_value]',item_name='$attr[item_name]',item_id='$attr[item_id]',total_price='$attr[total_price]',unit_measure='$attr[unit_measure]',unit_measure_id='$attr[unit_measure_id]',unit_parent_id='$attr[unit_parent_id]',unit_qty='$attr[unit_qty]',cat_id='$attr[cat_id]',order_id='".$attr['id']."',conv_unit_price='$attr[conv_unit_price]',product_code='$attr[product_code]'
				WHERE id = ".$attr['id']." limit 1";

        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($SqlQuote);

        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record not updated!';
        }

        return $response;
    }

    function get_return_order_items($attr) {

        $volume = 0;
        $volume_unit = '';
        $weight = 0;
        $weightunit = '';
        $weight_permission = 0;  
        $volume_permission = 0;  

        $Sql4 = "SELECT  SUM(uomsetup.volume * inv.qty) AS volume,
                    SUM((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                        ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                        END)* inv.qty) AS weight,
                    'cm3' AS volume_unit,
                    'kg' AS weightunit,
                    (SELECT weight_permission FROM return_orders 
                     LEFT JOIN items_weight_setup AS w ON ((w.title = 'Credit Note' AND return_orders.type=1) OR 
							   (w.title = 'Posted Credit Note' AND return_orders.type=2) ) AND 
				return_orders.company_id = w.company_id WHERE return_orders.id= '".$attr['order_id']."') AS weight_permission,
                    (SELECT volume_permission FROM return_orders 
                     LEFT JOIN items_weight_setup AS w ON ((w.title = 'Credit Note' AND return_orders.type=1) OR 
							   (w.title = 'Posted Credit Note' AND return_orders.type=2) ) AND 
				return_orders.company_id = w.company_id WHERE return_orders.id= '".$attr['order_id']."') AS volume_permission
                FROM return_order_details AS inv
                LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id AND inv.type=0
                WHERE inv.order_id='".$attr['order_id']."' ";
        //echo $Sql4."<hr>"; exit;

        $rs4 = $this->objsetup->CSI($Sql4);

        if ($rs4->RecordCount() > 0){
            $volume = $rs4->fields['volume'];
            $volume_unit = $rs4->fields['volume_unit'];
            $weight = $rs4->fields['weight'];
            $weightunit = $rs4->fields['weightunit'];
            $weight_permission = $rs4->fields['weight_permission'];
            $volume_permission = $rs4->fields['volume_permission'];
        }

        $this->objGeneral->mysql_clean($attr);
        $Sql = "SELECT *
				FROM return_order_details
				WHERE order_id='".$attr['order_id']."' AND company_id='" . $this->arrUser['company_id'] . "'
				";
        //echo $Sql."<hr>"; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                if ($Row['type'] == '1') {

                    if($this->arrUser['company_id'] == 133){

                        // PBI: Requirment In GL For Vat GL Calculation in Vat column instead of general calculation. 
                        $sqlvat = " SELECT gl1.id AS gl1ID,gl1.accountCode AS gl1AccountCode,
                                        gl2.id AS gl2ID,gl2.accountCode AS gl2AccountCode,
                                        gl3.id AS gl3ID,gl3.accountCode AS gl3AccountCode
                                    FROM financial_settings AS fs 
                                    LEFT JOIN gl_account AS gl1 ON gl1.id = fs.VatPosting_gl_account_sale
                                    LEFT JOIN gl_account AS gl2 ON gl2.id = fs.VatPosting_gl_account_purchase
                                    LEFT JOIN gl_account AS gl3 ON gl3.id = fs.VatPosting_gl_account_imp
                                    WHERE fs.company_id='" . $this->arrUser['company_id'] . "' AND 
                                        gl1.company_id='" . $this->arrUser['company_id'] . "' AND
                                        gl2.company_id='" . $this->arrUser['company_id'] . "' AND
                                        gl3.company_id='" . $this->arrUser['company_id'] . "'  ";

                    }
                    else{                    
                        // PBI: Requirment In GL For Vat GL Calculation in Vat column instead of general calculation. 
                        $sqlvat = "SELECT startRangeCode,endRangeCode 
                            FROM gl_account 
                            WHERE id = (SELECT VatPosting_gl_account 
                                            FROM financial_settings
                                            WHERE company_id='" . $this->arrUser['company_id'] . "')";
                    }
                    $RSV = $this->objsetup->CSI($sqlvat);
                    
                    if ($RSV->RecordCount() > 0) {
                        while ($RowVat = $RSV->FetchRow()) {
                            foreach ($RowVat as $key => $value) {
                                if (is_numeric($key))
                                    unset($RowVat[$key]);
                            }

                            if($this->arrUser['company_id'] == 133){
                                $Row['vatRange']['gl1AccountCode'] = $RowVat['gl1AccountCode'];
                                $Row['vatRange']['gl2AccountCode'] = $RowVat['gl2AccountCode'];
                                $Row['vatRange']['gl3AccountCode'] = $RowVat['gl3AccountCode'];
                            }
                            else{ 
                                //  print_r($RowVat);
                                $Row['vatRange']['startRangeCode'] = $RowVat['startRangeCode'];
                                $Row['vatRange']['endRangeCode'] = $RowVat['endRangeCode'];
                            }
                        }
                    }
                    
                }

                    if ($Row['type'] == '0') {
                        $temp_attr['item_id'] = $Row['item_id'];
                        $temp_attr['order_id'] = $Row['order_id'];
                        $temp_attr['wh_id'] = $Row['warehouse_id'];
                        $temp_attr['sale_return'] = 1;
                        $temp_attr['sale_order_detail_id'] = $Row['id'];

                        require_once(SERVER_PATH . "/classes/Saleswarehouse.php");
                        $ObjWH = new Saleswarehouse($this->arrUser);
                        $Row['item_stock_allocation'] = $ObjWH->get_order_stock_allocation($temp_attr);
                    }
                    $response['response'][] = $Row;
                };
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            $response['volume'] = $volume;
            $response['volume_unit'] = $volume_unit;
            $response['weight'] = $weight;
            $response['weightunit'] = $weightunit;
            $response['weight_permission'] = $weight_permission;
            $response['volume_permission'] = $volume_permission;
            return $response;
        }

        function add_return_order_items($attr) {
            $srLogTrace = array();

            $srLogTrace['ErrorCode'] = '';
            $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
            $srLogTrace['Function'] = __FUNCTION__;
            $srLogTrace['CLASS'] = __CLASS__;
            $srLogTrace['Parameter1'] = 'Enter';
            $srLogTrace['ErrorMessage'] = "";

            $this->objsetup->SRTraceLogsPHP($srLogTrace);

            $this->Conn->beginTrans();
            $this->Conn->autoCommit = false;

            $currency_rate = ($attr['currency_rate'] != '' && $attr['currency_rate'] > 0) ? $attr['currency_rate'] : '1';

            $net_amount = ($attr['net_amount'] != '') ? Round($attr['net_amount'],2) : '0';
            $grand_total = ($attr['grand_total'] != '') ? Round($attr['grand_total'],2) : '0';
            $tax_amount = ($attr['tax_amount'] != '') ? Round($attr['tax_amount'],2) : '0';
            $tax_rate = ($attr['tax_rate'] != '') ? $attr['tax_rate'] : '0';
            $net_amount_converted = ($attr['net_amount_converted'] != '') ? Round($attr['net_amount_converted'],2) : '0';
            $converted_currency_id = ($attr['converted_currency_id'] != '') ? $attr['converted_currency_id'] : '0';
            $converted_currency_code = ($attr['converted_currency_code'] != '') ? $attr['converted_currency_code'] : '';

            $grand_total_converted = ($attr['grand_total_converted'] != '') ? Round($attr['grand_total_converted'],2) : '0';
            $tax_amount_converted = ($attr['tax_amount_converted'] != '') ? Round($attr['tax_amount_converted'],2) : '0';
            $items_net_total = ($attr['items_net_total'] != '') ? Round($attr['items_net_total'],2) : '0';
            $items_net_discount = ($attr['items_net_discount'] != '') ? Round($attr['items_net_discount'],2) : '0';
            $items_net_vat = ($attr['items_net_vat'] != '') ? Round($attr['items_net_vat'],2) : '0';
            $convert_from_forcast = ($attr['convert_from_forcast'] != '') ? Round($attr['convert_from_forcast'],2) : '0';

            $Sql = "UPDATE return_orders SET	
                    net_amount='$net_amount', 
                    grand_total='$grand_total', 
                    tax_amount='$tax_amount',
                    tax_rate='$tax_rate',
                    note='".addslashes($attr[note])."',	
                    net_amount_converted='$net_amount_converted', 
                    converted_currency_id='$converted_currency_id',
                    converted_currency_code='$converted_currency_code',
                    grand_total_converted='$grand_total_converted',
                    tax_amount_converted='$tax_amount_converted',
                    items_net_total='$items_net_total',
                    items_net_discount='$items_net_discount',
                    items_net_vat='$items_net_vat',
                    currency_rate =$currency_rate,
                    offer_date='" . $this->objGeneral->convert_date($attr['offer_date']) . "'
                     WHERE id = ".$attr['order_id']."  AND company_id=" . $this->arrUser['company_id'] . " AND type=1 limit 1";

            //,convert_from_forcast='$convert_from_forcast' 
            // echo    $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            // $Sql = "Delete From order_details  WHERE order_id = ".$attr['order_id']."";
            // $RS = $this->objsetup->CSI($Sql);

            $chk = false;
            $order_date = strtotime(date('Y-m-d'));
            // print_r($attr['items']);exit;
            foreach ($attr['items'] as $item) {

                $unit_qty = ($item->units->quantity != '') ? $item->units->quantity : '0';
                // $standard_price             = ($item->standard_price != '' && floatval($item->standard_price) > 0) ? $item->standard_price : "NULL";
                $standard_price = ($item->standard_price != '' && is_numeric($item->standard_price)) ? Round($item->standard_price,5) : "NULL";
                $qty = ($item->qty != '' && intval($item->qty) > 0) ? $item->qty : "NULL";

                $total_price = ($item->total_price != '') ? Round($item->total_price,2) : '0';

                $default_unit_measure_id = (isset($item->default_units->id) && $item->default_units->id != '') ? $item->default_units->id : '0';
                $default_unit_qty = (isset($item->default_units->quantity) && $item->default_units->quantity != '') ? $item->default_units->quantity : '0';
                $default_unit_name = (isset($item->default_units->name) && $item->default_units->name != '') ? $item->default_units->name : '0';
                $unit_measure_id = (isset($item->units->id) && $item->units->id != '') ? $item->units->id : '0';

                $cat_id = ($item->category_id != '') ? $item->category_id : '0';
                $conv_unit_price = (isset($item->conv_unit_price) && $item->conv_unit_price != '') ? Round($item->conv_unit_price,2) : '0';
                $sale_unit_id = ($item->sale_unit_id != '') ? $item->sale_unit_id : '0';
                $purchase_unit_id = ($item->purchase_unit_id != '') ? $item->purchase_unit_id : '0';
                $warehouse_id = ($item->warehouses != '') ? $item->warehouses : '0';
                $primary_unit_of_measure_id = ($item->primary_unit_of_measure_id != '') ? $item->primary_unit_of_measure_id : '0';
                $stock_check = ($item->stock_check != '') ? $item->stock_check : '0';
                $discount_type = ($item->discount_type_id->id != '') ? $item->discount_type_id->id : '0';
                $discount = ($item->discount != '') ? $item->discount : '0';
                $discount_price = ($item->discount_price != '') ? Round($item->discount_price,2) : '0';
                $vat_id = ($item->vat_id != '') ? $item->vat_id : '0';
                $vat_name = ($item->vats->name != '') ? $item->vats->name : '';
                $vat_value = ($item->vats->vat_value != '') ? Round($item->vats->vat_value,2) : '0';
                $vat_price = ($item->vat_price != '') ? Round($item->vat_price,2) : '0';
                $costing_method_id = ($item->costing_method_id != '') ? $item->costing_method_id : '0';
                $standard_purchase_cost = ($item->standard_purchase_cost != '') ? Round($item->standard_purchase_cost,2) : '0';
                $item_converted_price = Round($standard_price / $currency_rate,2);

                $ec_goods = ($item->ec_goods != '') ? $item->ec_goods->id : '0';
                $ec_description = ($item->ec_description != '') ? $item->ec_description->id : '0';
         
                
        
                $description = addslashes($item->description);
                $product_code = addslashes($item->product_code);
                $warehouse_name = addslashes($item->warehouse_name);
                $unit_name = ($item->units->name != "") ? $item->units->name : "";

                
                if (isset($item->update_id) && $item->update_id != '') {
                    $SqlQuote = "UPDATE return_order_details SET  
                            qty=$qty,
                            unit_price=$standard_price,
                            item_converted_price = $item_converted_price,
                            vat_id=" . $vat_id . ",
                            vat_name='" . $vat_name . "',
                            vat_price=" . $vat_price . ",
                            vat_value='" . $vat_value . "',
                            item_name='" . addslashes($item->description) . "',
                            product_code='" . addslashes($item->product_code) . "',
                            item_id='$item->id',
                            costing_method_id='$costing_method_id',
                            standard_purchase_cost='$standard_purchase_cost',
                            total_price='$total_price',
                            unit_measure='" . $item->units->name . "',
                            unit_measure_id='" . $unit_measure_id . "',
                            unit_parent_id='0',
                            unit_qty='" . $unit_qty . "',
                            default_unit_measure=" . $default_unit_name . ",
                            default_unit_measure_id='" . $default_unit_measure_id . "',
                            default_unit_qty='" . $default_unit_qty . "',
                            cat_id='$cat_id',
                            order_id='".$attr['order_id']."',
                            conv_unit_price='$conv_unit_price',
                            type='$item->item_type' ,
                            discount_type='" . $discount_type . "',
                            discount='$discount',
                            discount_price='$discount_price',
                            sale_unit_id='$sale_unit_id',
                            purchase_unit_id='$purchase_unit_id',
                            warehouse_id='" . $warehouse_id . "',
                            warehouse='" . addslashes($item->warehouse_name) . "',
                            ec_goods = $ec_goods,
                            ec_description = $ec_description,
	                        primary_unit_of_measure_id='" . $primary_unit_of_measure_id . "' ,
                            primary_unit_of_measure_name='" . $item->primary_unit_of_measure_name . "' , stock_check='$stock_check'
                            WHERE id = '" . $item->update_id . "' AND company_id=" . $this->arrUser['company_id'] . " AND (SELECT IFNULL(o.type,0) FROM return_orders AS o WHERE o.id=".$attr['order_id']." AND company_id=" . $this->arrUser['company_id'] . ") <=1 LIMIT 1";
                    // echo $SqlQuote;exit;
                    $RS = $this->objsetup->CSI($SqlQuote);
                    $id = $item->update_id;
                } else {
                    $SqlQuote = "INSERT INTO return_order_details
                            (qty,
                            unit_price,
                            item_converted_price,
                            vat_id,
                            vat_name,
                            vat_price,
                            vat_value,
                            item_name,
                            product_code,
                            item_id,
                            costing_method_id,
                            standard_purchase_cost,
                            total_price,
                            unit_measure,
                            unit_measure_id,
                            unit_parent_id,
                            unit_qty,
                            default_unit_measure,
                            default_unit_measure_id,
                            default_unit_qty,
                            cat_id,
                            order_id,
                            conv_unit_price,
                            type,
                            discount_type,
                            discount,
                            discount_price,
                            sale_unit_id,
                            purchase_unit_id,
                            warehouse_id,
                            warehouse,
                            ec_goods,
                            ec_description,
                            company_id,
                            user_id,
	                        primary_unit_of_measure_id,
                            primary_unit_of_measure_name,
                            stock_check)
                    SELECT 
                            $qty,
                            $standard_price,
                            $item_converted_price,
                            \"$vat_id\",
                            \"$vat_name\",
                            $vat_price,
                            \"$vat_value\",
                            \"$description\",
                            \"$product_code\",
                            $item->id,
                            $costing_method_id,
                            $standard_purchase_cost,
                            $total_price,
                            \"$unit_name\",
                            \"$unit_measure_id\",
                            0,
                            \"$unit_qty\",
                            " . $default_unit_name . ",
                            \"$default_unit_measure_id\",
                            \"$default_unit_qty\",
                            $cat_id,
                            ".$attr['order_id'].",
                            $conv_unit_price,
                            $item->item_type ,
                            \"$discount_type\",
                            $discount,
                            $discount_price,
                            $sale_unit_id,
                            $purchase_unit_id,
                            \"$warehouse_id\",
                            \"$warehouse_name\",
                            $ec_goods,
                            $ec_description,
                            " . $this->arrUser['company_id'] . ",
                            " . $this->arrUser['id'] . ",
                            \"$primary_unit_of_measure_id\" ,
                            \"$item->primary_unit_of_measure_name\",
                            $stock_check
                        FROM widgetone
                        WHERE
                            (SELECT IFNULL(o.type,0) FROM return_orders AS o WHERE o.id=".$attr['order_id']." AND company_id=" . $this->arrUser['company_id'] . " LIMIT 1) <=1 LIMIT 1";
                    // echo $SqlQuote;exit;
                    $RS = $this->objsetup->CSI($SqlQuote);

                    $id = $this->Conn->Insert_ID();
                    // if ($item->item_type == 0 && $stock_check == '0' && empty($attr[convert_from_forcast]))
                    //     self::add_stock_allocated_external($attr);
                }
                // echo $SqlQuote;exit;;    
                /*
                  $RS = $this->objsetup->CSI($SqlQuote);
                  if ($this->Conn->Affected_Rows() > 0)
                  $chk = true;
                  else
                  $chk = false; */
            }

            if ($id) {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $this->Conn->commitTrans();
                $this->Conn->autoCommit = true;

                $srLogTrace = array();

                $srLogTrace['ErrorCode'] = '';
                $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
                $srLogTrace['Function'] = __FUNCTION__;
                $srLogTrace['CLASS'] = __CLASS__;
                $srLogTrace['Parameter1'] = 'Exit';
                $srLogTrace['ErrorMessage'] = "";

                $this->objsetup->SRTraceLogsPHP($srLogTrace);

            //    $response['ack'] = 1;
            //    $response['error'] = NULL;
            } else {
                // $this->objsetup->terminateWithMessage("Record not updated");
           $response['ack'] = 0;
           $response['error'] = 'Record not updated!';
            }

            return $response;
        }

        function get_credit_note_items($attr) {
            $this->objGeneral->mysql_clean($attr);
            $response = array();

            $Sql = "SELECT  od.order_id, od.qty, od.unit_measure, od.unit_price, 
                        (CASE WHEN od.discount_type = 'None' THEN '' ELSE od.discount_type END) AS discount_type, od.discount, od.vat_id,
                        od.warehouse, od.warehouse_id, od.item_id, prd.*, cr.code as currency_code, 
                        IFNULL(od.promotion_id, 0) AS promotion_id
                    FROM order_details AS od
                    LEFT JOIN product AS prd ON prd.id=od.item_id
                    JOIN orders as o on o.id=od.order_id
                    LEFT JOIN currency as cr ON cr.id=o.currency_id
                    WHERE 
                        od.type = 0 AND
                        prd.status NOT IN(0, -1) AND
                        od.order_id = " . $attr['invoice_id'];
            // echo $Sql;exit;
            $subQueryForBuckets = "SELECT  prd.id
                               FROM productcache prd
                               WHERE prd.id IS NOT NULL  AND 
                                     prd.company_id=" . $this->arrUser['company_id'] . "";
            $subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 11);
            $Sql .= " AND (prd.id IN ($subQueryForBuckets)) ";
            // echo $Sql;exit;

            $RS = $this->objsetup->CSI($Sql);
            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    require_once(SERVER_PATH . "/classes/Stock.php");
                    $objStock = new Stock($this->arrUser);

                    $Row['id'] = $Row['item_id'];
                    $attr['product_id'] = $Row['item_id'];
                    $attr['is_credit_note'] = 1;
                    $Row['arr_warehouse'] = $objStock->get_all_product_warehouses($attr);


                    $Row['arr_units'] = self::get_unit_setup_list_category_by_item($attr);
                    $response['response'] [] = $Row;
                }
                $response['ack'] = 1;
            } else
                $response['response'] = array();


            /* $Sql = "SELECT od.order_id, prd.*
              FROM order_details AS od
              LEFT JOIN sr_product_warehouse_improved AS prd ON od.item_id = prd.id
              JOIN orders o ON o.id = od.`order_id` AND o.type IN (2,3) AND o.`sell_to_cust_id` = ".$attr['crm_id']."
              WHERE prd.company_id=" . $this->arrUser['company_id']; */
            /* $Sql = "SELECT od.order_id, od.qty, od.unit_measure, od.unit_price, od.discount_type, od.discount, od.warehouse, od.warehouse_id, prd.*
              FROM order_details AS od
              LEFT JOIN sr_product_warehouse_improved AS prd ON od.item_id = prd.id
              WHERE
              od.order_id = ".$attr['invoice_id']." AND
              prd.company_id=" . $this->arrUser['company_id'];
              // echo $Sql;exit;
              $RS = $this->objsetup->CSI($Sql);
              $prev_row_id = 0;
              $prev_wh_id = 0;
              $count = -1;

              if ($RS->RecordCount() > 0) {
              while ($Row = $RS->FetchRow()) {
              foreach ($Row as $key => $value) {
              if (is_numeric($key)) unset($Row[$key]);

              }
              if($prev_row_id != $Row['id'])
              {
              $count++;
              $attr['product_id'] = $Row['id'];
              $Row['arr_units'] = self::get_unit_setup_list_category_by_item($attr);

              $response['response'][$count] = $Row;
              $prev_row_id = $Row['id'];
              }

              if($prev_row_id == $Row['id'])
              {
              if($prev_wh_id != $Row['wh_warehouse_id'])
              {
              $prev_wh_id = $Row['wh_warehouse_id'];
              $temp['id']                   = $Row['wh_warehouse_id'];
              $temp['name']                 = $Row['wh_wrh_code'] . '-' . $Row['wh_warehouse'];
              $temp['total_quantity']       = $Row['total_quantity'];
              $temp['sold_quantity']        = $Row['sold_quantity'];
              $temp['available_quantity']   = $Row['available_quantity'];
              $temp['allocated_quantity']   = $Row['allocated_quantity'];

              if ($Row['wh_default_warehouse'] > 0) {
              $response['response'][$count]['arr_warehouse']['default_wh'] = $Row['wh_warehouse_id'];
              }
              $response['response'][$count]['arr_warehouse']['response'][]= $temp;
              }
              }
              }
              $response['ack'] = 1;
              } else
              $response['response'] = array();
             */
            return $response;
        }

        function add_excluded_customers($arr_attr) {
            if (!isset($arr_attr['add_customer'])) {
                $sql = "DELETE FROM excluded_customer WHERE customer_item_info_id='$arr_attr[customer_item_info_id]'";
                $this->objsetup->CSI($sql);
            } else {
                $sql = "SELECT * FROM excluded_customer WHERE customer_item_info_id='$arr_attr[customer_item_info_id]' and crm_id = " . $arr_attr['customers'][0]->id . "";
                $chkCust = $this->objsetup->CSI($sql);
                if ($chkCust->RecordCount() > 0) {
                    echo 'Record already exist';
                    exit;
                }
            }


            //echo "<pre>"; print_r($arr_attr['customers']);
            foreach ($arr_attr['customers'] as $value) {
                if ((isset($arr_attr['region_id']) && $arr_attr['region_id'] == $value->region_id) || (isset($arr_attr['segment_id']) && $arr_attr['segment_id']
                        == $value->segment_id) || (isset($arr_attr['buying_group_id']) && $arr_attr['buying_group_id'] == $value->buying_group_id)) {
                    $Sql = "INSERT INTO excluded_customer
						SET crm_id=" . $value->id . ",region_id='$arr_attr[region_id]',customer_item_info_id='$arr_attr[customer_item_info_id]',segment_id='$arr_attr[segment_id]',buying_group='$arr_attr[buying_group_id]',product_id='".$arr_attr['product_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";
                    $RS = $this->objsetup->CSI($Sql);
                }
            }
        }

        function get_excluded_customers($arr_attr) {
            $Sql = "SELECT DISTINCT crm_id FROM excluded_customer
			WHERE customer_item_info_id = $arr_attr[customer_item_info_id]";

            //echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $response['response'][] = $Row['crm_id'];
                };
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            return $response;
        }

        function get_sale_promotion_excluded_customers($arr_attr) {

            $strWhere = '';
            if (isset($attr['type_id']) && isset($attr['search_data'])) {
                if ($attr['type_id'] == 3)
                    $strWhere .= " and crm_region.title LIKE '%" . $attr['search_data'] . "%'";
                if ($attr['type_id'] == 4)
                    $strWhere .= " and crm_segment.title LIKE '%" . $attr['search_data'] . "%'";
                if ($attr['type_id'] == 5)
                    $strWhere .= " and crm_buying_group.title LIKE '%" . $attr['search_data'] . "%'";
            }


            $Sql = "SELECT crm_id FROM promotion_excluded_customer
			WHERE sale_promotion_id = ".$arr_attr['id']."";

            //echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);
            $arrIds = array();
            $strIds = '';
            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $arrIds[] = $Row['crm_id'];
                };
            }

            $strIds = implode(',', $arrIds);
            $response = array();
            $custSql = "SELECT  crm.id, 
				crm.customer_code,crm.name as customer_name,crm_region.title as region,
					crm_segment.title as segment,
					crm_buying_group.title as buying_group
				FROM crm

				LEFT OUTER JOIN crm_region ON ( crm_region.id = crm.region_id )
				LEFT OUTER JOIN crm_segment ON ( crm_segment.id = crm.company_type)
				LEFT OUTER JOIN crm_buying_group ON ( crm_buying_group.id = crm.buying_grp)
				JOIN company on company.id=crm.company_id 
				LEFT JOIN employees on (employees.id = crm.salesperson_id)
				where type in (2,3) and crm.status='1' " . $strWhere . " and crm.id in (" . $strIds . ") and ( crm.company_id=" . $this->arrUser['company_id'] . " 
				or  company.parent_id=" . $this->arrUser['company_id'] . ")
				order by crm.id ASC"; //d.status=1 and
            //echo $custSql; exit;
            $custRS = $this->objsetup->CSI($custSql);

            if ($custRS->RecordCount() > 0) {
                while ($Row = $custRS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['id'];
                    $result['customer_code'] = $Row['customer_code'];
                    $result['customer_name'] = $Row['customer_name'];
                    $result['region'] = $Row['region'];
                    $result['segment'] = $Row['segment'];
                    $result['buying_group'] = $Row['buying_group'];
                    $response['response'][] = $result;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            //print_r($response);exit;
            return $response;
        }

        // Sale Price Adjustment Module
        //----------------------------------------------------
        function get_price_adjustments($attr) {
            $Sql = "SELECT DISTINCT promo1.id,promo1.*,currency.code as currency_code, promo.product_promotion_type_id,promo.customer_product_type_id 
				FROM price_adjustment as promo1 
				LEFT JOIN price_adjustment_detail as promo ON (promo1.id = promo.price_adjustment_id)
				LEFT JOIN currency ON (currency.id = promo1.currency_id)
				where promo1.user_id='" . $this->arrUser['id'] . "' and promo1.company_id='" . $this->arrUser['company_id'] . "' ORDER BY promo1.id DESC
				";


            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $response['response'][] = $Row;
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            return $response;
        }

        //price adjusment

        function get_customer_price_adjustment($attr) {
            //error_reporting(E_ALL);
            //ini_set('display_error', 1);
            $this->objGeneral->mysql_clean($attr);
            $exCust['customer_item_info_id'] = $attr['customer_item_info_id'];
            $arrExclCust = self::get_excluded_customers($exCust);
            //echo count($arrExclCust['response']);
            //echo '<pre>'; print_r($arrExclCust['response']); exit;
            $strwhere = '';
            if (count($arrExclCust['response']) > 0) {
                $strIds = implode(',', $arrExclCust['response']);
                $strwhere = " and crm.id NOT IN (" . $strIds . ")";
            }
            $response = array();
            $Sql = "SELECT  crm.id, 
				crm.customer_code,crm.name, crm.city, crm.contact_person, crm.postcode,crm.phone,CONCAT(employees.first_name,' ',employees.last_name) as salesperon,crm_region.title as region, crm_segment.title as segment, crm_buying_group.title as buying_grp
			FROM crm
			JOIN company on company.id=crm.company_id 
			LEFT JOIN crm_region on crm_region.id=crm.region_id 
			LEFT JOIN crm_segment on crm_segment.id=crm.company_type 
			LEFT JOIN crm_buying_group on crm_buying_group.id=crm.buying_grp 
			LEFT JOIN employees on (employees.id = crm.salesperson_id)
			where type in (2,3) and crm.status='1' and crm." . $attr['column'] . " = " . $attr['value'] . " " . $strwhere . " and ( crm.company_id=" . $this->arrUser['company_id'] . " 
			or  company.parent_id=" . $this->arrUser['company_id'] . ")
			order by crm.id ASC"; //d.status=1 and
            //echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            //Customer Volume Discount
            $current_date = date('Y-m-d');
            $volDiscSql = " SELECT cvd.id,cvd.discounted_price,cvd.discount_type,cvd.discount
					FROM crm_volume_discount as cvd
					JOIN company on company.id=cvd.company_id
					WHERE cvd.status = 1 and cvd.customer_item_info_id = " . $attr['customer_item_info_id'] . " and (" . $this->objGeneral->convert_date($current_date) . " between cvd.start_date and cvd.end_date) and (cvd.company_id=" . $this->arrUser['company_id'] . "  
					or  company.parent_id=" . $this->arrUser['company_id'] . ") limit 1";
            //echo $volDiscSql; exit;
            $volDiscRS = $this->objsetup->CSI($volDiscSql);
            $cust_vol_discounted_price = $volDiscRS->fields['discounted_price'];
            $cust_vol_disc_type = $volDiscRS->fields['discount_type'];
            $cust_vol_disc = $volDiscRS->fields['discount'];

            //Price Adjustment
            $priceSqlCat = " SELECT pa.discount_type,pa.discount,pa.increase_decrease,pa.start_date,pa.end_date
					FROM price_adjustment as pa
					JOIN price_adjustment_detail as pad on (pa.id = pad.price_adjustment_id)
					JOIN company on company.id=pa.company_id
					WHERE pad.crm_id = " . $attr['value'] . " and pad.customer_product_type_id = " . $attr['customer_product_type_id'] . " and pad.product_id = " . $attr['cat_id'] . " and product_promotion_type_id = 1 and (pa.company_id=" . $this->arrUser['company_id'] . "  
					or  company.parent_id=" . $this->arrUser['company_id'] . ")";

            $priceSqlBrand = " SELECT pa.discount_type,pa.discount,pa.increase_decrease,pa.start_date,pa.end_date
					FROM price_adjustment as pa
					JOIN price_adjustment_detail as pad on (pa.id = pad.price_adjustment_id)
					JOIN company on company.id=pa.company_id
					WHERE pad.crm_id = " . $attr['value'] . " and pad.customer_product_type_id = " . $attr['customer_product_type_id'] . " and pad.product_id = " . $attr['brand_id'] . " and product_promotion_type_id = 2 and (pa.company_id=" . $this->arrUser['company_id'] . "  
					or  company.parent_id=" . $this->arrUser['company_id'] . ")";

            $priceSqlProd = " SELECT pa.discount_type,pa.discount,pa.increase_decrease,pa.start_date,pa.end_date
					FROM price_adjustment as pa
					JOIN price_adjustment_detail as pad on (pa.id = pad.price_adjustment_id)
					JOIN company on company.id=pa.company_id
					WHERE pad.crm_id = " . $attr['value'] . " and pad.customer_product_type_id = " . $attr['customer_product_type_id'] . " and pad.product_id = " . $attr['product_id'] . " and product_promotion_type_id = 3 and (pa.company_id=" . $this->arrUser['company_id'] . "  
					or  company.parent_id=" . $this->arrUser['company_id'] . ")";
            //and ('".strtotime($current_date)."' between pa.start_date and pa.end_date)
            //echo $priceSqlCat; exit;
            ////echo $priceSqlBrand; exit;
            //echo $priceSqlProd; exit;
            $priceRSCat = $this->objsetup->CSI($priceSqlCat);
            $arr_price_adjustment = array();
            if ($priceRSCat->RecordCount() > 0) {
                while ($Row = $priceRSCat->FetchRow()) {
                    $result = array();
                    $result['discount_type'] = $Row['discount_type'];
                    $result['adjustment'] = round($Row['discount'], 0);
                    $result['increase_decrease'] = $Row['increase_decrease'];
                    $result['start_date'] = $Row['start_date'];
                    $result['end_date'] = $Row['end_date'];
                    $arr_price_adjustment[] = $result;
                }
            } else {
                $priceRSBrand = $this->objsetup->CSI($priceSqlBrand);
                if ($priceRSBrand->RecordCount() > 0) {
                    while ($Row = $priceRSBrand->FetchRow()) {
                        $result = array();
                        $result['discount_type'] = $Row['discount_type'];
                        $result['adjustment'] = round($Row['discount'], 0);
                        $result['increase_decrease'] = $Row['increase_decrease'];
                        $result['start_date'] = $this->objGeneral->convert_unix_into_date($Row['start_date']);
                        $result['end_date'] = $this->objGeneral->convert_unix_into_date($Row['end_date']);
                        $arr_price_adjustment[] = $result;
                    }
                } else {
                    $priceRSProd = $this->objsetup->CSI($priceSqlProd);
                    while ($Row = $priceRSProd->FetchRow()) {
                        $result = array();
                        $result['discount_type'] = $Row['discount_type'];
                        $result['adjustment'] = round($Row['discount'], 0);
                        $result['increase_decrease'] = $Row['increase_decrease'];
                        $result['start_date'] = $this->objGeneral->convert_unix_into_date($Row['start_date']);
                        $result['end_date'] = $this->objGeneral->convert_unix_into_date($Row['end_date']);
                        $arr_price_adjustment[] = $result;
                    }
                }
            }

            /* error_reporting(E_ALL);
              ini_set('display_error', 1); */

            // print_r($arr_price_adjustment);

            $count = 0;

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $result = array();
                    $dis_price = 0;
                    $final_disc_price = 0;
                    $cust_vol_disc = 0;
                    $discount_type = $arr_price_adjustment[0]['discount_type'];
                    $adjustment = round($arr_price_adjustment[0]['adjustment'], 0);
                    $increase_decrease = $arr_price_adjustment[0]['increase_decrease'];
                    $start_date = $this->objGeneral->convert_unix_into_date($arr_price_adjustment[0]['start_date']);
                    $end_date = $this->objGeneral->convert_unix_into_date($arr_price_adjustment[0]['end_date']);

                    $result['id'] = $Row['id'];
                    $result['customer_code'] = $Row['customer_code'];
                    $result['name'] = $Row['name'];
                    $result['region'] = $Row['region'];
                    $result['buying_grp'] = $Row['buying_grp'];
                    $result['segment'] = $Row['segment'];
                    $result['sale_price'] = $attr['sale_price'];
                    $result['price_offered'] = $attr['price_offered'];
                    $result['discount_type'] = $discount_type;
                    if (intval($cust_vol_disc) > 0)
                        $result['discount'] = $cust_vol_disc_type == 1 ? $cust_vol_disc . '%' : $cust_vol_disc . $attr['currency_code'];
                    else
                        $result['discount'] = '-';

                    if ($cust_vol_disc_type == 1)
                        $dis_price = $result['price_offered'] - ($result['price_offered'] * $cust_vol_disc / 100);
                    else
                        $dis_price = $result['price_offered'] - $cust_vol_disc;
                    $result['currency_code'] = $attr['currency_code'];
                    $result['final_price'] = intval($dis_price);
                    $result['adjustment'] = '-';
                    $result['final_disc_price'] = 0;

                    $end_date1 = strtotime("-1 day", intval($start_date));
                    //echo "end_date==>>".$end_date1; exit;
                    //19/08/2016
                    //31/10/2016

                    $result['start_date'] = $attr['start_date'];
                    if (!empty($end_date) && !empty($start_date))
                        $result['end_date'] = $end_date1;
                    else
                        $result['end_date'] = $attr['end_date'];

                    if ($start_date < $result['end_date'])
                        $response['response'][] = $result;

                    /* echo 'start_date==>>'.date('Y-m-d',$result['start_date']);
                      echo 'end_date==>>'.date('Y-m-d',$result['end_date']);

                      echo "<hr>";
                      echo '<pre>'; print_r($response['response']);
                      exit; */

                    // Price Adjustment
                    if ($increase_decrease == 1) {
                        if ($discount_type == 1)
                            $final_disc_price = $dis_price + ($dis_price * $adjustment / 100);
                        else
                            $final_disc_price = $dis_price + $adjustment;
                    } else {
                        if ($discount_type == 1)
                            $final_disc_price = $dis_price - ($dis_price * $adjustment / 100);
                        else
                            $final_disc_price = $dis_price - $adjustment;
                    }

                    if (intval($adjustment) > 0) {
                        $adjustment1 = $increase_decrease == 1 ? '+' . intval($adjustment) : '-' . intval($adjustment);
                        $result['adjustment'] = $discount_type == 1 ? $adjustment1 . '%' : $adjustment1 . $attr['currency_code'];
                    } else
                        $result['adjustment'] = '-';

                    $arr_price_adjustment[0]['final_disc_price'] = intval($final_disc_price);
                    $result['final_disc_price'] = intval($final_disc_price);

                    $result['start_date'] = $start_date;
                    $result['end_date'] = $end_date;
                    //print_r($result); exit;
                    if (!empty($end_date) && !empty($start_date))
                        $response['response'][] = $result;

                    // After first price adjustment

                    if (count($arr_price_adjustment) > 1) {
                        for ($i = 1; $i < count($arr_price_adjustment); $i++) {
                            $j = $i - 1;
                            $start_date2 = strtotime("+1 day", $arr_price_adjustment[$j]['end_date']);
                            //echo $i.'-'.$start_date2.'=='. $arr_price_adjustment[$i]['start_date'].',';
                            //echo "==>>".$arr_price_adjustment[$i]['adjustment'];
                            //echo count($arr_price_adjustment);

                            if ($start_date2 == $arr_price_adjustment[$i]['start_date']) {

                                if ($arr_price_adjustment[$i]['increase_decrease'] == 1) {
                                    if ($arr_price_adjustment[$i]['discount_type'] == 1)
                                        $final_disc_price = $arr_price_adjustment[$j]['final_disc_price'] + ($arr_price_adjustment[$j]['final_disc_price']
                                                * $arr_price_adjustment[$i]['adjustment'] / 100);
                                    else
                                        $final_disc_price = $arr_price_adjustment[$j]['final_disc_price'] + $arr_price_adjustment[$i]['adjustment'];
                                } else {
                                    if ($arr_price_adjustment[$i]['discount_type'] == 1)
                                        $final_disc_price = $arr_price_adjustment[$j]['final_disc_price'] - ($arr_price_adjustment[$j]['final_disc_price']
                                                * $arr_price_adjustment[$i]['adjustment'] / 100);
                                    else
                                        $final_disc_price = $arr_price_adjustment[$j]['final_disc_price'] - $arr_price_adjustment[$i]['adjustment'];
                                }

                                $adjustment1 = $arr_price_adjustment[$i]['increase_decrease'] == 1 ? '+' . intval($arr_price_adjustment[$i]['adjustment'])
                                            : '-' . intval($arr_price_adjustment[$i]['adjustment']);
                                $result['adjustment'] = $arr_price_adjustment[$i]['discount_type'] == 1 ? $adjustment1 . '%' : $adjustment1 . $attr['currency_code'];

                                $arr_price_adjustment[$i]['final_disc_price'] = intval($final_disc_price);
                                $result['final_disc_price'] = intval($final_disc_price);
                                $result['final_price'] = intval($arr_price_adjustment[$j]['final_disc_price']);
                                $result['start_date'] = $arr_price_adjustment[$i]['start_date'];
                                $result['end_date'] = $arr_price_adjustment[$i]['end_date'];
                                $response['response'][] = $result;
                            } else {

                                $end_date3 = strtotime("-1 day", $arr_price_adjustment[$i]['start_date']);
                                $start_date4 = strtotime("+1 day", $arr_price_adjustment[$j]['end_date']);

                                $result['start_date'] = $this->objGeneral->convert_unix_into_date($start_date2);
                                $result['end_date'] = $this->objGeneral->convert_unix_into_date($end_date3);
                                $result['adjustment'] = '-';
                                $result['final_disc_price'] = '-';
                                $count2 = $count - 1;
                                //echo '<hr>'.date('Y-m-d',$response['response'][$count]['start_date']).',';
                                /* echo date('Y-m-d',$response['response'][$count2]['start_date']).'::'; */
                                //print_r($response['response'][$count]);
                                if ($response['response'][$count2]['start_date'] != $response['response'][$count]['start_date'])
                                    $response['response'][] = $result;

                                if ($arr_price_adjustment[$i]['increase_decrease'] == 1) {
                                    if ($arr_price_adjustment[$i]['discount_type'] == 1)
                                        $final_disc_price = $dis_price + ($dis_price * $arr_price_adjustment[$i]['adjustment'] / 100);
                                    else
                                        $final_disc_price = $dis_price + $arr_price_adjustment[$i]['adjustment'];
                                } else {
                                    if ($arr_price_adjustment[$i]['discount_type'] == 1)
                                        $final_disc_price = $dis_price - ($dis_price * $arr_price_adjustment[$i]['adjustment'] / 100);
                                    else
                                        $final_disc_price = $dis_price - $arr_price_adjustment[$i]['adjustment'];
                                }

                                $adjustment1 = $arr_price_adjustment[$i]['increase_decrease'] == 1 ? '+' . intval($arr_price_adjustment[$i]['adjustment'])
                                            : '-' . intval($arr_price_adjustment[$i]['adjustment']);
                                $result['adjustment'] = $arr_price_adjustment[$i]['discount_type'] == 1 ? $adjustment1 . '%' : $adjustment1 . $attr['currency_code'];

                                $arr_price_adjustment[$i]['final_disc_price'] = intval($final_disc_price);
                                $result['final_disc_price'] = intval($final_disc_price);
                                $result['start_date'] = $this->objGeneral->convert_unix_into_date($arr_price_adjustment[$i]['start_date']);
                                $result['end_date'] = $this->objGeneral->convert_unix_into_date($arr_price_adjustment[$i]['end_date']);

                                $response['response'][] = $result;
                                //echo '<pre>'; print_r($response);

                                $start_date3 = strtotime("+1 day", $arr_price_adjustment[$i]['end_date']);
                                $result['start_date'] = $this->objGeneral->convert_unix_into_date($start_date3);
                                $result['end_date'] = $attr['end_date'];
                                $result['adjustment'] = '-';
                                $result['final_disc_price'] = '-';
                                $result['is_date_numeric'] = '-';

                                if ($attr['end_date'] >= $arr_price_adjustment[$i]['end_date'])
                                    $response['response'][] = $result;
                            }
                            $count++;
                        }
                        //echo "here==>>";exit;
                    } else {

                        $start_date2 = strtotime("+1 day", intval($end_date));
                        $result['start_date'] = $this->objGeneral->convert_unix_into_date($start_date2);
                        $result['end_date'] = $attr['end_date'];
                        $result['adjustment'] = '-';
                        $result['final_disc_price'] = '-';
                        if (!empty($end_date) && ($attr['end_date'] >= $end_date))
                            $response['response'][] = $result;
                    }
                }
            }

            //echo "<pre>"; print_r($response['response']); exit;
            $arr_response = array();
            if (count($response['response']) > 0) {
                for ($i = 0; $i < count($response['response']); $i++) {
                    //echo ",".$response['response'][$i-1]['end_date'].':'.$response['response'][$i]['end_date'];
                    //if(isset($response['response'][$i-1]['end_date']) && ($response['response'][$i]['end_date'] != $response['response'][$i-1]['end_date'])){
                    $arr_response['response'][] = $response['response'][$i];
                    //}
                }
                $arr_response['ack'] = 1;
                $arr_response['error'] = NULL;
            } else {
                $arr_response['response'][] = array();
                $arr_response['ack'] = 0;
                $arr_response['error'] = NULL;
            }
            //echo "<pre>"; print_r($arr_response);
            //exit;
            return $arr_response;
        }

        function get_price_adjustment_detail($attr) {
            //global $objFilters;
            //return $objFilters->get_module_listing(74, "crm_price_offer",$attr[column],$attr[value],$attr[more_fields]);

            $Sql = "SELECT promo.*,cat.name as cat_name,brand.brandname,product.product_code,product.description as prodcut_description,crm_region.title as region,crm_segment.title as segment,crm_buying_group.title as buying_group,crm_alt_depot.depot as alt_location,
		    crm.customer_code as Customer_Code,crm.name as customer_name,

		    IFNULL((SELECT count(exCust.id) FROM price_adjustment_excluded_customer as exCust
					  WHERE exCust.price_adjustment_id = promo.id),0) as is_exclud_cust,
			IFNULL((SELECT count(exProd.id) FROM price_adjustment_excluded_product as exProd
					  WHERE exProd.price_adjustment_id = promo.id),0) as is_exclud_prod

				FROM price_adjustment_detail as promo
				LEFT JOIN category as cat ON (cat.id = promo.product_id AND promo.product_promotion_type_id = 1)
				LEFT JOIN brand ON (brand.id = promo.product_id AND promo.product_promotion_type_id = 2)
				LEFT JOIN product ON (product.id = promo.product_id AND promo.product_promotion_type_id = 3)
				LEFT JOIN crm_region ON (crm_region.id = promo.crm_id AND promo.customer_product_type_id = 3)
				LEFT JOIN crm_segment ON (crm_segment.id = promo.crm_id AND promo.customer_product_type_id = 4)
				LEFT JOIN crm_buying_group ON (crm_buying_group.id = promo.crm_id AND promo.customer_product_type_id = 5)
				LEFT JOIN crm_alt_depot ON (crm_alt_depot.id = promo.crm_alt_location_id AND promo.customer_product_type_id = 2)
				LEFT JOIN crm ON (crm.id = promo.crm_id AND (promo.customer_product_type_id = 1 OR promo.customer_product_type_id = 2))
				where promo.price_adjustment_id='" . $attr['sale_promotion_id'] . "' and promo.user_id='" . $this->arrUser['id'] . "' and promo.company_id='" . $this->arrUser['company_id'] . "' ORDER BY promo.id DESC
				";


            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $Row['detail'] = array();
                    $response['response'][] = $Row;
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            return $response;
        }

        function get_price_adjustment_by_id($attr) {
            $this->objGeneral->mysql_clean($attr);
            $Sql = "SELECT sp.*,spd.*
				FROM price_adjustment as sp
				JOIN price_adjustment_detail as spd ON(sp.id = spd.price_adjustment_id AND spd.id=" . $attr['detail_id'] . ")
				WHERE sp.id='".$attr['id']."'
				LIMIT 1";
            //echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);
            $response['ack'] = 1;
            $response['error'] = NULL;
            if ($RS->RecordCount() > 0) {
                $Row = $RS->FetchRow();
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $response['response'] = $Row;
            } else {
                $response['response'] = array();
            }
            return $response;
        }

        function add_price_adjustment($attr) {
            $this->objGeneral->mysql_clean($attr);

            //echo '<pre>'; print_r($attr);
            $start_date = $this->objGeneral->convert_date($attr['start_date']);
            $end_date = $this->objGeneral->convert_date($attr['end_date']);


            $Sql = "INSERT INTO price_adjustment
				SET promotion_name = '$attr[promotion_name]',currency_id = '".$attr['currency_id']."',price = '$attr[price]',strategy_type_id = '$attr[strategy_type_id]',strategy_id = '$attr[strategy_id]',discount = '$attr[discount]',discount_type = '$attr[discount_type]',increase_decrease = '$attr[increase_decrease]',end_date = '" . $end_date . "',start_date = '" . $start_date . "',created_date = '" . $this->objGeneral->convert_date(date('Y-m-d')) . "',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";


            //echo $Sql."<hr>"; exit;
            $RS = $this->objsetup->CSI($Sql);
            $id = $this->Conn->Insert_ID();

            if ($id > 0) {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['edit'] = 0;
                $response['id'] = $id;
            } else {
                $response['ack'] = 0;
                $response['error'] = 'Record not inserted.';
                $response['edit'] = 0;
                $response['id'] = 0;
            }

            return $response;
        }

        function update_price_adjustment($attr) {
            $this->objGeneral->mysql_clean($attr);

            $start_date = $this->objGeneral->convert_date($attr['start_date']);
            $end_date = $$this->objGeneral->convert_date($attr['end_date']);

            $Sql = "UPDATE price_adjustment
				SET promotion_name = '$attr[promotion_name]',discount = '$attr[discount]',discount_type = '$attr[discount_type]',increase_decrease = '$attr[increase_decrease]',end_date = '" . $end_date . "',start_date = '" . $start_date . "'
				WHERE id = $attr[price_adjustment_id] ";

            //echo $Sql."<hr>"; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($this->Conn->Affected_Rows() > 0) {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['edit'] = 1;
            } else {
                $response['ack'] = 0;
                $response['error'] = 'Record can\'t be updated!';
                $response['edit'] = 0;
            }

            return $response;
        }

        function get_customers_for_popup($attr) {
            $this->objGeneral->mysql_clean($attr);
            $limit_clause = $where_clause = "";
            $strWhere = '';
            if (isset($attr['type_id']) && isset($attr['search_data'])) {
                if ($attr['type_id'] == 3)
                    $strWhere .= " and crm_region.title LIKE '%" . $attr['search_data'] . "%'";
                if ($attr['type_id'] == 4)
                    $strWhere .= " and crm_segment.title LIKE '%" . $attr['search_data'] . "%'";
                if ($attr['type_id'] == 5)
                    $strWhere .= " and crm_buying_group.title LIKE '%" . $attr['search_data'] . "%'";
            }

            if (isset($attr['column']) && isset($attr['value'])) {
                $strWhere .= " and crm." . $attr['column'] . " = '" . $attr['value'] . "'";
            }

            /* if(isset($attr['isForAltLocation'])){
              $strWhere .= " and (select count(altL.id) as altLocations from crm_alt_depot as altL where altL.crm_id = crm.id) > 1";
              }
             */
            $strwhere = '';
            if (!empty($attr['regions']) && $attr['regions'] > 0)
                $where_clause .= " And crm.region_id ='" . $attr['regions'] . "'";
            if (!empty($attr['segmentss']) && $attr['segmentss'] > 0)
                $where_clause .= " And crm.crm_segment_id ='" . $attr['segmentss'] . "'";
            if (!empty($attr['buying_groupss']) && $attr['buying_groupss'] > 0)
                $where_clause .= " And crm.buying_grp ='" . $attr['buying_groupss'] . "'";

            if (!empty($attr['searchBox']))
                $where_clause .= " AND (crm.name LIKE '%" . $attr['searchBox'] . "%' OR crm.customer_code LIKE '%" . $attr['searchBox'] . "%')";
            $response = array();
            $Sql = "SELECT  crm.id,crm.region_id,crm.crm_segment_id as segment_id,crm.buying_grp as buying_group_id, 
				crm.customer_code,crm.name as customer_name,crm_region.title as region,
					crm_segment.title as segment,
					crm_buying_group.title as buying_group
			FROM crm

			LEFT OUTER JOIN crm_region ON ( crm_region.id = crm.region_id )
			LEFT OUTER JOIN crm_segment ON ( crm_segment.id = crm.crm_segment_id)
			LEFT OUTER JOIN crm_buying_group ON ( crm_buying_group.id = crm.buying_grp)

			JOIN company on company.id=crm.company_id 
			LEFT JOIN employees on (employees.id = crm.salesperson_id)
			where type in (2,3) and crm.status='1' " . $strWhere . " and ( crm.company_id=" . $this->arrUser['company_id'] . " 
			or  company.parent_id=" . $this->arrUser['company_id'] . ")
			" . $where_clause . ""; //d.status=1 andorder by crm.id ASC
            // echo $Sql; exit;
            //$RS = $this->objsetup->CSI($Sql);
            $limit_clause = $where_clause = "";

            //defualt Variable
            $total_limit = pagination_limit;
            
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
                $total_limit = $attr['pagination_limits'];

            $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'crm');
            //echo $response['q'];exit;
            $RS = $this->objsetup->CSI($response['q']);
            $response['q'] = '';


            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['id'];
                    $result['region_id'] = $Row['region_id'];
                    $result['segment_id'] = $Row['segment_id'];
                    $result['buying_group_id'] = $Row['buying_group_id'];
                    $result['customer_code'] = $Row['customer_code'];
                    $result['customer_name'] = $Row['customer_name'];
                    $result['region'] = $Row['region'];
                    $result['segment'] = $Row['segment'];
                    $result['buying_group'] = $Row['buying_group'];
                    $response['response'][] = $result;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            //print_r($response);exit;
            return $response;
        }

        function add_price_adjustment_detail($attr) {
            $this->objGeneral->mysql_clean($attr);

            //echo '<pre>'; print_r($attr);

            $start_date = $this->objGeneral->convert_date($attr['start_date']);
            $end_date = $this->objGeneral->convert_date($attr['end_date']);

            $strwhere = '';
            if ($attr['customer_product_type_id'] == 2)
                $strwhere = 'AND crm_alt_location_id =' . $attr['crm_alt_location_id'];

            $chkSql = "SELECT *
			FROM price_adjustment as pd
			INNER JOIN price_adjustment_detail as spd on(pd.id = spd.price_adjustment_id)
			WHERE spd.crm_id='".$attr['crm_id']."' AND spd.product_id = '".$attr['product_id']."' AND spd.customer_product_type_id = '$attr[customer_product_type_id]' AND spd.product_promotion_type_id = '$attr[product_promotion_type_id]' AND 
			
			(( '" . $start_date . "' between pd.start_date and pd.end_date) or ('" . $end_date . "' between pd.start_date and pd.end_date) or ('" . $start_date . "' <= pd.start_date and '" . $end_date . "' >= pd.end_date ))  
			
			" . $strwhere . " limit 1";

            //echo $chkSql; exit;
            $chkRS = $this->objsetup->CSI($chkSql);
            if ($chkRS->RecordCount() > 0) {
                $response['ack'] = 2;
                $response['error'] = 'Already exist.';
                $response['id'] = 0;
                return $response;
                exit;
            }

            $strwhere = '';
            if ($attr['product_promotion_type_id'] == 1)
                $column = 'category_id';
            else if ($attr['product_promotion_type_id'] == 2)
                $column = 'brand_id';
            else
                $column = 'id';

            $prodSql = "SELECT id
				FROM product
				WHERE " . $column . " = '".$attr['product_id']."' AND status != 0";
//echo $prodSql;exit;
            $prodRS = $this->objsetup->CSI($prodSql);
            $arr_ids = array();
            $strProdIds = '';
            if ($prodRS->RecordCount() > 0) {
                while ($Row = $prodRS->FetchRow()) {
                    $arr_ids[] = $Row['id'];
                };
            }

            $strProdIds = implode(',', $arr_ids);
            if (!empty($strProdIds)) {
                $chkSql = "SELECT *
					FROM customer_item_info
					WHERE product_id IN (" . $strProdIds . ") AND customer_product_type_id = '$attr[customer_product_type_id]' AND crm_id = '".$attr['crm_id']."'";

                //and (start_date <= '".strtotime($start_date)."' and end_date >= '".strtotime($end_date)."')
                // echo $chkSql; exit;
                $chkRS = $this->objsetup->CSI($chkSql);
                if ($chkRS->RecordCount() == 0) {
                    $response['ack'] = 3;
                    $response['error'] = 'Customer Price not set.';
                    //$response['sql'] = $chkSql;
                    $response['id'] = 0;
                    return $response;
                    exit;
                }
            }

            /* else{ */
            $Sql = "INSERT INTO price_adjustment_detail
				SET price_adjustment_id = '$attr[sale_promotion_id]',crm_id = '".$attr['crm_id']."',product_id = '".$attr['product_id']."',crm_alt_location_id ='$attr[crm_alt_location_id]',product_promotion_type_id = '$attr[product_promotion_type_id]',customer_product_type_id = '$attr[customer_product_type_id]',created_date = '" . $this->objGeneral->convert_date(date('Y-m-d')) . "',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";
            //}
            // echo $Sql."<hr>"; exit;
            $RS = $this->objsetup->CSI($Sql);
            $id = $this->Conn->Insert_ID();

            if ($id > 0) {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['edit'] = 0;
                $response['id'] = $id;
            } else {
                $response['ack'] = 0;
                $response['error'] = 'Record not inserted.';
                $response['edit'] = 0;
                $response['id'] = 0;
            }

            return $response;
        }

        function check_nd_delete_price_adjustment($attr) {
            $this->objGeneral->mysql_clean($attr);

            $chkSql = "SELECT id FROM price_adjustment_detail
				WHERE price_adjustment_id = ".$attr['id']." limit 1";
            $chkRS = $this->objsetup->CSI($chkSql);

            if ($chkRS->RecordCount() > 0) {
                $response['ack'] = 1;
                $response['error'] = 'Record Exist.';
                return $response;
                exit;
            }

            $Sql = "DELETE FROM price_adjustment
				WHERE id = ".$attr['id']." ";

            //echo $Sql."<hr>"; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($this->Conn->Affected_Rows() > 0) {
                $response['ack'] = 2;
                $response['error'] = 'Record Deleted Successfully';
            } else {
                $response['ack'] = 0;
                $response['error'] = 'Record can\'t be deleted!';
            }

            return $response;
        }

        function get_price_adjustment_excluded_customers($arr_attr) {
            $Sql = "SELECT crm_id FROM price_adjustment_excluded_customer
			WHERE price_adjustment_id = $arr_attr[sale_promotion_id]";

            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $response['response'][] = $Row['crm_id'];
                };
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            return $response;
        }

        function add_price_adjustment_excluded_customers($arr_attr) {
            $strwhere = '';
            if (isset($arr_attr['region_id']))
                $strwhere = ' And region_id =' . $arr_attr['region_id'];
            if (isset($arr_attr['segment_id']))
                $strwhere = ' And segment_id =' . $arr_attr['segment_id'];
            if (isset($arr_attr['buying_group_id']))
                $strwhere = ' And buying_group_id =' . $arr_attr['buying_group_id'];

            $sql = "DELETE FROM price_adjustment_excluded_customer WHERE price_adjustment_id='$arr_attr[sale_promotion_id]'" . $strwhere;
            $this->objsetup->CSI($sql);


            //echo "<pre>"; print_r($arr_attr['customers']);
            foreach ($arr_attr['customers'] as $value) {
                if ((isset($arr_attr['region_id']) && $arr_attr['region_id'] == $value->region_id) || (isset($arr_attr['segment_id']) && $arr_attr['segment_id']
                        == $value->segment_id) || (isset($arr_attr['buying_group_id']) && $arr_attr['buying_group_id'] == $value->buying_group_id)) {
                    $Sql = "INSERT INTO price_adjustment_excluded_customer
					SET crm_id=" . $value->id . ",region_id='$arr_attr[region_id]',price_adjustment_id='$arr_attr[sale_promotion_id]',segment_id='$arr_attr[segment_id]',buying_group='$arr_attr[buying_group_id]',product_id='".$arr_attr['product_id']."',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";
                    echo $Sql . "<hr>";
                    $RS = $this->objsetup->CSI($Sql);
                }
            }
        }

        function get_sale_price_adjustment_excluded_customers($arr_attr) {
            $Sql = "SELECT crm_id FROM price_adjustment_excluded_customer
			WHERE price_adjustment_id = ".$arr_attr['id']." and $arr_attr[column] = $arr_attr[value]";

            //echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);
            $arrIds = array();
            $strIds = '';
            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $arrIds[] = $Row['crm_id'];
                };
            }

            $strIds = implode(',', $arrIds);
            $response = array();
            $custSql = "SELECT  crm.id, 
					crm.customer_code,crm.name, crm.city, crm.contact_person, crm.postcode,crm.phone,CONCAT(employees.first_name,' ',employees.last_name) as salesperon
				FROM crm
				JOIN company on company.id=crm.company_id 
				LEFT JOIN employees on (employees.id = crm.salesperson_id)
				where type in (2,3) and crm.status='1' and crm.id in (" . $strIds . ") and ( crm.company_id=" . $this->arrUser['company_id'] . " 
				or  company.parent_id=" . $this->arrUser['company_id'] . ")
				order by crm.id ASC"; //d.status=1 and
            $custRS = $this->objsetup->CSI($custSql);

            if ($custRS->RecordCount() > 0) {
                while ($Row = $custRS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['id'];
                    $result['Customer_Code'] = $Row['customer_code'];
                    $result['Name'] = $Row['name'];
                    $result['Contact_Person'] = $Row['contact_person'];
                    $result['City'] = $Row['city'];
                    $result['Postcode'] = $Row['postcode'];
                    $result['Phone'] = $Row['phone'];
                    $result['Salesperson'] = $Row['salesperon'];
                    $response['response'][] = $result;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            //print_r($response);exit;
            return $response;
        }

        function get_price_adjustment_products_customers($attr) {
            /* error_reporting(E_ALL);
              ini_set('display_error', 1); */
            //$this->objGeneral->mysql_clean($attr);
            //echo '<pre>'; print_r(json_decode($attr['price_strategy'])); exit;
            //echo '<pre>'; print_r($attr); exit;
            $exCust['sale_promotion_id'] = $attr['sale_promotion_id'];
            $arrExclCust = self::get_price_adjustment_excluded_customers($exCust);

            //echo '<pre>'; print_r($arrExclCust); exit;
            $strCustWhere = '';
            if ($arrExclCust['ack'] == 1) {
                $strIds = implode(',', $arrExclCust['response']);
                $strCustWhere = "and crm.id NOT IN (" . $strIds . ")";
            }

            $exProd['sale_promotion_id'] = $attr['sale_promotion_id'];
            $arrExclProd = self::get_price_adjustment_excluded_products($exProd);
            //echo '<pre>'; print_r($arrExclProd); exit;
            $strProdWhere = '';
            if ($arrExclProd['ack'] == 1) {
                $strProdIds = implode(',', $arrExclProd['response']);
                $strProdWhere = "and product.id NOT IN (" . $strProdIds . ")";
            }

            /* echo "<pre>"; print_r($attr['value']);
              exit; */
            $arr_value = array();
            foreach ($attr['value'] as $key => $value) {
                $array_values[] = $value->id;
            }
            $strValues = implode(',', $array_values);

            $arr_pValue = array();
            foreach ($attr['prod_value'] as $key => $value) {
                $arr_pValue[] = $value->id;
            }
            $strProdValues = implode(',', $arr_pValue);


            /* $strategySql = " SELECT name
              FROM ref_price_strategy_types
              WHERE status = 1 and id=".$attr['price_strategy']." limit 1";
              //echo $volDiscSql; exit;
              $strategyRS = $this->objsetup->CSI($strategySql);
              $strStrategy = $strategyRS->fields['name']; */

            $current_date = date('Y-m-d');


            $response = array();
            $Sql = "SELECT DISTINCT ci.crm_id,crm.id, crm.customer_code,crm.name, crm.city, crm.contact_person, crm.postcode,crm.phone,CONCAT(employees.first_name,' ',employees.last_name) as salesperon,crm_region.title as region, crm_segment.title as segment, crm_buying_group.title as buying_grp,currency.code as currency_name,crm.region_id,crm.company_type as segment_id,crm.buying_grp as buying_group_id
			FROM crm
			JOIN company on company.id=crm.company_id 
			LEFT JOIN crm_region on crm_region.id=crm.region_id 
			LEFT JOIN crm_segment on crm_segment.id=crm.company_type 
			LEFT JOIN crm_buying_group on crm_buying_group.id=crm.buying_grp 
			LEFT JOIN currency on currency.id=crm.currency_id 

			
			JOIN customer_item_info as ci on ci.crm_id = crm." . $attr['column'] . " and ci.customer_product_type_id = " . $attr['customer_product_type_id'] . "

			LEFT JOIN employees on (employees.id = crm.salesperson_id)
			where type in (2,3) and crm.status='1' and crm." . $attr['column'] . " IN (" . $strValues . ") " . $strCustWhere . " and ( crm.company_id=" . $this->arrUser['company_id'] . " 
			or  company.parent_id=" . $this->arrUser['company_id'] . ")
			order by crm.id ASC";

            //echo $Sql; //exit;
            //echo "<hr>";
            $prodSql = " SELECT DISTINCT product.id,product.product_code,product.description,product.standard_price,category.name as cat_name, brand.brandname,ci.price_offered,ci.start_date as cust_price_start_date,ci.end_date as cust_price_end_date,
				( SELECT uom.title  FROM units_of_measure as uom 
				where uom.id =product.unit_id ) as unit_measur, product.absolute_minimum_price,currency.code as currency_code, product.category_id,product.brand_id
				FROM product
				JOIN company on company.id=product.company_id
				JOIN category on category.id=product.category_id
				JOIN brand on brand.id=product.brand_id

				LEFT JOIN customer_item_info as ci on product.id=ci.product_id and ci.status = 1 and ci.crm_id IN (" . $strValues . ") and ci.customer_product_type_id = " . $attr['customer_product_type_id'] . " 
				LEFT JOIN currency on (currency.id = ci.currency_id)

				WHERE product.status = 1 and product." . $attr['prod_column'] . " IN (" . $strProdValues . ") " . $strProdWhere . " and (product.company_id=" . $this->arrUser['company_id'] . " 
				or  company.parent_id=" . $this->arrUser['company_id'] . ")
				order by product.id ASC";

            //and ('".$current_date."' between ci.start_date and ci.end_date)
            //echo $prodSql; exit;
            $arrProductIds = array();
            $strProductIds = '';
            $prodRS = $this->objsetup->CSI($prodSql);
            $arr_products = array();
            if ($prodRS->RecordCount() > 0) {
                while ($Row = $prodRS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $arr_products[] = $Row;
                    $arrProductIds[] = $Row['id'];
                }
            }

            //echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);
            $arr_customers = array();
            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $arr_customers[] = $Row;
                }
            }


            if (count($arr_products) >= count($arr_customers)) {
                foreach ($arr_products as $key => $prod) {
                    if ($prod['price_offered'] > 0) {

                        foreach ($arr_customers as $key => $cust) {
                            $result = array();
                            $final_disc_price = 0;
                            $result['cat_name'] = $prod['cat_name'];
                            $result['brandname'] = $prod['brandname'];
                            $result['Product_Code'] = $prod['product_code'];
                            $result['Product_Description'] = $prod['description'];
                            $result['region'] = $cust['region'];
                            $result['buying_grp'] = $cust['buying_grp'];
                            $result['segment'] = $cust['segment'];
                            $result['Customer_Code'] = $cust['customer_code'];
                            $result['Customer_Name'] = $cust['name'];
                            $result['price_offered'] = intval($prod['price_offered']);
                            $result['discount_type'] = $attr['discount_type'];
                            $result['unit_measur'] = $prod['unit_measur'];
                            $result['currency_code'] = $prod['currency_code'];
                            $result['increase_decrease'] = $attr['increase_decrease'];
                            $result['customer_product_type_id'] = $attr['customer_product_type_id'];
                            $result['product_promotion_type_id'] = $attr['product_promotion_type_id'];
                            $result['absolute_minimum_price'] = $prod['absolute_minimum_price'];

                            if ($attr['customer_product_type_id'] < 3)
                                $result['crm_id'] = $cust['id'];
                            if ($attr['customer_product_type_id'] == 3)
                                $result['crm_id'] = $cust['region_id'];
                            if ($attr['customer_product_type_id'] == 4)
                                $result['crm_id'] = $cust['segment_id'];
                            if ($attr['customer_product_type_id'] == 5)
                                $result['crm_id'] = $cust['buying_group_id'];

                            if ($attr['product_promotion_type_id'] = 1)
                                $result['product_id'] = $prod['category_id'];
                            if ($attr['product_promotion_type_id'] = 2)
                                $result['product_id'] = $prod['brand_id'];
                            if ($attr['product_promotion_type_id'] = 3)
                                $result['product_id'] = $prod['id'];

                            $adjustment = round($attr['discount'], 0);

                            $result['adjustment'] = 0;
                            $result['is_adjustment'] = 0;
                            $result['final_disc_price'] = '-';
                            $start_date = $this->objGeneral->convert_date($attr['start_date']);
                            $end_date = $this->objGeneral->convert_date($attr['end_date']);

                            $end_date1 = strtotime("-1 day", $start_date);


                            $result['start_date'] = $this->objGeneral->convert_unix_into_date($prod['cust_price_start_date']);
                            if ($prod['cust_price_end_date'] >= $start_date)
                                $result['end_date'] = $this->objGeneral->convert_unix_into_date($end_date1);
                            else
                                $result['end_date'] = $this->objGeneral->convert_unix_into_date($prod['cust_price_end_date']);


                            if ($result['end_date'] < $start_date && $result['start_date'] < $result['end_date'] && $result['start_date'] < $start_date)
                                $response['response'][] = $result;


                            // for price adjustment
                            $result['is_adjustment'] = 1;
                            $result['start_date'] = $this->objGeneral->convert_unix_into_date($start_date);
                            $result['end_date'] = $this->objGeneral->convert_unix_into_date($end_date);

                            $result['adjustment'] = $adjustment;
                            /* if($attr['increase_decrease'] == 1){
                              if($attr['discount_type'] == 1)
                              $final_disc_price = $result['price_offered'] + ($result['price_offered']*$attr['discount']/100);
                              else
                              $final_disc_price = $result['price_offered'] + $attr['discount'];
                              }
                              else{
                              if($attr['discount_type'] == 1)
                              $final_disc_price = $result['price_offered'] - ($result['price_offered']*$attr['discount']/100);
                              else
                              $final_disc_price = $result['price_offered'] - $attr['discount'];
                              } */

                            $result['final_disc_price'] = 0; //$final_disc_price;
                            //$result['show_red'] = intval($final_disc_price) == 0 || intval($final_disc_price) < 0 || intval($final_disc_price) < intval($prod['absolute_minimum_price'])?1:0;
                            $response['response'][] = $result;

                            // after adjustment
                            $result['is_adjustment'] = 0;
                            $result['adjustment'] = 0;
                            $result['final_disc_price'] = '-';
                            $start_date1 = strtotime("+1 day", $end_date);
                            $result['start_date'] = $this->objGeneral->convert_unix_into_date($start_date1);
                            $result['end_date'] = $this->objGeneral->convert_unix_into_date($prod['cust_price_end_date']);
                            $strEndDate = str_replace('/', '-', $attr['end_date']);
                            if ($prod['cust_price_end_date'] > $end_date) {
                                $response['response'][] = $result;
                            }
                        }
                    }
                }
            }

            if (count($arr_customers) > count($arr_products)) {
                foreach ($arr_customers as $key => $cust) {
                    foreach ($arr_products as $key => $prod) {
                        if ($prod['price_offered'] > 0) {
                            $result = array();
                            $final_disc_price = 0;
                            $result['cat_name'] = $prod['cat_name'];
                            $result['brandname'] = $prod['brandname'];
                            $result['Product_Code'] = $prod['product_code'];
                            $result['Product_Description'] = $prod['description'];
                            $result['region'] = $cust['region'];
                            $result['buying_grp'] = $cust['buying_grp'];
                            $result['segment'] = $cust['segment'];
                            $result['Customer_Code'] = $cust['customer_code'];
                            $result['Customer_Name'] = $cust['name'];
                            $result['price_offered'] = intval($prod['price_offered']);
                            $result['discount_type'] = $attr['discount_type'];
                            $result['unit_measur'] = $prod['unit_measur'];
                            $result['currency_code'] = $prod['currency_code'];
                            $result['increase_decrease'] = $attr['increase_decrease'];
                            $result['customer_product_type_id'] = $attr['customer_product_type_id'];
                            $result['product_promotion_type_id'] = $attr['product_promotion_type_id'];
                            $result['absolute_minimum_price'] = $prod['absolute_minimum_price'];

                            if ($attr['customer_product_type_id'] < 3)
                                $result['crm_id'] = $cust['id'];
                            if ($attr['customer_product_type_id'] == 3)
                                $result['crm_id'] = $cust['region_id'];
                            if ($attr['customer_product_type_id'] == 4)
                                $result['crm_id'] = $cust['segment_id'];
                            if ($attr['customer_product_type_id'] == 5)
                                $result['crm_id'] = $cust['buying_group_id'];

                            if ($attr['product_promotion_type_id'] = 1)
                                $result['product_id'] = $prod['category_id'];
                            if ($attr['product_promotion_type_id'] = 2)
                                $result['product_id'] = $prod['brand_id'];
                            if ($attr['product_promotion_type_id'] = 3)
                                $result['product_id'] = $prod['id'];

                            $adjustment = round($attr['discount'], 0);

                            $result['adjustment'] = 0;
                            $result['is_adjustment'] = 0;
                            $result['final_disc_price'] = '-';
                            $start_date = $this->objGeneral->convert_date($attr['start_date']);
                            $end_date = $this->objGeneral->convert_date($attr['end_date']);

                            $end_date1 = strtotime("-1 day", $start_date);


                            $result['start_date'] = $prod['cust_price_start_date'];
                            if ($prod['cust_price_end_date'] >= $start_date)
                                $result['end_date'] = $end_date1;
                            else
                                $result['end_date'] = $prod['cust_price_end_date'];

                            //echo $start_date .' <= '. $result['end_date'].' :: ';

                            if ($result['end_date'] < $start_date && $result['start_date'] < $result['end_date'] && $result['start_date'] < $start_date)
                                $response['response'][] = $result;


                            // for price adjustment
                            $result['is_adjustment'] = 1;
                            $result['start_date'] = $this->objGeneral->convert_unix_into_date($start_date);
                            $result['end_date'] = $this->objGeneral->convert_unix_into_date($end_date);

                            $result['adjustment'] = $adjustment;
                            /* if($attr['increase_decrease'] == 1){
                              if($attr['discount_type'] == 1)
                              $final_disc_price = $result['price_offered'] + ($result['price_offered']*$attr['discount']/100);
                              else
                              $final_disc_price = $result['price_offered'] + $attr['discount'];
                              }
                              else{
                              if($attr['discount_type'] == 1)
                              $final_disc_price = $result['price_offered'] - ($result['price_offered']*$attr['discount']/100);
                              else
                              $final_disc_price = $result['price_offered'] - $attr['discount'];
                              } */

                            $result['final_disc_price'] = 0; //$final_disc_price;
                            //$result['show_red'] = intval($final_disc_price) == 0 || intval($final_disc_price) < 0 || intval($final_disc_price) < intval($prod['absolute_minimum_price'])?1:0;
                            $response['response'][] = $result;

                            // after adjustment
                            $result['is_adjustment'] = 0;
                            $result['adjustment'] = 0;
                            $result['final_disc_price'] = '-';
                            $start_date1 = strtotime("+1 day", $end_date);
                            $result['start_date'] = $this->objGeneral->convert_unix_into_date($start_date1);
                            $result['end_date'] = $this->objGeneral->convert_unix_into_date($prod['cust_price_end_date']);
                            $strEndDate = str_replace('/', '-', $attr['end_date']);
                            if ($prod['cust_price_end_date'] > $end_date) {
                                $response['response'][] = $result;
                            }
                        }
                    }
                }
            }

            if (count($response['response']) > 0) {
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            //print_r($response);exit;
            return $response;
        }

        function get_price_adjustment_excluded_products($arr_attr) {
            $Sql = "SELECT product_id FROM price_adjustment_excluded_product
			WHERE price_adjustment_id = $arr_attr[sale_promotion_id]";

            //echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);
            $response = array();
            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $response['response'][] = $Row['product_id'];
                };
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            return $response;
        }

        function get_currency_conversion_rate($attr) {
            // echo "<pre>";
            // print_r($attr);exit;
            $this->objGeneral->mysql_clean($attr);
            // echo $attr['id'];

            if (!empty($attr['or_date']) || $attr['or_date'] != '')
                $current_date = $this->objGeneral->convert_date($attr['or_date']);
            else
                $current_date = current_date; //$this->convert_date(date('Y-m-d'));
            $currency_id = ($attr['id'] != '') ? $attr['id'] : '0';

            $Sql = "SELECT d.conversion_rate,
                    (SELECT d1.conversion_rate 
                        FROM currency_histroy AS d1
                        WHERE d1.currency_id=$currency_id
                              AND (d1.start_date <= UNIX_TIMESTAMP(NOW()) ) 
                              order by d1.start_date DESC, d1.action_date desc LIMIT 1) AS current_conversion_rate
                FROM currency_histroy d 
                WHERE d.currency_id=$currency_id AND  
                     (d.start_date <= '" . $current_date . "')
                order by d.start_date DESC, d.action_date desc LIMIT 1  ";
            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                $Row = $RS->FetchRow();
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['conversion_rate'] = (float) $Row['conversion_rate'];
                $Row['current_conversion_rate'] = (float) $Row['current_conversion_rate'];
                $response['response'] = $Row;
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'] = null;
                $response['ack'] = 0;
                $response['error'] = 'No record.';
            }
            return $response;
        }

        function get_customer_price_adjustment_detail($attr) {
            //$this->objGeneral->mysql_clean($attr);
            $Sql2 = "SELECT * FROM customer_price_adjustment WHERE sale_promotion_id ='".$attr['id']."'";

            /* $Sql2 = "SELECT * 	FROM price_adjustment 	WHERE id ='".$attr['id']."'"; */

            //	echo $Sql2.'<hr/>'; exit;
            $RS = $this->objsetup->CSI($Sql2);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $response['response'][] = $Row;
                }

                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'] = null;
                $response['ack'] = 0;
                $response['error'] = 'No record.';
            }
            return $response;
        }

        function add_customer_price_adjustment($arr_attr) {
            /* error_reporting(E_ALL);
              ini_set('display_error', 1);
              exit; */
            //echo "<pre>"; print_r($arr_attr['adjustments']); exit;
            $Sql = "SELECT id FROM customer_price_adjustment
			WHERE sale_promotion_id = " . $arr_attr['adjustments'][0]->sale_promotion_id . " limit 1";
            //echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);
            if ($RS->RecordCount() > 0) {
                foreach ($arr_attr['adjustments'] as $value) {
                    $Sql = "UPDATE customer_price_adjustment
						SET adjustment=" . $value->adjustment . ",discount_type=" . $value->disc_type->id . ",final_disc_price=" . $value->final_disc_price . ",increase_decrease=" . $value->increase_decrease_id->id . " 
							WHERE id = " . $value->id;
                    //echo $Sql; echo "<hr>";
                    $RS = $this->objsetup->CSI($Sql);
                }
            } else {
                foreach ($arr_attr['adjustments'] as $value) {
                    $Sql = "INSERT INTO customer_price_adjustment
						SET customer_product_type_id='" . $value->customer_product_type_id . "',product_promotion_type_id='" . $value->product_promotion_type_id . "',sale_promotion_id='" . $value->sale_promotion_id . "',customer_code='" . $value->Customer_Code . "',crm_id='" . $value->crm_id . "',product_id='" . $value->product_id . "',customer_name='" . $value->Customer_Name . "',product_code='" . $value->Product_Code . "',product_description='" . $value->Product_Description . "',adjustment='" . $value->adjustment . "',brandname='" . $value->brandname . "',buying_grp='" . $value->buying_grp . "',cat_name='" . $value->cat_name . "',currency_code='" . $value->currency_code . "',discount_type='" . $value->disc_type->id . "',start_date='" . $this->objGeneral->convert_date($value->start_date) . "'
						,end_date='" . $this->objGeneral->convert_date($value->end_date) . "',final_disc_price='" . $value->final_disc_price . "',increase_decrease='" . $value->increase_decrease_id->id . "',is_adjustment='" . $value->is_adjustment . "',price_offered='" . $value->price_offered . "',region='" . $value->region . "',segment='" . $value->segment . "',unit_measur='" . $value->unit_measur . "',created_date='" . $this->objGeneral->convert_date(date('Y-m-d')) . "',user_id='" . $this->arrUser['id'] . "',company_id='" . $this->arrUser['company_id'] . "'";

                    //echo $Sql; echo "<hr>";
                    $RS = $this->objsetup->CSI($Sql);
                }
            }
        }

        /*   Add CRM order status        */

        //------------------------------------------------

        function add_order_status($arr_attr) {
            $this->objGeneral->mysql_clean($arr_attr);


            $order_id = $arr_attr['id'];
            $rec_id = $arr_attr['rec_id'];


            $Sql = "SELECT id FROM ref_order_stage_list WHERE module_id = '" . $order_id . "' && rec_id = '" . $rec_id . "' && company_id='" . $this->arrUser['company_id'] . "' && user_id='" . $this->arrUser['id'] . "' &&	type=1 limit 1";

            /* echo $Sql;
              exit; */
            $RS = $this->objsetup->CSI($Sql);


            if ($RS->RecordCount() == 0) {
                $Sql = "INSERT INTO ref_order_stage_list SET  module_id = '" . $order_id . "' , rec_id = '" . $rec_id . "' ,company_id='" . $this->arrUser['company_id'] . "', user_id='" . $this->arrUser['id'] . "',type='1' ,date_created='" . current_date . "'";

                $response = $this->objGeneral->run_query_exception($Sql);
                return $response;
            }

            $response['ack'] = 0;
            $response['error'] = 'Record Already exists!';
            return $response;
        }

        //------------------------------------------------

        /*   Delete CRM order status        */

        //------------------------------------------------

        function del_order_status($arr_attr) {
            $this->objGeneral->mysql_clean($arr_attr);


            $order_id = $arr_attr['id'];
            $rec_id = $arr_attr['rec_id'];

            $Sql = "SELECT id FROM ref_order_stage_list WHERE module_id = '" . $order_id . "' && rec_id = '" . $rec_id . "' && company_id='" . $this->arrUser['company_id'] . "' && user_id='" . $this->arrUser['id'] . "' &&	type=1 limit 1";
            /* echo $Sql;
              exit; */
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $order_id = $Row['id'];
                }
            }


            $delSql = "DELETE FROM ref_order_stage_list WHERE id = $order_id";

            // echo $delSql;exit;
            $delRS = $this->objsetup->CSI($delSql);
            if ($this->Conn->Affected_Rows() > 0) {
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['ack'] = 0;
                $response['error'] = 'Record can\'t be Changed!';
            }

            return $response;
        }

        function update_sales_order_stages($attr) {
            // print_r($attr);exit;
            // $this->objGeneral->mysql_clean($attr);
            $this->Conn->beginTrans();
            $this->Conn->autoCommit = false;

            foreach ($attr['order_stages'] as $order_stage) {
                $Sql = "update ref_order_stage_list
                SET
                state =  '" . $order_stage->state . "'
                where id = $order_stage->id
            ";
                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);
            }
            if (count($attr['order_stages']) > 0) {
                $module_id = $attr['order_stages'][0]->module_id;
                $order_id = $attr['order_stages'][0]->order_id;
                $type = "";
                // 1/Sale Order, 2/Purchase order, 3/Debit Note, 4/credit Note,
                /* if ($module_id == 1) {
                    $Sql = "CALL sr_Checksum_orders_update_Trigger_SP(" . $this->arrUser['company_id'] . ", " . $this->arrUser['id'] . ", $order_id)";
                    // echo $Sql;exit;
                    $RS = $this->objsetup->CSI($Sql);
                } */
            }

            $this->Conn->commitTrans();
            $this->Conn->autoCommit = true;

            $response['ack'] = 1;
            $response['error'] = NULL;

            return $response;
        }

        function get_salesOrderStagesbySelCust($attr) {

            if(isset($attr['selCust'])){

                $key = hash('sha256', SECRET_KEY);
                $iv = substr(hash('sha256', SECRET_IV), 0, 16);
                $outputInvName = openssl_decrypt(base64_decode($attr['selCust']), SECRET_METHOD, $key, 0, $iv);
                $fileName = explode(",",$outputInvName);

                $customerID = $fileName[1];

                $Sql = "SELECT c.id as cid,c.customer_code,c.name,c.company_id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.customer_code IS NOT NULL AND 
                            c.name !='' AND 
                            c.id=" . $customerID. "";
                
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                        $attr['cust_id'] = $Row['cid'];
                        $this->arrUser['company_id'] = $Row['company_id'];
                    }
                    $response['customerID'] = $customerID;
                } else {
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                    $response['response'][] = array();
                    return $response;
                }
            }
            else{
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['response'][] = array();
                return $response;
            }

            $where_clause = '';

            if ($attr['type'] > 1)
                $where_clause = " AND cos.module_id='" . $attr['type'] . "'";
            else
                $where_clause = " AND cos.module_id='1'";

            $Sql = "SELECT os.id, os.state , cos.rank, cos.name, cos.module_id, os.order_id
                 FROM ref_order_stage_list as os, ref_crm_order_stages as cos
                 WHERE 
                    cos.id = os.ref_stage_id AND
                    os.order_id = " . $attr['order_id'] . " AND
                    cos.status = 1
                    $where_clause AND
                    cos.company_id = " . $this->arrUser['company_id'] . "
                    ORDER BY cos.rank";
            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if ($Row['state'] == 'completed')
                        $Row['chk'] = true;
                    else
                        $Row['chk'] = false;

                    $response['response'][] = $Row;
                }

                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'] = null;
                $response['ack'] = 0;
                $response['error'] = 'No record.';
            }
            return $response;
        }

        function get_sales_order_stages($attr) {
            $where_clause = '';

            if ($attr['type'] > 1)
                $where_clause = " AND cos.module_id='" . $attr['type'] . "'";
            else
                $where_clause = " AND cos.module_id='1'";

            $Sql = "SELECT os.id, os.state , cos.rank, cos.name, cos.module_id, os.order_id
                 FROM ref_order_stage_list as os, ref_crm_order_stages as cos
                 WHERE 
                    cos.id = os.ref_stage_id AND
                    os.order_id = " . $attr['order_id'] . " AND
                    cos.status = 1
                    $where_clause AND
                    cos.company_id = " . $this->arrUser['company_id'] . "
                    ORDER BY cos.rank";
            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if ($Row['state'] == 'completed')
                        $Row['chk'] = true;
                    else
                        $Row['chk'] = false;

                    $response['response'][] = $Row;
                }

                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'] = null;
                $response['ack'] = 0;
                $response['error'] = 'No record.';
            }
            return $response;
        }

        function get_sales_order_stats($attr) {
            /* SELECT od.item_id,
              od.item_name,CASE
              WHEN prd.costing_method_id=1
              THEN IFNULL(SR_Calculate_Cost_FIFO(od.item_id, od.qty, 89), od.unit_price) * qty
              WHEN prd.costing_method_id=2
              THEN IFNULL(SR_Calculate_Cost_Moving_Avg(od.item_id, 89), od.unit_price) * qty
              WHEN prd.costing_method_id=3
              THEN prd.standard_purchase_cost * od.qty
              END
              AS cost

              FROM product AS prd, order_details AS od
              WHERE prd.id = od.item_id AND od.order_id=857 AND od.company_id=89

             */
            /*
              SELECT
              CASE
              WHEN wh_bin_loc.cost_type_id = 1 -- fixed
              THEN
              wh_bin_loc.bin_cost
              WHEN wh_bin_loc.cost_type_id = 2 -- daily
              THEN
              DATEDIFF(FROM_UNIXTIME(wh_loc.date_received), FROM_UNIXTIME(o.dispatch_date)) * wh_bin_loc.bin_cost
              WHEN wh_bin_loc.cost_type_id = 3 -- weekly
              THEN
              DATEDIFF(FROM_UNIXTIME(wh_loc.date_received), FROM_UNIXTIME(o.dispatch_date)) * (wh_bin_loc.bin_cost/7)
              WHEN wh_bin_loc.cost_type_id = 4 -- monthly
              THEN
              DATEDIFF(FROM_UNIXTIME(wh_loc.date_received), FROM_UNIXTIME(o.dispatch_date)) * (wh_bin_loc.bin_cost/30)
              WHEN wh_bin_loc.cost_type_id = 5 -- annually
              THEN
              DATEDIFF(FROM_UNIXTIME(wh_loc.date_received), FROM_UNIXTIME(o.dispatch_date)) * (wh_bin_loc.bin_cost/365)
              END
              AS storage_cost

              FROM
              `warehouse_allocation` AS wh_loc,
              product_warehouse_location AS prd_wh_loc,
              `warehouse_bin_location` AS wh_bin_loc,
              orders AS o
              WHERE
              wh_loc.type=2 AND
              o.id = wh_loc.order_id AND
              wh_bin_loc.id = prd_wh_loc.`warehouse_loc_id` AND
              wh_loc.location = prd_wh_loc.id AND
              wh_loc.company_id=89 AND
              wh_loc.order_id=857

             */
            
            /* 
            WHEN prd.costing_method_id=2
                THEN IFNULL(SR_Calculate_Cost_Moving_Avg(od.item_id, " . $this->arrUser['company_id'] . "), od.unit_price) * qty
                    */
            $Sql = "SELECT 1,
	                    (SELECT SUM(
                        CASE
                            WHEN prd.costing_method_id=1
                                THEN IFNULL(SR_Calculate_Cost_FIFO(od.item_id, od.qty, " . $this->arrUser['company_id'] . "), od.unit_price) * qty
                            
                            WHEN prd.costing_method_id=3
                                THEN prd.standard_purchase_cost * od.qty
                        END
                        ) AS cost

                        FROM product AS prd, order_details AS od
                        WHERE prd.id = od.item_id AND od.order_id= " . $attr['order_id'] . " AND od.company_id=" . $this->arrUser['company_id'] . ") AS total_purchase_cost,
                    (SELECT 
                        SUM(
                        CASE 
                            WHEN wh_bin_loc.cost_type_id = 1 -- fixed
                                THEN 
                                    wh_bin_loc.bin_cost
                            WHEN wh_bin_loc.cost_type_id = 2 -- daily
                                THEN 
                                    DATEDIFF( FROM_UNIXTIME(o.dispatch_date), FROM_UNIXTIME(wh_loc.date_received)) * wh_bin_loc.bin_cost
                            WHEN wh_bin_loc.cost_type_id = 3 -- weekly
                                THEN 
                                   DATEDIFF( FROM_UNIXTIME(o.dispatch_date), FROM_UNIXTIME(wh_loc.date_received)) * (wh_bin_loc.bin_cost/7)
                            WHEN wh_bin_loc.cost_type_id = 4 -- monthly
                                THEN 
                                    DATEDIFF( FROM_UNIXTIME(o.dispatch_date), FROM_UNIXTIME(wh_loc.date_received)) * (wh_bin_loc.bin_cost/30)
                            WHEN wh_bin_loc.cost_type_id = 5 -- annually
                                THEN 
                                    DATEDIFF( FROM_UNIXTIME(o.dispatch_date), FROM_UNIXTIME(wh_loc.date_received)) * (wh_bin_loc.bin_cost/365)
                        END
                        )
                        AS storage_cost
                        FROM 
                            `warehouse_allocation` AS wh_loc, 
                            product_warehouse_location AS prd_wh_loc, 
                            `warehouse_bin_location` AS wh_bin_loc,
                            orders AS o
                        WHERE  
                            wh_loc.type=2 AND 
                            o.id = wh_loc.order_id AND
                            wh_bin_loc.id = prd_wh_loc.`warehouse_loc_id` AND 
                            wh_loc.location = prd_wh_loc.id AND
                            wh_loc.company_id= " . $this->arrUser['company_id'] . " AND 
                            wh_loc.order_id= " . $attr['order_id'] . ") AS storage_cost";
            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                if ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $temp_attr = array();
                    $temp_attr ['type'] = 2;
                    $temp_attr ['defaults'] = 1;

                    require_once(SERVER_PATH . "/classes/Setup.php");
                    $objsetup = new Setup($this->arrUser);

                    $Row['item_additional_cost'] = $objsetup->getAllItemAdditionalCost($temp_attr,1);

                    $response['response'] = $Row;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'] = null;
                $response['ack'] = 0;
                $response['error'] = 'No record.';
            }
            return $response;
        }

        //------------------------------------------------

        /*   get all order status  by order      */

        //------------------------------------------------


        function get_all_order_status($arr_attr) {
            $this->objGeneral->mysql_clean($arr_attr);


            $order_id = $arr_attr[rec_id];

            $Sql = "SELECT id,rec_id FROM ref_order_stage_list WHERE module_id = '" . $order_id . "' && company_id='" . $this->arrUser['company_id'] . "' && user_id='" . $this->arrUser['id'] . "' &&  type=1";
            //echo $Sql; exit;

            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['id'];
                    $result['status_id'] = $Row['rec_id'];

                    $response['response'][] = $result;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
            }


            //echo "<pre>".print_r($response,true)."</pre>";exit;
            return $response;
        }

        function get_crm_salesperson_employee($arr_attr) {

            // if(!empty($arr_attr['id'])) $module_id="AND module_id = '".$arr_attr['id']."';
            //if(!empty($arr_attr[target_id])) $target_id=$arr_attr[target_id];
            $where_clause = "";


            $Sql = "SELECT c.salesperson_id 
                    FROM crm_salesperson  c
                    WHERE  type =2  AND c.company_id=" . $this->arrUser['company_id'] . " AND 
                        module_id = '" . $arr_attr['id'] . "' 
                        order by  c.id DESC ";

            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);
            $arrIds = array();
            $strIds = '';
            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $arrIds[] = $Row['salesperson_id'];
                };
            }

            $strIds = implode(',', $arrIds);
            $response = array();


            if (!empty($strIds)) {
                $Sql = "SELECT es.id  ,es.user_code,es.first_name,es.last_name,es.job_title
  ,departments.name as dname
  from employees  es
  left JOIN departments  on departments.id=es.department 
  where es.user_company=" . $this->arrUser['company_id'] . "
  " . $where_clause . " 
  and es.id in (" . $strIds . ") 
  ORDER BY es.id DESC";
                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {
                        $result = array();
                        $result['id'] = $Row['id'];
                        $result['user_code'] = $Row['user_code'];
                        $result['first_name'] = $Row['first_name'];
                        $result['last_name'] = $Row['last_name'];

                        $result['job_title'] = $Row['job_title'];
                        $result['department'] = $Row['dname'];

                        $response['response'][] = $result;
                    }
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
            } else {
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            return $response;
        }

        function delete_order($attr) {

            $Sql = "DELETE FROM orders	
                WHERE id = ".$attr['id']." 
                Limit 1 ";

            // echo $Sql;exit;
            // $RS = $this->objsetup->CSI($Sql);
            if ($attr['type'] == 0)
                $moduleForPermission = "sale_quote";
            elseif ($attr['type'] == 1)
                $moduleForPermission = "sale_order";
            elseif ($attr['type'] == 2 || $attr['type'] == 3)
                $moduleForPermission = "sale_invoice";

            $RS = $this->objsetup->CSI($Sql, $moduleForPermission, sr_DeletePermission);

            if ($this->Conn->Affected_Rows() > 0) {

                $delSql = "DELETE FROM warehouse_allocation	
                        WHERE order_id = ".$attr['id']." AND type=2";

                //echo $Sql;exit;
                $delRS = $this->objsetup->CSI($delSql);

                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['ack'] = 0;
                $response['error'] = 'Record can\'t be deleted!';
            }
            return $response;
        }

        function delete_order_item($attr) {
            // print_r($attr);exit;
            $attr = $attr['item'];
            // print_r($attr);exit;
            $this->Conn->beginTrans();
            $this->Conn->autoCommit = false;

            // $Sql = "DELETE FROM order_details   WHERE id = $attr->update_id LIMIT 1";
            $Sql = "DELETE FROM order_details 
                    WHERE id = $attr->update_id AND 
                            company_id = " . $this->arrUser['company_id']." AND
                            (SELECT type FROM orders WHERE id = $attr->order_id LIMIT 1) <=1
                            LIMIT 1";
            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($this->Conn->Affected_Rows() > 0) {
                if ($attr->item_type == "0") {
                    $delOBStock = "UPDATE opening_balance_stock AS obs
                                    SET obs.temp_allocated_qty = obs.temp_allocated_qty - (SELECT IFNULL(SUM(quantity), 0) 
                                                            FROM warehouse_allocation AS wa
                                                            WHERE
                                                                wa.sale_order_detail_id = $attr->update_id AND
                                                                wa.order_id = $attr->order_id AND 
                                                                wa.product_id = $attr->id AND 
                                                                wa.type = 2 AND
                                                                wa.sale_return_status = 0 AND
                                                                wa.opBalncID IS NOT NULL AND
                                                                wa.opBalncID = obs.id)
                                    WHERE obs.id IN (SELECT wa.opBalncID 
                                                            FROM warehouse_allocation AS wa
                                                            WHERE
                                                                wa.sale_order_detail_id = $attr->update_id AND
                                                                wa.order_id = $attr->order_id AND 
                                                                wa.product_id = $attr->id AND 
                                                                wa.type = 2 AND
                                                                wa.sale_return_status = 0 AND
                                                                wa.opBalncID IS NOT NULL)";
                    // echo $delOBStock;exit;
                    $this->objsetup->CSI($delOBStock);

                    $stkSql = "DELETE FROM warehouse_allocation 
                                WHERE 
                                order_id = $attr->order_id AND 
                                product_id = $attr->id AND
                                sale_return_status = 0 AND
                                sale_order_detail_id = $attr->update_id AND
                                type = '2'";
                    // echo $stkSql;exit;
                    $this->objsetup->CSI($stkSql);
                }
                $this->Conn->commitTrans();
                $this->Conn->autoCommit = true;
                $response['ack'] = 1;
                $response['error'] = NULL;
                
            } else {
                
                $response['ack'] = 0;
                $response['error'] = "Record can't be deleted!";
            }

            return $response;
        }

        function update_grand_total($attr)
        {
            $table = ($attr['type'] == 1) ? 'orders' : 'return_orders';

            $grand_total            = ($attr['grand_total'] != '') ? $attr['grand_total'] : 0;
            $grand_total_converted  = ($attr['grand_total_converted'] != '') ? $attr['grand_total_converted'] : 0;
            $net_amount             = ($attr['net_amount'] != '') ? $attr['net_amount'] : 0;
            $net_amount_converted   = ($attr['net_amount_converted'] != '') ? $attr['net_amount_converted'] : 0;
            $items_net_val          = ($attr['items_net_val'] != '') ? $attr['items_net_val'] : 0;
            $items_net_vat          = ($attr['items_net_vat'] != '') ? $attr['items_net_vat'] : 0;
            $items_net_discount     = ($attr['items_net_discount'] != '') ? $attr['items_net_discount'] : 0;
            $total_discount         = ($attr['total_discount'] != '') ? $attr['total_discount'] : 0;
            $order_id               = ($attr['order_id'] != '') ? $attr['order_id'] : 0;
            $currency_rate          = ($attr['currency_rate'] != '' && $attr['currency_rate'] > 0) ? $attr['currency_rate'] : '1';
            $tax_amount             = ($attr['tax_amount'] != '' && $attr['tax_amount'] > 0) ? $attr['tax_amount'] : '0';
            $converted_currency_id  = ($attr['converted_currency_id'] != '' && $attr['converted_currency_id'] > 0) ? $attr['converted_currency_id'] : '0';


            $this->Conn->beginTrans();
            $this->Conn->autoCommit = false;

            $Sql = "UPDATE $table SET	
                            grand_total='$grand_total',
                            grand_total_converted='$grand_total_converted',
                            net_amount = '$net_amount',
                            tax_amount = '$tax_amount',
                            net_amount_converted = '$net_amount_converted',
                            items_net_total = '$items_net_val',
                            items_net_vat = '$items_net_vat',
                            items_net_discount = '$items_net_discount',
                            total_discount = '$total_discount',
                            currency_rate =$currency_rate,
                            converted_currency_id =$converted_currency_id,
                            offer_date=" . $this->objGeneral->convert_date($attr['offer_date']) . "
                    WHERE id = $order_id";
            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);
            
            $RS = $this->objsetup->CSI("CALL sr_Checksum_orders_update_Trigger_SP('" . $this->arrUser['company_id'] . "', '" . $this->arrUser['id'] . "', $order_id) ");
            
            $this->Conn->commitTrans();
            $this->Conn->autoCommit = true;

            $response['ack'] = 1;
            return $response;
        }

        function delete_multiple_order_item($attr) {
            if (strlen($attr['delete_ids']) > 0) {
                $Sql = "DELETE FROM order_details WHERE id IN ($attr[delete_ids])";
                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($this->Conn->Affected_Rows() > 0) {
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                    /* if($attr->item_type == "0")
                      {
                      $stkSql = "DELETE FROM warehouse_allocation
                      WHERE
                      order_id = $attr->order_id AND
                      product_id = $attr->id AND
                      sale_return_status = 0 AND
                      sale_order_detail_id = $attr->update_id AND
                      type = '2'";
                      // echo $stkSql;exit;
                      $this->objsetup->CSI($stkSql);
                      } */
                } else {
                    $response['ack'] = 0;
                    $response['error'] = "Record can't be deleted!";
                }
            } else {
                $response['ack'] = 1;
                $response['error'] = NULL;
            }
            return $response;
        }

        //stock entry by third party stock check is nULL   add entry in warehouse allocation  allocated_external=1
        function add_stock_allocated_external($attr) {
            // echo "<pre>"; print_r($attr); exit;

            foreach ($attr['items'] as $item) {

                $data_pass = "tst.order_id='".$attr['order_id']."' AND    tst.product_id='$item->id' AND
									 warehouse_id= '" . $item->warehouses->id . "' ";
                $total = $this->objGeneral->count_duplicate_in_sql('warehouse_allocation', $data_pass, $this->arrUser['company_id']);
                if ($total == 0) {
                    $SqlQuote = "INSERT INTO warehouse_allocation SET
						status=1,quantity='$item->qty',type=2,allocated_external=1,batch_no='$item->description'
						,warehouse_id= '" . $item->warehouses->id . "', bl_shipment_no='$item->description',container_no='$item->description'	,date_received='" . $this->objGeneral->convert_date($attr[order_date]) . "',prod_date='" . $this->objGeneral->convert_date($attr[order_date]) . "',use_by_date='" . $this->objGeneral->convert_date($attr[order_date]) . "',unit_measure_id='" . $item->units->id . "',unit_measure_qty='" . $item->units->quantity . "',unit_measure_name='" . $item->units->name . "',primary_unit_id='" . $item->default_units->id . "',primary_unit_qty=1,primary_unit_name='" . $item->default_units->name . "',sale_return_status=0,sale_status =2
	,order_date='" . $this->objGeneral->convert_date($attr['or_date']) . "',order_id='".$attr['order_id']."',product_id='$item->id'	,company_id='" . $this->arrUser['company_id'] . "' ,user_id='" . $this->arrUser['id'] . "'		";
                    //		echo $SqlQuote."<hr>"; exit;
                    $RS = $this->objsetup->CSI($SqlQuote);
                }
            }

            return true;
        }

        //fifo account entry

        function fifo_account_entry($attr) {

            //if($attr['order_type'] =='sale') if($attr['order_type'] =='avg')

            $sql_acc_entry = "INSERT INTO account_entry(amount,module_id,gl_id,gl_code,tran_type,module_type,costing_method,status,user_id,order_date,company_id,currency_id
,convert_amount,item_id) VALUES ";

            $rec = array();
            $rec2 = array();
            //multi update query
            $sql_update_invoice = " ";
            $count_std = "";
            //$sql_update_invoice  = "UPDATE srm_invoice_detail SET  sold_qty =CASE id ";

            $count_fifo = $count_avg = $enter_item = $count_fifo_sum = $count_item_count = 0;

            foreach ($attr['selecteitem'] as $item) {
//	c.item_gl,c.item_gl_code

                if ($item->item_type == 0) {
                    $sql_total = "SELECT  pc.description, pc.costing_method_id as  cost_method,pc.standard_purchase_cost	,	(SELECT IFNULL( SUM(c.qty) - SUM(c.sold_qty),0)
								FROM costing_account_entry c 	 where  c.type=1 and c.cost_type=1 and c.item_id  =	pc.id
								order by  c.create_date ASC)  as total_sum	FROM product pc where    pc.id=  '" . $item->id . "' Limit 1 	";
                    $rs_count = $this->objsetup->CSI($sql_total);
                    // echo $sql_total;exit;
                    //print_r($rs_count);
                    //Gl Item Discount Entry
                    /* 		if ( $item->discount>0 && $attr['order_type'] == 'sale')		{
                      $enter_item++;
                      $rec2 = $this->set_discount_entry($item, $sql_acc_entry, $rs_count,  $attr);
                      } */
                    $description = $rs_count->fields['description'];
                    $cost_method = $rs_count->fields['cost_method'];
                    $standard_purchase_cost = $rs_count->fields['standard_purchase_cost'];
                    //avg 2 std 4 //fifo 1
                    $count_fifo_sum = 0;

                    if ($cost_method == 1) {
                        if ($attr['order_type'] == 'sale') {
                            //echo $count_fifo_sum .'<'. $item->qty; exit;
                            $count_fifo_sum = $rs_count->fields['total_sum'];
                            // if ($count_fifo_sum < $item->qty) {
                            //    $response['ack'] = 0;
                            //   $response['error'] = "(" . $description . ') Avilable Stock is less than Order Quantity  ';
                            //   return $response;
                            //   exit;
                            // }

                            $sql_frm_fifo = "SELECT c.price as unit_price1,(c.qty-c.sold_qty) as purchase_qty,c.id,c.convert_price as unit_price2 
,c.currency_id,c.sold_qty ,c.convertion_currency_price		
FROM costing_account_entry c 							
where   (c.qty-c.sold_qty) >0	 and c.item_id=$item->id and c.cost_type=1 order by  c.create_date ASC";
                            $rs_count3 = $this->objsetup->CSI($sql_frm_fifo);
                            $rec = $this->set_fifo_costing_method($item->id, $item->qty, $sql_acc_entry, $sql_update_invoice, 0, $rs_count3, $attr);
                        } else if ($attr['order_type'] == 'purchase') {

                            $convert_price = 0;
                            if (!empty($attr['count_converted'])) {
                                $convert_price = $this->objGeneral->get_convert_price($item->standard_price, $attr['currency_id'], $attr['or_date'],
                                        $this->arrUser['company_id']);
                                $convertion_currency_price = $item->qty * $item->standard_price * $this->objGeneral->get_convert_price(0,
                                                $attr['currency_id'], $attr['or_date'], $this->arrUser['company_id']);

                                if ($convert_price < 0 || empty($convert_price)) {
                                    $response['ack'] = 0;
                                    $response['error'] = "Currency Rate is Not Avilable in This Invoice Date  ";
                                    return $response;
                                    exit;
                                }
                            } else {
                                $convertion_currency_price = $item->qty * $item->standard_price;
                            }


                            $Sql_po_fifo = "INSERT INTO costing_account_entry(module_id,type,qty,price,total_cost,sold_qty,cost_type,status,user_id,create_date,company_id
 ,currency_id,convert_price,item_id,convertion_currency_price)
 VALUES($attr[module_id] ,$attr[main_type] ,'" . $item->qty . "' ,'" . $item->standard_price . "'	,'" . $item->qty * $item->standard_price . "'
 ,'" . 0 . "','" . $cost_method . "',1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "' 
 ," . $this->arrUser['company_id'] . "	,'".$attr['currency_id']."' ,'$convert_price','$item->id','$convertion_currency_price')";

                            $RS_p_fifo = $this->objsetup->CSI($Sql_po_fifo);
                        }
                        if ($this->Conn->Affected_Rows() > 0)
                            $count_fifo++;
                    } else if ($cost_method == 2) {

                        $sql_total = "SELECT   c.* FROM costing_account_entry  c  	where c.cost_type=2		AND c.item_id=  '" . $item->id . "'  		order by  c.id Desc  Limit 1 	";
                        $rs_countavg = $this->objsetup->CSI($sql_total);

                        $cummulative_qty = $rs_countavg->fields['cummulative_qty'];
                        $cummulative_cost_orignal = $rs_countavg->fields['cummulative_cost'];
                        $cummulative_cost_cnv = $rs_countavg->fields['convert_cummulative_cost'];

                        $orignal_price = $item->standard_price;
                        $convert_price = $item->standard_price; //$item->qty * $item->standard_price;

                        if ((!empty($attr['count_converted']))) {
                            $convert_price = $this->objGeneral->get_convert_price($item->standard_price, $attr['currency_id'], $attr['or_date'],
                                    $this->arrUser['company_id']);

                            if ($convert_price < 0 || empty($convert_price)) {
                                $response['ack'] = 0;
                                $response['error'] = "Currency Rate is Not Avilable in This Invoice Date  ";
                                return $response;
                                exit;
                            }
                        }


                        if ($attr['sold_qty'] == 0) {
                            $sold_qty = 0;
                            $total_cost = $item->qty * $orignal_price;
                            $cummulative_qty = $cummulative_qty + $item->qty;
                            $cummulative_cost_orignal = $cummulative_cost_orignal + $total_cost;
                        } else if ($attr['sold_qty'] == 1) {
                            $convert_price = $rs_countavg->fields['convert_avg_cost']; //$rs_countavg->fields['avg_cost'];
                            //		if ((!empty($attr['count_converted']))) $convert_price = $rs_countavg->fields['convert_avg_cost'];

                            $total_cost = $item->qty * $orignal_price;
                            $sold_qty = $item->qty;
                            $cummulative_qty = $cummulative_qty - $item->qty;
                            $cummulative_cost_orignal = $cummulative_cost_orignal - $total_cost;
                        }

                        $avg_cost = $cummulative_cost_orignal / $cummulative_qty;
                        $convert_total_cost = $item->qty * $convert_price;

                        $convert_cummulative_cost = $cummulative_cost_cnv + $convert_total_cost;

                        if ($attr['sold_qty'] == 1)
                            $convert_cummulative_cost = $cummulative_cost_cnv - $convert_total_cost;

                        $convert_avg_cost = $convert_cummulative_cost / $cummulative_qty;
                        $convertion_currency_price = $total_cost;


                        $Sql_avg = "INSERT INTO costing_account_entry(module_id,type,qty,price,total_cost, cummulative_qty,cummulative_cost,avg_cost,sold_qty,cost_type,status,user_id,create_date,company_id,currency_id,item_id,convert_price,convert_total_cost,convert_cummulative_cost,convert_avg_cost,convertion_currency_price) 
												VALUES($attr[module_id] ,$attr[main_type] ,'" . $item->qty . "' ,'" . $orignal_price . "' 
												,'" . $total_cost . "','" . $cummulative_qty . "','" . $cummulative_cost_orignal . "','" . $avg_cost . "','" . $sold_qty . "'		 	,'" . $cost_method . "',1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "'		," . $this->arrUser['company_id'] . "	,'".$attr['currency_id']."' ,'$item->id',
	'$convert_price','$convert_total_cost','$convert_cummulative_cost','$convert_avg_cost',	'$convertion_currency_price' )";
                        //	echo   $Sql_avg;exit;
                        $RS_avf = $this->objsetup->CSI($Sql_avg);

                        if ($this->Conn->Affected_Rows() > 0)
                            $count_avg++;
                        if ($attr['order_type'] == 'sale') {
                            $sql_frm_fifo = "SELECT c.qty * avg_cost as amount  ,c.id	,c.qty *c.convert_avg_cost as con_amount FROM costing_account_entry  c	where c.cost_type=2 AND c.item_id=  '" . $item->id . "' 	order by  c.id Desc Limit 1";
                            $rs_countsentry = $this->objsetup->CSI($sql_frm_fifo);
                            $rec = $this->set_average_costing_method($item->id, $sql_acc_entry, $rs_countsentry, $attr);
                        }
                    } else if ($cost_method == 4) {

                        if ($standard_purchase_cost > 0 && $attr['order_type'] == 'sale') {

                            $amount = $item->qty * $standard_purchase_cost;
                            $convert_amount = $amount;

                            if (!empty($attr['count_converted'])) {
                                $convert_amount = $this->objGeneral->get_convert_price($amount, $attr['currency_id'], $attr['or_date'],
                                        $this->arrUser['company_id']);
                                if ($convert_amount < 0 || empty($convert_amount)) {
                                    $response['ack'] = 0;
                                    $response['error'] = "Currency Rate is Not Avilable in This Invoice Date  ";
                                    return $response;
                                    exit;
                                }
                            }


                            $rec = $this->set_standard_costing($item->id, $sql_acc_entry, $amount, $attr, $convert_amount);
                            $count_std++;
                        }
                    }
                }
                $count_item_count++;
            }

            if (($count_fifo || $count_avg || $count_std || $count_item_count) > 0) {
                //if (count($rec) > 0) {
                //$ids = substr($rec['ids'], 0, -1);
                //$sql_update_invoice  = $rec['sql_update_invoice']. "END WHERE id IN ($ids)";
                //echo $sql_update_invoice; exit;
                //$sql_update_invoice = $this->objsetup->CSI($sql_update_invoice);
                //$sql_acc_entry = substr($rec['sql_acc_entry'], 0, -1);
                //echo $sql_acc_entry;exit;
                //  $RS = $this->objsetup->CSI($sql_acc_entry);
                // }

                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['ack'] = 0;
                $response['error'] = 'Record Not Inserted ';
            }

            return $response;
        }

        function set_standard_costing($itemid, $sql_acc_entry, $amount, $attr, $convert_amount) {
            $costing_method = 4;
            $trans_type_cgs = 2; //debit
            $trans_type_sb = 1; //credit
            $module_type = 2;
            if ($attr['order_return'] == 'true') {
                $trans_type_cgs = 1; //credit
                $trans_type_sb = 2; //debit
                $module_type = 4;
            }

            $sql_acc_entry1 = $sql_acc_entry . "( '" . $amount . "' , '" . $attr['id'] . "','" . $attr['cost_gold'] . "', '" . $attr['cost_gold_code'] . "' 
        ,'" . $trans_type_cgs . "', '" . $module_type . "' ,'" . $costing_method . "' ,1, " . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "',
" . $this->arrUser['company_id'] . ",'" . $attr['currency_id'] . "','" . $convert_amount . "'	,'" . $itemid . "' )";
            $RS = $this->objsetup->CSI($sql_acc_entry1);

            $sql_acc_entry2 = $sql_acc_entry . "( '" . $amount . "' , '" . $attr['id'] . "','" . $attr['stock_balnce'] . "', '" . $attr['stock_balnce_code'] . "' 
        ,'" . $trans_type_sb . "' ,'" . $module_type . "' , '" . $costing_method . "' ,1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "'
        ," . $this->arrUser['company_id'] . ",'" . $attr['currency_id'] . "','" . $convert_amount . "'	,'" . $itemid . "' )";
            $RS = $this->objsetup->CSI($sql_acc_entry2);

            // return true;
            //  if ($count > 0) return		$rec['sql_acc_entry'] = $sql_acc_entry;
        }

        function set_average_costing_method($itemid, $sql_acc_entry, $rs_countsentry, $attr) {

            $costing_method = 2;
            $trans_type_cgs = 2; //debit
            $trans_type_sb = 1; //credit
            $module_type = 2;
            if ($attr['order_return'] == 'true') {
                $trans_type_cgs = 1; //credit
                $trans_type_sb = 2; //debit
                $module_type = 4;
            }
            $amount = $rs_countsentry->fields['amount'];
            $convert_amount = $rs_countsentry->fields['con_amount'];


            $sql_acc_entry1 = $sql_acc_entry . "( '" . $amount . "' , '" . $attr['id'] . "','" . $attr['cost_gold'] . "', '" . $attr['cost_gold_code'] . "' , '" . $trans_type_cgs . "' 
        , '" . $module_type . "' ,'" . $costing_method . "' ,1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "',
				" . $this->arrUser['company_id'] . ",'" . $attr['currency_id'] . "','" . $convert_amount . "'		,'" . $itemid . "' )";
            $RS = $this->objsetup->CSI($sql_acc_entry1);
            $sql_acc_entry2 = $sql_acc_entry . "( '" . $amount . "' , '" . $attr['id'] . "','" . $attr['stock_balnce'] . "', '" . $attr['stock_balnce_code'] . "' 
        , '" . $trans_type_sb . "' , '" . $module_type . "' ,'" . $costing_method . "' ,1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "'," . $this->arrUser['company_id'] . ",'" . $attr['currency_id'] . "','" . $convert_amount . "'	,'" . $itemid . "' )";
            $RS = $this->objsetup->CSI($sql_acc_entry2);
        }

        function set_fifo_costing_method($itemid, $itemqty, $sql_acc_entry, $sql_update_invoice, $entry, $rs_count3, $attr) {
            $costing_method = 1;
            $trans_type_cgs = 2; //debit
            $trans_type_sb = 1; //credit
            $module_type = 2;
            if ($attr['order_return'] == 'true') {
                $trans_type_cgs = 1; //credit
                $trans_type_sb = 2; //debit
                $module_type = 4;
            }

            $sum_sold_qty = 0;


            $count = 0;
            if ($rs_count3->RecordCount() > 0) {
                while ($Row = $rs_count3->FetchRow()) {
                    $qty = 0;

                    if ($entry == 0)
                        $sold_qty = $itemqty;
                    else
                        $sold_qty = $entry;

                    $purchase_qty = $itemqty;
                    $entry = $sold_qty - $Row['purchase_qty'];

                    if ($entry > 0)
                        $qty = $Row['purchase_qty'];
                    else if ($entry == 0) {
                        // if ($sum_sold_qty == $purchase_qty) break;
                        $qty = $Row['purchase_qty'];
                        // $qty = 0 ;
                    } else {
                        if ($sum_sold_qty == $purchase_qty)
                            break;
                        $qty = $sold_qty;
                    }
                    $sum_sold_qty += $qty;

                    if ($qty > 0) {
                        //$unit_price=	$this->objGeneral->get_convert_price($Row['unit_price2'],  $attr['currency_id'],$attr['or_date'],$this->arrUser['company_id']);

                        if (!empty($attr['count_converted']))
                            $unit_price = $Row['unit_price2'];
                        else
                            $unit_price = $Row['unit_price1'];

                        /* ------------------Credit Note--------------------- */
                        if ($attr['order_return'] == 'true') {

                            $prodDetail = $this->ObjCS->get_product_by_id($itemid);

                            $prodDet['edate'] = $prodDetail['response']['avg_cost_edate'];
                            $prodDet['sdate'] = $prodDetail['response']['avg_cost_sdate'];
                            $prodDet['product_id'] = $itemid;

                            $avgPrice = $this->ObjCS->get_item_avg_overall_po($prodDet);
                            // print_r($avgPrice['avg']);
                            if ($avgPrice['ack'] == '1' && $avgPrice['avg'] > 0) {
                                $amount = $itemqty * $avgPrice['avg'];
                                $convert_amount = $amount;
                            } else {
                                $amount = $itemqty * $unit_price;
                                $convert_amount = $amount;
                            }
                        } /* -----------------*Order--------------------- */ else {
                            $amount = $itemqty * $unit_price;
                            $convert_amount = $amount;
                        }

                        if (!empty($attr['count_converted']))
                            $convert_amount = $this->objGeneral->get_convert_price($amount, $attr['currency_id'], $attr['or_date'],
                                    $this->arrUser['company_id']);
                        // echo $convert_amount;
                        // echo  "( '" . $amount . "' , '" . $attr['id'] . "','" . $attr['cost_gold'] . "', '" . $attr['cost_gold_code'] . "' ,".$trans_type_cgs." , 6,1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "',		" . $this->arrUser['company_id'] . ",'" . $attr['currency_id'] . "','" . $convert_amount . "'		,'" . $itemid . "' )";

                        $sql_acc_entry1 = $sql_acc_entry . "( '" . $amount . "' , '" . $attr['id'] . "','" . $attr['cost_gold'] . "', '" . $attr['cost_gold_code'] . "' 
                    ," . $trans_type_cgs . " , '" . $module_type . "' ,'" . $costing_method . "' ,1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "',		" . $this->arrUser['company_id'] . ",'" . $attr['currency_id'] . "','" . $convert_amount . "'		,'" . $itemid . "' )";
                        $RS = $this->objsetup->CSI($sql_acc_entry1);

                        $sql_acc_entry2 = $sql_acc_entry . "( '" . $amount . "' , '" . $attr['id'] . "','" . $attr['stock_balnce'] . "', '" . $attr['stock_balnce_code'] . "' 
                    ," . $trans_type_sb . " , '" . $module_type . "' ,'" . $costing_method . "' , 1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "'," . $this->arrUser['company_id'] . ",'" . $attr['currency_id'] . "'	,'" . $convert_amount . "'	,'" . $itemid . "' )";
                        $RS = $this->objsetup->CSI($sql_acc_entry2);
                        $count++;
                        //$ids .= $Row[id] . ',';
                        //$sql_update_invoice .= " WHEN $Row[id] THEN  '" . $qty  . "' ";

                        $sql_update_fifoid = " UPDATE costing_account_entry SET sold_qty =sold_qty + " . $itemqty . " 	where id =".$Row['id']." and type=1 LIMIT 1";
                        $RS = $this->objsetup->CSI($sql_update_fifoid);
                    }
                }
            }
            //	if ($count > 0)  return true;
            //return		$rec['sql_acc_entry'] = $sql_acc_entry;
            //$rec['ids'] =$ids;
            //$rec['sql_update_invoice'] =$sql_update_invoice;
            //if($entry>0)  $this->set_item($itemid,$itemqty, $Sql, $sql_update_invoice,$entry,$rs_count);
            // return true;
            //  if ($count > 0) return		$rec['sql_acc_entry'] = $sql_acc_entry;
        }

        function set_discount_entry($item, $sql_acc_entry_discount, $rs_count, $attr) {

            if ($rs_count->fields['item_gl'] > 0) {
                $accountid = $rs_count->fields['item_gl'];
                $accountcode = $rs_count->fields['item_gl_code'];
            } else {
                $accountid = $attr[discount_acc];
                $accountcode = $attr[discount_acc_code];
            }
            $convert_amount = $item->discount;

            if (!empty($attr['count_converted']))
                $convert_amount = $this->objGeneral->get_convert_price($item->discount, $attr['currency_id'], $attr['or_date'],
                        $this->arrUser['company_id']);

            $sql_acc_entry_discount1 = $sql_acc_entry_discount . "( '" . $item->discount . "' , '" . $attr['id'] . "'
								,'" . $accountid . "', '" . $accountcode . "' ,2,5,1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "',	" . $this->arrUser['company_id'] . ",'" . $attr['currency_id'] . "','" . $convert_amount . "'		,'" . $item->id . "' )";
            $RS = $this->objsetup->CSI($sql_acc_entry_discount1);

            $sql_acc_entry_discount2 = $sql_acc_entry_discount . "( '" . $item->discount . "' , '" . $attr['id'] . "'	,'" . $accountid . "', '" . $accountcode . "' ,1,5,1," . $this->arrUser['id'] . ",'" . $this->objGeneral->convert_date($attr['invoce_date']) . "',
							" . $this->arrUser['company_id'] . ",'" . $attr['currency_id'] . "','" . $convert_amount . "'		,'" . $item->id . "' )";
            $RS = $this->objsetup->CSI($sql_acc_entry_discount2);


            // return true;
            //  if ($count > 0) return		$rec['sql_acc_entry'] = $sql_acc_entry;
        }

        function delete_return_order_item($attr) {
            //echo "<pre>";	print_r($attr);exit;
            $this->objGeneral->mysql_clean($attr);

            $volume = 0;
            $volume_unit = '';
            $weight = 0;
            $weightunit = '';
            $weight_permission = 0;  
            $volume_permission = 0;  

            $Sql4 = "SELECT  SUM(uomsetup.volume * inv.qty) AS volume,
                            SUM((CASE WHEN uomsetup.weightunit = 1 THEN (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2)) / 1000
                                ELSE (ROUND(uomsetup.netweight,2) + ROUND(uomsetup.packagingweight,2))
                                END)* inv.qty) AS weight,
                            'cm3' AS volume_unit,
                            'kg' AS weightunit,
                            (SELECT weight_permission FROM return_orders 
                            LEFT JOIN items_weight_setup AS w ON ((w.title = 'Credit Note' AND return_orders.type=1) OR 
                                    (w.title = 'Posted Credit Note' AND return_orders.type=2) ) AND 
                        return_orders.company_id = w.company_id WHERE return_orders.id= '".$attr['order_id']."') AS weight_permission,
                            (SELECT volume_permission FROM return_orders 
                            LEFT JOIN items_weight_setup AS w ON ((w.title = 'Credit Note' AND return_orders.type=1) OR 
                                    (w.title = 'Posted Credit Note' AND return_orders.type=2) ) AND 
                        return_orders.company_id = w.company_id WHERE return_orders.id= '".$attr['order_id']."') AS volume_permission
                    FROM return_order_details AS inv
                    LEFT JOIN units_of_measure_setup AS uomsetup ON inv.unit_measure_id = uomsetup.id AND inv.type=0
                    WHERE inv.order_id='".$attr['order_id']."' ";
            //echo $Sql4."<hr>"; exit;

            $rs4 = $this->objsetup->CSI($Sql4);

            if ($rs4->RecordCount() > 0){
                $volume = $rs4->fields['volume'];
                $volume_unit = $rs4->fields['volume_unit'];
                $weight = $rs4->fields['weight'];
                $weightunit = $rs4->fields['weightunit'];
                $weight_permission = $rs4->fields['weight_permission'];
                $volume_permission = $rs4->fields['volume_permission'];
            }

            // $Sql = "DELETE FROM return_order_details WHERE id = ".$attr['update_id']." ";
            $Sql = "DELETE FROM return_order_details 
                        WHERE id = ".$attr['update_id']."  AND 
                            company_id = " . $this->arrUser['company_id']." AND
                            (SELECT type FROM return_orders WHERE id = ".$attr['order_id']." LIMIT 1) =1
                            LIMIT 1";
            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($this->Conn->Affected_Rows() > 0) {
                $response['ack'] = 1;
                $response['error'] = NULL;
                // WE ONLY UPDATE temp_allocated_qty_returned AT THE TIME OF POSTING SO DON'T NEED TO UPDATE IT ON CREDIT NOTE ITEM DELTE
                /* $delOBStock = "UPDATE opening_balance_stock AS obs
                            SET obs.temp_allocated_qty_returned = obs.temp_allocated_qty_returned - (SELECT IFNULL(SUM(quantity), 0) 
                                                    FROM warehouse_allocation AS wa
                                                    WHERE
                                                        wa.sale_order_detail_id = ".$attr['update_id']." AND
                                                        wa.order_id = ".$attr['order_id']." AND 
                                                        wa.product_id = ".$attr['id']." AND 
                                                        wa.type = 2 AND
                                                        wa.sale_return_status = 1 AND
                                                        wa.opBalncID IS NOT NULL AND
                                                        wa.opBalncID = obs.id)
                            WHERE obs.id IN(SELECT wa.opBalncID 
                                                    FROM warehouse_allocation AS wa
                                                    WHERE
                                                        wa.sale_order_detail_id = ".$attr['update_id']." AND
                                                        wa.order_id = ".$attr['order_id']." AND 
                                                        wa.product_id = ".$attr['id']." AND 
                                                        wa.type = 2 AND
                                                        wa.sale_return_status = 1 AND
                                                        wa.opBalncID IS NOT NULL)";
                $this->objsetup->CSI($delOBStock); */

                $stkSql = "DELETE FROM warehouse_allocation
				        WHERE 
                        sale_order_detail_id = ".$attr['update_id']." AND
                        order_id = ".$attr['order_id']." AND 
                        product_id = ".$attr['id']." AND 
                        TYPE = 2 AND 
                        sale_return_status = 1";  // already checked stock deallocation, use order_detail_id
                // echo $stkSql; exit;
                $this->objsetup->CSI($stkSql);
            } else {
                $response['ack'] = 0;
                $response['error'] = "Record can't be deleted!";
            }

            $response['volume'] = $volume;
            $response['volume_unit'] = $volume_unit;
            $response['weight'] = $weight;
            $response['weightunit'] = $weightunit;
            $response['weight_permission'] = $weight_permission;
            $response['volume_permission'] = $volume_permission;

            return $response;
        }

        function runDbQuery($query) {
            $result[] = array();
            $dbResponse = $this->objsetup->CSI($query);
            // if ($dbResponse->RecordCount() > 0) {
            while ($Row = $dbResponse->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $result[] = $Row;
            };
            // }
            return $result;
        }

        function generateTargetGraph($attr) {

            // print_r($attr);exit;
            $selectedProducts = $attr['selectItems'];
            foreach ($selectedProducts as $prod) {
                $item_id_array[] = $prod->id;
            }
            // print_r($item_id_array);exit;
            $starting_date = "FROM_UNIXTIME(" . $attr['starting_date'] . ")";
            $SqlTarget = "SELECT ROUND(SUM(od.qty * od.unit_price)) as Value, YEAR(FROM_UNIXTIME(offer_date)) as Year, MONTH(FROM_UNIXTIME(offer_date)) as Month, o.sale_person as Salesperson
                FROM order_details AS od 
                LEFT JOIN orders AS o ON o.id = od.order_id
                WHERE item_id IN (" . implode(',', $item_id_array) . ") 
                AND FROM_UNIXTIME(o.posting_date) >= DATE_SUB(" . $starting_date . ", INTERVAL 12 MONTH)
                AND o.sale_person_id=" . $attr['salesperson_id'] . "
                GROUP BY MONTH(FROM_UNIXTIME(offer_date))
                ORDER BY YEAR, MONTH ASC ";
            // echo $SqlTarget;exit;

            $RS = $this->objsetup->CSI($SqlTarget);

            $SqlActual = "SELECT ROUND(SUM(od.qty * od.unit_price)) as Value, YEAR(FROM_UNIXTIME(offer_date)) as Year, MONTH(FROM_UNIXTIME(offer_date)) as Month, o.sale_person as Salesperson
                FROM order_details AS od 
                LEFT JOIN orders AS o ON o.id = od.order_id
                WHERE item_id IN (" . implode(',', $item_id_array) . ")
                AND o.posting_date >= " . $attr['starting_date'] . "
                AND o.sale_person_id=" . $attr['salesperson_id'] . "
                GROUP BY MONTH(FROM_UNIXTIME(offer_date))
                ORDER BY YEAR, MONTH ASC ";
            // echo $SqlActual;exit;

            $RS2 = $this->objsetup->CSI($SqlActual);

            if ($RS->RecordCount() > 0 && $RS2->RecordCount() > 0) {
                $response['response'] = self::runDbQuery($SqlTarget);
                $response['response2'] = self::runDbQuery($SqlActual);
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            return $response;
        }



        function create_zip($files = array(),$destination = '',$overwrite = false) {
            // error_reporting(E_ALL) ;
            // ini_set('display_errors', '1');
            //if the zip file already exists and overwrite is false, return false
            if(file_exists($destination)) {
              
                    unlink($destination);

                }
            //vars
            $valid_files = array();
            //if files were passed in...
            if(is_array($files)) {
                //cycle through each file
                foreach($files as $file) {
                    //make sure the file exists
                    if(file_exists($file)) {
                        $valid_files[] = $file;
                    }
                }
            }
            //if we have good files...
            if(count($files)) {
                //create the archive
                $zip = new ZipArchive();
                if($zip->open($destination,$overwrite ? ZIPARCHIVE::OVERWRITE : ZIPARCHIVE::CREATE) !== true) {
                    return false;
                }
                //add the files
                // "http://localhost/silverowReporting/api/setup/invoice.pdf"


                foreach($files as $file) {
                    $existingFileNameArr = explode(".",basename($file)) ;
                    $newFileName = $existingFileNameArr[1].".". $existingFileNameArr[3];

                    // print_r($file);

                    $zip->addFromString($newFileName,file_get_contents($file));
                }
                //debug
                //echo 'The zip archive contains ',$zip->numFiles,' files with a status of ',$zip->status;
                
                //close the zip -- done!
                $zip->close();
                
                //check to make sure the file exists
                return $destination;
            }
            else
            {
                return false;
            }
        }

        function bulkPrintToZip ($files, $exportFile){
            
           $fileName =  $exportFile. '.zip';
      
            $result = $this->create_zip($files, APP_PATH . "upload/attachments/". $fileName , false);
    
            return $result;
        }

        /*
            this function fetches the Customer's last activity in terms of SO, SQ or SI
            @params : customerId 
            developer : Rizwan Haider
            PBI Link : https://trello.com/c/ghiKdJkJ/2338-customer-last-order

        */
        function customerLastOrder ($attr){
            
            $this->objGeneral->mysql_clean($attr);
            $Sql = "SELECT id, type, sale_quote_code, sale_order_code, sale_invioce_code,
                    (CASE 
                        WHEN type = 0 THEN 
                            offer_date
                        ELSE
                            posting_date
                    END) AS posting_date
                         FROM orders WHERE company_id= ".$this->arrUser['company_id']." AND sell_to_cust_id = ". $attr['customerId'] ." AND STATUS = 1 
                    ORDER BY (CASE WHEN type = 0 THEN offer_date ELSE posting_date END) DESC, id DESC LIMIT 1";
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['id'];
                    $result['type'] = $Row['type'];
                    $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                    
                    if($Row['type'] == 0){
                        $result['code'] = $Row['sale_quote_code'];
                        $result['typeName'] = "SQ";
                    } else if($Row['type'] == 1){
                        $result['code'] = $Row['sale_order_code'];
                        $result['typeName'] = "SO";
                    }else if($Row['type'] == 2 || $Row['type'] == 3){
                        $result['code'] = $Row['sale_invioce_code'];
                        $result['typeName'] = "SI";
                    }                        
                    $response['response'][] =$result;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            } 

            else {
                $response['ack'] = 0;
            }

            return $response;
        }

    function customer_popup($attr)
    {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $str_where = '';
        $order_type = '';
        $defaultFilter = false;
        $response = array();
        //print_r($attr);exit;
        $where_clause = $this->objGeneral->flexiWhereRetriever("c.", $attr, $fieldsMeta);
        $order_clause = $this->objGeneral->flexiOrderRetriever("c.", $attr, $fieldsMeta);
        if (empty($where_clause)) {
            $defaultFilter = true;
            $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("CustomerModal", $this->arrUser);
        }

         $upToDate = date("Y-m-d"); 

        $account_type = (isset($attr['account_type']) && $attr['account_type'] == 2) ? "1" : "2, 3";
        $code_check = (isset($attr['account_type']) && $attr['account_type'] == 2) ? " c.crm_code " : " c.customer_code ";

        $Sql = "SELECT * FROM (SELECT  c.id,
                                    c.crm_code,
                                    (CASE WHEN c.type = 1 THEN c.crm_code ELSE c.customer_code END) AS customer_code,
                                    c.region,
                                    c.segment,
                                    c.buying_group,
                                    c.name,
                                    c.primaryc_name, 
                                    c.primary_city,
                                    c.primary_country,
                                    c.primary_postcode,
                                    c.phone,
                                    c.type,
                                    c.address_1,
                                    c.address_2,
                                    c.customer_posting_group,
                                    c.crm_segment_id,
                                    c.buying_grp,
                                    c.region_id,
                                    c.country_id,
                                    c.turnover
                from sr_crm_listing  c
                LEFT JOIN bank_account b ON b.id=c.bank_account_id
                where  c.type IN (".$account_type.") AND $code_check  IS NOT NULL AND  c.statusp = 'Active' AND
                      c.company_id=" . $this->arrUser['company_id'] . " GROUP BY c.id ) as c WHERE 1  " . $where_clause . " ";
        
        if($account_type == "1")
            $Sql = $this->objsetup->whereClauseAppender($Sql, 40);
        else
            $Sql = $this->objsetup->whereClauseAppender($Sql, 48);

        $total_limit = pagination_limit;

        //echo $total_limit."limit";

        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];


        $column = $code_check;


        if ($order_clause == "")
            $order_type = "Order BY " . $column . " DESC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->preListing($attr, $Sql, $response, $total_limit, 'c', $order_type);
        //echo $response['q'];exit;
        // $RS = $this->objsetup->CSI($response['q']);
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('CustomerModal');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        $RS = $this->objsetup->CSI($response['q'], "customer", sr_ViewPermission);
        // $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $response['total'] = $Row['totalRecordCount'];                
                $response['response'][] = $Row;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        $response = $this->objGeneral->postListing($attr, $response);

        return $response;
    }

    function save_sales_target($attr)
    {
        $response = array();

        $id = ($attr['id'] != '') ? $attr['id'] : 0;

        if($id > 0)
        {
            $Sql = "UPDATE sales_forecast 
                        SET 
                            month = $attr[month],
                            year = $attr[year],
                            sale_person_id = $attr[sale_person_id],
                            target = $attr[value]
                    WHERE id = $id AND company_id = " . $this->arrUser['company_id'];
            $RS = $this->objsetup->CSI($Sql);        
        }
        else
        {
            $Sql = "INSERT INTO sales_forecast 
                        SET 
                            month = $attr[month],
                            year = $attr[year],
                            sale_person_id = $attr[sale_person_id],
                            target = $attr[value],
                            status = 1,
                            company_id = " . $this->arrUser['company_id'] . ",
                            user_id = " . $this->arrUser['id'];

            $RS = $this->objsetup->CSI($Sql);  
        }

        $response['ack'] = 1;
        return $response;        
    }

    function get_sales_forecast($attr)
    {
        $response = array();

        $sale_person_id = ($attr['sale_person_id'] != '') ? $attr['sale_person_id'] : 0;
        $year           = ($attr['year'] != '') ? $attr['year'] : 0;

        $SqlWhere = "SELECT SR_get_bucket_where_clause(48," . $this->arrUser['company_id'] . "," . $sale_person_id . ")";
        // echo $SqlWhere;exit;
        $RS = $this->objsetup->CSI($SqlWhere);
        
        $bucket_check = "";
        $bucket_check2 = "";
        while ($Row = $RS->FetchRow()) {
            if (!empty($Row[0])){
                $bucket_sql = "SELECT GROUP_CONCAT(id SEPARATOR ',') AS customer_ids FROM crm AS c WHERE  " . $Row[0];
                $BKT_RS = $this->objsetup->CSI($bucket_sql);
                $bucket_check = " AND o1.sell_to_cust_id IN (".$BKT_RS->fields['customer_ids'].")";
                $bucket_check2 = " AND f.customer_id IN (".$BKT_RS->fields['customer_ids'].")";
            }          
        }
    
        $Sql = "SELECT sf.*, 
                    (CASE
                        WHEN sf.month = 1 THEN 'January'
                        WHEN sf.month = 2 THEN 'February'
                        WHEN sf.month = 3 THEN 'March'
                        WHEN sf.month = 4 THEN 'April'
                        WHEN sf.month = 5 THEN 'May'
                        WHEN sf.month = 6 THEN 'June'
                        WHEN sf.month = 7 THEN 'July'
                        WHEN sf.month = 8 THEN 'August'
                        WHEN sf.month = 9 THEN 'September'
                        WHEN sf.month = 10 THEN 'October'
                        WHEN sf.month = 11 THEN 'November'
                        WHEN sf.month = 12 THEN 'December'
                    END) AS month_name,
                    (SELECT IFNULL(SUM(ROUND(o1.net_amount_converted, 2)), 0) AS order_sum 
                        FROM orders AS o1
                        WHERE o1.sale_person_id = $sale_person_id AND 
                            o1.company_id = " . $this->arrUser['company_id'] . " AND 
                            o1.type = 1 AND
                            MONTH(FROM_UNIXTIME(o1.posting_date)) = sf.month AND
                            YEAR(FROM_UNIXTIME(o1.posting_date)) = sf.year $bucket_check) AS orders,
                    (SELECT IFNULL(SUM(ROUND(o1.net_amount_converted, 2)), 0) AS invoice_sum 
                        FROM orders AS o1 
                        WHERE o1.sale_person_id = $sale_person_id AND 
                            o1.company_id = " . $this->arrUser['company_id'] . " AND 
                            o1.type = 2 AND
                            MONTH(FROM_UNIXTIME(o1.posting_date)) = sf.month AND
                            YEAR(FROM_UNIXTIME(o1.posting_date)) = sf.year $bucket_check) AS acheived,
                    (SELECT IFNULL(SUM(ROUND(((f.unit_price * f.qty) + f.vat_amount), 2)), 0)
                                FROM sales_forecast_detail AS f
                                WHERE 
                                    f.company_id = " . $this->arrUser['company_id'] . " AND
                                    f.month = sf.month AND
                                    f.year = sf.year AND 
                                    f.sale_person_id = $sale_person_id $bucket_check2) AS forecast
                            
                FROM employees AS e
                LEFT JOIN sales_forecast AS sf ON sf.sale_person_id = e.id AND sf.year = $year
                WHERE e.id = $sale_person_id ";

        $RS = $this->objsetup->CSI($Sql);        
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                
                $Row['target_acheived_percentage'] = round(((floatval($Row['acheived']) / floatval($Row['target'])) * 100),2);
                $Row['forecast_acheived_percentage'] = round(((floatval($Row['acheived']) / floatval($Row['forecast'])) * 100), 2);
                $response['response'][] = $Row;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        $response['ack'] = 1;
        return $response;  
    }

    function get_customer_forecast($attr)
    {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $str_where = '';
        $order_type = '';
        $defaultFilter = false;
        $response = array();
        //print_r($attr);exit;
        $where_clause = $this->objGeneral->flexiWhereRetriever("c.", $attr, $fieldsMeta);
        $order_clause = $this->objGeneral->flexiOrderRetriever("c.", $attr, $fieldsMeta);
        if (empty($where_clause)) {
            $defaultFilter = true;
            $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("SalesForecastModal", $this->arrUser);
        }

        $month = ($attr['month'] != '') ? $attr['month'] : 0;
        $year = ($attr['year'] != '') ? $attr['year'] : 0;
        $sale_person_id = ($attr['sale_person_id'] != '') ? $attr['sale_person_id'] : 0;

        $SqlWhere = "SELECT SR_get_bucket_where_clause(48," . $this->arrUser['company_id'] . "," . $sale_person_id . ")";
        // echo $SqlWhere;exit;
        $RS = $this->objsetup->CSI($SqlWhere);
        
        $bucket_check = "";
        $bucket_check2 = "";
        while ($Row = $RS->FetchRow()) {
            if (!empty($Row[0])){
                $bucket_sql = "SELECT GROUP_CONCAT(id SEPARATOR ',') AS customer_ids FROM crm AS c WHERE  " . $Row[0];
                $BKT_RS = $this->objsetup->CSI($bucket_sql);
                $bucket_check = " AND o1.sell_to_cust_id IN (".$BKT_RS->fields['customer_ids'].")";
                $bucket_check2 = " AND f.customer_id IN (".$BKT_RS->fields['customer_ids'].")";
            }          
        }


        $upToDate = date("Y-m-d"); 

        $Sql = "SELECT * FROM (SELECT  c.id,
                                    c.name,
                                    c.customer_code,
                                    c.customer_posting_group,
                                    (SELECT IFNULL(SUM(ROUND((f.unit_price * f.qty)+f.vat_amount, 2)), 0)
                                        FROM sales_forecast_detail AS f
                                        WHERE f.customer_id = c.id AND 
                                            f.company_id = " . $this->arrUser['company_id'] . " AND
                                            f.month = ".$month." AND
                                            f.year = ".$year." AND 
                                            f.sale_person_id = ".$sale_person_id.$bucket_check2.") AS forecast,
                                    (SELECT IFNULL(SUM(ROUND(o1.net_amount_converted, 2)), 0) AS order_sum 
                                        FROM orders AS o1 
                                        WHERE o1.sale_person_id = ".$sale_person_id." AND 
                                            o1.sell_to_cust_id = c.id AND
                                            o1.company_id = " . $this->arrUser['company_id'] . " AND 
                                            o1.type = 1 AND
                                            MONTH(FROM_UNIXTIME(o1.posting_date)) = ".$month." AND
                                            YEAR(FROM_UNIXTIME(o1.posting_date)) = ".$year.$bucket_check.") AS on_order,
                                    (SELECT IFNULL(SUM(ROUND(o1.net_amount_converted, 2)), 0) AS invoice_sum 
                                        FROM orders AS o1 
                                        WHERE o1.sale_person_id = ".$sale_person_id." AND 
                                            o1.sell_to_cust_id = c.id AND
                                            o1.company_id = " . $this->arrUser['company_id'] . " AND 
                                            o1.type = 2 AND
                                            MONTH(FROM_UNIXTIME(o1.posting_date)) = ".$month." AND
                                            YEAR(FROM_UNIXTIME(o1.posting_date)) = ".$year.$bucket_check.") AS achieved,
                                    (IFNULL((SELECT IFNULL(SUM(ROUND((f.unit_price * f.qty)+f.vat_amount, 2)), 0)
                                        FROM sales_forecast_detail AS f
                                        WHERE f.customer_id = c.id AND 
                                            f.company_id = " . $this->arrUser['company_id'] . " AND
                                            f.month = ".$month." AND
                                            f.year = ".$year." AND 
                                            f.sale_person_id = ".$sale_person_id.$bucket_check2.") - (SELECT IFNULL(SUM(ROUND(o1.net_amount_converted, 2)), 0) AS invoice_sum 
                                        FROM orders AS o1 
                                        WHERE o1.sale_person_id = ".$sale_person_id." AND 
                                            o1.sell_to_cust_id = c.id AND
                                            o1.company_id = " . $this->arrUser['company_id'] . " AND 
                                            o1.type = 2 AND
                                            MONTH(FROM_UNIXTIME(o1.posting_date)) = ".$month." AND
                                            YEAR(FROM_UNIXTIME(o1.posting_date)) = ".$year.$bucket_check."), 0)) AS outstanding
                                
                FROM sr_crm_listing  c
                where  c.type IN (2, 3) AND c.customer_code IS NOT NULL AND c.statusp = 'Active' AND
                      c.company_id=" . $this->arrUser['company_id'] . "  GROUP BY c.id ) as c WHERE 1  " . $where_clause . " ";
        $Sql = $this->objsetup->whereClauseAppender($Sql, 48);

        $total_limit = pagination_limit;

        //echo $total_limit."limit";

        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];


        $column = ' c.customer_code ';


        if ($order_clause == "")
            $order_type = "Order BY " . $column . " DESC";
        else
            $order_type = $order_clause;

            //echo $response['q'];exit;
        $response = $this->objGeneral->preListing($attr, $Sql, $response, $total_limit, 'c', $order_type);
        // $RS = $this->objsetup->CSI($response['q']);
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('SalesForecastModal');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        $RS = $this->objsetup->CSI($response['q'], "customer", sr_ViewPermission);
        // $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                
                $response['total'] = $Row['totalRecordCount'];                
                $response['response'][] = $Row;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        $response = $this->objGeneral->postListing($attr, $response);

        return $response;
    }

    function get_customer_forecast_details($attr)
    {
        $response = array();

        $customer_id    = ($attr['customer_id'] != '') ? $attr['customer_id'] : 0;
        $sale_person_id = ($attr['sale_person_id'] != '') ? $attr['sale_person_id'] : 0;
        $month           = ($attr['month'] != '') ? $attr['month'] : 0;
        $year           = ($attr['year'] != '') ? $attr['year'] : 0;

        $Sql = "SELECT *
                FROM sales_forecast_detail AS sf
                WHERE sf.sale_person_id = $sale_person_id AND 
                    sf.customer_id = $customer_id AND 
                    sf.month = $month AND 
                    sf.year = $year AND 
                    sf.company_id=" . $this->arrUser['company_id'];

        $RS = $this->objsetup->CSI($Sql);        
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                
                $response['response'][] = $Row;
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'][] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        $temp_attr['posting_group_id'] = $attr['customer_posting_group'];
        $posting_group_arr = $this->objHr->get_vat_group_by_posting_group($temp_attr);
        $response['arr_vat_post_grp_sales'] = ($posting_group_arr['ack'] == 1) ? $posting_group_arr['response'] : array();
        
        return $response;
    }

    function save_customer_forecast_details($attr)
    {
        $customer_id    = ($attr['customer_id'] != '') ? $attr['customer_id'] : 0;
        $sale_person_id = ($attr['sale_person_id'] != '') ? $attr['sale_person_id'] : 0;
        $month          = ($attr['month'] != '') ? $attr['month'] : 0;
        $year           = ($attr['year'] != '') ? $attr['year'] : 0;



        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;


        foreach($attr['forecast_data'] as $fc_data)
        {
            if($fc_data->id > 0)
            {
                $Sql = "UPDATE sales_forecast_detail SET
                            qty             = $fc_data->qty,
                            unit_price      = $fc_data->unit_price
                            WHERE id = $fc_data->id AND company_id =" . $this->arrUser['company_id'];

                $Sql = $this->objsetup->CSI($Sql);
            }
            else
            {
                $Sql = " INSERT INTO sales_forecast_detail SET
                            customer_id     = $customer_id, 
                            sale_person_id  = $sale_person_id,
                            item_id         = $fc_data->item_id,
                            item_name       = '".addslashes($fc_data->item_name)."',
                            item_code       = '$fc_data->item_code',
                            uom_id          = $fc_data->uom_id,
                            uom_name        = '$fc_data->uom_name',
                            vat_id          = 0,
                            vat_amount      = 0,
                            qty             = $fc_data->qty,
                            unit_price      = $fc_data->unit_price,
                            month           = $month,
                            year            = $year,
                            company_id      =" . $this->arrUser['company_id'] . ",
                            user_id         =" . $this->arrUser['id'];
                $Sql = $this->objsetup->CSI($Sql);
            }
        }
        $this->Conn->commitTrans();
        $this->Conn->autoCommit = true;

        $response['ack'] = 1;
        $response['error'] = NULL;

        return $response;
    }

    function delete_customer_forecast_details($attr)
    {
        $id    = ($attr['id'] != '') ? $attr['id'] : 0;
        
        $Sql_delete = "DELETE FROM sales_forecast_detail 
                        WHERE id = $id AND
                            company_id=" . $this->arrUser['company_id'] . " LIMIT 1";
        $RS_delete = $this->objsetup->CSI($Sql_delete); 
        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be deleted!';
        }
        return $response;
    }


    function lock_customer_forecast($attr)
    {
        $id     = ($attr['id'] != '') ? $attr['id'] : 0;
        $status = ($attr['status'] != '') ? $attr['status'] : 0;
        $month  = ($attr['month'] != '') ? $attr['month'] : 0;
        $year   = ($attr['year'] != '') ? $attr['year'] : 0;
        $line_manager_name_id   = ($attr['line_manager_name_id'] != '') ? $attr['line_manager_name_id'] : 0;

        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;

        
        $Sql = "UPDATE sales_forecast SET status = $status 
                    WHERE id = $id AND company_id=" . $this->arrUser['company_id'] . " LIMIT 1";
        $RS = $this->objsetup->CSI($Sql); 
        if ($this->Conn->Affected_Rows() > 0) {
            $response['ack'] = 1;
            $response['error'] = NULL;

            if($status == 0)
            {
                $Sql1 = "SELECT user_email FROM employees WHERE id = $line_manager_name_id AND company_id=" . $this->arrUser['company_id'] . " LIMIT 1";
                $RS1 = $this->objsetup->CSI($Sql1);

                $temp_attr['to']        = $RS1->fields['user_email'];
                $temp_attr['body']      = "The forecast for the month of $month $year has been locked";
                $temp_attr['subject']   = $attr['sale_person_name']." Forecast Lock for $month $year";
            
                require_once(SERVER_PATH . "/classes/Mail.php");        
                $this->objMail = new Mail($this->arrUser);            
                $sendEmail = $this->objMail->SendSimpleEmail($temp_attr);
                
                if($sendEmail['ack'] == 1)
                {
                    $this->Conn->commitTrans();
                    $this->Conn->autoCommit = true;
                    $response['ack'] = 1;
                }
                else
                {
                    $this->Conn->rollbackTrans();
                    $this->Conn->autoCommit = true;
                    
                    $response['error'] = 'Error while sending Approval Email.';
                    $response['ack'] = 0;
                }
            }
            else if($status == 1)
            {
                $temp_attr['to']        = $attr['sale_person_email'];
                $temp_attr['body']      = "The forecast for the month of $month $year has been Unlocked";
                $temp_attr['subject']   = "Forecast Unlock for $month $year";
            
                require_once(SERVER_PATH . "/classes/Mail.php");        
                $this->objMail = new Mail($this->arrUser);            
                $sendEmail = $this->objMail->SendSimpleEmail($temp_attr);
                
                if($sendEmail['ack'] == 1)
                {
                    $this->Conn->commitTrans();
                    $this->Conn->autoCommit = true;
                    $response['ack'] = 1;
                }
                else
                {
                    $this->Conn->rollbackTrans();
                    $this->Conn->autoCommit = true;
                    
                    $response['error'] = 'Error while sending Approval Email.';
                    $response['ack'] = 0;
                }
            }
            else
            {
                $this->Conn->commitTrans();
                $this->Conn->autoCommit = true;
            }

        } else {
            $response['ack'] = 0;
            $response['error'] = 'Record can\'t be Updated!';
        }
        return $response;
    }

    function addCusJournalInvoice($attr) 
    {
        // error_reporting(E_ERROR);

        $srLogTrace = array();

        $srLogTrace['ErrorCode'] = '';
        $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
        $srLogTrace['Function'] = __FUNCTION__;
        $srLogTrace['CLASS'] = __CLASS__;
        $srLogTrace['Parameter1'] = 'Enter';
        $srLogTrace['ErrorMessage'] = "";

        $this->objsetup->SRTraceLogsPHP($srLogTrace);

        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;      
        $dataArray = $attr['selectdata'];
        // echo '<pre>'; print_r($dataArray);
        $parent_id = $dataArray->parent_id;       

        $update_check = '';

        if ($parent_id > 0)
            $update_check = " AND tst.id <> '" . $parent_id . "'";

        $data_pass = "  tst.acc_code='" . $dataArray->acc_code . "'  and 
                        tst.module_type='1' and
                        tst.status=1 and  
                        tst.type=1  $update_check ";

        // echo $data_pass;

        $total = $this->objGeneral->count_duplicate_in_sql('gl_journal_receipt', $data_pass, $this->arrUser['company_id']);

        if ($total > 0) {
            $response['ack'] = 0;
            $response['error'] = 'Record Already Exists. ';
            return $response; 
        }

        // $moduleForPermission = "supplier_journal";

        $modulePermission = "";
        $invoice_id = (isset($dataArray->invoice_id) && $dataArray->invoice_id != '') ? $dataArray->invoice_id : '0';
        $account_id = (isset($dataArray->account_id) && $dataArray->account_id != '') ? $dataArray->account_id : '0';
        $account_no = addslashes($dataArray->account_no);
        $account_name = addslashes($dataArray->account_name);

        $acc_code = addslashes($dataArray->acc_code);

        $balancing_account_id = (isset($dataArray->balancing_account_id) && $dataArray->balancing_account_id != '') ? $dataArray->balancing_account_id : '0';
        $balancing_account_code = addslashes($dataArray->balancing_account_code);
        $balancing_account_name = addslashes($dataArray->balancing_account_name);

        $converted_price = (isset($dataArray->converted_price) && floatval($dataArray->converted_price) > 0) ? Round($dataArray->converted_price,2) : '0';
        $credit_amount = (isset($dataArray->credit_amount) && $dataArray->credit_amount != '') ? Round($dataArray->credit_amount,2) : 'NULL';
        $allocated_amount = (isset($dataArray->allocated_amount) && $dataArray->allocated_amount != '') ? Round($dataArray->allocated_amount,2) : 0;
        $debit_amount = 'NULL';

        $transaction_type = (isset($dataArray->transaction_type) && $dataArray->transaction_type != '') ? $dataArray->transaction_type : '0';
        $document_type = (isset($dataArray->document_type) && $dataArray->document_type != '') ? $dataArray->document_type : '0';
        $cnv_rate = (isset($dataArray->cnv_rate) && $dataArray->cnv_rate != '') ? $dataArray->cnv_rate : '0';
        $converted_currency_id = (isset($dataArray->converted_currency_id) && $dataArray->converted_currency_id != '') ? $dataArray->converted_currency_id : '0';
        $posting_date = $this->objGeneral->convert_date($dataArray->posting_date);
        $allocation_date = $this->objGeneral->convert_date($dataArray->allocation_date);

        $payment_detail_id = (isset($dataArray->payment_detail_id) && $dataArray->payment_detail_id != '') ? $dataArray->payment_detail_id : '0';
        $posting_group_id = (isset($dataArray->posting_group_id) && $dataArray->posting_group_id != '') ? $dataArray->posting_group_id : '0';
        $currency_id = (isset($dataArray->currency_id) && $dataArray->currency_id->id != '') ? $dataArray->currency_id->id : '0';
        $document_no = addslashes($dataArray->document_no);   

        if($parent_id >0){
                        

            if ($payment_detail_id == 0) {

                // $modulePermission = sr_AddPermission;
                $Sql = "INSERT INTO payment_details
                            (parent_id,
                            transaction_type,
                            document_type,
                            document_no,
                            company_id,
                            user_id,
                            account_id,
                            account_no,
                            account_name,
                            posting_date,
                            created_date,
                            currency_id,
                            posting_group_id,
                            debit_amount,
                            credit_amount,
                            converted_price,
                            converted_currency_id,
                            cnv_rate,
                            balancing_account_id,
                            balancing_account_code,
                            balancing_account_name,
                            invoice_id,
                            status,
                            posting_dateUnConv)
                        SELECT 
                            \"".$parent_id."\",
                                $transaction_type,
                                $document_type,
                                \"$document_no\",
                                " . $this->arrUser['company_id'] . ",
                                " . $this->arrUser['id'] . ",
                                $account_id,
                                \"$account_no\",
                                \"$account_name\",
                                \"$posting_date\",
                            " . current_date . " ,
                                " . $currency_id . ",
                                " . $posting_group_id . ",
                                $debit_amount,
                                $credit_amount,
                                $converted_price,
                            $converted_currency_id,
                                $cnv_rate,
                                $balancing_account_id,
                            \"$balancing_account_code\",
                            \"$balancing_account_name\",
                            '".$invoice_id."',
                            1,
                            DATE_FORMAT(FROM_UNIXTIME($posting_date), '%Y-%m-%d')
                        FROM widgetone
                        WHERE
                            (SELECT type FROM gl_journal_receipt AS gjr WHERE gjr.id=".$parent_id." LIMIT 1) = 1 
                        LIMIT 1";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql, $moduleForPermission, sr_AddPermission);

                $payment_detail_id = $this->Conn->Insert_ID();

            } else {

                // $modulePermission = sr_AddEditPermission;
                $Sql = "UPDATE payment_details SET
                            transaction_type =  $transaction_type,
                            document_type =  $document_type,
                            document_no =  '" . $document_no . "',
                            account_id =  $account_id,
                            account_no =  '" . $account_no. "',
                            account_name =  '" . $account_name . "',
                            posting_date =  '" . $posting_date . "',
                            currency_id =  " . $currency_id . ",
                            posting_group_id =  " . $posting_group_id . ",
                            debit_amount =  $debit_amount,
                            credit_amount =  $credit_amount,
                            converted_price =  $converted_price,
                            converted_currency_id = $converted_currency_id,
                            cnv_rate =  $cnv_rate,
                            balancing_account_id =   $balancing_account_id,
                            balancing_account_code = '" . $balancing_account_code . "',
                            balancing_account_name = '" . $balancing_account_name . "',
                            posting_dateUnConv = DATE_FORMAT(FROM_UNIXTIME($posting_date), '%Y-%m-%d'),
                            invoice_id = '".$invoice_id."'
                            WHERE id = $payment_detail_id AND status = 1 AND
                            (SELECT type FROM gl_journal_receipt AS gjr WHERE gjr.id=".$parent_id." LIMIT 1) = 1 
                                AND company_id = " . $this->arrUser['company_id']." LIMIT 1";

                // echo $Sql;//exit;
                $RS = $this->objsetup->CSI($Sql, $moduleForPermission, sr_AddEditPermission);
            }

            if($payment_detail_id>0){

                $response['ack'] = 1;

                /* 
                $invoice_type = 5;
                $module_type = 1;
                $transaction_type = 1;
                $document_type = 1;
                $total_allocated = 0;

                $TRANSACTION_UNSUCCESSFUL = 0;

                $del_allocation_entry = "DELETE FROM payment_allocation 
                                         WHERE  payment_id = $parent_id AND payment_detail_id = $payment_detail_id AND invoice_id = $invoice_id AND
                                                payment_type =1 AND invoice_type = 5 AND document_type = 1 AND module_type = 1 AND transaction_type =1 AND
                                                company_id = ".$this->arrUser['company_id']." AND status =0";

                $RS = $this->objsetup->CSI($del_allocation_entry);  

                $total_allocated += $allocated_amount;
                $Check_Sql = "SELECT (grand_total - ROUND((SR_CalculateSetteledAmount($invoice_id,0,'1971-01-01', '2099-01-01',".$this->arrUser['company_id'].", $document_type) + $allocated_amount), 2)) AS invoice_value FROM srm_invoice WHERE id=$invoice_id";                
                // echo $Check_Sql; 
                $RS1 = $this->objsetup->CSI($Check_Sql);
                if($RS1->fields['invoice_value'] < 0)
                {
                    $TRANSACTION_UNSUCCESSFUL = 1;
                }

                if($TRANSACTION_UNSUCCESSFUL == 0)
                {
                    $Sql = "INSERT INTO payment_allocation (payment_id, payment_detail_id, payment_type, invoice_id, invoice_type, document_type, module_type, transaction_type, amount_allocated, company_id, user_id, status, date_created, allocation_date, allocation_dateUnConv, AddedBy, AddedOn) 
                            VALUES ( $parent_id, $payment_detail_id, 1, $invoice_id, $invoice_type, $document_type, $module_type, $transaction_type, $allocated_amount, 
                            ".$this->arrUser['company_id'].",".$this->arrUser['id'].", 0, UNIX_TIMESTAMP (NOW()), $allocation_date, DATE_FORMAT(FROM_UNIXTIME($allocation_date), '%Y-%m-%d'), ".$this->arrUser['id'].", UNIX_TIMESTAMP (NOW()))";
                    $RS = $this->objsetup->CSI($Sql);

                    // echo $Sql; 
                    $allocation_entries = "UPDATE payment_details SET allocated_amount = IFNULL(allocated_amount,0) + $allocated_amount WHERE id= $payment_detail_id";
                    $RS = $this->objsetup->CSI($allocation_entries);

                    
                    $allocation_entries = "UPDATE payment_details SET temp_allocated_amount = IFNULL(temp_allocated_amount,0) + $allocated_amount WHERE id= $invoice_id";
                    $RS = $this->objsetup->CSI($allocation_entries);                    
                }
                else{

                    $response['ack'] = 0;
                    $response['error'] = 'Journal can not be created';
    
                    $srLogTrace = array();
    
                    $srLogTrace['ErrorCode'] = '';
                    $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_1;
                    $srLogTrace['Function'] = __FUNCTION__;
                    $srLogTrace['CLASS'] = __CLASS__;
                    $srLogTrace['Parameter1'] = 'Exit';
                    $srLogTrace['Parameter2'] = 'parent:';
                    $srLogTrace['ErrorMessage'] = 'Journal can not be created';
    
                    $this->objsetup->SRTraceLogsPHP($srLogTrace);
                    return $response;
                }  */

            }
            else{

                $response['ack'] = 0;
                $response['error'] = 'Journal can not be created 1';

                $srLogTrace = array();

                $srLogTrace['ErrorCode'] = '';
                $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_1;
                $srLogTrace['Function'] = __FUNCTION__;
                $srLogTrace['CLASS'] = __CLASS__;
                $srLogTrace['Parameter1'] = 'Exit';
                $srLogTrace['Parameter2'] = 'parent:';
                $srLogTrace['ErrorMessage'] = 'Journal can not be created 1';

                $this->objsetup->SRTraceLogsPHP($srLogTrace);
                return $response;
            }           
           
        }
        else{

            $modulePermission = sr_AddPermission;
            // $msg = 'Inserted';
            $Sql = "INSERT INTO gl_journal_receipt 
                                        SET 
                                            create_date='" . current_date . "',
                                            acc_code='" . $acc_code . "',
                                            company_id='" . $this->arrUser['company_id'] . "',  
                                            user_id='" . $this->arrUser['id'] . "',
                                            type=1,
                                            template_id='0',
                                            module_type= '1',
                                            sub_module_type= '0',
                                            invoice_id='" . $invoice_id . "',
                                            transaction_id = SR_GetNextTransactionID(" . $this->arrUser['company_id'] . ", 2)";
            // echo  $Sql;exit;
            $RS = $this->objsetup->CSI($Sql, $moduleForPermission, $modulePermission);            
            $parent_id = $this->Conn->Insert_ID();

            if($parent_id>0){

                if ($payment_detail_id == 0) {

                    // $modulePermission = sr_AddPermission;
                    $Sql = "INSERT INTO payment_details
                                (parent_id,
                                transaction_type,
                                document_type,
                                document_no,
                                company_id,
                                user_id,
                                account_id,
                                account_no,
                                account_name,
                                posting_date,
                                created_date,
                                currency_id,
                                posting_group_id,
                                debit_amount,
                                credit_amount,
                                converted_price,
                                converted_currency_id,
                                cnv_rate,
                                balancing_account_id,
                                balancing_account_code,
                                balancing_account_name,
                                invoice_id,
                                status,
                                posting_dateUnConv)
                            SELECT 
                                \"".$parent_id."\",
                                    $transaction_type,
                                    $document_type,
                                    \"$document_no\",
                                    " . $this->arrUser['company_id'] . ",
                                    " . $this->arrUser['id'] . ",
                                    $account_id,
                                    \"$account_no\",
                                    \"$account_name\",
                                    \"$posting_date\",
                                " . current_date . " ,
                                    " . $currency_id . ",
                                    " . $posting_group_id . ",
                                    $debit_amount,
                                    $credit_amount,
                                    $converted_price,
                                $converted_currency_id,
                                    $cnv_rate,
                                    $balancing_account_id,
                                \"$balancing_account_code\",
                                \"$balancing_account_name\",
                                '".$invoice_id."',
                                1,
                                DATE_FORMAT(FROM_UNIXTIME($posting_date), '%Y-%m-%d')
                            FROM widgetone
                            WHERE
                                (SELECT type FROM gl_journal_receipt AS gjr WHERE gjr.id=".$parent_id." LIMIT 1) = 1 
                            LIMIT 1";
    
                    // echo $Sql;exit;
                    $RS = $this->objsetup->CSI($Sql, $moduleForPermission, sr_AddPermission);
    
                    $payment_detail_id = $this->Conn->Insert_ID();
    
                } else {
    
                    // $modulePermission = sr_AddEditPermission;
                    $Sql = "UPDATE payment_details SET
                                transaction_type =  $transaction_type,
                                document_type =  $document_type,
                                document_no =  '" . $document_no . "',
                                account_id =  $account_id,
                                account_no =  '" . $account_no. "',
                                account_name =  '" . $account_name . "',
                                posting_date =  '" . $posting_date . "',
                                currency_id =  " . $currency_id . ",
                                posting_group_id =  " . $posting_group_id . ",
                                debit_amount =  $debit_amount,
                                credit_amount =  $credit_amount,
                                converted_price =  $converted_price,
                                converted_currency_id = $converted_currency_id,
                                cnv_rate =  $cnv_rate,
                                balancing_account_id =   $balancing_account_id,
                                balancing_account_code = '" . $balancing_account_code . "',
                                balancing_account_name = '" . $balancing_account_name . "',
                                posting_dateUnConv = DATE_FORMAT(FROM_UNIXTIME($posting_date), '%Y-%m-%d'),
                                invoice_id = '".$invoice_id."'
                                WHERE id = $payment_detail_id AND status = 1 AND
                                (SELECT type FROM gl_journal_receipt AS gjr WHERE gjr.id=".$parent_id." LIMIT 1) = 1 
                                    AND company_id = " . $this->arrUser['company_id']." LIMIT 1";
    
                    // echo $Sql;exit;
                    $RS = $this->objsetup->CSI($Sql, $moduleForPermission, sr_AddEditPermission);
                }
    
                if($payment_detail_id>0){

                    $response['ack'] = 1;
    
                    /* 
                    $invoice_type = 5;
                    $module_type = 1;
                    $transaction_type = 1;
                    $document_type = 1;
                    $total_allocated = 0;
    
                    $TRANSACTION_UNSUCCESSFUL = 0;
    
                    $total_allocated += $allocated_amount;
                    // $Check_Sql = "SELECT (grand_total - ROUND((SR_CalculateSetteledAmount($invoice_id,0,'1971-01-01', '2099-01-01',".$this->arrUser['company_id'].", $document_type) + $allocated_amount), 2)) AS invoice_value FROM srm_invoice WHERE id=$invoice_id";                
                     
                    $Check_Sql = "SELECT (grand_total - ROUND((SR_CalculateSetteledAmount($invoice_id,0,'1971-01-01', '2099-01-01',".$this->arrUser['company_id'].", $document_type) + $allocated_amount), 2)) AS invoice_value FROM orders WHERE id=$invoice_id";
            
                    $RS1 = $this->objsetup->CSI($Check_Sql);
                    if($RS1->fields['invoice_value'] < 0)
                    {
                        $TRANSACTION_UNSUCCESSFUL = 1;
                    }
    
                    if($TRANSACTION_UNSUCCESSFUL == 0)
                    {
                        $Sql = "INSERT INTO payment_allocation (payment_id, payment_detail_id, payment_type, invoice_id, invoice_type, document_type, module_type, transaction_type, amount_allocated, company_id, user_id, status, date_created, allocation_date, allocation_dateUnConv, AddedBy, AddedOn) 
                                VALUES ( $parent_id, $payment_detail_id, 1, $invoice_id, $invoice_type, $document_type, $module_type, $transaction_type, $allocated_amount, 
                                ".$this->arrUser['company_id'].",".$this->arrUser['id'].", 0, UNIX_TIMESTAMP (NOW()), $allocation_date, DATE_FORMAT(FROM_UNIXTIME($allocation_date), '%Y-%m-%d'), ".$this->arrUser['id'].", UNIX_TIMESTAMP (NOW()))";
                        $RS = $this->objsetup->CSI($Sql);
    
    
                        $allocation_entries = "UPDATE payment_details SET allocated_amount = IFNULL(allocated_amount,0) + $allocated_amount WHERE id= $payment_detail_id";
                        $RS = $this->objsetup->CSI($allocation_entries);
    
                        
                        $allocation_entries = "UPDATE payment_details SET temp_allocated_amount = IFNULL(temp_allocated_amount,0) + $allocated_amount WHERE id= $invoice_id";
                        $RS = $this->objsetup->CSI($allocation_entries);                    
                    }
                    else{
    
                        $response['ack'] = 0;
                        $response['error'] = 'Journal can not be created 2';        
                        $srLogTrace = array();
        
                        $srLogTrace['ErrorCode'] = '';
                        $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_1;
                        $srLogTrace['Function'] = __FUNCTION__;
                        $srLogTrace['CLASS'] = __CLASS__;
                        $srLogTrace['Parameter1'] = 'Exit';
                        $srLogTrace['Parameter2'] = 'parent:';
                        $srLogTrace['ErrorMessage'] = 'Journal can not be created 2';
        
                        $this->objsetup->SRTraceLogsPHP($srLogTrace);
                        return $response;
                    } */ 
    
                }
                else{
    
                    $response['ack'] = 0;
                    $response['error'] = 'Journal can not be created 3';    
                    $srLogTrace = array();
    
                    $srLogTrace['ErrorCode'] = '';
                    $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_1;
                    $srLogTrace['Function'] = __FUNCTION__;
                    $srLogTrace['CLASS'] = __CLASS__;
                    $srLogTrace['Parameter1'] = 'Exit';
                    $srLogTrace['Parameter2'] = 'parent:';
                    $srLogTrace['ErrorMessage'] = 'Journal can not be created 3';
    
                    $this->objsetup->SRTraceLogsPHP($srLogTrace);
                    return $response;
                }
            }
            else{

                $response['ack'] = 0;
                $response['error'] = 'Journal can not be created 4 ';

                $srLogTrace = array();

                $srLogTrace['ErrorCode'] = '';
                $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_1;
                $srLogTrace['Function'] = __FUNCTION__;
                $srLogTrace['CLASS'] = __CLASS__;
                $srLogTrace['Parameter1'] = 'Exit';
                $srLogTrace['Parameter2'] = 'parent:';
                $srLogTrace['ErrorMessage'] = 'Journal can not be created 4';

                $this->objsetup->SRTraceLogsPHP($srLogTrace);
                return $response;
            }
        }

        $response['ack'] = 1;
        $response['error'] = 'Journal created successfully';
        $response['parent_id'] = $parent_id;
        $this->Conn->commitTrans();
        $this->Conn->autoCommit = true;
        $srLogTrace = array();

        $srLogTrace['ErrorCode'] = '';
        $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
        $srLogTrace['Function'] = __FUNCTION__;
        $srLogTrace['CLASS'] = __CLASS__;
        $srLogTrace['Parameter1'] = 'parent_id:' . $parent_id;
        $srLogTrace['ErrorMessage'] = 'Journal created successfully';

        $this->objsetup->SRTraceLogsPHP($srLogTrace);
        return $response;
    }

    function updateCusJournalInvoice($attr) 
    {
        // error_reporting(E_ERROR);
        $srLogTrace = array();

        $srLogTrace['ErrorCode'] = '';
        $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
        $srLogTrace['Function'] = __FUNCTION__;
        $srLogTrace['CLASS'] = __CLASS__;
        $srLogTrace['Parameter1'] = 'Enter';
        $srLogTrace['ErrorMessage'] = "";

        $this->objsetup->SRTraceLogsPHP($srLogTrace);

        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;      

        $account_name = addslashes($attr['account_name']);
        $document_no = addslashes($attr['document_no']);  

        $posting_date = $this->objGeneral->convert_date($attr['posting_date']);

        $balancing_account_id = (isset($attr['balancing_account_id']) && $attr['balancing_account_id'] != '') ? $attr['balancing_account_id'] : '0';
        $balancing_account_code = addslashes($attr['balancing_account_code']);
        $balancing_account_name = addslashes($attr['balancing_account_name']);

        $payment_id = (isset($attr['payment_id']) && $attr['payment_id'] != '') ? $attr['payment_id'] : '0';
        $payment_detail_id = (isset($attr['payment_detail_id']) && $attr['payment_detail_id'] != '') ? $attr['payment_detail_id'] : '0';      


        $Sql = "UPDATE payment_details 
                                    SET        
                                        document_no =  '" . $document_no . "',
                                        account_name =  '" . $account_name . "',
                                        posting_date =  '" . $posting_date . "',
                                        balancing_account_id =   $balancing_account_id,
                                        balancing_account_code = '" . $balancing_account_code . "',
                                        balancing_account_name = '" . $balancing_account_name . "',
                                        posting_dateUnConv = DATE_FORMAT(FROM_UNIXTIME($posting_date), '%Y-%m-%d')

                                WHERE id = $payment_detail_id AND status = 1 AND 
                                        company_id = " . $this->arrUser['company_id']." AND
                                        (SELECT type FROM gl_journal_receipt AS gjr 
                                        WHERE gjr.id=".$payment_id." LIMIT 1) = 1   
                                LIMIT 1";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);



        $response['ack'] = 1;
        $response['error'] = 'Journal created successfully';
        $response['parent_id'] = $payment_id;
        $this->Conn->commitTrans();
        $this->Conn->autoCommit = true;
        $srLogTrace = array();

        $srLogTrace['ErrorCode'] = '';
        $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
        $srLogTrace['Function'] = __FUNCTION__;
        $srLogTrace['CLASS'] = __CLASS__;
        $srLogTrace['Parameter1'] = 'parent_id:' . $parent_id;
        $srLogTrace['ErrorMessage'] = 'Journal created successfully';

        $this->objsetup->SRTraceLogsPHP($srLogTrace);
        return $response;
    }
        
    function getCusJournalInvoice($attr) 
    {
        // print_r($attr);exit;
        $this->objGeneral->mysql_clean($attr);

        $Sql = "SELECT  pd.parent_id, pd.id AS payment_detail_id,pd.allocated_amount,
                        pd.cnv_rate,pd.currency_id,pd.posting_date,pd.debit_amount,pd.credit_amount,pd.converted_price,
                        pd.temp_allocated_amount,pd.document_no,pd.account_name,pd.balancing_account_id,
                        pd.balancing_account_code,pd.balancing_account_name,glJ.acc_code AS glcode,glJ.type AS postedStatus,
                        COALESCE((SELECT SUM(pa.amount_allocated) FROM payment_allocation AS pa 
                                    WHERE pa.payment_detail_id = pd.id AND 
                                        pa.payment_id = glJ.id AND 
                                        pa.invoice_id =  ".$attr['invoice_id']."),0) AS amount_allocated
                FROM gl_journal_receipt AS glJ
                LEFT JOIN payment_details AS pd ON glJ.id = pd.parent_id 
                WHERE   glJ.invoice_id =  '" . $attr['invoice_id'] . "' AND 
                        pd.invoice_id =  '" . $attr['invoice_id'] . "' AND 
                        glJ.company_id= '" . $this->arrUser['company_id'] . "' AND 
                        pd.transaction_type = 2 AND 
                        pd.document_type = 2 AND 
                        pd.status IN (1,2)";

        /* $Sql = "SELECT pa.payment_id AS parent_id, pa.id AS paid, pa.payment_detail_id, pa.amount_allocated,pa.allocation_date,
                        pd.cnv_rate,pd.currency_id,pd.posting_date,pd.debit_amount,pd.credit_amount,pd.converted_price,
                        pd.temp_allocated_amount,pd.document_no,pd.account_name,pd.balancing_account_id,
                        pd.balancing_account_code,pd.balancing_account_name,glJ.acc_code AS glcode,glJ.type AS postedStatus
                FROM payment_allocation AS pa
                LEFT JOIN payment_details AS pd ON pa.payment_detail_id = pd.id 
                LEFT JOIN gl_journal_receipt AS glJ ON pa.payment_id = glJ.id 
                WHERE pa.invoice_id =  ".$attr['invoice_id']." AND 
                        pa.company_id= '".$this->arrUser['company_id']."' AND 
                        pa.payment_type = 1 AND 
                        pa.invoice_type = 5 AND 
                        pa.document_type = 1 AND 
                        pa.module_type =  1 AND 
                        pa.transaction_type = 1"; */

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['allocation_date'] = $this->objGeneral->convert_unix_into_date($Row['allocation_date']);
                $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $response['response'] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else
            $response['response'][] = array();

        return $response;
    } 
        
    function chkOrderPayment($attr) 
    {
        // print_r($attr);exit;
        $this->objGeneral->mysql_clean($attr);
        // LEFT JOIN payment_allocation AS pa ON pa.payment_detail_id = pd.id AND pa.payment_id = glJ.id AND pa.invoice_id =  ".$attr['invoice_id']."

        $Sql = "SELECT  pd.parent_id, pd.id AS payment_detail_id,pd.allocated_amount,
                        pd.cnv_rate,pd.currency_id,pd.posting_date,pd.debit_amount,pd.credit_amount,pd.converted_price,
                        pd.temp_allocated_amount,pd.document_no,pd.account_name,pd.balancing_account_id,
                        pd.balancing_account_code,pd.balancing_account_name,glJ.acc_code AS glcode,glJ.type AS postedStatus,
                        COALESCE((SELECT SUM(pa.amount_allocated) FROM payment_allocation AS pa 
                                    WHERE pa.payment_detail_id = pd.id AND 
                                        pa.payment_id = glJ.id AND 
                                        pa.invoice_id =  ".$attr['invoice_id']."),0) AS amount_allocated
                FROM gl_journal_receipt AS glJ
                LEFT JOIN payment_details AS pd ON glJ.id = pd.parent_id                 
                WHERE   glJ.invoice_id =  '" . $attr['invoice_id'] . "' AND 
                        pd.invoice_id =  '" . $attr['invoice_id'] . "' AND 
                        glJ.company_id= '" . $this->arrUser['company_id'] . "' AND 
                        pd.transaction_type = 2 AND 
                        pd.document_type = 2 AND 
                        pd.status IN (1,2)";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['allocation_date'] = $this->objGeneral->convert_unix_into_date($Row['allocation_date']);
                $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $response['response'] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else
            $response['response'][] = array();

        return $response;
    } 

}

?>
