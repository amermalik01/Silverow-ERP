<?php
// error_reporting(E_ERROR);
require_once(SERVER_PATH . "/classes/Xtreme.php");
require_once(SERVER_PATH . "/classes/General.php");
require_once(SERVER_PATH . "/classes/Setup.php");

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
require(SERVER_PATH . "/vendor/sendgrid-php/sendgrid-php.php");
//require_once(SERVER_PATH . "/classes/class.phpmailer.php");
require 'vendor/autoload.php';

class ReportCrm extends Xtreme {

    private $Conn = null;
    private $objGeneral = null;
    private $arrUser = null;
    private $objsetup = null;

    function __construct($user_info = array()) {
        parent::__construct();
        $this->Conn = parent::GetConnection();
        $this->objGeneral = new General($user_info);
        $this->arrUser = $user_info;
        $this->objsetup = new Setup($user_info);     
        $this->sendgrid = new \SendGrid('SG.U1fh-cwZQfSPoO8WzzWe0w.0w0gH1UCAQEPbOsnipbF0iU0SPzJpGNU8C1CCPg03h0');
    }

    function sale_invoice($attr) {
        //libraries
        // error_reporting(E_ALL);
        // ini_set('display_error', 1);
        $path = APP_PATH . "upload/mail_attachments/";
<<<<<<< HEAD
        $ordrSql = "SELECT *	FROM orders	WHERE id='$attr[order_id]'	LIMIT 1";
        $order = (object) $this->objsetup->CSI($ordrSql)->FetchRow();

        $ordrDetailSql = "SELECT *	FROM order_details			WHERE order_id='$attr[order_id]'";
=======
        $ordrSql = "SELECT *	FROM orders	WHERE id='".$attr['order_id']."'	LIMIT 1";
        $order = (object) $this->objsetup->CSI($ordrSql)->FetchRow();

        $ordrDetailSql = "SELECT *	FROM order_details			WHERE order_id='".$attr['order_id']."'";
>>>>>>> e31237e9eb73244117d4370f0a4bd96ad1c30564
        $order_detail = (object) $this->objsetup->CSI($ordrDetailSql);

        $compSql = "SELECT *	FROM company	WHERE id=" . $this->arrUser['company_id'] . "		LIMIT 1	";
        $company = (object) $this->objsetup->CSI($compSql)->FetchRow();


        $html = '
			<table width="100%" border="0" cellspacing="0" cellpadding="2">
			  <tr>
			    <td width="67%">
			    	<h3>Proforma Invoice</h3>' . $order->bill_to_name . '<br>' .
                $order->bill_to_address . '<br>' .
                $order->bill_to_address2 . '<br>' .
                $order->bill_to_city . '<br>' .
                $order->bill_to_post_code . '<br>' . '</td>
			    <td width="33%" rowspan="2" valign="top">
			    <table width="100%" border="0" cellspacing="0" cellpadding="2">
			      <tr>
			        <td colspan="2"> <img width="108" height="20" alt="logo" src="http://' . $_SERVER["HTTP_HOST"] . '/navson/upload/company_logo_temp/' . $company->logo . '" /></td>
			      </tr>
			      <tr>
			        <td colspan="2"><strong>' . $company->name . '</strong><br>' .
                $company->address . '<br>' .
                $company->address_2 . '<br>' .
                $company->city . ', ' .
                $company->postcode . '<br>' .
                $company->country_id .
                '</td>
			      </tr>
			      <tr>
			        <td>&nbsp;</td>
			        <td>&nbsp;</td>
			      </tr>
			        <tr>
			        <td>Phone No.</td>
			        <td>' . $company->telephone . '</td>
			      </tr>
			      <tr>
			        <td>Fax No.</td>
			        <td>' . $company->fax . '</td>
			      </tr>
			      <tr>
			        <td>VAT Reg. No.</td>
			        <td>Null</td>
			      </tr>
			      <tr>
			        <td>Bank</td>
			        <td>NATWEST</td>
			      </tr>
			      <tr>
			        <td>Bank Sort Code</td>
			        <td>60-07-33</td>
			      </tr>
			      <tr>
			        <td>Account No.</td>
			        <td>47508574</td>
			      </tr>
			      <tr>
			        <td colspan="2">' . $this->objGeneral->convert_unix_into_date($order->posting_date) . '</td>
			      </tr>
			      <tr>
			        <td>Shipment Date</td>
			        <td>' . $this->objGeneral->convert_unix_into_date($order->shipment_date) . '</td>
			      </tr>
			      <tr>
			        <td>Order No.</td>
			        <td>' . $order->order_no . '</td>
			      </tr>
			      <tr>
			        <td>Prices Including VAT </td>
			        <td>' . $order->price_including_vat . '</td>
			      </tr>
			    </table>
			    </td>
			  </tr>
			  <tr valign="bottom">
			    <td valign="bottom"><table width="100%" border="0" cellspacing="0" cellpadding="2">
			      <tr><td colspan="2">&nbsp;</td></tr>
			      <tr><td colspan="2">&nbsp;</td></tr>
			      <tr><td colspan="2">&nbsp;</td></tr>
			      <tr><td colspan="2">&nbsp;</td></tr>
			      <tr>
			        <td colspan="2">&nbsp;</td>
			      </tr>
			      <tr><td colspan="2">&nbsp;</td></tr>
			      <tr><td colspan="2">&nbsp;</td></tr>
			      <tr>
			        <td width="24%">Bll-to Customer No.</td>
			        <td width="76%">' . $order->bill_to_cust_no . '</td>
			      </tr>
			      <tr>
			        <td>Cust. Order No.</td>
			        <td>' . $order->cust_order_no . '</td>
			      </tr>
			      <tr>
			        <td>&nbsp;</td>
			        <td>&nbsp;</td>
			      </tr>
			      <tr>
			        <td>Sales Person</td>
			        <td>' . $order->sale_person . '</td>
			      </tr>
			      <tr>
			        <td>&nbsp;</td>
			        <td>&nbsp;</td>
			      </tr>
			    </table>
			    </td>
			  </tr>
			  <tr>
			    <td>&nbsp;</td>
			    <td>&nbsp;</td>
			  </tr>
			  <tr>
			    <td colspan="2"><table width="100%" border="0" cellspacing="0" cellpadding="2">
			      <tr>
			        <th width="10%" align="left"><strong>Code</strong></th>
			        <th width="25%" align="left"><strong>Description</strong></th>
			        <th width="10%" align="left"><strong>Qty</strong></th>
			        <th width="15%" align="left"><strong>Unit Of Measure</strong></th>
			        <th width="15%" align="left"><strong>Unit Price</strong></th>
			        <th width="5%" align="left"><strong>VAT</strong></th>
			        <th width="20%" align="right"><strong>Total</strong></th>
			      </tr>
			      ';

        if ($order_detail->RecordCount() > 0) {
            while ($row = $order_detail->FetchRow()) {
                $html .= '<tr>
			        <td>';
                if ($row["type"] == 0)
                    $html .= $row["item_id"];
                else
                    $html .= $row["item_id"];
                $html .= '</td>
			        <td>' . $row["item_name"] . '</td>
			        <td>' . $row["qty"] . '</td>
			        <td>';
                if ($row["type"] == 0)
                    $html .= $row["unit_measure"];
                $html .= '</td>
			        <td>' . number_format((float) $row["unit_price"], 2, ".", ",") . '</td>
			        <td>' . $row["vat"] . '</td>
			        <td align="right">' . number_format((float) $row["total_price"], 2, ".", ",") . ' ' . $order->converted_currency_id . '</td>
			      </tr>';
            }
        }
        $html .= '<tr>
			        <td colspan="7">&nbsp;</td>
			        </tr>
			      <tr>
			       <td colspan="3" rowspan="3" align="left">' . $order->order_comment . '</td>
			       <td rowspan="3" align="justify">&nbsp;</td>
			        <td colspan="2"><strong>Amount Exc. VAT</strong></td>
			        <td align="right">' . number_format((float) $order->net_amount, 2, ".", ",") . ' ' . $order->converted_currency_id . '</td>
			      </tr>
			      <tr>
			       <td colspan="2"><strong>VAT</strong></td>
			        <td align="right">' . number_format((float) $order->tax_amount, 2, ".", ",") . ' ' . $order->converted_currency_id . '</td>
			      </tr>
			      <tr>
			       <td colspan="2"><strong>Amount Inc. VAT</strong></td>
			        <td align="right">' . number_format((float) $order->grand_total, 2, ".", ",") . ' ' . $order->converted_currency_id . '</td>
			      </tr>
			      <tr>
			        <td>Payment Terms</td>
			        <td>28 Days</td>
			        <td>&nbsp;</td>
			        <td>&nbsp;</td>
			        <td>&nbsp;</td>
			        <td>&nbsp;</td>
			        <td>&nbsp;</td>
			      </tr>
			    </table></td>
			  </tr>
			  <tr>
			    <td height="27">Take Notice</td>
			    <td>&nbsp;</td>
			  </tr>
			  <tr>
			    <td>&nbsp;</td>
			    <td>&nbsp;</td>
			  </tr>
			  <tr>
			    <td>&nbsp;</td>
			    <td>&nbsp;</td>
			  </tr>
			  <tr>
			    <td>
			    	<strong>Ship-to Address</strong><br /> ' . $order->ship_to_name . '<br>' .
                $order->ship_to_contact . '<br>' .
                $order->ship_to_address . '<br>' .
                $order->ship_to_address2 . '<br>' .
                $order->ship_to_city . ', ' .
                $order->ship_to_post_code . '<br>' .
                '</td>
			    <td>&nbsp;</td>
			  </tr>
			  <tr>
			    <td>&nbsp;</td>
			    <td>&nbsp;</td>
			  </tr>
			</table>';
        $randNumber = mt_rand(1000, 10000);
        $this->objGeneral->generate_pdf_frm_html($path, $html, $randNumber);

        if ($randNumber)
            return array('ack' => 1, 'number' => $randNumber);
        else
            return array('ack' => 1);
    }

    function getReport($attr) {
        // echo "<pre>";
        // print_r($attr);
        // exit;
        $response = array();

        if ($attr['module'] == 'Sales') {
            if ($attr['link'] == 'SalesInvLink') {
                $Sql = "SELECT  d.id,
								d.sale_invioce_code,
								d.sale_order_code,
								d.sell_to_address,
								d.`sell_to_city`,
								d.`sell_to_contact`,
								d.`sell_to_county`,
								d.`sell_to_post_code`,
								d.`posting_date`,
								d.`delivery_date`,
								d.`dispatch_date`,
								currency.code AS currency_code,
								(SELECT cos.name
                                 FROM ref_order_stage_list as os, ref_crm_order_stages as cos
                                 WHERE  cos.id = os.ref_stage_id AND
                                    	os.order_id = d.id AND
										os.state IN ('completed', 'active') 
								 ORDER BY os.state ASC, cos.rank 
								 DESC LIMIT 1) as current_stage 
                        FROM orders  d 
                        LEFT JOIN currency ON currency.id = d.currency_id
                        WHERE  d.status=1 AND 
							   d.company_id='" . $this->arrUser['company_id'] . "' AND 
							   d.sell_to_cust_id='" . $attr['linkID'] . "'
						GROUP BY d.id  
						Order by d.offer_date ASC";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {
                        $row = array();
                        $row['id'] = $Row['id'];
                        $row['order'] = $Row['sale_order_code'];
                        $row['invoice'] = $Row['sale_invioce_code'];
                        $row['current_stage'] = $Row['current_stage'];
                        $row['address'] = $Row['sell_to_address'];
                        $row['city'] = $Row['sell_to_city'];
                        $row['contact'] = $Row['sell_to_contact'];
                        $row['county'] = $Row['sell_to_county'];
                        $row['postcode'] = $Row['sell_to_post_code'];
                        $row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $row['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                        $row['dispatch_date'] = $this->objGeneral->convert_unix_into_date($Row['dispatch_date']);
                        $row['currency_code'] = $Row['currency_code'];
                        $row['link'] = 'Order';
                        $row['Invlink'] = 'SalesInvDetailLink';
                        $row['module'] = 'Sales';
                        $row['InvlinkID'] = $Row['id'];
                        /* $row['posting_date'] = $Row['posting_date'];
                          $row['order_date'] = $Row['order_date'];
                          $row['dispatch_date'] = $Row['dispatch_date'];
                          $row['delivery_date'] = $Row['delivery_date']; */
                        $response['response'][] = $row;
                    }
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                } else {
                    $response['response'][] = array();
                }
            } elseif ($attr['link'] == 'SalesInvDetailLink') {
                $Sql = "SELECT  d.id,
								d.sale_invioce_code,
								d.sale_order_code,
								d.sell_to_address,
								d.`sell_to_city`,
								d.`sell_to_contact`,
								d.`sell_to_county`,
								d.`sell_to_post_code`,
								d.`posting_date`,
								d.`delivery_date`,
								d.`dispatch_date`,
								currency.code AS currency_code,
								(SELECT cos.name
                                 FROM ref_order_stage_list as os, ref_crm_order_stages as cos
                                 WHERE  cos.id = os.ref_stage_id AND
                                    	os.order_id = d.id AND
										os.state IN ('completed', 'active') 
								 ORDER BY os.state ASC, cos.rank 
								 DESC LIMIT 1) as current_stage 
                        FROM orders  d 
                        LEFT JOIN currency ON currency.id = d.currency_id
                        WHERE  d.status=1 AND 
							   d.company_id='" . $this->arrUser['company_id'] . "' AND 
							   d.sell_to_cust_id='" . $attr['linkID'] . "'
						GROUP BY d.id  
						Order by d.offer_date ASC";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {
                        $row = array();
                        $row['id'] = $Row['id'];
                        $row['order'] = $Row['sale_order_code'];
                        $row['invoice'] = $Row['sale_invioce_code'];
                        $row['current_stage'] = $Row['current_stage'];
                        $row['address'] = $Row['sell_to_address'];
                        $row['city'] = $Row['sell_to_city'];
                        $row['contact'] = $Row['sell_to_contact'];
                        $row['county'] = $Row['sell_to_county'];
                        $row['postcode'] = $Row['sell_to_post_code'];
                        $row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $row['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                        $row['dispatch_date'] = $this->objGeneral->convert_unix_into_date($Row['dispatch_date']);
                        $row['currency_code'] = $Row['currency_code'];
                        $row['link'] = 'order';
                        $row['Invlink'] = 'SalesInvDetailLink';
                        $row['module'] = 'Sales';
                        $row['InvlinkID'] = $Row['id'];
                        $response['response'][] = $row;
                    }
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                } else {
                    $response['response'][] = array();
                }
            } else {
                $Sql = "SELECT  s.* 
					FROM sr_rep_sales_sel as s
					WHERE   s.customer_code IS NOT NULL AND  
							s.customer_name !='' AND 
							(s.company_id=" . $this->arrUser['company_id'] . " )";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {
                        $row = array();
                        $row['id'] = $Row['id'];
                        $row['custNo'] = $Row['customer_code'];
                        $row['name'] = $Row['customer_name'];
                        $row['status'] = $Row['crmStatus'];
                        $row['total_sales'] = $Row['total_sales'];
                        $row['link'] = 'Custno';
                        $row['Invlink'] = 'SalesInvLink';
                        $row['InvlinkID'] = $Row['id'];
                        $row['module'] = 'Sales';
                        $response['response'][] = $row;
                    }
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                } else {
                    $response['response'][] = array();
                }
            }
            /* $row['customer'] = '';
              $row['status'] = '';
              $row['total_sales'] = '';
              $row['date_from'] = '';
              $row['date_to'] = ''; */
        }
        $response['ack'] = 1;
        $response['error'] = NULL;
        return $response;
    }

    function agedReport($attr) {
        // echo "<pre>";
        // print_r($attr);
        // exit; 

        $where = '';

        if ($attr['customers'] && ($attr['module'] == 'customer' || $attr['module'] == 'customer2' || $attr['module'] == 'customerAgingDetail')) {

            $cutomerarray = '';

            $financeID = (isset($attr['financeID']) && $attr['financeID']!='')?$attr['financeID']:3;
            $insuranceID = (isset($attr['insuranceID']) && $attr['insuranceID']!='')?$attr['insuranceID']:3;

            foreach ($attr['customers'] as $rec) {

                if($rec->id > 0){

                    if($financeID != 3 || $insuranceID != 3)
                        $cutomerarray .= "'".$rec->id  . "',";
                    else
                        $cutomerarray .= $rec->id  . ",";
                }
                    // $cutomerarray .= $rec->id . ',';
            }

            // $where .=" AND crm.id in (" . substr($cutomerarray, 0, -1) . ") ";

            if($financeID != 3 || $insuranceID != 3){

                if($financeID == 1)
                    $whereFinance = ' AND finance_check = 1';
                elseif($financeID == 2)
                    $whereFinance = ' AND finance_check = 0';
                else
                    $whereFinance = '';

                if($insuranceID == 1)
                    $whereInsurance = ' AND insurance_check = 1';
                elseif($insuranceID == 2)
                    $whereInsurance = ' AND insurance_check = 0';
                else
                    $whereInsurance = '';              


                $sql1 = "SELECT customer_id FROM finance 
                            WHERE customer_id IN (" . substr($cutomerarray, 0, -1) . ") AND  
                                company_id=" . $this->arrUser['company_id'] . " $whereFinance  $whereInsurance";

                // echo $sql1;exit;
                $RS1 = $this->objsetup->CSI($sql1);

                if ($RS1->RecordCount() > 0) {

                    $cutomerarray = '';

                    while ($Row1 = $RS1->FetchRow()) {

                        foreach ($Row1 as $key => $value) {
                            if (is_numeric($key))
                                unset($Row1[$key]);
                        }
                        
                        $cutomerarray .= $Row1['customer_id'] . ",";
                    }
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }

            }

            $cutomerarray = substr($cutomerarray, 0, -1);
        }
        elseif ($attr['module'] == 'customer' || $attr['module'] == 'customer2'  || $attr['module'] == 'customerAgingDetail') {

            $financeID = (isset($attr['financeID']) && $attr['financeID']!='')?$attr['financeID']:3;
            $insuranceID = (isset($attr['insuranceID']) && $attr['insuranceID']!='')?$attr['insuranceID']:3;

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 
            
            /* $sqla = "SELECT  c.id
                     FROM crm c
                     WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";                    

                    if($financeID != 3 || $insuranceID != 3)
                        $cutomerarray .= "'".$Rowa['id'] . "',";
                    else
                        $cutomerarray .= $Rowa['id'] . ",";
                }

                // $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";

                if($financeID != 3 || $insuranceID != 3){

                    if($financeID == 1)
                        $whereFinance = ' AND finance_check = 1';
                    elseif($financeID == 2)
                        $whereFinance = ' AND finance_check = 0';
                    else
                        $whereFinance = '';

                    if($insuranceID == 1)
                        $whereInsurance = ' AND insurance_check = 1';
                    elseif($insuranceID == 2)
                        $whereInsurance = ' AND insurance_check = 0';
                    else
                        $whereInsurance = '';


                    $sql1 = "SELECT customer_id FROM finance 
                             WHERE customer_id IN (" . substr($cutomerarray, 0, -1) . ") AND  
                                   company_id=" . $this->arrUser['company_id'] . " $whereFinance  $whereInsurance";

                    // echo $sql1;exit;
                    $RS1 = $this->objsetup->CSI($sql1);

                    if ($RS1->RecordCount() > 0) {

                        $cutomerarray = '';

                        while ($Row1 = $RS1->FetchRow()) {

                            foreach ($Row1 as $key => $value) {
                                if (is_numeric($key))
                                    unset($Row1[$key]);
                            }
                            
                            $cutomerarray .= $Row1['customer_id'] . ",";
                        }
                    }else{
                        $response['response'] = array();
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        return $response;
                    }

                }

                $cutomerarray = substr($cutomerarray, 0, -1);
            }            
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        if ($attr['suppliers'] && ($attr['module'] == 'supplier' || $attr['module'] == 'supplier2' || $attr['module'] == 'supplierAgingDetail' || $attr['module'] == 'creditors' || $attr['module'] == 'creditorsAgingDetail')) {

            $suppliersArray = '';

            $financeID = (isset($attr['financeID']) && $attr['financeID']!='')?$attr['financeID']:3;
            $insuranceID = (isset($attr['insuranceID']) && $attr['insuranceID']!='')?$attr['insuranceID']:3;

            foreach ($attr['suppliers'] as $rec) {
                // if($rec->id > 0)
                //     $suppliersArray .= $rec->id . ',';

                if($rec->id > 0){

                    if($financeID != 3 || $insuranceID != 3)
                        $suppliersArray .= "'".$rec->id  . "',";
                    else
                        $suppliersArray .= $rec->id  . ",";
                }
            }

            if($financeID != 3 || $insuranceID != 3){

                if($financeID == 1)
                    $whereFinance = ' AND finance_check = 1';
                elseif($financeID == 2)
                    $whereFinance = ' AND finance_check = 0';
                else
                    $whereFinance = '';

                if($insuranceID == 1)
                    $whereInsurance = ' AND insurance_check = 1';
                elseif($insuranceID == 2)
                    $whereInsurance = ' AND insurance_check = 0';
                else
                    $whereInsurance = '';              


                $sql1 = "SELECT supplier_id FROM srm_finance 
                            WHERE supplier_id IN (" . substr($suppliersArray, 0, -1) . ") AND  
                                  company_id=" . $this->arrUser['company_id'] . " $whereFinance  $whereInsurance";

                // echo $sql1;exit;
                $RS1 = $this->objsetup->CSI($sql1);

                if ($RS1->RecordCount() > 0) {

                    $suppliersArray = '';

                    while ($Row1 = $RS1->FetchRow()) {

                        foreach ($Row1 as $key => $value) {
                            if (is_numeric($key))
                                unset($Row1[$key]);
                        }
                        
                        $suppliersArray .= $Row1['supplier_id'] . ",";
                    }
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }

            }

            // $where .=" AND srm.id in (" . substr($suppliersArray, 0, -1) . ") ";
            $suppliersArray = substr($suppliersArray, 0, -1);
        }
        elseif ($attr['module'] == 'supplier' || $attr['module'] == 'supplier2' || $attr['module'] == 'supplierAgingDetail' || $attr['module'] == 'creditors' || $attr['module'] == 'creditorsAgingDetail'){

            $financeID = (isset($attr['financeID']) && $attr['financeID']!='')?$attr['financeID']:3;
            $insuranceID = (isset($attr['insuranceID']) && $attr['insuranceID']!='')?$attr['insuranceID']:3;

            if($attr['module'] == 'creditors' || $attr['module'] == 'creditorsAgingDetail'){
                $sqla = "SELECT s.id 
                         FROM sr_srm_general_sel s
                         WHERE s.type IN (2,3) AND 
                                (s.excl_from_report IS NULL  OR 
                                  s.excl_from_report =0)  AND 
                               s.company_id=" . $this->arrUser['company_id'] . " ";
            }
            else{

                $sqla = "SELECT s.id 
                         FROM sr_srm_general_sel s
                         WHERE s.type IN (2,3) AND 
                                s.company_id=" . $this->arrUser['company_id'] . " ";
            }


            //$sqla = $this->objsetup->whereClauseAppender($sqla, 24);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    if($financeID != 3 || $insuranceID != 3)
                        $suppliersArray .= "'".$Rowa['id'] . "',";
                    else
                        $suppliersArray .= $Rowa['id'] . ",";

                    // $suppliersArray .= $Rowa['id'] . ',';
                }

                // $whereClause .=" WHERE sel.id IN (" . substr($suppliersArray, 0, -1) . ") ";

                if($financeID != 3 || $insuranceID != 3){

                    if($financeID == 1)
                        $whereFinance = ' AND finance_check = 1';
                    elseif($financeID == 2)
                        $whereFinance = ' AND finance_check = 0';
                    else
                        $whereFinance = '';

                    if($insuranceID == 1)
                        $whereInsurance = ' AND insurance_check = 1';
                    elseif($insuranceID == 2)
                        $whereInsurance = ' AND insurance_check = 0';
                    else
                        $whereInsurance = '';


                    $sql1 = "SELECT supplier_id FROM srm_finance 
                             WHERE supplier_id IN (" . substr($suppliersArray, 0, -1) . ") AND  
                                    company_id=" . $this->arrUser['company_id'] . " $whereFinance  $whereInsurance";

                    // echo $sql1;exit;
                    $RS1 = $this->objsetup->CSI($sql1);

                    if ($RS1->RecordCount() > 0) {

                        $suppliersArray = '';

                        while ($Row1 = $RS1->FetchRow()) {

                            foreach ($Row1 as $key => $value) {
                                if (is_numeric($key))
                                    unset($Row1[$key]);
                            }
                            
                            $suppliersArray .= $Row1['supplier_id'] . ",";
                        }
                    }else{
                        $response['response'] = array();
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        return $response;
                    }
                }

                $suppliersArray = substr($suppliersArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $upToDate = $this->objGeneral->convert_date($attr['upToDate']);

        $defaultCurrency = $attr['defaultCurrency'];

        $response = array();


        if ($upToDate > 0) {

            if ($attr['module'] == 'customer2') {
                $upToDate = $this->objGeneral->convertEndDate($attr['upToDate']);

                $Sql = 'CALL srrep_CustAgingSummary('.$this->arrUser['company_id'].',"'.$upToDate.'","'.$cutomerarray.'")';
                // echo $Sql;exit;

                $RS = $this->objsetup->CSI($Sql);

                $total = 0;
                $total30days = 0;
                $total60days = 0;
                $total90days = 0;
                $total120days = 0;
                $totalover120days = 0;

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {

                        $row = array();
                        // $row['id'] = $Row['id'];
                        $row['custNo'] = $Row['customer_code'];
                        $row['name'] = $Row['customerName'];
                        $row['salepersonName'] = $Row['salepersonName'];
                        $row['currency'] = $Row['currency'];
                        $row['rank'] = $Row['rank'];


                        // $row['totalStartDate']  = $this->objGeneral->convert_unix_into_date($Row['totalStartDate']);
                        // $row['totalEndDate']  = $this->objGeneral->convert_unix_into_date($Row['totalEndDate']);
                        $row['total'] = $Row['total'];

                        $total += $Row['total'];

                        $row['s30DaysStartDate'] = date("d/m/Y", strtotime($Row['30DaysStartDate']));
                        $row['s30DaysEndDate'] = date("d/m/Y", strtotime($Row['30DaysEndDate']));
                        $row['s0to30days'] = $Row['30days'];
                        $total30days += $Row['30days'];

                        $row['s60DaysStartDate'] = date("d/m/Y", strtotime($Row['60DaysStartDate']));
                        $row['s60DaysEndDate'] = date("d/m/Y", strtotime($Row['60DaysEndDate']));
                        $row['s31to60days'] = $Row['60days'];
                        $total60days += $Row['60days'];

                        $row['s90DaysStartDate'] = date("d/m/Y", strtotime($Row['90DaysStartDate']));
                        $row['s90DaysEndDate'] = date("d/m/Y", strtotime($Row['90DaysEndDate']));
                        $row['s61to90days'] = $Row['90days'];
                        $total90days += $Row['90days'];

                        $row['s120DaysStartDate'] = date("d/m/Y", strtotime($Row['120DaysStartDate']));
                        $row['s120DaysEndDate'] = date("d/m/Y", strtotime($Row['120DaysEndDate']));
                        $row['s91to120days'] = $Row['120days'];
                        $total120days += $Row['120days'];

                        $row['over120DaysStartDate'] = date("d/m/Y", strtotime($Row['over120DaysStartDate']));
                        $row['over120DaysEndDate'] = date("d/m/Y", strtotime($Row['over120DaysEndDate']));
                        $row['over120days'] = $Row['over120days'];
                        $totalover120days += $Row['over120days'];

                        if(($Row['total'] != '333333333' || $Row['30days'] != '333333333'  || $Row['60days'] != '333333333' && 
                           $Row['90days'] != '333333333' || $Row['120days'] != '333333333'  || $Row['over120days'] != '333333333') || 
                           $Row['rank'] == 2 || $Row['rank'] ==3 ){

                               $response['response'][] = $row;
                        }                        
                    }

                    $response['ack'] = 1;
                    $response['error'] = NULL;
                } else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
            } else if ($attr['module'] == 'customerAgingDetail') {

                /* $Sql = "SELECT si.customer_code,si.name,si.doc_type,si.customer_code,si.customer_code,si.customer_code, 
						FROM sr_rep_aged_salesPostedInvoices_sel as si
						WHERE si.postDate BETWEEN UNIX_TIMESTAMP(DATE_SUB(FROM_UNIXTIME($upToDate), INTERVAL 3650 DAY)) AND UNIX_TIMESTAMP(FROM_UNIXTIME($upToDate))
							  AND  si.company_id='" . $this->arrUser['company_id'] . "'
						UNION

						SELECT si.* 
						FROM sr_rep_aged_creditNotePostedInvoices_sel as si
						WHERE si.postDate BETWEEN UNIX_TIMESTAMP(DATE_SUB(FROM_UNIXTIME($upToDate), INTERVAL 3650 DAY)) AND UNIX_TIMESTAMP(FROM_UNIXTIME($upToDate))
							  AND  si.company_id='" . $this->arrUser['company_id'] . "'


						
						 $where";

                echo $Sql; exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {

                        $row = array();
                        $row['id'] = $Row['id'];
                        $row['suppNo'] = $Row['supplier_code'];
                        $row['name'] = $Row['name'];

                        // $row['totalStartDate']  = $this->objGeneral->convert_unix_into_date($Row['totalStartDate']);
                        // $row['totalEndDate']  = $this->objGeneral->convert_unix_into_date($Row['totalEndDate']);
                        $row['total'] = $Row['total'];

                        $row['30DaysStartDate'] = $this->objGeneral->convert_unix_into_date($Row['30DaysStartDate']);
                        $row['30DaysEndDate'] = $this->objGeneral->convert_unix_into_date($Row['30DaysEndDate']);

                        // $row['30daystitle'] = 
                        $row['s0to30days'] = $Row['0-30 days'];

                        $row['60DaysStartDate'] = $this->objGeneral->convert_unix_into_date($Row['60DaysStartDate']);
                        $row['60DaysEndDate'] = $this->objGeneral->convert_unix_into_date($Row['60DaysEndDate']);
                        $row['s31to60days'] = $Row['31-60 days'];

                        $row['s90DaysStartDate'] = $this->objGeneral->convert_unix_into_date($Row['90DaysStartDate']);
                        $row['s90DaysEndDate'] = $this->objGeneral->convert_unix_into_date($Row['90DaysEndDate']);
                        $row['s61to90days'] = $Row['61-90 days'];

                        $row['s120DaysStartDate'] = $this->objGeneral->convert_unix_into_date($Row['120DaysStartDate']);
                        $row['s120DaysEndDate'] = $this->objGeneral->convert_unix_into_date($Row['120DaysEndDate']);
                        $row['s91to120days'] = $Row['91-120 days'];

                        $row['over120DaysStartDate'] = $this->objGeneral->convert_unix_into_date($Row['over120DaysStartDate']);
                        $row['over120DaysEndDate'] = $this->objGeneral->convert_unix_into_date($Row['over120DaysEndDate']);
                        $row['over120days'] = $Row['over 120 days'];

                        $response['response'][] = $row;
                    }
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                } else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                } */

                //  echo $where;exit;
                if ($attr['upToDate'] > 0)
                    $upToDate = $this->objGeneral->convertEndDate($attr['upToDate']);
                else
                    $upToDate = date("Y-m-d");

                $prevCustomer = '';
                $singleCustChk = 0;
                
                $sqll = 'CALL srrep_CustAgingDetail('.$this->arrUser['company_id'].',"'.$cutomerarray.'","'.$upToDate.'")';                

                // echo $sqll;exit;
                $RSS = $this->objsetup->CSI($sqll);

                if ($RSS->RecordCount() > 0) {
                    while ($RowS = $RSS->FetchRow()) {

                        foreach ($RowS as $key => $value) {
                            if (is_numeric($key))
                                unset($RowS[$key]);
                        }            

                        if(!($prevCustomer!='') || $prevCustomer != $RowS['customerCode']){   

                            if($prevCustomer!='')
                            {
                                $singleCustChk = 0;
                                
                                if(count($customerArray['res'])>0)
                                    $response['response'][$prevCustomer] = $customerArray;
                            }
                            else{
                                $singleCustChk = 1;
                            }               

                            $prevCustomer = $RowS['customerCode'];
                            $customerArray = array();  

                            $runningTotals = 0;                  
                        }                   
                        
                        if($prevCustomer == $RowS['customerCode']){

                            if($RowS['Rank'] == 1){                        
                                $customerArray['customer_code'] = $RowS['customerCode'];
                                $customerArray['name'] = $RowS['customerName'];
                                $customerArray['primary_address_1'] = $RowS['primary_address_1'];
                                $customerArray['primary_address_2'] = $RowS['primary_address_2'];
                                $customerArray['primaryc_phone'] = $RowS['primaryc_phone'];
                                $customerArray['primaryc_email'] = $RowS['primaryc_email'];

                                $customerArray['city'] = $RowS['city'];
                                $customerArray['county'] = $RowS['county'];
                                $customerArray['postcode'] = $RowS['postcode'];
                                $customerArray['country'] = $RowS['country_name'];

                                $customerArray['postingGroup'] = $RowS['postingGroup'];
                                $customerArray['vat_number'] = $RowS['vat_number'];
                                $customerArray['bank_name'] = $RowS['bank_name'];
                                $customerArray['account_name'] = $RowS['account_name'];
                                $customerArray['swift_code'] = $RowS['swift_code'];
                                $customerArray['iban'] = $RowS['iban'];
                                $customerArray['sort_code'] = $RowS['sort_code'];
                                $customerArray['account_no'] = $RowS['account_no'];
                                $customerArray['currency'] = $RowS['currency'];
                                $customerArray['payment_terms'] = $RowS['payment_terms'];
                            }

                            if($RowS['Rank'] == 2){   

                                $customerStatementArray = array();

                                $customerStatementArray['Posting_Date'] = $this->objGeneral->convert_unix_into_date($RowS['posting_date']);

                                if($RowS['document_type'] == 'Negative General Journal' || $RowS['document_type'] == 'Positive General Journal'){
                                    $customerStatementArray['Document_Type'] = 'General Journal';
                                }
                                else{
                                    $customerStatementArray['Document_Type'] = $RowS['document_type'];
                                }
                                
                                $customerStatementArray['Document_No'] = $RowS['document_no'];
                                // $customerStatementArray['Ref_No'] = $RowS['ref_no'];
                                $customerStatementArray['currency'] = $RowS['currency'];
                                // $customerStatementArray['convRate'] = $RowS['convRate'];
                                $RowS['remaining_amount'] = $RowS['total_amount'] - $RowS['setteled_amount'];

                                // if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7)
                                //     $customerStatementArray['Original_Amount'] = (-1) * $RowS['total_amount'];
                                // else
                                //     $customerStatementArray['Original_Amount'] = $RowS['total_amount'];

                                // $customerStatementArray['Settled_Amount'] = $RowS['setteled_amount'];

                                if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7  || ($RowS['dType'] == 9 && $RowS['document_type'] == 'Negative General Journal'))
                                    $RemainingAmount = (-1) * $RowS['remaining_amount'];
                                else
                                    $RemainingAmount = $RowS['remaining_amount'];

                                $customerStatementArray['Outstanding_Amount'] = $RemainingAmount;
                                $customerStatementArray['Outstanding_Amountlcy'] = Round($RemainingAmount/$RowS['convRate'],2);

                                /* if ($RowS['due_date'] != 0 || $RowS['due_date'] != '')
                                    $customerStatementArray['Due Date'] = $this->objGeneral->convert_unix_into_date($RowS['due_date']);
                                else
                                    $customerStatementArray['Due Date'] = ''; */

                                $customerStatementArray['DueDate'] = $RowS['due_date'];
                                
                                if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7  || ($RowS['dType'] == 9 && $RowS['document_type'] == 'Negative General Journal'))
                                    $runningTotals = $runningTotals - $RowS['remaining_amount'];
                                else
                                    $runningTotals = $runningTotals + $RowS['remaining_amount'];

                                

                                $customerStatementArray['balance'] = $runningTotals;
                                $RowS['totalSUM'] = $runningTotals;

                                $customerArray['res'][] = $customerStatementArray;
                            }

                            
                        } 

                        if($RowS['Rank'] == 3 || $RowS['Rank'] == 4){ 
                            $customerArrayTotal = array();  

                            $customerArrayTotal['currency'] = $RowS['currency'];
                            $customerArrayTotal['outstanding_amount'] = round($RowS['outstanding_amount'],2);
                            $response['response']['sum'][] = $customerArrayTotal;
                        }                           
                    }

                    // if($singleCustChk > 0){
                        if(count($customerArray['res'])>0)
                            $response['response'][$prevCustomer] = $customerArray;

                        

                    // }                         
                    // echo '<pre>';print_r($response['response']);exit;            

                    if(count($response['response']) == 0){
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                    }
                    else{
                        $response['ack'] = 1;
                        $response['error'] = NULL;
                    }

                }else {

                    $response['response'][] = array();
                }
            } else if ($attr['module'] == 'supplier') {

                $upToDate = $this->objGeneral->convertEndDate($attr['upToDate']);

                $Sql = "(SELECT srm.id,
							srm.supplier_code,
							srm.name,
							srm.company_id AS company_id,
							company.decimal_range AS decimal_range,	
							(SELECT d.code  
							 FROM currency d 
							 WHERE d.id = srm.currency_id
							 LIMIT 1) AS currency,			
				
					SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 3650 DAY),'$upToDate',srm.company_id,'sr_rep') AS 'total',

					DATE_SUB('$upToDate', INTERVAL 30 DAY) as 30DaysStartDate,
					'$upToDate' as 30DaysEndDate,
					
					SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 30 DAY),'$upToDate',srm.company_id,'sr_rep') AS '0-30 days',
					
					DATE_SUB('$upToDate', INTERVAL 60 DAY) as 60DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 30 DAY),INTERVAL 1 MICROSECOND) as 60DaysEndDate,

					SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 60 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 30 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'sr_rep') AS '31-60 days',
					
					DATE_SUB('$upToDate', INTERVAL 90 DAY) as 90DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 60 DAY),INTERVAL 1 MICROSECOND) as 90DaysEndDate,

					SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 90 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 60 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'sr_rep') AS '61-90 days',
						
					DATE_SUB('$upToDate', INTERVAL 120 DAY) as 120DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 90 DAY),INTERVAL 1 MICROSECOND) as 120DaysEndDate,

					SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 120 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 90 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'sr_rep') AS '91-120 days',
					
					DATE_SUB('$upToDate', INTERVAL 14600 DAY) as over120DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 120 DAY),INTERVAL 1 MICROSECOND) as over120DaysEndDate,

					SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 14600 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 120 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'sr_rep') AS 'over 120 days'
					
					FROM srm,company,srm_finance 
					WHERE srm.type IN (2,3) AND 
						srm.supplier_code IS NOT NULL AND
						srm.company_id=company.id and 
						srm.id=srm_finance.supplier_id and 
						srm.name !='' AND 
						srm.company_id=" . $this->arrUser['company_id'] . " $where
					ORDER BY srm.supplier_code ASC)

					UNION 
					
					(SELECT '' AS id,
							'' AS supplier_code,
							'Total (LCY)' AS NAME,
							'' AS company_id,
							'' AS decimal_range,	
							'' AS currency,			
					
					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 3650 DAY),'$upToDate',srm.company_id,'LCY_total')) AS 'total',

					DATE_SUB('$upToDate', INTERVAL 30 DAY) AS 30DaysStartDate,
					'$upToDate' AS 30DaysEndDate,
					
					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 30 DAY),'$upToDate',srm.company_id,'LCY_total')) AS '0-30 days',
					
					DATE_SUB('$upToDate', INTERVAL 60 DAY) AS 60DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 30 DAY),INTERVAL 1 MICROSECOND) AS 60DaysEndDate,

					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 60 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 30 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'LCY_total')) AS '31-60 days',
					
					DATE_SUB('$upToDate', INTERVAL 90 DAY) AS 90DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 60 DAY),INTERVAL 1 MICROSECOND) AS 90DaysEndDate,

					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 90 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 60 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'LCY_total')) AS '61-90 days',
						
					DATE_SUB('$upToDate', INTERVAL 120 DAY) AS 120DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 90 DAY),INTERVAL 1 MICROSECOND) AS 120DaysEndDate,

					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 120 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 90 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'LCY_total')) AS '91-120 days',
					
					DATE_SUB('$upToDate', INTERVAL 14600 DAY) AS over120DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 120 DAY),INTERVAL 1 MICROSECOND) AS over120DaysEndDate,

					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 14600 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 120 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'LCY_total')) AS 'over 120 days'
					
					FROM srm 
					WHERE  srm.name !='' AND srm.company_id=" . $this->arrUser['company_id'] . "
						$where)

					UNION 
					
					(SELECT '' AS id,
							'' AS supplier_code,
							CONCAT('Total (',(SELECT d.code  FROM currency d  WHERE d.id = srm.currency_id LIMIT 1),')') AS NAME,
							'' AS company_id,
							'' AS decimal_range,	
							'' AS currency,			
					
					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 3650 DAY),'$upToDate',srm.company_id,'sr_rep_sum')) AS 'total',

					DATE_SUB('$upToDate', INTERVAL 30 DAY) AS 30DaysStartDate,
					'$upToDate' AS 30DaysEndDate,
					
					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 30 DAY),'$upToDate',srm.company_id,'sr_rep_sum')) AS '0-30 days',
					
					DATE_SUB('$upToDate', INTERVAL 60 DAY) AS 60DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 30 DAY),INTERVAL 1 MICROSECOND) AS 60DaysEndDate,

					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 60 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 30 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'sr_rep_sum')) AS '31-60 days',
					
					DATE_SUB('$upToDate', INTERVAL 90 DAY) AS 90DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 60 DAY),INTERVAL 1 MICROSECOND) AS 90DaysEndDate,

					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 90 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 60 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'sr_rep_sum')) AS '61-90 days',
						
					DATE_SUB('$upToDate', INTERVAL 120 DAY) AS 120DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 90 DAY),INTERVAL 1 MICROSECOND) AS 120DaysEndDate,

					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 120 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 90 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'sr_rep_sum')) AS '91-120 days',
					
					DATE_SUB('$upToDate', INTERVAL 14600 DAY) AS over120DaysStartDate,
					DATE_SUB(DATE_SUB('$upToDate', INTERVAL 120 DAY),INTERVAL 1 MICROSECOND) AS over120DaysEndDate,

					SUM(SR_rep_aged_supp_sum(srm.id,DATE_SUB('$upToDate', INTERVAL 14600 DAY),DATE_SUB(DATE_SUB('$upToDate', INTERVAL 120 DAY),INTERVAL 1 MICROSECOND),srm.company_id,'sr_rep_sum')) AS 'over 120 days'
					
					FROM srm 
					WHERE  srm.name !='' AND srm.company_id=" . $this->arrUser['company_id'] . "
						$where
					GROUP BY srm.currency_id)";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {

                        $row = array();
                        $row['id'] = $Row['id'];
                        $row['suppNo'] = $Row['supplier_code'];
                        $row['name'] = $Row['name'];
                        $row['currency'] = $Row['currency'];

                        // $row['totalStartDate']  = $this->objGeneral->convert_unix_into_date($Row['totalStartDate']);
                        // $row['totalEndDate']  = $this->objGeneral->convert_unix_into_date($Row['totalEndDate']);
                        $row['total'] = $Row['total'];

                        $total += $Row['total'];

                        $row['30DaysStartDate'] = date("d/m/Y", strtotime($Row['30DaysStartDate']));
                        $row['30DaysEndDate'] = date("d/m/Y", strtotime($Row['30DaysEndDate']));

                        // $row['30daystitle'] = 
                        $row['0-30 days'] = $Row['0-30 days'];
                        $total30days += $Row['0-30 days'];

                        $row['60DaysStartDate'] = date("d/m/Y", strtotime($Row['60DaysStartDate']));
                        $row['60DaysEndDate'] = date("d/m/Y", strtotime($Row['60DaysEndDate']));
                        $row['31-60 days'] = $Row['31-60 days'];
                        $total60days += $Row['31-60 days'];

                        $row['90DaysStartDate'] = date("d/m/Y", strtotime($Row['90DaysStartDate']));
                        $row['90DaysEndDate'] = date("d/m/Y", strtotime($Row['90DaysEndDate']));
                        $row['61-90 days'] = $Row['61-90 days'];
                        $total90days += $Row['61-90 days'];

                        $row['120DaysStartDate'] = date("d/m/Y", strtotime($Row['120DaysStartDate']));
                        $row['120DaysEndDate'] = date("d/m/Y", strtotime($Row['120DaysEndDate']));
                        $row['91-120 days'] = $Row['91-120 days'];
                        $total120days += $Row['91-120 days'];

                        $row['over120DaysStartDate'] = date("d/m/Y", strtotime($Row['over120DaysStartDate']));
                        $row['over120DaysEndDate'] = date("d/m/Y", strtotime($Row['over120DaysEndDate']));
                        $row['over 120 days'] = $Row['over 120 days'];
                        $totalover120days += $Row['over 120 days'];

                        $response['response'][] = $row;
                    }

                    $response['ack'] = 1;
                    $response['error'] = NULL;
                } else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
            } else if ($attr['module'] == 'supplier2' || $attr['module'] == 'creditors') {

                $upToDate = $this->objGeneral->convertEndDate($attr['upToDate']);

                $Sql = 'CALL srrep_SupplierAgingSummary('.$this->arrUser['company_id'].',"'.$upToDate.'","'.$suppliersArray.'")';
                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 1) {
                    while ($Row = $RS->FetchRow()) {

                        $row = array();
                        $row['id'] = $Row['id'];
                        $row['suppNo'] = $Row['supplier_code'];
                        $row['name'] = $Row['supplierName'];
                        $row['currency'] = $Row['currency'];
                        $row['rank'] = $Row['rank'];

                        // $row['totalStartDate']  = $this->objGeneral->convert_unix_into_date($Row['totalStartDate']);
                        // $row['totalEndDate']  = $this->objGeneral->convert_unix_into_date($Row['totalEndDate']);
                        $row['total'] = $Row['total'];

                        $total += $Row['total'];

                        $row['s30DaysStartDate'] = date("d/m/Y", strtotime($Row['30DaysStartDate']));
                        $row['s30DaysEndDate'] = date("d/m/Y", strtotime($Row['30DaysEndDate']));

                        // $row['30daystitle'] = 
                        $row['s0to30days'] = $Row['30days'];
                        $total30days += $Row['30days'];

                        $row['s60DaysStartDate'] = date("d/m/Y", strtotime($Row['60DaysStartDate']));
                        $row['s60DaysEndDate'] = date("d/m/Y", strtotime($Row['60DaysEndDate']));
                        $row['s31to60days'] = $Row['60days'];
                        $total60days += $Row['60days'];

                        $row['s90DaysStartDate'] = date("d/m/Y", strtotime($Row['90DaysStartDate']));
                        $row['s90DaysEndDate'] = date("d/m/Y", strtotime($Row['90DaysEndDate']));
                        $row['s61to90days'] = $Row['90days'];
                        $total90days += $Row['90days'];

                        $row['s120DaysStartDate'] = date("d/m/Y", strtotime($Row['120DaysStartDate']));
                        $row['s120DaysEndDate'] = date("d/m/Y", strtotime($Row['120DaysEndDate']));
                        $row['s91to120days'] = $Row['120days'];
                        $total120days += $Row['120days'];

                        $row['over120DaysStartDate'] = date("d/m/Y", strtotime($Row['over120DaysStartDate']));
                        $row['over120DaysEndDate'] = date("d/m/Y", strtotime($Row['over120DaysEndDate']));
                        $row['over120days'] = $Row['over120days'];
                        $totalover120days += $Row['over120days'];

                        if(($Row['total'] != '333333333' || $Row['30days'] != '333333333'  || $Row['60days'] != '333333333' && 
                           $Row['90days'] != '333333333' || $Row['120days'] != '333333333'  || $Row['over120days'] != '333333333') || 
                           $Row['rank'] == 2 || $Row['rank'] ==3 ){

                               $response['response'][] = $row;
                        }
                    }

                    $response['ack'] = 1;
                    $response['error'] = NULL;
                } else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
            } else if ($attr['module'] == 'supplierAgingDetail' || $attr['module'] == 'creditorsAgingDetail') {

                //  echo $where;exit;
                if ($attr['upToDate'] > 0)
                    $upToDate = $this->objGeneral->convertEndDate($attr['upToDate']);
                else
                    $upToDate = date("Y-m-d");

                $prevSupplier ='';
                $singleSuppChk = 0;
                
                $sqll = 'CALL srrep_SuppAgingDetail('.$this->arrUser['company_id'].',"'.$suppliersArray.'","'.$upToDate.'")';                

                // echo $sqll;exit;
                $RSS = $this->objsetup->CSI($sqll);

                if ($RSS->RecordCount() > 0) {
                    while ($RowS = $RSS->FetchRow()) {

                        foreach ($RowS as $key => $value) {
                            if (is_numeric($key))
                                unset($RowS[$key]);
                        }            

                        if(!($prevSupplier!='') || $prevSupplier != $RowS['supplierCode']){   

                            if($prevSupplier!='')
                            {
                                $singleSuppChk = 0;
                                
                                if(count($supplierArray['res'])>0)
                                    $response['response'][$prevSupplier] = $supplierArray;
                            }
                            else{
                                $singleSuppChk = 1;
                            }               

                            $prevSupplier = $RowS['supplierCode'];
                            $supplierArray = array();  

                            $runningTotals = 0;                  
                        }                   
                        
                        if($prevSupplier == $RowS['supplierCode']){

                            if($RowS['Rank'] == 1){                        
                                $supplierArray['supplier_code'] = $RowS['supplierCode'];
                                $supplierArray['name'] = $RowS['supplierName'];
                                $supplierArray['primary_address_1'] = $RowS['primary_address_1'];
                                $supplierArray['primary_address_2'] = $RowS['primary_address_2'];
                                $supplierArray['primaryc_phone'] = $RowS['primaryc_phone'];
                                $supplierArray['primaryc_email'] = $RowS['primaryc_email'];

                                $supplierArray['city'] = $RowS['city'];
                                $supplierArray['county'] = $RowS['county'];
                                $supplierArray['postcode'] = $RowS['postcode'];
                                $supplierArray['country'] = $RowS['country_name'];

                                $supplierArray['postingGroup'] = $RowS['postingGroup'];
                                $supplierArray['vat_number'] = $RowS['vat_number'];
                                $supplierArray['bank_name'] = $RowS['bank_name'];
                                $supplierArray['account_name'] = $RowS['account_name'];
                                $supplierArray['swift_code'] = $RowS['swift_code'];
                                $supplierArray['iban'] = $RowS['iban'];
                                $supplierArray['sort_code'] = $RowS['sort_code'];
                                $supplierArray['account_no'] = $RowS['account_no'];
                                $supplierArray['currency'] = $RowS['currency'];
                                $supplierArray['payment_terms'] = $RowS['payment_terms'];
                            }

                            if($RowS['Rank'] == 2){   

                                $supplierStatementArray = array();

                                $supplierStatementArray['Posting_Date'] = $this->objGeneral->convert_unix_into_date($RowS['posting_date']);
                                $supplierStatementArray['Document_Type'] = $RowS['document_type'];
                                $supplierStatementArray['Document_No'] = $RowS['document_no'];
                                // $supplierStatementArray['Ref_No'] = $RowS['ref_no'];
                                $supplierStatementArray['currency'] = $RowS['currency'];
                                // $supplierStatementArray['convRate'] = $RowS['convRate'];
                                // $RowS['remaining_amount'] = $RowS['total_amount'] - $RowS['setteled_amount'];

                                // if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7)
                                //     $RemainingAmount = Round($RowS['remaining_amount'],2);
                                // else
                                //     $RemainingAmount = (-1) * Round($RowS['remaining_amount'],2);

                                // $supplierStatementArray['Outstanding_Amount'] = $RemainingAmount;
                                // $supplierStatementArray['Outstanding_Amountlcy'] = Round($RemainingAmount/$RowS['convRate'],2);

                                $supplierStatementArray['Outstanding_Amount'] = $RowS['remainingAmount'];
                                $supplierStatementArray['Outstanding_Amountlcy'] = $RowS['lcyAmount'];                              

                                $supplierStatementArray['DueDate'] = $RowS['due_date'];
                                $runningTotals = $runningTotals + $RowS['remainingAmount'];
                                
                                // if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7)
                                //     $runningTotals = $runningTotals + Round($RowS['remainingAmount'],2);//$RowS['remaining_amount'];
                                // else
                                //     $runningTotals = $runningTotals + Round($RowS['remainingAmount'],2);//$RowS['remaining_amount'];

                                $supplierStatementArray['balance'] = Round($runningTotals,2);
                                $RowS['totalSUM'] = Round($runningTotals,2);

                                $supplierArray['res'][] = $supplierStatementArray;
                            }                            
                        } 

                        if($RowS['Rank'] == 3 || $RowS['Rank'] == 4){ 
                            $supplierArrayTotal = array();  

                            $supplierArrayTotal['currency'] = $RowS['currency'];
                            $supplierArrayTotal['outstanding_amount'] = Round($RowS['outstanding_amount'],2);
                            $response['response']['sum'][] = $supplierArrayTotal;
                        }                           
                    }

                    // if($singleSuppChk > 0){
                        if(count($supplierArray['res'])>0)
                            $response['response'][$prevSupplier] = $supplierArray;
                    // }                         
                    // echo '<pre>';print_r($response['response']);exit;           

                    if(count($response['response']) == 0 || (($attr['module'] == 'supplierAgingDetail' || $attr['module'] == 'creditorsAgingDetail') && count($response['response'])<2)){
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                    }
                    else{
                        $response['ack'] = 1;
                        $response['error'] = NULL;
                    }

                }else {

                    $response['response'][] = array();
                }
            }
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        //echo '<pre>';print_r($response);exit;            
        return $response;
    }

    function getListing($attr) {
        $whereClause = '';
        $cutomerarray = '';
        $cutomerarray = '';
        $cutomerarray2 = '';

        $upToDate = $this->objGeneral->convert_date($attr['upToDate']); 
        $active_customer = ($attr['active_customer']) ? $attr['active_customer'] : 0;
        $finance_charges = ($attr['finance_charges']) ? $attr['finance_charges'] : 0;
        $insurance_charges = ($attr['insurance_charges']) ? $attr['insurance_charges'] : 0;
        $show_address = ($attr['show_address']) ? $attr['show_address'] : 0;
        $other_location = ($attr['other_location']) ? $attr['other_location'] : 0;

        if($attr['module']=='customerLabelsList'){
        if ($attr['customers']) {

            foreach ($attr['customers'] as $rec) {
                $cutomerarray .= $rec->id . ',';
            }
            $cutomerarray = substr($cutomerarray, 0, -1);

        } else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 
            /* $sqla = "SELECT  c.id
                    FROM crm c
                    WHERE c.type IN (2,3) AND 
                        c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $cutomerarray .= $Rowa['id'] . ',';
                }
                $cutomerarray = substr($cutomerarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }         

        $prevCustomer = 0;
        $singleCustChk = 0;        

            $Sql = "CALL srrep_customerListing(".$this->arrUser['company_id'].", $upToDate, '$cutomerarray', '$active_customer', '$finance_charges','$insurance_charges','$show_address','$other_location')";

            $RSS = $this->objsetup->CSI($Sql);
            $all_customer_arr = [];
            if ($RSS->RecordCount() > 0) {
                if($other_location) {       
                 while ($RowS = $RSS->FetchRow()) {
    
                    foreach ($RowS as $key => $value) {
                        if (is_numeric($key))
                            unset($RowS[$key]);
                    } 
               
                   if((!($prevCustomer>0) || $prevCustomer != $RowS['id'])){   
    
                        if($prevCustomer>0)
                        {
                            $singleCustChk = 0;
                            
                            if(count($customerArray['loc'])>0)
                                $response['response'][] = $customerArray;
                        }
                        else{                             
                            $singleCustChk = 1;
                        }               
                        $customerArray = array();  
                        $prevCustomer = $RowS['id'];                                    
                    }               
                     
                    if($prevCustomer == $RowS['id']){ 
                       if($RowS['Rank'] == 2){                 
                            $customerArray['customer_code'] = $RowS['emp_code'];
                            $customerArray['name'] = $RowS['emp_name'];
                            $customerArray['email'] = $RowS['emp_email'];
                            $customerArray['address_1'] = $RowS['address_1'];
                            $customerArray['address_2'] = $RowS['address_2'];   
                            $customerArray['city'] = $RowS['city'];
                            $customerArray['country'] = $RowS['country'];
                            $customerArray['county'] = $RowS['county'];
                            $customerArray['postcode'] = $RowS['postcode'];
                            $customerArray['phone'] = $RowS['phone'];
                            $customerArray['fax'] = $RowS['fax'];
                        //print_r($customerArray);
                        }
    
                        if($RowS['Rank'] == 3){   
                            
                            $customerStatementArray = array();
    
                            $customerStatementArray['customer_code'] = $RowS['emp_code'];
                            $customerStatementArray['loc_name'] = $RowS['emp_name'];
                            $customerStatementArray['loc_email'] = $RowS['emp_email'];
                            $customerStatementArray['loc_address_1'] = $RowS['address_1'];
                            $customerStatementArray['loc_address_2'] = $RowS['address_2'];   
                            $customerStatementArray['loc_city'] = $RowS['city'];
                            $customerStatementArray['loc_country'] = $RowS['country'];
                            $customerStatementArray['loc_county'] = $RowS['county'];
                            $customerStatementArray['loc_postcode'] = $RowS['postcode'];
                            $customerStatementArray['phone'] = $RowS['phone'];
                            $customerStatementArray['fax'] = $RowS['fax'];
                            $customerArray['loc'][] = $customerStatementArray;
                           // echo '<pre>';print_r($customerArray);exit;
                        }
                                 
                    }   
                      
                } 
                $response['response'][] = $customerArray;
            }else{
                while ($RowS = $RSS->FetchRow()) {
    
                    foreach ($RowS as $key => $value) {
                        if (is_numeric($key))
                            unset($RowS[$key]);
                    } 

                    $result = array();
                    $result['customer_code'] = $RowS['emp_code'];
                    $result['name'] = $RowS['emp_name'];
                    $result['email'] = $RowS['emp_email'];
                    $result['address_1'] = $RowS['address_1'];
                    $result['address_2'] = $RowS['address_2'];   
                    $result['city'] = $RowS['city'];
                    $result['country'] = $RowS['country'];
                    $result['county'] = $RowS['county'];
                    $result['postcode'] = $RowS['postcode'];
                    $result['phone'] = $RowS['phone'];
                    $result['fax'] = $RowS['fax'];
    
                    $response['response'][] = $result;
                }

                //echo '<pre>';print_r($response);exit;
            }
            if(count($response['response']) == 0){
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
                else{
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
    
            }else {
    
                $response['response'][] = array();
            }
        }elseif($attr['module']=='crmListing'){
            if ($attr['crm']) {
    
                foreach ($attr['crm'] as $rec) {
                    $cutomerarray .= $rec->id . ',';
                }
                $cutomerarray = substr($cutomerarray, 0, -1);
    
            } else {
    
                $sqla = "SELECT c.id 
                         FROM sr_crm_listing c
                         WHERE c.type =1 AND 
                               c.company_id=" . $this->arrUser['company_id'] . " ";
    
                //$sqla = $this->objsetup->whereClauseAppender($sqla, 40);
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);
    
                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {
    
                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }
    
                        // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                        $cutomerarray .= $Rowa['id'] . ',';
                    }
                    $cutomerarray = substr($cutomerarray, 0, -1);
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }         
    
            $prevCustomer = 0;
            $singleCustChk = 0;        
    
                $Sql = "CALL srrep_crmListing(".$this->arrUser['company_id'].", $upToDate, '$cutomerarray', '$active_customer', '$show_address','$other_location')";
                //echo $Sql;exit;
                $RSS = $this->objsetup->CSI($Sql);
                $all_customer_arr = [];
                if ($RSS->RecordCount() > 0) {
                    if($other_location) {       
                     while ($RowS = $RSS->FetchRow()) {
        
                        foreach ($RowS as $key => $value) {
                            if (is_numeric($key))
                                unset($RowS[$key]);
                        } 
                   
                       if((!($prevCustomer>0) || $prevCustomer != $RowS['id'])){   
        
                            if($prevCustomer>0)
                            {
                                $singleCustChk = 0;
                                
                                if(count($customerArray['loc'])>0)
                                    $response['response'][] = $customerArray;
                            }
                            else{                             
                                $singleCustChk = 1;
                            }               
                            $customerArray = array();  
                            $prevCustomer = $RowS['id'];                                    
                        }               
                         
                        if($prevCustomer == $RowS['id']){ 
                           if($RowS['Rank'] == 2){                 
                                $customerArray['customer_code'] = $RowS['emp_code'];
                                $customerArray['name'] = $RowS['emp_name'];
                                $customerArray['email'] = $RowS['emp_email'];
                                $customerArray['address_1'] = $RowS['address_1'];
                                $customerArray['address_2'] = $RowS['address_2'];   
                                $customerArray['city'] = $RowS['city'];
                                $customerArray['country'] = $RowS['country'];
                                $customerArray['county'] = $RowS['county'];
                                $customerArray['postcode'] = $RowS['postcode'];
                                $customerArray['phone'] = $RowS['phone'];
                                $customerArray['fax'] = $RowS['fax'];
                            //print_r($customerArray);
                            }
        
                            if($RowS['Rank'] == 3){   
                                
                                $customerStatementArray = array();
        
                                $customerStatementArray['customer_code'] = $RowS['emp_code'];
                                $customerStatementArray['loc_name'] = $RowS['emp_name'];
                                $customerStatementArray['loc_email'] = $RowS['emp_email'];
                                $customerStatementArray['loc_address_1'] = $RowS['address_1'];
                                $customerStatementArray['loc_address_2'] = $RowS['address_2'];   
                                $customerStatementArray['loc_city'] = $RowS['city'];
                                $customerStatementArray['loc_country'] = $RowS['country'];
                                $customerStatementArray['loc_county'] = $RowS['county'];
                                $customerStatementArray['loc_postcode'] = $RowS['postcode'];
                                $customerStatementArray['phone'] = $RowS['phone'];
                                $customerStatementArray['fax'] = $RowS['fax'];
                                $customerArray['loc'][] = $customerStatementArray;
                               // echo '<pre>';print_r($customerArray);exit;
                            }
                                     
                        }   
                          
                    } 
                    $response['response'][] = $customerArray;
                }else{
                    while ($RowS = $RSS->FetchRow()) {
        
                        foreach ($RowS as $key => $value) {
                            if (is_numeric($key))
                                unset($RowS[$key]);
                        } 
    
                        $result = array();
                        $result['customer_code'] = $RowS['emp_code'];
                        $result['name'] = $RowS['emp_name'];
                        $result['email'] = $RowS['emp_email'];
                        $result['address_1'] = $RowS['address_1'];
                        $result['address_2'] = $RowS['address_2'];   
                        $result['city'] = $RowS['city'];
                        $result['country'] = $RowS['country'];
                        $result['county'] = $RowS['county'];
                        $result['postcode'] = $RowS['postcode'];
                        $result['phone'] = $RowS['phone'];
                        $result['fax'] = $RowS['fax'];
        
                        $response['response'][] = $result;
                    }
    
                    //echo '<pre>';print_r($response);exit;
                }
                if(count($response['response']) == 0){
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                    }
                    else{
                        $response['ack'] = 1;
                        $response['error'] = NULL;
                    }
        
                }else {
        
                    $response['response'][] = array();
                }
            }
            
            return $response;
    }


    function VATReport($attr) {
        $module = $attr['module'];
        $vatEntriesStatusID = $attr['vatEntriesStatusID'];
        $vatEntriesPeriodID = $attr['vatEntriesPeriodID'];
        $dateFrom = $attr['dateFrom'];

        /* $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
          $dateTo = $this->objGeneral->convert_date($attr['dateTo']); */

        if ($dateFrom > 0)
            $dateFrom = "'" . $this->objGeneral->convertStartDate($dateFrom) . "'";
        else
            $dateFrom = "'1900-01-01'";

        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);


        /* if ($vatEntriesPeriodID == 1 && $vatEntriesStatusID = 1) {//2
            $dateFrom = "'1900-01-01'";
        } */


        $response = array();

        $SqlA = "SELECT VatPosting_gl_account
				 FROM financial_settings
				 WHERE company_id=" . $this->arrUser['company_id'] . " 
				 limit 1";

        // echo $SqlA;exit;
        $RSA = $this->objsetup->CSI($SqlA);
        $RA = $RSA->FetchRow();

        $VatPostingGlAccount = $RA['VatPosting_gl_account'];

        if (!($VatPostingGlAccount > 0)) {
            $response['ack'] = 2;
            $response['error'] = 'VAT Report Posting Account is not selected in setup!';
            return $response;
        }

        if ($dateTo > 0) {

            if ($module == 'summary') {

                 

                $Sql = "CALL srrep_vatSummary(" . $this->arrUser['company_id'] . "," . $dateFrom . ",'" . $dateTo . "'," . $this->arrUser['id'] . "," . $vatEntriesStatusID . ",".$vatEntriesPeriodID.")";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    $Row = $RS->FetchRow();

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $response['response'] = $Row;
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
                else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
            } elseif ($module == 'detail') {


                $SqlVAT = "CALL srrep_vatDetail(" . $this->arrUser['company_id'] . "," . $dateFrom . ",'" . $dateTo . "'," . $this->arrUser['id'] . "," . $vatEntriesStatusID . ",".$vatEntriesPeriodID.")";

                // echo $SqlVAT;exit;
                $RsVAT = $this->objsetup->CSI($SqlVAT);

                if ($RsVAT->RecordCount() > 0) {

                    while ($RowVAT = $RsVAT->FetchRow()) {

                        foreach ($RowVAT as $key => $value) {
                            if (is_numeric($key))
                                unset($RowVAT[$key]);
                        }

                        $RowVAT['PostingDate'] = date("d/m/Y", strtotime($RowVAT['PostingDate']));
                        $response['response'][] = $RowVAT;
                    }
                }

                $response['ack'] = 1;
                $response['error'] = NULL;
            }
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }


        return $response;
    }

    function postVATReport($attr) {
<<<<<<< HEAD
=======

        // error_reporting(E_ALL);

        // echo '<pre>';
        // print_r($attr);
>>>>>>> e31237e9eb73244117d4370f0a4bd96ad1c30564
        $module = $attr['module'];
        $vatEntriesStatusID = $attr['vatEntriesStatusID'];
        $vatEntriesPeriodID = $attr['vatEntriesPeriodID'];

        $dateFrom = $attr['dateFrom'];

        if ($dateFrom)
            $dateFrom = "'" . $this->objGeneral->convertStartDate($attr['dateFrom']) . "'";
        else
            $dateFrom = "'1900-01-01'"; //0;

        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);
        $VATPostingDate = $this->objGeneral->convertEndDate($attr['VATPostingDate']);

        /* if ($vatEntriesPeriodID == 2) {
            $dateFrom = 0;
        } */

<<<<<<< HEAD
        $this->objsetup->SRTraceLogsPHP(LOG_LEVEL_2, 
                                        __CLASS__, 
                                        __FUNCTION__, 
                                        SR_TRACE_PHP, 
                                        'Enter',
                                        'postVATReport',
                                        'dateFrom:'.$dateFrom,
                                        'dateTo:'.$dateTo,
                                        'vatEntriesStatusID:'.$vatEntriesStatusID);
=======
        $srLogTrace = array();

        $srLogTrace['ErrorCode'] = '';
        $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
        $srLogTrace['Function'] = __FUNCTION__;
        $srLogTrace['CLASS'] = __CLASS__;
        $srLogTrace['Parameter1'] = 'Enter';
        $srLogTrace['Parameter2'] = 'postVATReport';
        $srLogTrace['Parameter3'] = 'dateFrom:"'.$dateFrom.'"';
        $srLogTrace['Parameter4'] = 'dateTo:"'.$dateTo.'"';
        $srLogTrace['Parameter5'] = 'vatEntriesStatusID:"'.$vatEntriesStatusID.'"';

        $this->objsetup->SRTraceLogsPHP($srLogTrace);


        // $this->objsetup->SRTraceLogsPHP(LOG_LEVEL_2, 
        //                                 __CLASS__, 
        //                                 __FUNCTION__, 
        //                                 SR_TRACE_PHP, 
        //                                 'Enter',
        //                                 'postVATReport',
        //                                 'dateFrom:"'.$dateFrom.'"',
        //                                 'dateTo:"'.$dateTo.'"',
        //                                 'vatEntriesStatusID:"'.$vatEntriesStatusID.'"');
>>>>>>> e31237e9eb73244117d4370f0a4bd96ad1c30564
    
        $this->Conn->beginTrans();
        $this->Conn->autoCommit = false;

        $response = array();

        if ($dateTo > 0) {
            $Sql2 = "CALL SR_VAT_Report_Post(" . $this->arrUser['company_id'] . ", 
                                             " . $dateFrom . ",
                                             '" . $dateTo . "',
                                             '" . $VATPostingDate . "',
											 " . $this->arrUser['id'] . ",
											 " . $vatEntriesStatusID . ",
                                             ".$vatEntriesPeriodID.",
                                            @errorNo,
                                            @param1,
                                            @param2,
                                            @param3,
                                            @param4)";
                                                    /* 
											 " . $vatEntriesPeriodID . ", */

            // echo $Sql2;
            // exit;
            
            $Rs2 = $this->objsetup->CSI($Sql2);

            
            if ($Rs2->msg == 1) {
                // mysqli_free_result($Rs2); $Rs2->fields['Result'] == 1

                $response['ack'] = 1;
                $response['error'] = NULL;
                $this->Conn->commitTrans();
                $this->Conn->autoCommit = true;
<<<<<<< HEAD
                
                $this->objsetup->SRTraceLogsPHP(LOG_LEVEL_2, 
                                            __CLASS__, 
                                            __FUNCTION__, 
                                            SR_TRACE_PHP, 
                                            'Exit',
                                            'postVATReport',
                                            'dateFrom:'.$dateFrom,
                                            'dateTo:'.$dateTo,
                                            'vatEntriesStatusID:'.$vatEntriesStatusID);
=======

                $srLogTrace = array();

                $srLogTrace['ErrorCode'] = '';
                $srLogTrace['LOG_LEVEL'] = LOG_LEVEL_2;
                $srLogTrace['Function'] = __FUNCTION__;
                $srLogTrace['CLASS'] = __CLASS__;
                $srLogTrace['Parameter1'] = 'Exit';
                $srLogTrace['Parameter2'] = 'postVATReport';
                $srLogTrace['Parameter3'] = 'dateFrom:"'.$dateFrom.'"';
                $srLogTrace['Parameter4'] = 'dateTo:"'.$dateTo.'"';
                $srLogTrace['Parameter5'] = 'vatEntriesStatusID:"'.$vatEntriesStatusID.'"';

                $this->objsetup->SRTraceLogsPHP($srLogTrace);
                
                // $this->objsetup->SRTraceLogsPHP(LOG_LEVEL_2, 
                //                             __CLASS__, 
                //                             __FUNCTION__, 
                //                             SR_TRACE_PHP, 
                //                             'Exit',
                //                             'postVATReport',
                //                             'dateFrom:"'.$dateFrom.'"',
                //                             'dateTo:"'.$dateTo.'"',
                //                             'vatEntriesStatusID:"'.$vatEntriesStatusID.'"');
>>>>>>> e31237e9eb73244117d4370f0a4bd96ad1c30564
                return $response;
            } 
            else {
                $response['ack'] = 0;
                $response['error'] = $RS2->Error;
                return $response;
            }
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    }

    function openSubmittedVATReturnsThroughOtherMeans($attr) {
        $dateFrom = $attr['dateFrom'];

        if ($dateFrom > 0)
            $dateFrom = "'" . $this->objGeneral->convertStartDate($dateFrom) . "'";
        else
            $dateFrom = "'1900-01-01'";

        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);
        $response = array();

        $SqlA = "SELECT VatPostedDate,vatPostedDateUnConv,COALESCE(object_name,type_description) AS name
				 FROM gl_account_txn
				 WHERE company_id=" . $this->arrUser['company_id'] . " AND TYPE=12 AND invoice_dateUnConv Between $dateFrom AND '$dateTo' AND object_name IS NOT NULL
                 GROUP BY object_name ";

        // echo $SqlA;exit;
        $RSA = $this->objsetup->CSI($SqlA);

        if ($RSA->RecordCount() > 0) {

            while ($Row = $RSA->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $response['response'][] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    }
    
    function openSubmittedVATReturnsEntries($attr) {
        $VATReturnsName = $attr['VATReturnName'];
        $response = array();

        $SqlA = "SELECT 
                    (CASE WHEN (type IN (1,2)) THEN 'Sales' ELSE 'Purchase' END) AS `HeaderType`,
                    'HeaderorDetailorSumOfRecords'        AS `RecordType`,
                    type_description   AS `DocumentType`,
                    object_code        AS `DocumentNo`,
                    (CASE WHEN (type IN (1,2)) THEN 1 ELSE 5 END) AS `Rank`,
                    postingGrp         AS `PostingGrp`,
                    gl_account_id      AS `gl_account_id`,
                    gl_account_name    AS `gl_account_name`,
                    gl_account_code    AS `gl_account_code`,
                    VATName            AS `VATRate`,
                    invoice_dateUnConv AS `PostingDate`,
                    COALESCE((NetAmount/CurrencyRate),0) AS `Base`,
                    (COALESCE((debit_amount_LCY + credit_amount_LCY),0) * (CASE WHEN ((COALESCE((NetAmount/CurrencyRate),0) < 0) AND (type IN (1,2))) THEN -(1) ELSE 1 END)) AS `Amount`,
                    DebitorCreditSign  AS `DebitorCreditSign`,
                    vatTransactionID   AS `transaction_id`,
                    type               AS `type`,
                    object_no          AS `object_no`,
                    object_name        AS `object_name`,
                    company_id         AS `company_id`,
                    vatPosted          AS `VatPosted` 
				 FROM gl_account_txn
				 WHERE company_id=" . $this->arrUser['company_id'] . " AND 
                       VatPostedDate = '$VATReturnsName->VatPostedDate' AND 
                       type IN (1,2,3,4) ";

        // echo $SqlA;exit;
        $RSA = $this->objsetup->CSI($SqlA);

        if ($RSA->RecordCount() > 0) {

            while ($Row = $RSA->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $response['response'][] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        /* $RA = $RSA->FetchRow();

        $VatPostingGlAccount = $RA['VatPosting_gl_account'];

        if (!($VatPostingGlAccount > 0)) {
            $response['ack'] = 2;
            $response['error'] = 'VAT Report Posting Account is not selected in setup!';
            return $response;
        } */

        /* $Sql = "CALL srrep_vatSummary(" . $this->arrUser['company_id'] . "," . $dateFrom . ",'" . $dateTo . "'," . $this->arrUser['id'] . "," . $vatEntriesStatusID . ",".$vatEntriesPeriodID.")";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();

            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }

            $response['response'] = $Row;
            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        } */

        return $response;
    }

    function selCustomerforStatementReport($attr) {

        $key = hash('sha256', SECRET_KEY);
        $iv = substr(hash('sha256', SECRET_IV), 0, 16);
        $outputInvName = openssl_decrypt(base64_decode($attr['selCust']), SECRET_METHOD, $key, 0, $iv);
        $fileName = explode(",",$outputInvName);

        /* 
        $pdfName = $fileName[1].'.pdf';        
        if(!(strlen($fileName[1])>0))
            $pdfName = $outputInvName; */

        $customerID = $fileName[1];
        // $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        // $defaultFilter = false;
        // $cond = $attr['cond'];  

        $Sql = "SELECT c.id as cid,c.customer_code,c.name,c.company_id
                FROM crm c
                WHERE c.type IN (2,3) AND 
                      c.customer_code IS NOT NULL AND 
                      c.name !='' AND 
<<<<<<< HEAD
                      c.id=" . $customerID. "";
=======
                      c.id=" . $customerID. "
                Order by c.customer_code DESC";
>>>>>>> e31237e9eb73244117d4370f0a4bd96ad1c30564
        
        $RS = $this->objsetup->CSI($Sql);



        /* if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        if (!empty($attr['selCust'])) {
            $attr['searchKeyword']['cid'] = $customerID;//$attr['selCust'];
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        $response = array();

        $Sql = "  SELECT * FROM (SELECT c.id as cid,c.customer_code,c.name,c.statusp,finance.posting_group_id,c.region,
                                        (SELECT currency_id FROM crm WHERE id = c.id) as currencyID,
                                        c.buying_group,
                                        c.segment,
                                        ref.name as postingGrp
                                 FROM sr_crm_listing c
                                 LEFT JOIN finance ON finance.customer_id = c.id
                                 LEFT JOIN ref_posting_group as ref on ref.id=finance.posting_group_id
                                 WHERE c.type IN (2,3) AND 
                                       c.customer_code IS NOT NULL AND 
                                       c.name !='' AND 
                                       c.company_id=" . $this->arrUser['company_id'] . ") AS tbl  
                  WHERE 1  " . $where_clause . " ";

        // $Sql = $this->objsetup->whereClauseAppender($Sql, 24);

        $subQueryForBuckets = "SELECT  c.id
                               FROM sr_crm_listing c
                               WHERE c.id IS NOT NULL ";
        $subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);

        // echo $subQueryForBuckets;exit;

        $Sql .= " AND (tbl.cid IN ($subQueryForBuckets) ) ";
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr['sort_column'];

            if ($attr['sort_column'] == 'customer_code')
                $column = 'tbl.' . 'customer_code';
            else if ($attr['sort_column'] == 'name')
                $column = 'tbl.' . 'name';
            else if ($attr['sort_column'] == "region")
                $column = 'tbl.' . 'region';
            else if ($attr['sort_column'] == "buying_group")
                $column = 'tbl.' . 'buying_group';
            else if ($attr['sort_column'] == "segment")
                $column = 'tbl.' . 'segment';
            else if ($attr['sort_column'] == "postingGrp")
                $column = 'tbl.' . 'postingGrp';
            else if ($attr['sort_column'] == 'statusp')
                $column = 'tbl.statusp';

            $order_type = "Order BY " . $column . " DESC";
        }

        $column = 'tbl.cid';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " DESC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;

        $RS = $this->objsetup->CSI($response['q'], "customer", sr_ViewPermission);

        $response['q'] = ''; */

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['cid'];
                $row['customer_code'] = $Row['customer_code'];
                $row['name'] = $Row['name'];
                $row['company_id'] = $Row['company_id'];
                // $row['currency_id'] = $Row['currencyID'];
                // $row['posting_group_id'] = $Row['posting_group_id'];
                // $row['postingGrp'] = $Row['postingGrp'];
                // $row['region'] = $Row['region'];
                // $row['buying_group'] = $Row['buying_group'];
                // $row['segment'] = $Row['segment'];
                // $row['statusp'] = $Row['statusp'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['customerID'] = $customerID;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        // if ($cond == 'Detail')
        //     $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('CUSTDetailModal');
        // else
        //     $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('CUSTModal');

        // $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function customerDataForReport($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];
             

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        if (!empty($attr['selCust'])) {

            $attr['searchKeyword']['cid'] = $attr['selCust'];

            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }
        
        // if (empty($where_clause)) {
        //     $defaultFilter = true;
        //     $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("Customer", $this->arrUser);
        // }

        $response = array();

        $Sql = "  SELECT * FROM (SELECT c.id as cid,c.customer_code,c.name,c.statusp,finance.posting_group_id, 
						 c.region,(SELECT currency_id FROM crm WHERE id = c.id) as currencyID,c.buying_group,c.segment,ref.name as postingGrp
				  FROM sr_crm_listing c
				  LEFT JOIN finance ON finance.customer_id = c.id
				  LEFT JOIN ref_posting_group as ref on ref.id=finance.posting_group_id
				  WHERE c.type IN (2,3) AND 
				  	  	c.customer_code IS NOT NULL AND 
<<<<<<< HEAD
						c.company_id=" . $this->arrUser['company_id'] . ") AS tbl  where 1  " . $where_clause . " ";
=======
						c.company_id=" . $this->arrUser['company_id'] . " 
                Order by c.customer_code DESC) AS tbl  where 1  " . $where_clause . " ";
>>>>>>> e31237e9eb73244117d4370f0a4bd96ad1c30564

        // $Sql = $this->objsetup->whereClauseAppender($Sql, 24);

        $subQueryForBuckets = "SELECT  c.id
                               FROM sr_crm_listing c
                               WHERE c.id IS NOT NULL  AND 
						             c.type IN (2,3) AND 
                                     c.company_id=" . $this->arrUser['company_id'] . "";
        //$subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);

        // echo $subQueryForBuckets;exit;

        $Sql .= " AND (tbl.cid IN (".$subQueryForBuckets.") ) ";
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr['sort_column'];

            if ($attr['sort_column'] == 'customer_code')
                $column = 'tbl.' . 'customer_code';
            else if ($attr['sort_column'] == 'name')
                $column = 'tbl.' . 'name';
            else if ($attr['sort_column'] == "region")
                $column = 'tbl.' . 'region';
            else if ($attr['sort_column'] == "buying_group")
                $column = 'tbl.' . 'buying_group';
            else if ($attr['sort_column'] == "segment")
                $column = 'tbl.' . 'segment';
            else if ($attr['sort_column'] == "postingGrp")
                $column = 'tbl.' . 'postingGrp';
            else if ($attr['sort_column'] == 'statusp')
                $column = 'tbl.statusp';

            $order_type = "Order BY " . $column . " DESC";
        }

        //$column = 'tbl.cid';
        $column = 'tbl.customer_code';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;

        $RS = $this->objsetup->CSI($response['q'], "customer", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['cid'];
                $row['customer_code'] = $Row['customer_code'];
                $row['name'] = $Row['name'];
                $row['currency_id'] = $Row['currencyID'];
                $row['posting_group_id'] = $Row['posting_group_id'];
                $row['postingGrp'] = $Row['postingGrp'];
                $row['region'] = $Row['region'];
                $row['buying_group'] = $Row['buying_group'];
                $row['segment'] = $Row['segment'];
                $row['statusp'] = $Row['statusp'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        if ($cond == 'Detail')
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('CUSTDetailModal');
        else
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('CUSTModal');

        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function crmDataForReport($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];
             

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        if (!empty($attr['selCust'])) {

            $attr['searchKeyword']['cid'] = $attr['selCust'];

            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }
        
        // if (empty($where_clause)) {
        //     $defaultFilter = true;
        //     $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("CRM", $this->arrUser);
        // }

        $response = array();

        $Sql = "  SELECT * FROM (SELECT c.id as cid,c.crm_code,c.name,c.statusp,finance.posting_group_id, 
						 c.region,(SELECT currency_id FROM crm WHERE id = c.id) as currencyID,c.buying_group,c.segment,ref.name as postingGrp
				  FROM sr_crm_listing c
				  LEFT JOIN finance ON finance.customer_id = c.id
				  LEFT JOIN ref_posting_group as ref on ref.id=finance.posting_group_id
				  WHERE c.type =1 AND 
				  	  	c.crm_code IS NOT NULL AND 
						c.name !='' AND 
						c.company_id=" . $this->arrUser['company_id'] . ") AS tbl  where 1  " . $where_clause . " ";

        // $Sql = $this->objsetup->whereClauseAppender($Sql, 24);

        $subQueryForBuckets = "SELECT  c.id
                               FROM sr_crm_listing c
                               WHERE c.id IS NOT NULL ";
        //$subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 40);

        // echo $subQueryForBuckets;exit;

        $Sql .= " AND (tbl.cid IN (".$subQueryForBuckets.") ) ";
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr['sort_column'];

            if ($attr['sort_column'] == 'customer_code')
                $column = 'tbl.' . 'customer_code';
            else if ($attr['sort_column'] == 'name')
                $column = 'tbl.' . 'name';
            else if ($attr['sort_column'] == "region")
                $column = 'tbl.' . 'region';
            else if ($attr['sort_column'] == "buying_group")
                $column = 'tbl.' . 'buying_group';
            else if ($attr['sort_column'] == "segment")
                $column = 'tbl.' . 'segment';
            else if ($attr['sort_column'] == "postingGrp")
                $column = 'tbl.' . 'postingGrp';
            else if ($attr['sort_column'] == 'statusp')
                $column = 'tbl.statusp';

            $order_type = "Order BY " . $column . " DESC";
        }

        //$column = 'tbl.cid';
        $column = 'tbl.crm_code';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;

        $RS = $this->objsetup->CSI($response['q'], "crm", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['cid'];
                $row['crm_code'] = $Row['crm_code'];
                $row['name'] = $Row['name'];
                $row['currency_id'] = $Row['currencyID'];
                $row['posting_group_id'] = $Row['posting_group_id'];
                $row['postingGrp'] = $Row['postingGrp'];
                $row['region'] = $Row['region'];
                $row['buying_group'] = $Row['buying_group'];
                $row['segment'] = $Row['segment'];
                $row['statusp'] = $Row['statusp'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('CRMDetailModal');
        // if ($cond == 'Detail')
        //     $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('CUSTDetailModal');
        // else
        //     $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('CUSTModal');

        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function supplierDataForReport($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];   
        $where_clauseRep = '';  

        if($attr['module'] == 'creditors'){
            $where_clauseRep = ' (s.excl_from_report IS NULL  OR 
                                  s.excl_from_report =0)  AND '; 
        }

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        if (empty($where_clause)) {
            $defaultFilter = true;
            $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("Supplier", $this->arrUser);
        }

        $response = array();

        $Sql = "  SELECT * 
                  FROM (SELECT s.id as sid,s.supplier_code,s.name,s.statusp,s.posting_group_id,
                                s.region,s.selling_group,s.currency_id,s.segment,ref.name as postingGrp
                        FROM sr_srm_general_sel1 s
                        LEFT JOIN ref_posting_group AS ref ON ref.id=s.posting_group_id
                        WHERE s.type IN (2,3) AND 
                                s.supplier_code IS NOT NULL AND 
                                s.name !='' AND 
                                $where_clauseRep
                                s.company_id=" . $this->arrUser['company_id'] . ") AS tbl  
                   WHERE 1 " . $where_clause . " ";       

        if ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2){

            $subQueryForBuckets = "SELECT  s.id
                               FROM sr_srm_general_sel s
                               WHERE s.id IS NOT NULL ";

            //$subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 24);
            // echo $subQueryForBuckets;exit;

            $Sql .= " AND (tbl.sid IN (".$subQueryForBuckets.")) ";
        }

        
        // $Sql = $this->objsetup->whereClauseAppender($Sql, 24);
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr[sort_column];

            if ($attr['sort_column'] == 'supplier_code')
                $column = 'tbl.' . 'supplier_code';
            else if ($attr['sort_column'] == 'name')
                $column = 'tbl.' . 'name';
            else if ($attr['sort_column'] == "statusp")
                $column = 'tbl.' . 'statusp';
            else if ($attr['sort_column'] == "region")
                $column = 'tbl.' . 'region';
            else if ($attr['sort_column'] == "segment")
                $column = 'tbl.' . 'segment';
            else if ($attr['sort_column'] == "postingGrp")
                $column = 'tbl.' . 'postingGrp';
            else if ($attr['sort_column'] == 'selling_group')
                $column = 'tbl.selling_group';

            $order_type = "Order BY " . $column . " DESC";
        }

        //$column = 'tbl.sid';
        $column = 'tbl.supplier_code';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;

        $RS = $this->objsetup->CSI($response['q'], "supplier", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['sid'];
                $row['supplier_code'] = $Row['supplier_code'];
                $row['name'] = $Row['name'];
                $row['currency_id'] = $Row['currency_id'];
                $row['postingGrp'] = $Row['postingGrp'];
                $row['posting_group_id'] = $Row['posting_group_id'];
                $row['region'] = $Row['region'];
                $row['selling_group'] = $Row['selling_group'];
                $row['segment'] = $Row['segment'];
                $row['statusp'] = $Row['statusp'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        if ($cond == 'Detail')
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('SUPPDetailModal');
        else
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('SUPPModal');

        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function itemDataForReport($attr) {
        // $result = array();

        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        } 

         if (empty($where_clause)) {
            $defaultFilter = true;
            $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("Item", $this->arrUser);
        } 

        $response = array();

        $Sql = "  SELECT * FROM ( SELECT prd.id,
						 prd.product_code,
						 prd.description,
                         prd.statusp,
						 prd.brand_id,
						 prd.category_id,
						 prd.unit_id,
						 prd.standard_price, 
                         prd.category_name, 
                         prd.brand_name, 
                         prd.unit_name
					From productcache  prd
					where prd.product_code IS NOT NULL and 
						  prd.company_id=" . $this->arrUser['company_id'] . ") AS tbl 
                    where 1 " . $where_clause . " ";
        //prd.status <> -1

        // $Sql = $this->objsetup->whereClauseAppender($Sql, 11);

        $subQueryForBuckets = "SELECT  prd.id
                               FROM productcache prd
                               WHERE prd.id IS NOT NULL ";
        //$subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 11);

        // echo $subQueryForBuckets;exit;

        $Sql .= " AND (tbl.id IN (".$subQueryForBuckets.") ) ";

        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr[sort_column];

            if ($attr['sort_column'] == 'product_code')
                $column = 'tbl.' . 'product_code';
            else if ($attr['sort_column'] == 'description')
                $column = 'tbl.' . 'description';
            else if ($attr['sort_column'] == "statusp")
                $column = 'tbl.' . 'statusp';
            else if ($attr['sort_column'] == "category_name")
                $column = 'tbl.' . 'category_name';
            else if ($attr['sort_column'] == "brand_name")
                $column = 'tbl.' . 'brand_name';
            else if ($attr['sort_column'] == "unit_name")
                $column = 'tbl.' . 'unit_name';

            $order_type = "Order BY " . $column . " DESC";
        }

        $column = 'tbl.id';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " DESC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;

        $RS = $this->objsetup->CSI($response['q'], "item", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['product_code'] = $Row['product_code'];
                $row['description'] = $Row['description'];
                $row['category_name'] = $Row['category_name'];
                $row['brand_name'] = $Row['brand_name'];
                $row['unit_name'] = $Row['unit_name'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = null;
        }
        else {
            //change the ack to 1 beacause a bug was created to do so
            $response['ack'] = 1;
            $response['error'] = 'No Record found';
        }

        if ($cond == 'Detail')
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('itemDetailModal');
        else
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('itemModal');

        return $response;
    }


    /* function GLDataForReport($attr) {
        $cond = $attr['cond'];
        $result = array();

        $cat_id = (isset($attr['cat_id']) && $attr['cat_id'] != '') ? $attr['cat_id'] : 0;

        $cats = "";
        if (is_array($cat_id)) {
            foreach ($cat_id as $index => $cat) {
               $cats .= $cat;
                if ($index < count($cat_id) - 1) {
                    $cats.=", ";
                }
            }
        } else {
            $cats .= $cat;
        }

        $Sql = "SELECT  gl.id,
                        gl.vatRateID,
                        gl.displayName,
                        gl.accountCode AS glaccountCode,
                        gl.accountType
                FROM gl_account AS gl
                WHERE   
			        gl.company_id=" . $this->arrUser['company_id'] . " AND 
                    ((gl.allowPosting=1 AND gl.accountType=3) OR gl.accountType=5)";

        // AND gl.categoryID IN (SELECT id FROM `gl_account` WHERE gl_account_ref_id IN ($cats))

        $Sql = $this->objsetup->whereClauseAppender($Sql, 65);
        $Sql = $Sql . ' ORDER BY gl.accountCode ASC';

        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['product_code'] = $Row['glaccountCode'];
                $row['name'] = $Row['displayName'];

                $result['response'][] = $row;
            }
            $result['ack'] = 1;
            $result['error'] = null;
        }
        else {
            $result['ack'] = 0;
            $result['error'] = 'No customer found';
        }

        require_once(SERVER_PATH . "/classes/Setup.php");
        $objsetup = new Setup($this->arrUser);
        
        $result['response']['tbl_meta_data'] = $objsetup->GetTableMetaData('GLDetailModal', 1);

        return $result;
    } */

    function GLDataForReport($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }
        
        /* if (empty($where_clause)) {
            $defaultFilter = true;
            $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("Customer", $this->arrUser);
        } */

        $response = array();

        $Sql_1 = "SELECT  gl.id,
                                        gl.vatRateID,
                                        gl.displayName as name,
                                        gl.displayName,
                                        gl.category,
                                        gl.accountCode AS glaccountCode,
                                        gl.accountType
                                FROM gl_account AS gl
                                WHERE   
                                    gl.company_id=" . $this->arrUser['company_id'] . " AND 
                                    ((gl.allowPosting=1 AND gl.accountType=3) OR gl.accountType=5) ";
        //$Sql = $this->objsetup->whereClauseAppender($Sql, 65);
        $Sql = "SELECT * FROM ( $Sql_1 ) AS tbl where 1  " . $where_clause . " ";
        // echo $subQueryForBuckets;exit;

        // $Sql .= " AND (tbl.id IN ($subQueryForBuckets) ) ";
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr['sort_column'];

            if ($attr['sort_column'] == 'displayName')
                $column = 'tbl.' . 'displayName';
            else if ($attr['sort_column'] == 'glaccountCode')
                $column = 'tbl.' . 'glaccountCode';
            else if ($attr['sort_column'] == 'statusp')
                $column = 'tbl.statusp';

            $order_type = "Order BY " . $column . " DESC";
        }

        $column = 'tbl.glaccountCode';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;

        $RS = $this->objsetup->CSI($response['q'], "charts_of_accounts", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['glaccountCode'] = $Row['glaccountCode'];
                $row['displayName'] = $Row['name'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('GLDetailModal');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function euCountriesDataForReport($attr) {
        // $cond = $attr['cond'];
        $result = array();

        $Sql = "SELECT id,code,name,ref_country_id From ecsalelistcountries";

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['name'] = $Row['name'];
                $row['code'] = $Row['code'];
                $row['ref_country_id'] = $Row['ref_country_id'];

                $result['response'][] = $row;
            }
            $result['ack'] = 1;
            $result['error'] = null;
        }
        else {
            $result['ack'] = 0;
            $result['error'] = 'No EC Countries found!';
        }

        require_once(SERVER_PATH . "/classes/Setup.php");
        $objsetup = new Setup($this->arrUser);

        /* if($cond == 'Detail') $result['response']['tbl_meta_data'] = $objsetup->GetTableMetaData('EUCountriesList',1);
          else */
        $result['response']['tbl_meta_data'] = $objsetup->GetTableMetaData('EUCountriesListModal', 1);

        return $result;
    }

    function salepersonDataForReport($attr) {
        $result = array();
        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }
        /* $Sql = "SELECT * FROM (SELECT emp.id AS empID,
                       emp.user_code,
                       CONCAT(emp.first_name,' ',emp.last_name) AS name,
                       emp.user_email as email,
                       emp.job_title,
                        (CASE WHEN emp.employee_type>0 THEN empType.name ELSE '' END )AS employee_type
                
                FROM crm_salesperson AS cp
                LEFT JOIN  employees AS emp ON cp.salesperson_id=emp.id
                LEFT JOIN employee_type AS empType ON empType.id=emp.employee_type
                WHERE cp.company_id=" . $this->arrUser['company_id'] . " 

                UNION 
                SELECT  emp.id AS empID,
                        emp.user_code,
                        CONCAT(emp.first_name,' ',emp.last_name) AS name,
                        emp.user_email as email,
                        emp.job_title,
                            (CASE WHEN emp.employee_type>0 THEN empType.name ELSE '' END )AS employee_type
                FROM orders AS cp
                LEFT JOIN  employees AS emp ON cp.sale_person_id=emp.id
                LEFT JOIN employee_type AS empType ON empType.id=emp.employee_type

                WHERE cp.company_id=" . $this->arrUser['company_id'] . " AND cp.sale_person_id > 0
                GROUP BY empID
                ) AS tbl where 1  " . $where_clause . " ";
        */

        $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . " OR
        emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
        emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : "";
        $Sql = "SELECT * FROM (SELECT emp.id,
                                    emp.user_code,
                                    emp.line_manager_name_id,
                                    CONCAT(first_name,' ',last_name) AS name,
                                    emp.user_email AS email,
                                    emp.job_title,
                                    (CASE WHEN emp.employee_type>0 THEN empType.name 
                                        ELSE '' 
                                        END )AS employee_type
                                FROM employees AS emp,
                                    employee_type AS empType 
                                WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND emp.status = 1 AND
                                    (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                    $where_line_manager                                        
                                GROUP BY emp.id
                                ORDER BY emp.user_code DESC) AS tbl  
                    where 1  " . $where_clause . " ";


                if ($order_clause == "")
                $order_type = "ORDER BY tbl.user_code ASC";
                else
                $order_type = $order_clause;

            $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
            // echo $response['q'];exit;
            // print_r($response); exit;
            $RS = $this->objsetup->CSI($response['q']);

            // $response['q'] = '';



        // $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['user_code'] = $Row['user_code'];
                $row['name'] = $Row['name'];
                $row['email'] = $Row['email'];
                $row['job_title'] = $Row['job_title'];
                $row['employee_type'] = $Row['employee_type'];
                $row['line_manager_name_id'] = $Row['line_manager_name_id'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = null;
        }
        else {
            $response['ack'] = 1;
            $response['error'] = null;
            $response['response'][] = array();
        }

        require_once(SERVER_PATH . "/classes/Setup.php");
        $objsetup = new Setup($this->arrUser);

        $response['response']['tbl_meta_data'] = $objsetup->GetTableMetaData('SalePersonsDetailModal');

        return $response;
    }

    /* function salepersonDataFromOrders($attr) {
        $result = array();

        $Sql = "SELECT emp.id,
                      emp.user_code,first_name,middle_name,
                      last_name,
                      emp.user_email,
                      emp.job_title,
                      empType.name as employee
				FROM orders AS cp,
                     employees AS emp,
                     employee_type AS empType 
				WHERE cp.company_id=" . $this->arrUser['company_id'] . " AND 
					  cp.sale_person_id = emp.id
				GROUP BY emp.id
				ORDER BY emp.user_code DESC";

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['code'] = $Row['user_code'];
                $row['name'] = $Row['first_name'] . ' ' . $Row['last_name'];
                $row['email'] = $Row['user_email'];
                $row['job_title'] = $Row['job_title'];
                $row['employee_type'] = $Row['employee'];

                $result['response'][] = $row;
            }
            $result['ack'] = 1;
            $result['error'] = null;
        }
        else {
            $result['ack'] = 0;
            $result['error'] = 'No EC Countries found!';
        }

        require_once(SERVER_PATH . "/classes/Setup.php");
        $objsetup = new Setup($this->arrUser);

        $result['response']['tbl_meta_data'] = $objsetup->GetTableMetaData('SalePersonsDetailModal', 1);

        return $result;
    } */

    function salepersonDataFromOrders($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        $response = array();

        $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . "  OR
        emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
        emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : " AND emp.user_type NOT IN (1)";
        $Sql = "  SELECT * FROM (SELECT emp.id,
                                    emp.user_code,
                                    emp.line_manager_name_id,
                                    CONCAT(first_name,' ',last_name) AS name,
                                    emp.user_email AS email,
                                    emp.job_title,
                                    (CASE WHEN emp.employee_type>0 THEN empType.name 
                                        ELSE '' 
                                        END )AS employee_type
                                FROM employees AS emp,
                                     employee_type AS empType 
                                WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND
                                     (emp.employee_type = empType.id OR emp.employee_type = 0) AND 
                                      emp.status <> '-1'    
                                    $where_line_manager                                        
                                GROUP BY emp.id
                                ORDER BY emp.user_code DESC) AS tbl  
                    where 1  " . $where_clause . " ";

        /* $subQueryForBuckets = "SELECT  tbl.id
                               FROM gl_accountcache tbl
                               WHERE tbl.id IS NOT NULL ";
        $subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 65);
        // echo $subQueryForBuckets;exit;

        $Sql .= " AND (tbl.id IN ($subQueryForBuckets) ) "; */
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr['sort_column'];

            if ($attr['sort_column'] == 'user_code')
                $column = 'tbl.' . 'user_code';
            else if ($attr['sort_column'] == 'name')
                $column = 'tbl.' . 'name';
            else if ($attr['sort_column'] == 'email')
                $column = 'tbl.' . 'email';
            else if ($attr['sort_column'] == 'job_title')
                $column = 'tbl.' . 'job_title';
            else if ($attr['sort_column'] == 'employee_type')
                $column = 'tbl.employee_type';

            $order_type = "Order BY " . $column . " DESC";
        }

        $column = 'tbl.id';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;
        
        $RS = $this->objsetup->CSI($response['q']);

        // $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['user_code'] = $Row['user_code'];
                $row['name'] = $Row['name'];
                $row['email'] = $Row['email'];
                $row['job_title'] = $Row['job_title'];
                $row['employee_type'] = $Row['employee_type'];
                $row['line_manager_name_id'] = $Row['line_manager_name_id'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('SalePersonsDetailModal');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function territoryDataFromOrders($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        $response = array();

        $Sql = "  SELECT * FROM (SELECT cr.id,
                                        cr.title
                                    FROM  crm_region AS cr
                                    WHERE cr.company_id=" . $this->arrUser['company_id'] . " 
                                    AND cr.region_type=12
                                    AND cr.status = 1
                                    GROUP BY cr.id) AS tbl  
                where 1  " . $where_clause . " ";
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr['sort_column'];

            if ($attr['sort_column'] == 'title')
                $column = 'tbl.' . 'title';

            $order_type = "Order BY " . $column . " DESC";
        }

        $column = 'tbl.id';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;
        
        $RS = $this->objsetup->CSI($response['q'], "customer", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['title'] = $Row['title'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('TerritoryDetailModal');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function buyingGroupDataFromOrders($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        $response = array();

        $Sql = "  SELECT * FROM (SELECT cr.id,
                                        cr.title
                                    FROM  crm_buying_group AS cr
                                    WHERE cr.company_id=" . $this->arrUser['company_id'] . "
                                    AND crm_buying_group_type = 1
                                    AND cr.status = 1
                                    GROUP BY cr.id) AS tbl  
                where 1  " . $where_clause . " ";
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr['sort_column'];

            if ($attr['sort_column'] == 'title')
                $column = 'tbl.' . 'title';

            $order_type = "Order BY " . $column . " DESC";
        }

        $column = 'tbl.id';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;
        
        $RS = $this->objsetup->CSI($response['q'], "customer", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['title'] = $Row['title'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('BuyingGroupDetailModal');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function segmentDataFromOrders($attr) {
            $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
            $defaultFilter = false;
            $cond = $attr['cond'];       

            if (!empty($attr['searchKeyword'])) {
                $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
                $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
            }

            $response = array();

            $Sql = "  SELECT * FROM (SELECT cr.id,
                                            cr.title
                                        FROM  crm_segment AS cr
                                        WHERE cr.company_id=" . $this->arrUser['company_id'] . "
                                        AND segment_type = 1
                                        AND cr.status = 1
                                        GROUP BY cr.id) AS tbl  
                    where 1  " . $where_clause . " ";
            
            // echo $Sql;exit;

            //defualt Variable
            $total_limit = pagination_limit;
            
            if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
                $total_limit = $attr['pagination_limits'];

            if (!empty($attr['sort_column'])) {
                $column = 'tbl.' . $attr['sort_column'];

                if ($attr['sort_column'] == 'title')
                    $column = 'tbl.' . 'title';

                $order_type = "Order BY " . $column . " DESC";
            }

            $column = 'tbl.id';

            if ($order_clause == "")
                $order_type = "Order BY " . $column . " ASC";
            else
                $order_type = $order_clause;

            $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
            // echo $response['q'];exit;
            
            $RS = $this->objsetup->CSI($response['q'], "customer", sr_ViewPermission);

            $response['q'] = '';

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $row = array();
                    $row['id'] = $Row['id'];
                    $row['title'] = $Row['title'];

                    $response['response'][] = $row;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['response'][] = array();
            }

            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('SegmentDetailModal');
            $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
            return $response;
        }

    function getBrands($attr) {

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }
        
        $response = array();

        $Sql = "  SELECT * FROM (SELECT id,brandname as name
                                    FROM  brand
                                    WHERE status = 1 AND company_id=" . $this->arrUser['company_id'] . "
                                    GROUP BY id) AS tbl  
                where 1  " . $where_clause . " ";
        // echo $Sql;exit;

        $RS = $this->objsetup->CSI($Sql);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['name'] = $Row['name'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('BrandDetailModal');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;

        return $response;
    }

    function getCategories($attr) {

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        $response = array();

        $Sql = "  SELECT * FROM (SELECT id,name
                                    FROM  category
                                    WHERE status = 1 AND company_id=" . $this->arrUser['company_id'] . "
                                    GROUP BY id) AS tbl  
                where 1  " . $where_clause . " ";
        // echo $Sql;exit;

        $RS = $this->objsetup->CSI($Sql);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['name'] = $Row['name'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('CategoryDetailModal');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;

        return $response;
    }
    /* function warehouseDataForReport($attr) {
        $cond = $attr['cond'];
        $result = array();

        $Sql = "SELECT  wh.name,wh.id,wh.wrh_code
                FROM warehouse_bin_location  c
                LEFT JOIN warehouse as wh on wh.id =c.warehouse_id
                WHERE c.status=1 AND 
                    c.company_id=" . $this->arrUser['company_id'] . " 
                GROUP BY wh.id 
                ORDER BY wh.id DESC";

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $result['response'][] = $Row;
            }
            $result['ack'] = 1;
            $result['error'] = null;
        }
        else {
            $result['ack'] = 0;
            $result['error'] = 'No warehouse found';
        }


            $result['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('WAREHOUSEModal', 1);

        return $result;
    } */

    function warehouseDataForReport($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        $response = array();

        $Sql = " SELECT * FROM (SELECT  wh.name,wh.id,wh.wrh_code
                                FROM warehouse_bin_location  c
                                LEFT JOIN warehouse as wh on wh.id =c.warehouse_id
                                WHERE c.status=1 AND 
                                    c.company_id=" . $this->arrUser['company_id'] . " 
                                GROUP BY wh.id ) AS tbl  where 1 " . $where_clause . " ";

        
        $RS = $this->objsetup->CSI($response['q']);
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr[sort_column];

            if ($attr['sort_column'] == 'wrh_code')
                $column = 'tbl.' . 'wrh_code';
            else if ($attr['sort_column'] == 'name')
                $column = 'tbl.' . 'name';

            $order_type = "Order BY " . $column . " DESC";
        }

        $column = 'tbl.id';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " DESC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);        
        // echo $response['q'];exit;

        $RS = $this->objsetup->CSI($response['q']);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $response['response'][] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('WAREHOUSEModal');

        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function storageLocDataForReport($attr) {
        $cond = $attr['cond'];
        $result = array();

        $Sql = " SELECT  c.title AS name,c.id
                 FROM warehouse_bin_location  c
                 WHERE  c.status=1 AND 
                        c.company_id=" . $this->arrUser['company_id'] . " 
                 ORDER BY c.id DESC ";

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $result['response'][] = $Row;
            }
            $result['ack'] = 1;
            $result['error'] = null;
        }
        else {
            $result['ack'] = 0;
            $result['error'] = 'No customer found';
        }

        /* if ($cond == 'Detail')
            $result['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('storageLocDetail', 1);
        else */
            $result['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('storageLocModal', 1);

        return $result;
    }

    /* function employeeList($attr) {
        $response = array();

        $empStatus = 'AND emp.status = 1';
        $listingType = '';    
       
        if(isset($attr['module']) && $attr['module'] == 'AbsencesList'){
            $empStatus = '';
        }

        if(isset($attr['listingType']) && $attr['listingType'] == 'EmployeeDetail'){
            $listingType = $attr['listingType'];
        }

        $Sql = "SELECT  emp.id,
                        emp.user_code,
                        emp.first_name,
                        emp.last_name,
                        emp.job_title,
                        emp.emp_type,
                        emp.dname
                FROM sr_employee_sel emp
				WHERE emp.user_company=" . $this->arrUser['company_id'] . " $empStatus";

        //  echo $Sql;exit;

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row['id'];
                $result['no'] = $Row['user_code'];
                $result['name'] = $Row['first_name'] . ' ' . $Row['last_name'];

                if($listingType == 'EmployeeDetail'){
                    $result['job_title'] = $Row['job_title'];
                    $result['employee_type'] = $Row['emp_type'];
                    $result['Department'] = $Row['dname'];
                }
                
                // $result['Email'] = $Row['user_email'];
                // $result['internal_ext.'] = $Row['internal_extention'];
                // $result['Telephone'] = $Row['work_phone'];
                // $result['Mobile'] = $Row['mobile_phone'];
                // 
                // if ($Row['allow_login'] == 1)
                //     $result['Allow_login'] = "Yes";
                // else
                //     $result['Allow_login'] = "No";

                // $result['status'] = $Row['statusp'];

                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else
            $response['response'][] = array();

        if($listingType == 'EmployeeDetail')
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('EmployeesDetailModal', 1);
        else
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('EmployeesModal', 1);


        return $response;
    } */

    function employeeList($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        if (empty($where_clause)) {
            $defaultFilter = true;
            // $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("HR", $this->arrUser);
        }

        $response = array();

         $Sql = "SELECT * FROM (SELECT  emp.id,
                        emp.user_code,
                        emp.first_name,
                        emp.last_name,
                        CONCAT(emp.first_name,' ',emp.last_name) AS name,
                        emp.job_title,
                        emp.emp_type,
                        emp.statusp,
                        emp.dname
                FROM sr_all_employee_sel emp
				WHERE emp.user_company=" . $this->arrUser['company_id'] . ") AS tbl  where 1 " . $where_clause . "  ";

        // $Sql = $this->objsetup->whereClauseAppender($Sql, 24);
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr[sort_column];

            if ($attr['sort_column'] == 'user_code')
                $column = 'tbl.' . 'user_code';
            else if ($attr['sort_column'] == 'name')
                $column = 'tbl.' . 'name';
            else if ($attr['sort_column'] == "first_name")
                $column = 'tbl.' . 'first_name';
            else if ($attr['sort_column'] == "last_name")
                $column = 'tbl.' . 'last_name';
            else if ($attr['sort_column'] == "job_title")
                $column = 'tbl.' . 'job_title';
            else if ($attr['sort_column'] == "emp_type")
                $column = 'tbl.' . 'emp_type';
            else if ($attr['sort_column'] == "statusp")
                $column = 'tbl.' . 'statusp';
            else if ($attr['sort_column'] == 'dname')
                $column = 'tbl.dname';

            $order_type = "Order BY " . $column . " DESC";
        }

        //$column = 'tbl.id';
        $column = 'tbl.user_code';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;

        $RS = $this->objsetup->CSI($response['q'], "HR", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $response['response'][] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        if($cond == 'Detail')
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('EmployeesDetailModal');
        else
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('EmployeesModal');

        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function employeeListWithoutAdmin($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        if (empty($where_clause)) {
            $defaultFilter = true;
            // $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("HR", $this->arrUser);
        }

        $response = array();       

         $Sql = "SELECT * FROM (SELECT  emp.id,
                        emp.user_code,
                        emp.first_name,
                        emp.last_name,
                        CONCAT(emp.first_name,' ',emp.last_name) AS name,
                        emp.job_title,
                        emp.emp_type,
                        emp.statusp,
                        emp.dname
                FROM sr_employee_sel emp
				WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND emp.statusp = 'Active') AS tbl  where 1 " . $where_clause . "  ";

        // $Sql = $this->objsetup->whereClauseAppender($Sql, 24);
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr[sort_column];

            if ($attr['sort_column'] == 'user_code')
                $column = 'tbl.' . 'user_code';
            else if ($attr['sort_column'] == 'name')
                $column = 'tbl.' . 'name';
            else if ($attr['sort_column'] == "first_name")
                $column = 'tbl.' . 'first_name';
            else if ($attr['sort_column'] == "last_name")
                $column = 'tbl.' . 'last_name';
            else if ($attr['sort_column'] == "job_title")
                $column = 'tbl.' . 'job_title';
            else if ($attr['sort_column'] == "emp_type")
                $column = 'tbl.' . 'emp_type';
            else if ($attr['sort_column'] == "statusp")
                $column = 'tbl.' . 'statusp';
            else if ($attr['sort_column'] == 'dname')
                $column = 'tbl.dname';

            $order_type = "Order BY " . $column . " DESC";
        }

        $column = 'tbl.id';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " DESC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;

        $RS = $this->objsetup->CSI($response['q'], "HR", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $response['response'][] = $Row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        if($cond == 'Detail')
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('EmployeesDetailModal');
        else if($cond == 'CoveredAreaEmp')
        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('AreaCoveredEmpDetailModal');
        else
            $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('EmployeesModal');

        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function departmentList($attr) {
        // $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        // $defaultFilter = false;
        // $cond = $attr['cond'];       

        // if (!empty($attr['searchKeyword'])) {
        //     $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
        //     $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        // }

        $response = array();

        $Sql = "  SELECT * FROM (SELECT cr.id,
                                        cr.name
                                    FROM  config_departments AS cr
                                    WHERE cr.company_id=" . $this->arrUser['company_id'] . "
                                    GROUP BY cr.id) AS tbl  
                where 1  " . $where_clause . " ";
        // echo $Sql;exit;

        //defualt Variable
        //$total_limit = pagination_limit;
        
        // if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
        //     $total_limit = $attr['pagination_limits'];

        // if (!empty($attr['sort_column'])) {
        //     $column = 'tbl.' . $attr['sort_column'];

        //     if ($attr['sort_column'] == 'name')
        //         $column = 'tbl.' . 'name';

        //     $order_type = "Order BY " . $column . " DESC";
        // }

        // $column = 'tbl.id';

        // if ($order_clause == "")
        //     $order_type = "Order BY " . $column . " ASC";
        // else
        //     $order_type = $order_clause;

        // $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;
        
       // $RS = $this->objsetup->CSI($response['q'], "HR", sr_ViewPermission);
       $RS = $this->objsetup->CSI($Sql);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['name'] = $Row['name'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        //$response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('DeptDetailModal');
        //$response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function trialBalncReport($attr) {
        $reportType = $attr['reportType'];
        $postingGrpID = $attr['postingGrpID'];
        $showOpenBalnc = $attr['showOpenBalnc'];

        // $whereOpenBalncCond = '';
        $whereOpenBalncCondDetail = '';

        $whereOpenBalncCustCond = '';
        $whereOpenBalncCustCondDetail = '';

        $whereOpenBalncSuppCond = '';
        $whereOpenBalncSuppCondDetail = '';

        $where = '';
        $where_1 = '';
        $where1 = '';
        $where2 = '';
        $where3 = '';
        $where4 = '';

        $where21 = '';
        $where22 = '';
        $where23 = '';
        $where24 = '';

        if ($postingGrpID > 0) {
            $where .=" AND c.posting_group_id =" . $postingGrpID . " ";
            $where_1 .=" AND s.posting_group_id =" . $postingGrpID . " ";
            $where1 .=" AND o.bill_to_posting_group_id =" . $postingGrpID . " ";
            $where2 .=" AND ro.bill_to_posting_group_id =" . $postingGrpID . " ";
            $where3 .=" AND pd.posting_group_id =" . $postingGrpID . " ";
            $where4 .=" AND op.posting_group_id =" . $postingGrpID . " ";

            $where21 .=" AND o.bill_to_posting_group_id =" . $postingGrpID . " ";
            $where22 .=" AND ro.bill_to_posting_group_id =" . $postingGrpID . " ";
            $where23 .=" AND pd.posting_group_id =" . $postingGrpID . " ";
            $where24 .=" AND op.posting_group_id =" . $postingGrpID . " ";
        }

        if ($attr['customers']) {

            $cutomerarray = '';

            foreach ($attr['customers'] as $rec) {
                if($rec->id > 0)
                    $cutomerarray .= $rec->id . ',';
            }



            $where .=" AND c.id in (" . substr($cutomerarray, 0, -1) . ") ";
            $where1 .=" AND o.sell_to_cust_id in (" . substr($cutomerarray, 0, -1) . ") ";
            $where2 .=" AND ro.sell_to_cust_id in (" . substr($cutomerarray, 0, -1) . ") ";
            $where3 .=" AND pd.account_id in (" . substr($cutomerarray, 0, -1) . ") ";
            $where4 .=" AND op.moduleID in (" . substr($cutomerarray, 0, -1) . ") ";

            $cutomerarray = substr($cutomerarray, 0, -1);
        }


        if ($attr['suppliers']) {

            $supplierarray = '';

            foreach ($attr['suppliers'] as $rec) {
                if($rec->id > 0)
                    $supplierarray .= $rec->id . ',';
            }

            $where_1 .=" AND s.id in (" . substr($supplierarray, 0, -1) . ") ";
            $where21 .=" AND o.sell_to_cust_id in (" . substr($supplierarray, 0, -1) . ") ";
            $where22 .=" AND ro.supplierID in (" . substr($supplierarray, 0, -1) . ") ";
            $where23 .=" AND pd.account_id in (" . substr($supplierarray, 0, -1) . ") ";
            $where24 .=" AND op.moduleID in (" . substr($supplierarray, 0, -1) . ") ";

            $supplierarray = substr($supplierarray, 0, -1);
        }

        $dateFrom = $this->objGeneral->convertStartDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        if ($dateFrom > 0) {
            $where1 .=" AND o.posting_dateUnConv >='" . $dateFrom . "'";
            $where2 .=" AND ro.posting_dateUnConv >='" . $dateFrom . "'";
            $where3 .=" AND pd.posting_dateUnConv >='" . $dateFrom . "'";
            $where4 .=" AND op.posting_dateUnConv >='" . $dateFrom . "'";

            $where21 .=" AND o.invoice_dateUnConv >='" . $dateFrom . "'";
            $where22 .=" AND ro.supplierCreditNoteDateUnConv >='" . $dateFrom . "'";
            $where23 .=" AND pd.posting_dateUnConv >='" . $dateFrom . "'";
            $where24 .=" AND op.posting_dateUnConv >='" . $dateFrom . "'";

            $openBalncdateFrom = $dateFrom;

            // $whereOpenBalncCond.= "SR_rep_trial_balnc(gl.id,'1900-01-01','" . $openBalncdateFrom . "',gl.company_id,1) AS `openBalncCredit`,
			// 						SR_rep_trial_balnc(gl.id,'1900-01-01','" . $openBalncdateFrom . "',gl.company_id,2) AS `openBalncDebit`,
			// 						(CASE WHEN (gl.accountType = 4) THEN SR_rep_trialBalncAccountTotal(gl.id,gl.startRangeCode,gl.endRangeCode,'1900-01-01','" . $openBalncdateFrom . "',gl.company_id) 
			// 							ELSE 0 END) 
			// 							AS openBalncAccountTotal,";

            $whereOpenBalncCustCond .="IFNULL(SR_CalculateCustomerBalanceDebit(c.id,'1900-01-01','" . $openBalncdateFrom . "', '" . $this->arrUser['company_id'] . "'), 0) AS customer_OpBalanceDebit, 
										IFNULL(SR_CalculateCustomerBalanceCredit(c.id,'1900-01-01','" . $openBalncdateFrom . "', '" . $this->arrUser['company_id'] . "'), 0) AS customer_OpBalanceCredit,";


            $whereOpenBalncSuppCond .="IFNULL(SR_CalculateSupplierBalanceDebit(s.id,'1900-01-01','" . $openBalncdateFrom . "', '" . $this->arrUser['company_id'] . "'), 0) AS supplier_OpBalanceDebit, 
										IFNULL(SR_CalculateSupplierBalanceCredit(s.id,'1900-01-01','" . $openBalncdateFrom . "', '" . $this->arrUser['company_id'] . "'), 0) AS supplier_OpBalanceCredit,";
        } else {

            $openBalncdateTo = $dateTo;

            // $whereOpenBalncCond.= "SR_rep_trial_balnc(gl.id,'1900-01-01','" . $openBalncdateTo . "',gl.company_id,1) AS `openBalncCredit`,
			// 						SR_rep_trial_balnc(gl.id,'1900-01-01','" . $openBalncdateTo . "',gl.company_id,2) AS `openBalncDebit`,";


            $whereOpenBalncCustCond .="IFNULL(SR_CalculateCustomerBalanceDebit(c.id,'1900-01-01','" . $openBalncdateTo . "', '" . $this->arrUser['company_id'] . "'), 0) AS customer_OpBalanceDebit, 
										IFNULL(SR_CalculateCustomerBalanceCredit(c.id,'1900-01-01','" . $openBalncdateTo . "', '" . $this->arrUser['company_id'] . "'), 0) AS customer_OpBalanceCredit,";


            $whereOpenBalncSuppCond .="IFNULL(SR_CalculateSupplierBalanceDebit(s.id,'1900-01-01','" . $openBalncdateTo . "', '" . $this->arrUser['company_id'] . "'), 0) AS supplier_OpBalanceDebit, 
										IFNULL(SR_CalculateSupplierBalanceCredit(s.id,'1900-01-01','" . $openBalncdateTo . "', '" . $this->arrUser['company_id'] . "'), 0) AS supplier_OpBalanceCredit,";
        }

        if ($dateTo > 0) {

            $where1 .=" AND o.posting_dateUnConv <='" . $dateTo . "'";
            $where2 .=" AND ro.posting_dateUnConv <='" . $dateTo . "'";
            $where3 .=" AND pd.posting_dateUnConv <='" . $dateTo . "'";
            $where4 .=" AND op.posting_dateUnConv <='" . $dateTo . "'";


            $where21 .=" AND o.invoice_dateUnConv <='" . $dateTo . "'";
            $where22 .=" AND ro.supplierCreditNoteDateUnConv <='" . $dateTo . "'";
            $where23 .=" AND pd.posting_dateUnConv <='" . $dateTo . "'";
            $where24 .=" AND op.posting_dateUnConv <='" . $dateTo . "'";
        }

        if ($showOpenBalnc == false) {
            // $whereOpenBalncCond = '';
            $whereOpenBalncCondDetail = '';

            $whereOpenBalncCustCond = '';
            $whereOpenBalncCustCondDetail = '';

            $whereOpenBalncSuppCond = '';
            $whereOpenBalncSuppCondDetail = '';
        }

        if ($reportType == 'summary') {

            $Sql = "CALL srrep_trialBalanceSummary('" . $this->arrUser['company_id'] . "','" . $attr['glNoFromID']. "','" . $attr['glNoToID']. "','" . $dateFrom. "','" . $dateTo. "','" . $showOpenBalnc. "')";

            // echo $Sql; exit;

            $RS = $this->objsetup->CSI($Sql);
            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $result = array();
                    $result['id'] = $Row['glid'];

                    $result['name'] = $Row['sub_category_name'];
                    $result['company_ref_gl_id'] = $Row['company_ref_gl_id'];

                    if ($Row['categoryDisplayName'] != "")
                        $result['categoryDisplayName'] = $Row['categoryDisplayName'];
                    else
                        $result['categoryDisplayName'] = $Row['sub_category_name'];

                    $result['typeID'] = $Row['glaccountTypeID'];
                    $result['account_type'] = $Row['glaccountType'];
                    $result['gl_no'] = $Row['glaccountCode'];
                    // $result['vat_Rate'] = $Row['glvatRate'];
                    $result['transcation'] = $Row['gltranscation'];
                    $result['gltranscationID'] = $Row['gltranscationID'];

                    $result['code_range_from'] = $Row['gl_code_range_from'];
                    $result['code_range_to'] = $Row['gl_code_range_to'];
                    $result['Debit'] = $Row['Debit'];
                    $result['Credit'] = $Row['Credit'];
                    $Debit_total = $Row['Debit'];
                    $credit_total = $Row['Credit'];

                    if ($Row['glaccountTypeID'] == 4) {
                        $accountTotal = $Row['accountTotal'];
                        $openBalncAccountTotal = $Row['openBalncAccountTotal'];

                        if ($accountTotal >= 0) {
                            $result['total_balance'] = $accountTotal;
                            $result['total_balance_type'] = "Debit";
                        } else {
                            $result['total_balance'] = ($accountTotal * -1);
                            $result['total_balance_type'] = "Credit";
                        }

                        if ($openBalncAccountTotal >= 0) {

                            $result['total_openBalnc'] = $openBalncAccountTotal;
                            $result['total_openBalnc_type'] = "Debit";

                            if ($accountTotal > 0)  // Debit condition
                                $result['total_SelPeriodBalnc'] = $openBalncAccountTotal + $accountTotal;
                            else // Credit condition
                                $result['total_SelPeriodBalnc'] = $openBalncAccountTotal + ($accountTotal);

                            if ($result['total_SelPeriodBalnc'] > 0)
                                $result['total_SelPeriodBalnc_type'] = "Debit";
                            else {
                                $result['total_SelPeriodBalnc'] = ($result['total_SelPeriodBalnc'] * -1);
                                $result['total_SelPeriodBalnc_type'] = "Credit";
                            }
                        } else {

                            $result['total_openBalnc'] = ($openBalncAccountTotal * -1);
                            $result['total_openBalnc_type'] = "Credit";

                            if ($accountTotal > 0) // Debit condition
                                $result['total_SelPeriodBalnc'] = $result['total_openBalnc'] - $accountTotal;
                            else // Credit condition
                                $result['total_SelPeriodBalnc'] = $result['total_openBalnc'] - ($accountTotal);

                            if ($result['total_SelPeriodBalnc'] > 0)
                                $result['total_SelPeriodBalnc_type'] = "Credit";
                            else {
                                $result['total_SelPeriodBalnc'] = ($result['total_SelPeriodBalnc'] * -1);
                                $result['total_SelPeriodBalnc_type'] = "Debit";
                            }
                        }
                    } else {

                        $total_balance = $Debit_total - $credit_total;

                        if ($total_balance >= 0) {
                            $result['total_balance'] = $total_balance;
                            $result['total_balance_type'] = "Debit";
                        } else {
                            $result['total_balance'] = ($total_balance * -1);
                            $result['total_balance_type'] = "Credit";
                        }

                        $result['openBalncDebit'] = $Row['openBalncDebit'];
                        $result['openBalncCredit'] = $Row['openBalncCredit'];

                        $openBalncDebit_total = $Row['openBalncDebit'];
                        $openBalncCredit_total = $Row['openBalncCredit'];

                        $total_openBalnc = $openBalncDebit_total - $openBalncCredit_total;

                        if ($total_openBalnc >= 0) {

                            // opening balanc Debit condition

                            $result['total_openBalnc'] = $total_openBalnc;
                            $result['total_openBalnc_type'] = "Debit";

                            if ($total_balance > 0)  // Debit condition
                                $result['total_SelPeriodBalnc'] = $total_openBalnc + $total_balance;
                            else // Credit condition
                                $result['total_SelPeriodBalnc'] = $total_openBalnc + ($total_balance);

                            if ($result['total_SelPeriodBalnc'] > 0)
                                $result['total_SelPeriodBalnc_type'] = "Debit";
                            else {
                                $result['total_SelPeriodBalnc'] = ($result['total_SelPeriodBalnc'] * -1);
                                // $result['total_SelPeriodBalnc'] = ($total_SelPeriodBalnc * -1);
                                $result['total_SelPeriodBalnc_type'] = "Credit";
                            }
                        } else {

                            // opening balanc Credit condition

                            $result['total_openBalnc'] = ($total_openBalnc * -1);
                            $result['total_openBalnc_type'] = "Credit";

                            if ($total_balance > 0) // Debit condition
                                $result['total_SelPeriodBalnc'] = $result['total_openBalnc'] - $total_balance;
                            else // Credit condition
                                $result['total_SelPeriodBalnc'] = $result['total_openBalnc'] - ($total_balance);

                            if ($result['total_SelPeriodBalnc'] > 0)
                                $result['total_SelPeriodBalnc_type'] = "Credit";
                            else {
                                $result['total_SelPeriodBalnc'] = ($result['total_SelPeriodBalnc'] * -1);
                                $result['total_SelPeriodBalnc_type'] = "Debit";
                            }
                        }
                    }

                    $response['response'][] = $result;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['total_company_gl_accounts'] = 1;
            } else
                $response['response'][] = array();
            // exit;
        }
        elseif ($reportType == 'detail2') {


            $dateFrom2 = $this->objGeneral->convert_date($attr['dateFrom']);
            $dateTo2 = $this->objGeneral->convert_date($attr['dateTo']);

            // echo ini_get("memory_limit")."\n";
            // ini_set("memory_limit","512M");
            // echo ini_get("memory_limit")."\n";
            // exit;
            
            $Sql = "CALL srrep_trialBalanceDetail('" . $this->arrUser['company_id'] . "','" . $attr['glNoFromID']. "','" . $attr['glNoToID']. "','" . $dateFrom2. "','" . $dateTo2. "')";

            // echo $Sql ;exit; 

            // $RS = $this->Conn->execute($Sql);
            $RS = $this->objsetup->CSI($Sql);

            // echo '<pre>';print_r($RS); exit;
            // echo $RS->RecordCount(); exit;

            if ($RS->RecordCount() > 0) {

                $arrayCount = $RS->RecordCount();

                $counter = 0;
                $prevglAccountNo = 0;
                $glAccountTotal = 0;

                if($arrayCount > MAX_REPORT_RECORDS ){

                    $CSVDataTitle = array();
                    $CSVDataTitle['posting_date'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['posting_date'] = 'Trial Balance - Detailed';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['posting_date'] = 'From '.date("d/m/Y", $dateFrom2).' To '.date("d/m/Y", $dateTo2);
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;
                    
                    $CSVDataTitle = array();
                    $CSVDataTitle['posting_date'] = 'Posting Date';
                    $CSVDataTitle['gl_account_no'] = 'G/L Account No.';
                    $CSVDataTitle['name'] = 'G/L Name';
                    $CSVDataTitle['doctype'] = 'Doc. Type';
                    $CSVDataTitle['invoice_code'] = 'Doc. No.';
                    $CSVDataTitle['source_no'] = 'Source No.';
                    $CSVDataTitle['source_name'] = 'Source Name';
                    $CSVDataTitle['debit_amount'] = 'Debit';			
                    $CSVDataTitle['credit_amount'] = 'Credit';
                    $CSVDataTitle['totalAmountBalance'] = 'Amount';
                    $CSVDataTitle['entry_no'] = 'Entry No.';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/Detail_trial_balance_".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    while ($Row = $RS->FetchRow()) {
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        } 

                        $accountType = $Row['accountType'];
                        $rank = $Row['Rank'];
                        $gl_code_range_from = $Row['gl_code_range_from'];
                        $gl_code_range_to = $Row['gl_code_range_to'];

                        if ($rank == 1) {
                            $prevglAccountNo = $Row['gl_account_no'];
                            $prevglAccountDescription = $Row['description'];

                            $opening_balance = 0;
                            $balanceDebitTotal = 0;
                            $balanceCreditTotal = 0;

                            $opening_balance = $Row['opening_balance'];

                            $openBalncArray = array();

                            $openBalncArray['posting_date'] = '';
                            $openBalncArray['gl_account_no'] = $prevglAccountNo;
                            $openBalncArray['name'] = $prevglAccountDescription;
                            $openBalncArray['doctype'] = 'Opening Balance';
                            $openBalncArray['invoice_code'] = '';
                            $openBalncArray['source_no'] = '';
                            $openBalncArray['source_name'] = '';

                            $openBalncArray['debit_amount'] = '';
                            $openBalncArray['credit_amount'] = '';                            
                            $openBalncArray['totalAmountBalance'] = $opening_balance;
                            $openBalncArray['entry_no'] = '';

                            // $response['response'][] = $openBalncArray;
                            
                            $response['CSVData'][] = $openBalncArray;                           
                            
                        }

                        if ($rank == 2){

                            if ($Row['debit_amount'] != 0) {

                                $glAccountTotal += $Row['debit_amount'];
                                $opening_balance += $Row['debit_amount'];

                                if ($Row['debit_amount'] > 0) {
                                    $balanceDebitTotal += $Row['debit_amount'];
                                }
                                else{
                                    $balanceCreditTotal += $Row['debit_amount']; 
                                }

                            } elseif ($Row['credit_amount'] != 0) {

                                $glAccountTotal -= $Row['credit_amount'];
                                $opening_balance -= $Row['credit_amount'];
                                $balanceCreditTotal += $Row['credit_amount'];                            
                            }

                            if ($Row['debit_amount'] < 0) {
                                $Row['credit_amount'] = ($Row['debit_amount'] * -1);
                                $Row['debit_amount'] = 0;
                            }

                            $Debit_total = $Row['debit_amount'];
                            $credit_total = $Row['credit_amount'];                   

                            $total_balance = $Debit_total - $credit_total;

                            if ($total_balance >= 0) {
                                $result['total_balance'] = $total_balance;
                                $result['total_balance_type'] = "Debit";
                            } else {
                                $result['total_balance'] = ($total_balance * -1);
                                $result['total_balance_type'] = "Credit";
                            }

                            $totalAmountBalance = $opening_balance;
                            $Row['totalAmountBalance'] = $opening_balance;
                            $Row['name'] = $Row['description'];
                            
                        }

                        if ($rank == 3) {

                            $totalArray = array();

                            $totalArray['posting_date'] = '';
                            $totalArray['gl_account_no'] = $prevglAccountNo;
                            $totalArray['name'] = $prevglAccountDescription;
                            $totalArray['doctype'] = 'Closing Balance';

                            $closing_balance = $Row['closing_balance'];
                            $totalArray['invoice_code'] = '';
                            $totalArray['source_no'] = '';
                            $totalArray['source_name'] = '';

                            $totalArray['debit_amount'] = $balanceDebitTotal;
                            // $totalArray['credit_amount'] = $balanceCreditTotal *(-1);				
                            $totalArray['credit_amount'] = $balanceCreditTotal;

                            
                            $totalArray['totalAmountBalance'] = $opening_balance;
                            $totalArray['entry_no'] = '';
                            //$totalAmountBalance;//$closing_balance; //$totalAmountBalance;


                            $glAccountTotal = 0;
                            // $response['response'][] = $totalArray;

                            // $response['CSVData'] = array();
                            $response['CSVData'][] = $totalArray;                           
                            // $this->createCSVFileAppend($response);

                            $opening_balance = 0;
                            $balanceDebitTotal = 0;
                            $balanceCreditTotal = 0;
                            $totalAmountBalance = 0;
                        }

                        // $Row['gl_account_no'] = '';
                        // $Row['description'] = '';

                        $counter++;

                        if ($Row['posting_date'] >= $dateFrom && $Row['posting_date'] <= $dateTo) {
                            $Row['posting_date'] = date("d/m/Y", strtotime($Row['posting_date']));
                           // $response['response'][] = $Row;

                            $CSVDataRec = array();
                            // $response['CSVData'] = array();

                            // $CSVDataTitle = array();
                            // $CSVDataTitle['posting_date'] = $this->arrUser['companyName'];
                            // $response['CSVData'][] = $CSVDataTitle;

                            $CSVDataRec['posting_date'] = $Row['posting_date'];
                            $CSVDataRec['gl_account_no'] = $Row['gl_account_no'];
                            $CSVDataRec['name'] = $Row['name'];
                            $CSVDataRec['doctype'] = $Row['doctype'];
                            $CSVDataRec['invoice_code'] = $Row['invoice_code'];
                            $CSVDataRec['source_no'] = $Row['source_no'];
                            $CSVDataRec['source_name'] = $Row['source_name'];

                            if($Row['debit_amount'] != 0)
                                $CSVDataRec['debit_amount'] = number_format((float)$Row['debit_amount'], 2, '.', '');
                            else
                                $CSVDataRec['debit_amount'] = '';

                            if($Row['credit_amount'] != 0)
                                $CSVDataRec['credit_amount'] = number_format((float)$Row['credit_amount'], 2, '.', '');
                            else
                                $CSVDataRec['credit_amount'] = '';

                            $CSVDataRec['totalAmountBalance'] = number_format((float)$Row['totalAmountBalance'], 2, '.', '');
                            $CSVDataRec['entry_no'] = $Row['entry_no'];

                            // $response['CSVData'][] = $CSVDataRec;
                            $response['CSVData'][] = $CSVDataRec;

                           
                            // $this->createCSVFileAppend($response);
                        }

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;
                    }

                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }
                }
                else{
             
                    while ($Row = $RS->FetchRow()) {
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $accountType = $Row['accountType'];
                        $rank = $Row['Rank'];
                        $gl_code_range_from = $Row['gl_code_range_from'];
                        $gl_code_range_to = $Row['gl_code_range_to'];

                        if ($rank == 1) {
                            $prevglAccountNo = $Row['gl_account_no'];
                            $prevglAccountDescription = $Row['description'];

                            $opening_balance = 0;
                            $balanceDebitTotal = 0;
                            $balanceCreditTotal = 0;

                            $opening_balance = $Row['opening_balance'];

                            $openBalncArray = array();

                            $openBalncArray['posting_date'] = '';
                            $openBalncArray['doctype'] = 'Opening Balance';
                            $openBalncArray['invoice_code'] = '';
                            $openBalncArray['source_no'] = '';
                            $openBalncArray['source_name'] = '';
                            $openBalncArray['gl_account_no'] = $prevglAccountNo;
                            $openBalncArray['name'] = $prevglAccountDescription;

                            $openBalncArray['debit_amount'] = '';
                            $openBalncArray['credit_amount'] = '';

                            $openBalncArray['entry_no'] = '';
                            $openBalncArray['totalAmountBalance'] = $opening_balance;

                            $response['response'][] = $openBalncArray;
                        }

                        if ($rank == 2){

                            if ($Row['debit_amount'] != 0) {

                                $glAccountTotal += $Row['debit_amount'];
                                $opening_balance += $Row['debit_amount'];

                                if ($Row['debit_amount'] > 0) {
                                    $balanceDebitTotal += $Row['debit_amount'];
                                }
                                else{
                                    $balanceCreditTotal += $Row['debit_amount']; 
                                }

                            } elseif ($Row['credit_amount'] != 0) {

                                $glAccountTotal -= $Row['credit_amount'];
                                $opening_balance -= $Row['credit_amount'];
                                $balanceCreditTotal += $Row['credit_amount'];                            
                            }

                            if ($Row['debit_amount'] < 0) {
                                $Row['credit_amount'] = ($Row['debit_amount'] * -1);
                                $Row['debit_amount'] = 0;
                            }

                            $Debit_total = $Row['debit_amount'];
                            $credit_total = $Row['credit_amount'];                   

                            $total_balance = $Debit_total - $credit_total;

                            if ($total_balance >= 0) {
                                $result['total_balance'] = $total_balance;
                                $result['total_balance_type'] = "Debit";
                            } else {
                                $result['total_balance'] = ($total_balance * -1);
                                $result['total_balance_type'] = "Credit";
                            }

                            $totalAmountBalance = $opening_balance;
                            $Row['totalAmountBalance'] = $opening_balance;
                            $Row['name'] = $Row['description'];
                            
                        }

                        if ($rank == 3) {

                            $totalArray = array();

                            $totalArray['posting_date'] = '';
                            $totalArray['doctype'] = 'Closing Balance';
                            $totalArray['invoice_code'] = '';
                            $totalArray['source_no'] = '';
                            $totalArray['source_name'] = '';
                            $totalArray['gl_account_no'] = $prevglAccountNo;
                            $totalArray['name'] = $prevglAccountDescription;

                            $closing_balance = $Row['closing_balance'];

                            $totalArray['debit_amount'] = $balanceDebitTotal;
                            // $totalArray['credit_amount'] = $balanceCreditTotal *(-1);				
                            $totalArray['credit_amount'] = $balanceCreditTotal;

                            $totalArray['entry_no'] = '';
                            $totalArray['totalAmountBalance'] = $opening_balance;
                            //$totalAmountBalance;//$closing_balance; //$totalAmountBalance;


                            $glAccountTotal = 0;
                            $response['response'][] = $totalArray;

                            $opening_balance = 0;
                            $balanceDebitTotal = 0;
                            $balanceCreditTotal = 0;
                            $totalAmountBalance = 0;
                        }

                        // $Row['gl_account_no'] = '';
                        // $Row['description'] = '';

                        $counter++;

                        if ($Row['posting_date'] >= $dateFrom && $Row['posting_date'] <= $dateTo) {
                            $Row['posting_date'] = date("d/m/Y", strtotime($Row['posting_date']));
                            $response['response'][] = $Row;
                        }
                    }

                }

                // print_r($this->arrUser);

                if($arrayCount > MAX_REPORT_RECORDS ){

                    

                    /* foreach($response['response'] as $rec){

                        $CSVDataRec = array();

                        $CSVDataRec['posting_date'] = $rec['posting_date'];
                        $CSVDataRec['gl_account_no'] = $rec['gl_account_no'];
                        $CSVDataRec['name'] = $rec['name'];
                        $CSVDataRec['doctype'] = $rec['doctype'];
                        $CSVDataRec['invoice_code'] = $rec['invoice_code'];
                        if($rec['debit_amount'] != 0)
                            $CSVDataRec['debit_amount'] = number_format((float)$rec['debit_amount'], 2, '.', '');
                        else
                            $CSVDataRec['debit_amount'] = '';

                        if($rec['credit_amount'] != 0)
                            $CSVDataRec['credit_amount'] = number_format((float)$rec['credit_amount'], 2, '.', '');
                        else
                            $CSVDataRec['credit_amount'] = '';

                        $CSVDataRec['totalAmountBalance'] = number_format((float)$rec['totalAmountBalance'], 2, '.', '');
                        $CSVDataRec['entry_no'] = $rec['entry_no'];

                        $response['CSVData'][] = $CSVDataRec;
                    }  */ 

                      
                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/Detail_trial_balance_".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
                }
                else{
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }                                         
            }
            else{
                $response['ack'] = 0;
                $response['error'] = NULL;
            }

            // ini_set("memory_limit","128M");
        } 
        elseif ($reportType == 'customer') {

            $result = array();

            $dateFrom3 = $this->objGeneral->convert_date($attr['dateFrom']);
            $dateTo3 = $this->objGeneral->convert_date($attr['dateTo']);

            $Sql = "CALL srrep_CustomerTrialBalanceSummary('" . $this->arrUser['company_id'] . "','" . $postingGrpID. "','" . $cutomerarray. "','" . $dateFrom3. "','" . $dateTo3. "','" . $showOpenBalnc. "')";

            // echo $Sql;exit;

            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $row = array();
                    $row['id'] = $Row['id'];
                    $row['no'] = $Row['customer_code'];
                    $row['name'] = $Row['name'];
                    // $row['region'] = $Row['region'];
                    // $row['buying_group'] = $Row['buying_group'];
                    // $row['segment'] = $Row['segment'];
                    $row['postingGrp'] = $Row['postingGrp'];

                    // $openingBalance = $Row['customer_OpBalanceDebit'] - $Row['customer_OpBalanceCredit'];
                    // $balance = $Row['customer_balanceDebit'] - $Row['customer_balanceCredit'];
                    // $row['beginBalnc'] = $openingBalance - $balance;
                    // $row['Debit'] = $Row['customer_balanceDebit'];
                    // $row['Credit'] = $Row['customer_balanceCredit'];
                    // 
                    // $result['Debit'] = $Row['Debit'];
                    // $result['Credit'] = $Row['Credit'];
                    $Debit_total = $Row['customer_balanceDebit'];
                    $credit_total = $Row['customer_balanceCredit'];

                    $total_balance = $Debit_total - $credit_total;

                    if ($total_balance >= 0) {
                        $row['total_balance'] = $total_balance;
                        $row['total_balance_type'] = "Debit";
                    } else {
                        $row['total_balance'] = ($total_balance * -1);
                        $row['total_balance_type'] = "Credit";
                    }

                    // $row['customer_OpBalanceDebit'] = $Row['customer_OpBalanceDebit'];
                    // $row['customer_OpBalanceCredit'] = $Row['customer_OpBalanceCredit'];

                    $openBalncDebit_total = $Row['customer_OpBalanceDebit'];
                    $openBalncCredit_total = $Row['customer_OpBalanceCredit'];

                    $total_openBalnc = $openBalncDebit_total - $openBalncCredit_total;

                    if ($total_openBalnc >= 0) {

                        // opening balanc Debit condition

                        $row['total_openBalnc'] = $total_openBalnc;
                        $row['total_openBalnc_type'] = "Debit";

                        if ($total_balance > 0)  // Debit condition
                            $row['total_SelPeriodBalnc'] = $total_openBalnc + $total_balance;
                        else // Credit condition
                            $row['total_SelPeriodBalnc'] = $total_openBalnc + ($total_balance);

                        if ($row['total_SelPeriodBalnc'] > 0)
                            $row['total_SelPeriodBalnc_type'] = "Debit";
                        else {
                            $row['total_SelPeriodBalnc'] = ($row['total_SelPeriodBalnc'] * -1);
                            $row['total_SelPeriodBalnc_type'] = "Credit";
                        }
                    } else {

                        // opening balanc Credit condition

                        $row['total_openBalnc'] = ($total_openBalnc * -1);
                        $row['total_openBalnc_type'] = "Credit";

                        if ($total_balance > 0) // Debit condition
                            $row['total_SelPeriodBalnc'] = $row['total_openBalnc'] - $total_balance;
                        else // Credit condition
                            $row['total_SelPeriodBalnc'] = $row['total_openBalnc'] - ($total_balance);

                        if ($row['total_SelPeriodBalnc'] > 0)
                            $row['total_SelPeriodBalnc_type'] = "Credit";
                        else {
                            $row['total_SelPeriodBalnc'] = ($row['total_SelPeriodBalnc'] * -1);
                            $row['total_SelPeriodBalnc_type'] = "Debit";
                        }
                    }

                    $row['statusp'] = $Row['statusp'];

                    $response['response'][] = $row;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['ack'] = 0;
                $response['error'] = 'No customer found';
            }
        } 
        elseif ($reportType == 'customerDetail') {

            $Sql = "SELECT  
						o.posting_date, 
						'Sales Invoice' AS docType,
						o.sale_invioce_code AS invoice_no,
						o.sell_to_cust_no AS cust_no,
						o.sell_to_cust_name AS customer,
						o.bill_to_posting_group_name as postingGrp,
						o.sale_order_code AS order_no,
						cur.code AS currency_code,
						o.grand_total,
						o.grand_total_converted, 
						o.remaining_amount,
						gat.`gl_account_code`,
						o.due_date,
						gat.transaction_id AS entry_no,
						o.sell_to_cust_id AS custID

						FROM orders AS o, gl_account_txn AS gat, currency as cur
						WHERE 
							gat.object_id = o.id AND
							o.type IN (2,3) AND 
							gat.type = 1 AND
							o.company_id = " . $this->arrUser['company_id'] . " AND
							gat.company_id = " . $this->arrUser['company_id'] . " AND
							o.currency_id = cur.id AND
							gat.`gl_account_id` = (SELECT isetup.salesAccountDebators
													FROM inventory_setup AS isetup, gl_account AS ga
													WHERE 
														ga.id = isetup.salesAccountDebators AND
														isetup.postingGroup = o.`bill_to_posting_group_id` AND
														isetup.type = 1 AND
														isetup.company_id = " . $this->arrUser['company_id'] . "
													LIMIT 1) $where1
						
					UNION
						SELECT
						ro.posting_date, 
						'Credit Note' AS docType,
						ro.return_invoice_code AS invoice_no,
						ro.sell_to_cust_no AS cust_no,
						ro.sell_to_cust_name AS customer,
						ro.bill_to_posting_group_name as postingGrp,
						ro.return_order_code AS order_no,
						cur.code AS currency_code,
						ro.grand_total,
						ro.grand_total_converted, 
						ro.remaining_amount,
						gat.`gl_account_code`,
						ro.due_date,
						gat.transaction_id AS entry_no,
						ro.sell_to_cust_id AS custID

						FROM return_orders AS ro, gl_account_txn AS gat, currency as cur
						WHERE 
							gat.object_id = ro.id AND
							ro.type IN (2,3) AND 
							gat.type = 2 AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							gat.company_id = " . $this->arrUser['company_id'] . " AND
							ro.currency_id = cur.id AND
							gat.`gl_account_id` = (SELECT isetup.salesAccountDebators
													FROM inventory_setup AS isetup, gl_account AS ga
													WHERE 
														ga.id = isetup.salesAccountDebators AND
														isetup.postingGroup = ro.`bill_to_posting_group_id` AND
														isetup.type = 1 AND
														isetup.company_id = " . $this->arrUser['company_id'] . "
													LIMIT 1) $where2
					UNION
						SELECT
						pd.posting_date, 
						'Customer Payment' AS docType,
						pd.document_no AS invoice_no,
						pd.account_no as cust_no,
						pd.account_name AS customer,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN pd.credit_amount > 0 THEN pd.credit_amount
							WHEN pd.debit_amount > 0 THEN pd.debit_amount
						END ) AS grand_total,
						pd.converted_price as grand_total_converted, 
						(CASE
							WHEN pd.credit_amount > 0 THEN pd.credit_amount - allocated_amount
							WHEN pd.debit_amount > 0 THEN pd.debit_amount - allocated_amount
						END ) AS remaining_amount,
						pd.`balancing_account_code` AS gl_account_code,
						'-' AS due_date,
						'1234' AS entry_no,
						pd.account_id AS custID

						FROM gl_journal_receipt AS ro, payment_details as pd,ref_posting_group as ref,  currency as cur
						WHERE 
							pd.parent_id = ro.id AND
							ref.id=pd.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							pd.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 2 AND
							pd.document_type = 2 AND
							pd.transaction_type = 2 AND
							pd.currency_id = cur.id $where3

					UNION
						SELECT
						pd.posting_date, 
						'Customer Refund' AS docType,
						pd.document_no AS invoice_no,
						pd.account_no as cust_no,
						pd.account_name AS customer,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN pd.credit_amount > 0 THEN pd.credit_amount
							WHEN pd.debit_amount > 0 THEN pd.debit_amount
						END ) AS grand_total,
						pd.converted_price as grand_total_converted, 
						(CASE
							WHEN pd.credit_amount > 0 THEN pd.credit_amount - allocated_amount
							WHEN pd.debit_amount > 0 THEN pd.debit_amount - allocated_amount
						END ) AS remaining_amount,
						pd.`balancing_account_code` AS gl_account_code,
						'-' AS due_date,
						'1234' AS entry_no,
						pd.account_id AS custID

						FROM gl_journal_receipt AS ro, payment_details as pd,ref_posting_group as ref,  currency as cur
						WHERE 
							pd.parent_id = ro.id AND
							ref.id=pd.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							pd.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 2 AND
							pd.document_type = 3 AND
							pd.transaction_type = 2 AND
							pd.currency_id = cur.id $where3
					UNION
						SELECT
						op.posting_date, 
						'Opening Balance Invoice' AS docType,
						op.invoiceNo AS invoice_no,
						op.moduleNo as cust_no,
						op.description AS customer,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) AS grand_total,
						op.converted_price as grand_total_converted, 
						((CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) - op.allocated_amount) AS remaining_amount,
						ro.gl_account_code AS gl_account_code,
						'-' AS due_date,
						ro.transaction_id AS entry_no,
						op.moduleID AS custID

						FROM gl_account_txn AS ro, opening_balance_customer as op,ref_posting_group as ref,currency as cur,financial_settings as fs
						WHERE 
							ro.gl_account_id = fs.opening_balance_gl_account AND
							op.id = ro.object_id AND
							ref.id=op.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							op.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 8 AND
							op.type = 1 AND
							op.docType = 1 AND
							op.postStatus = 1 AND
							op.currency_id = cur.id $where4
					UNION
						SELECT
						op.posting_date, 
						'Opening Balance Credit Note' AS docType,
						op.invoiceNo AS invoice_no,
						op.moduleNo as cust_no,
						op.description AS customer,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) AS grand_total,
						op.converted_price as grand_total_converted,
						((CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) - op.allocated_amount) AS remaining_amount,
						ro.gl_account_code AS gl_account_code,
						'-' AS due_date,
						ro.transaction_id AS entry_no,
						op.moduleID AS custID

						FROM gl_account_txn AS ro, opening_balance_customer as op,ref_posting_group as ref,currency as cur,financial_settings as fs
						WHERE 
							ro.gl_account_id = fs.opening_balance_gl_account AND
							op.id = ro.object_id AND
							ref.id=op.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							op.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 8 AND
							op.type = 1 AND
							op.docType = 2 AND
							op.postStatus = 1 AND
							op.currency_id = cur.id $where4
					UNION 
						SELECT
						op.posting_date, 
						'Bank Opening Balance Payment' AS docType,
						op.invoiceNo AS invoice_no,
						op.moduleNo as cust_no,
						op.description AS customer,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) AS grand_total,
						op.converted_price as grand_total_converted, 
						((CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) - op.allocated_amount) AS remaining_amount,
						ro.gl_account_code AS gl_account_code,
						'-' AS due_date,
						ro.transaction_id AS entry_no,
						op.moduleID AS custID

						FROM gl_account_txn AS ro, opening_balance_bank as op,ref_posting_group as ref,currency as cur,financial_settings as fs
						WHERE
							ro.gl_account_id = fs.opening_balance_gl_account AND
							op.id = ro.object_id AND
							ref.id=op.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							op.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 6 AND
							op.type = 1 AND
							op.docType = 1 AND
							op.postStatus = 1 AND
							op.currency_id = cur.id $where4
					UNION 
						SELECT
						op.posting_date, 
						'Bank Opening Balance Refund' AS docType,
						op.invoiceNo AS invoice_no,
						op.moduleNo as cust_no,
						op.description AS customer,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) AS grand_total,
						op.converted_price as grand_total_converted, 
						((CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) - op.allocated_amount) AS remaining_amount,
						ro.gl_account_code AS gl_account_code,
						'-' AS due_date,
						ro.transaction_id AS entry_no,
						op.moduleID AS custID

						FROM gl_account_txn AS ro, opening_balance_bank as op,ref_posting_group as ref,currency as cur,financial_settings as fs
						WHERE
							ro.gl_account_id = fs.opening_balance_gl_account AND
							op.id = ro.object_id AND
							ref.id=op.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							op.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 6 AND
							op.type = 1 AND
							op.docType = 2 AND
							op.postStatus = 1 AND
							op.currency_id = cur.id $where4
					
						ORDER BY custID,posting_date;                    
						";
            //,posting_date
            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {

                $counter = 0;
                $custTotal = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                    $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);

                    if ($counter == 0) {
                        $prevcustID = $Row['custID'];
                        $prevcustNo = $Row['cust_no'];
                        $prevcust = $Row['customer'];
                        $prevcustPostingGrp = $Row['postingGrp'];
                    }

                    if ($counter > 0 && $prevcustNo != $Row['cust_no']) {//&& $prevcustID != $Row['custID']			
                        $totalArray = array();

                        $totalArray['posting_date'] = '';
                        $totalArray['docType'] = 'Total';
                        $totalArray['invoice_no'] = '';
                        $totalArray['cust_no'] = $prevcustNo;
                        $totalArray['customer'] = $prevcust;
                        $totalArray['postingGrp'] = $prevcustPostingGrp;
                        $totalArray['order_no'] = '';
                        $totalArray['currency_code'] = '';
                        $totalArray['grand_total'] = '';
                        $totalArray['grand_total_converted'] = $custTotal;
                        $totalArray['remaining_amount'] = '';
                        $totalArray['gl_account_code'] = '';
                        $totalArray['due_date'] = '';
                        $totalArray['entry_no'] = '';
                        $totalArray['custID'] = '';

                        $custTotal = 0;
                        $response['response'][] = $totalArray;

                        $prevcustID = $Row['custID'];
                        $prevcustNo = $Row['cust_no'];
                        $prevcust = $Row['customer'];
                        $prevcustPostingGrp = $Row['postingGrp'];
                    }

                    $custTotal += $Row['grand_total_converted'];
                    $counter++;
                    $response['response'][] = $Row;
                }

                if ($counter > 0) {

                    $totalArray = array();

                    $totalArray['posting_date'] = '';
                    $totalArray['docType'] = 'Total';
                    $totalArray['invoice_no'] = '';
                    $totalArray['cust_no'] = $prevcustNo;
                    $totalArray['customer'] = $prevcust;
                    $totalArray['postingGrp'] = $prevcustPostingGrp;
                    $totalArray['order_no'] = '';
                    $totalArray['currency_code'] = '';
                    $totalArray['grand_total'] = '';
                    $totalArray['grand_total_converted'] = $custTotal;
                    $totalArray['remaining_amount'] = '';
                    $totalArray['gl_account_code'] = '';
                    $totalArray['due_date'] = '';
                    $totalArray['entry_no'] = '';
                    $totalArray['custID'] = '';

                    $custTotal = 0;
                    $response['response'][] = $totalArray;
                }

                $response['ack'] = 1;
                $response['error'] = NULL;
            } else
                $response['response'][] = array();
        }
        elseif ($reportType == 'supplier') {
            $result = array();

            $dateFrom3 = $this->objGeneral->convert_date($attr['dateFrom']);
            $dateTo3 = $this->objGeneral->convert_date($attr['dateTo']);
            
            $Sql = "CALL srrep_SupplierTrialBalanceSummary('" . $this->arrUser['company_id'] . "','" . $postingGrpID. "','" . $supplierarray. "','" . $dateFrom3. "','" . $dateTo3. "','" . $showOpenBalnc. "')";

            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $row = array();
                    $row['id'] = $Row['id'];
                    $row['no'] = $Row['supplier_code'];
                    $row['name'] = $Row['name'];
                    $row['postingGrp'] = $Row['postingGrp'];

                    /* $openingBalance = $Row['supplier_OpBalanceDebit'] - $Row['supplier_OpBalanceCredit'];
                    $balance = $Row['supplier_balanceDebit'] - $Row['supplier_balanceCredit'];

                    $row['beginBalnc'] = $openingBalance - $balance;
                    $row['Debit'] = $Row['supplier_balanceDebit'];
                    $row['Credit'] = $Row['supplier_balanceCredit'];

                    $row['balance'] = $balance; */

                    $Debit_total = $Row['supplier_balanceDebit'];
                    $credit_total = $Row['supplier_balanceCredit'];

                    $total_balance = $Debit_total - $credit_total;

                    if ($total_balance >= 0) {
                        $row['total_balance'] = $total_balance;
                        $row['total_balance_type'] = "Debit";
                    } else {
                        $row['total_balance'] = ($total_balance * -1);
                        $row['total_balance_type'] = "Credit";
                    }
                    

                    $openBalncDebit_total = $Row['supplier_OpBalanceDebit'];
                    $openBalncCredit_total = $Row['supplier_OpBalanceCredit'];

                    $total_openBalnc = $openBalncDebit_total - $openBalncCredit_total;

                    if ($total_openBalnc >= 0) {

                        // opening balanc Debit condition

                        $row['total_openBalnc'] = $total_openBalnc;
                        $row['total_openBalnc_type'] = "Debit";

                        if ($total_balance > 0)  // Debit condition
                            $row['total_SelPeriodBalnc'] = $total_openBalnc + $total_balance;
                        else // Credit condition
                            $row['total_SelPeriodBalnc'] = $total_openBalnc + ($total_balance);

                        if ($row['total_SelPeriodBalnc'] > 0)
                            $row['total_SelPeriodBalnc_type'] = "Debit";
                        else {
                            $row['total_SelPeriodBalnc'] = ($row['total_SelPeriodBalnc'] * -1);
                            $row['total_SelPeriodBalnc_type'] = "Credit";
                        }
                    } else {

                        // opening balanc Credit condition

                        $row['total_openBalnc'] = ($total_openBalnc * -1);
                        $row['total_openBalnc_type'] = "Credit";

                        if ($total_balance > 0) // Debit condition
                            $row['total_SelPeriodBalnc'] = $row['total_openBalnc'] - $total_balance;
                        else // Credit condition
                            $row['total_SelPeriodBalnc'] = $row['total_openBalnc'] - ($total_balance);

                        if ($row['total_SelPeriodBalnc'] > 0)
                            $row['total_SelPeriodBalnc_type'] = "Credit";
                        else {
                            $row['total_SelPeriodBalnc'] = ($row['total_SelPeriodBalnc'] * -1);
                            $row['total_SelPeriodBalnc_type'] = "Debit";
                        }
                    }
                    $row['statusp'] = $Row['statusp'];

                    $response['response'][] = $row;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            }
            else {
                $response['ack'] = 0;
                $response['error'] = 'No customer found';
            }
        } 
        elseif ($reportType == 'supplierDetail') {
            // o.type IN (2,3) AND 

            $Sql = "SELECT 
						o.invoice_date AS posting_date, 
						'Purchase Invoice' AS docType,
						o.invoice_code AS invoice_no,
						o.sell_to_cust_no AS supp_no,
						o.sell_to_cust_name AS Supplier,
						o.bill_to_posting_group_name as postingGrp,
						o.order_code AS order_no,
						cur.code AS currency_code,
						o.grand_total,
						o.grand_total_converted, 
						o.remaining_amount,
						gat.`gl_account_code`,
						o.due_date,
						gat.transaction_id AS entry_no,
						o.sell_to_cust_id AS suppID

						FROM srm_invoice AS o, gl_account_txn AS gat, currency as cur
						WHERE 
							gat.object_id = o.id AND
							o.type IN (1,2) AND 
							gat.type = 3 AND
							o.company_id = " . $this->arrUser['company_id'] . " AND
							gat.company_id = " . $this->arrUser['company_id'] . " AND
							o.currency_id = cur.id AND
							gat.`gl_account_id` = (SELECT isetup.purchaseAccountCreditors
													FROM inventory_setup AS isetup, gl_account AS ga
													WHERE 
														ga.id = isetup.purchaseAccountCreditors AND
														isetup.postingGroup = o.`bill_to_posting_group_id` AND
														isetup.type = 2 AND
														isetup.company_id = " . $this->arrUser['company_id'] . "
													LIMIT 1) $where21
						
					UNION
						SELECT
						ro.supplierCreditNoteDate AS posting_date, 
						'Debit Note' AS docType,
						ro.invoice_code AS invoice_no,
						ro.supplierNo AS supp_no,
						ro.supplierName AS Supplier,
						ro.bill_to_posting_group_name as postingGrp,
						ro.debitNoteCode AS order_no,
						cur.code AS currency_code,
						ro.grand_total,
						ro.grand_total_converted, 
						ro.remaining_amount,
						gat.`gl_account_code`,
						'-' AS due_date,
						gat.transaction_id AS entry_no,
						ro.supplierID AS suppID

						FROM srm_order_return AS ro, gl_account_txn AS gat, currency as cur
						WHERE 
							gat.object_id = ro.id AND
							ro.type IN (2,3) AND 
							gat.type = 4 AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							gat.company_id = " . $this->arrUser['company_id'] . " AND
							ro.currency_id = cur.id AND
							gat.`gl_account_id` = (SELECT isetup.purchaseAccountCreditors
													FROM inventory_setup AS isetup, gl_account AS ga
													WHERE 
														ga.id = isetup.purchaseAccountCreditors AND
														isetup.postingGroup = ro.`bill_to_posting_group_id` AND
														isetup.type = 1 AND
														isetup.company_id = " . $this->arrUser['company_id'] . "
													LIMIT 1) $where22
					UNION
						SELECT
						pd.posting_date, 
						'Supplier Payment' AS docType,
						pd.document_no AS invoice_no,
						pd.account_no as supp_no,
						pd.account_name AS Supplier,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN pd.credit_amount > 0 THEN pd.credit_amount
							WHEN pd.debit_amount > 0 THEN pd.debit_amount
						END ) AS grand_total,
						pd.converted_price as grand_total_converted, 
						(CASE
							WHEN pd.credit_amount > 0 THEN pd.credit_amount - allocated_amount
							WHEN pd.debit_amount > 0 THEN pd.debit_amount - allocated_amount
						END ) AS remaining_amount,
						pd.`balancing_account_code` AS gl_account_code,
						'-' AS due_date,
						'1234' AS entry_no,
						pd.account_id AS suppID

						FROM gl_journal_receipt AS ro, payment_details as pd,ref_posting_group as ref,  currency as cur
						WHERE 
							pd.parent_id = ro.id AND
							ref.id=pd.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							pd.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 2 AND
							pd.document_type = 2 AND
							pd.transaction_type = 3 AND
							pd.currency_id = cur.id $where23

					UNION
						SELECT
						pd.posting_date, 
						'Supplier Refund' AS docType,
						pd.document_no AS invoice_no,
						pd.account_no as supp_no,
						pd.account_name AS Supplier,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN pd.credit_amount > 0 THEN pd.credit_amount
							WHEN pd.debit_amount > 0 THEN pd.debit_amount
						END ) AS grand_total,
						pd.converted_price as grand_total_converted, 
						(CASE
							WHEN pd.credit_amount > 0 THEN pd.credit_amount - allocated_amount
							WHEN pd.debit_amount > 0 THEN pd.debit_amount - allocated_amount
						END ) AS remaining_amount,
						pd.`balancing_account_code` AS gl_account_code,
						'-' AS due_date,
						'1234' AS entry_no,
						pd.account_id AS suppID

						FROM gl_journal_receipt AS ro, payment_details as pd,ref_posting_group as ref,  currency as cur
						WHERE 
							pd.parent_id = ro.id AND
							ref.id=pd.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							pd.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 2 AND
							pd.document_type = 3 AND
							pd.transaction_type = 3 AND
							pd.currency_id = cur.id $where23
					UNION
						SELECT
						op.posting_date, 
						'Opening Balance Invoice' AS docType,
						op.invoiceNo AS invoice_no,
						op.moduleNo as supp_no,
						op.description AS Supplier,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) AS grand_total,
						op.converted_price as grand_total_converted, 
						((CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) - op.allocated_amount) AS remaining_amount,
						ro.gl_account_code AS gl_account_code,
						'-' AS due_date,
						ro.transaction_id AS entry_no,
						op.moduleID AS suppID

						FROM gl_account_txn AS ro, opening_balance_customer as op,ref_posting_group as ref,currency as cur,financial_settings as fs
						WHERE 
							ro.gl_account_id = fs.opening_balance_gl_account AND
							op.id = ro.object_id AND
							ref.id=op.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							op.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 9 AND
							op.type = 2 AND
							op.docType = 1 AND
							op.postStatus = 1 AND
							op.currency_id = cur.id $where24
					UNION
						SELECT
						op.posting_date, 
						'Opening Balance Debit Note' AS docType,
						op.invoiceNo AS invoice_no,
						op.moduleNo as supp_no,
						op.description AS Supplier,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) AS grand_total,
						op.converted_price as grand_total_converted,
						((CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) - op.allocated_amount) AS remaining_amount,
						ro.gl_account_code AS gl_account_code,
						'-' AS due_date,
						ro.transaction_id AS entry_no,
						op.moduleID AS suppID

						FROM gl_account_txn AS ro, opening_balance_customer as op,ref_posting_group as ref,currency as cur,financial_settings as fs
						WHERE 
							ro.gl_account_id = fs.opening_balance_gl_account AND
							op.id = ro.object_id AND
							ref.id=op.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							op.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 9 AND
							op.type = 2 AND
							op.docType = 2 AND
							op.postStatus = 1 AND
							op.currency_id = cur.id $where24
					UNION 
						SELECT
						op.posting_date, 
						'Bank Opening Balance Payment' AS docType,
						op.invoiceNo AS invoice_no,
						op.moduleNo as supp_no,
						op.description AS Supplier,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) AS grand_total,
						op.converted_price as grand_total_converted, 
						((CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) - op.allocated_amount) AS remaining_amount,
						ro.gl_account_code AS gl_account_code,
						'-' AS due_date,
						ro.transaction_id AS entry_no,
						op.moduleID AS suppID

						FROM gl_account_txn AS ro, opening_balance_bank as op,ref_posting_group as ref,currency as cur,financial_settings as fs
						WHERE
							ro.gl_account_id = fs.opening_balance_gl_account AND
							op.id = ro.object_id AND
							ref.id=op.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							op.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 6 AND
							op.type = 2 AND
							op.docType = 1 AND
							op.postStatus = 1 AND
							op.currency_id = cur.id $where24
					UNION 
						SELECT
						op.posting_date, 
						'Bank Opening Balance Refund' AS docType,
						op.invoiceNo AS invoice_no,
						op.moduleNo as supp_no,
						op.description AS Supplier,
						ref.name as postingGrp,
						'-' AS order_no,
						cur.code AS currency_code,
						(CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) AS grand_total,
						op.converted_price as grand_total_converted, 
						((CASE
							WHEN op.creditAmount > 0 THEN op.creditAmount
							WHEN op.debitAmount > 0 THEN op.debitAmount
						END ) - op.allocated_amount) AS remaining_amount,
						ro.gl_account_code AS gl_account_code,
						'-' AS due_date,
						ro.transaction_id AS entry_no,
						op.moduleID AS suppID

						FROM gl_account_txn AS ro, opening_balance_bank as op,ref_posting_group as ref,currency as cur,financial_settings as fs
						WHERE
							ro.gl_account_id = fs.opening_balance_gl_account AND
							op.id = ro.object_id AND
							ref.id=op.posting_group_id AND
							ro.company_id = " . $this->arrUser['company_id'] . " AND
							op.company_id = " . $this->arrUser['company_id'] . " AND
							ro.type = 6 AND
							op.type = 2 AND
							op.docType = 2 AND
							op.postStatus = 1 AND
							op.currency_id = cur.id $where24
					
						ORDER BY suppID ASC;                    
						";
            //posting_date
            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                $counter = 0;
                $custTotal = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                    $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);

                    if ($counter == 0) {
                        $prevSupplierID = $Row['suppID'];
                        $prevSupplierNo = $Row['supp_no'];
                        $prevSupplier = $Row['Supplier'];
                        $prevSupplierPostingGrp = $Row['postingGrp'];
                    }

                    if ($counter > 0 && $prevSupplierNo != $Row['supp_no']) { // $prevSupplierID != $Row['suppID']					
                        $totalArray = array();

                        $totalArray['posting_date'] = '';
                        $totalArray['docType'] = 'Total';
                        $totalArray['invoice_no'] = '';
                        $totalArray['supp_no'] = $prevSupplierNo;
                        $totalArray['Supplier'] = $prevSupplier;
                        $totalArray['postingGrp'] = $prevSupplierPostingGrp;
                        $totalArray['order_no'] = '';
                        $totalArray['currency_code'] = '';
                        $totalArray['grand_total'] = '';
                        $totalArray['grand_total_converted'] = $custTotal;
                        $totalArray['remaining_amount'] = '';
                        $totalArray['gl_account_code'] = '';
                        $totalArray['due_date'] = '';
                        $totalArray['entry_no'] = '';
                        $totalArray['suppID'] = '';

                        $custTotal = 0;
                        $response['response'][] = $totalArray;

                        $prevSupplierID = $Row['suppID'];
                        $prevSupplierNo = $Row['supp_no'];
                        $prevSupplier = $Row['Supplier'];
                        $prevSupplierPostingGrp = $Row['postingGrp'];
                    }

                    $custTotal += $Row['grand_total_converted'];


                    $response['response'][] = $Row;
                    $counter++;
                }

                if ($counter > 0) {

                    $totalArray = array();

                    $totalArray['posting_date'] = '';
                    $totalArray['docType'] = 'Total';
                    $totalArray['invoice_no'] = '';
                    $totalArray['supp_no'] = $prevSupplierNo;
                    $totalArray['Supplier'] = $prevSupplier;
                    $totalArray['postingGrp'] = $prevSupplierPostingGrp;
                    $totalArray['order_no'] = '';
                    $totalArray['currency_code'] = '';
                    $totalArray['grand_total'] = '';
                    $totalArray['grand_total_converted'] = $custTotal;
                    $totalArray['remaining_amount'] = '';
                    $totalArray['gl_account_code'] = '';
                    $totalArray['due_date'] = '';
                    $totalArray['entry_no'] = '';
                    $totalArray['suppID'] = '';

                    $custTotal = 0;
                    $response['response'][] = $totalArray;
                }

                $response['ack'] = 1;
                $response['error'] = NULL;
            } else
                $response['response'][] = array();
        }
        return $response;
    }

    function unPostedOrderReport($attr) {
        $where = '';

        $dateFrom = $this->objGeneral->convertStartDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);
        $report_type = $attr['report_type'];
        // $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        // $dateTo = $this->objGeneral->convert_date($attr['dateTo']);	
        $reportXlsxType = (isset($attr['reportXlsxType']) && $attr['reportXlsxType']!='')?$attr['reportXlsxType']:0; 
        $salespersonsArray = FALSE;
        $cutomerarray = FALSE;
        $response = array();
        $orderStagesArray = FALSE;

        if ($dateTo > 0) {
            // $attr['module']=='SaleOrderBYSalesperson' || $attr['module']=='SaleOrderBYDate'
            if ($attr['module'] == 'UnPostedSalesOrders') {
                if ($attr['salespersons']) {

                    $salespersonsArray = '';

                    foreach ($attr['salespersons'] as $rec) {
                        if($rec->id > 0)
                            $salespersonsArray .= $rec->id . ',';
                    }
                    $salespersonsArray = substr($salespersonsArray, 0, -1);

                    //$where .=" AND orders.sale_person_id in (" . substr($salespersonsArray, 0, -1) . ") ";
                }

                if ($attr['customers']) {

                    $cutomerarray = '';

                    foreach ($attr['customers'] as $rec) {
                        if($rec->id > 0)
                            $cutomerarray .= $rec->id . ',';
                    }
                    $cutomerarray = substr($cutomerarray, 0, -1);
                    // $where .=" AND orders.sell_to_cust_id in (" . substr($cutomerarray, 0, -1) . ") ";
                }else {

                    $sqla = "SELECT c.id 
                             FROM sr_crm_listing c
                             WHERE c.type IN (2,3) AND 
                                c.company_id=" . $this->arrUser['company_id'] . " "; 
                    /* $sqla = "SELECT  c.id
                             FROM crm c
                             WHERE c.type IN (2,3) AND 
                                   c.company_id=" . $this->arrUser['company_id'] . ""; */

                    //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
                    // echo $sqla;exit;
                    $RSa = $this->objsetup->CSI($sqla);

                    if ($RSa->RecordCount() > 0) {
                        while ($Rowa = $RSa->FetchRow()) {

                            foreach ($Rowa as $key => $value) {
                                if (is_numeric($key))
                                    unset($Rowa[$key]);
                            }

                            $cutomerarray .= $Rowa['id'] . ',';
                        }

                        $cutomerarray = substr($cutomerarray, 0, -1);
                    }
                    else{
                        $response['response'] = array();
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        return $response;
                    }
                }

                if ($attr['orderStages']) {

                    $orderStagesArray = '';

                    foreach ($attr['orderStages'] as $rec) {
                        if($rec->id > 0)
                            $orderStagesArray .= $rec->id . ',';
                    }
                    $orderStagesArray = substr($orderStagesArray, 0, -1);
                }

                $Sql = "CALL srrep_UnpostedSalesOrders(" . $this->arrUser['company_id'] . ",'" . $dateFrom . "','" . $dateTo . "', $report_type, '" . $salespersonsArray . "', '" . $cutomerarray . "','" . $orderStagesArray . "')";

                //   echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                 $counter = $totalExclVat = $totalInclVat = 0;
                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                        $counter =  $counter + 1;
                        $totalExclVat = $totalExclVat + Round($Row['amount_excl_Vat'],2) ;
                        $totalInclVat = $totalInclVat + Round($Row['amount_incl_Vat'],2) ;

                       
                        // $row['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                        // $row['order_date'] = $Row['order_date'];
                        if($report_type == 1)
                        {
                            if ($Row['order_date'] != 0 && $Row['order_date'] != '')
                                $row['order_date'] = date("d/m/Y", strtotime($Row['order_date']));
                        }
                        else if($report_type == 2)
                        {
                            if ($Row['posting_date'] != 0 && $Row['posting_date'] != '')
                                $row['posting_date'] = date("d/m/Y", strtotime($Row['posting_date']));
                        }
                        else if($report_type == 3)
                        {
                            if ($Row['delivery_date'] != 0 && $Row['delivery_date'] != '')
                                $row['delivery_date'] = date("d/m/Y", strtotime($Row['delivery_date']));
                        }
                        $row['order_no'] = $Row['order_no'];
                        $row['cust_No'] = $Row['Cust_no'];
                        $row['name'] = $Row['name'];
                       // $row['territory'] = $Row['region'];
                        
                        //$row['buying_group'] = $Row['buying_group'];
                       // $row['cust_order_no'] = $Row['cust_order_no'];
                        $row['salesperson'] = $Row['sale_person'];
                        $row['requested_delivery_date'] =$this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
                        $row['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                        $row['amount_excl_Vat'] = Round($Row['amount_excl_Vat'],2);
                        $row['amount_incl_Vat'] =  Round($Row['amount_incl_Vat'],2);
                       // $row['amount'] = $Row['amount'];
                      //  $row['currency'] = $Row['currency_code'];
                        $row['order_stage'] = $Row['current_stage'];
                       // $row['Link to PO'] = $Row['linked_pos'];

                        $response['response'][] = $row;
                    }

                    $records = $response['response'];
                    $total_sales = array_column($records, 'amount_excl_Vat');
                    //echo '<pre>';print_r($total_sales);exit;
                    array_multisort($total_sales, SORT_DESC, $records);
                    $response['response'] = $records;

                    $response['totalOrders'] = $counter;
                     $response['totalExclVat'] = Round($totalExclVat,2);
                     $response['totalInclVat'] = Round($totalInclVat,2);
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
                else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
            } else if ($attr['module'] == 'ECSalesList') {
                if ($attr['EUCountries']) {

                    $EUCountriesArray = '';

                    foreach ($attr['EUCountries'] as $rec) {
                        if($rec->ref_country_id > 0)
                            $EUCountriesArray .= $rec->ref_country_id . ',';
                    }

                    //$where .=" AND country_id in (" . substr($EUCountriesArray, 0, -1) . ") ";
                    $EUCountriesArray = substr($EUCountriesArray, 0, -1);
                }

                
            } else if ($attr['module'] == 'Sales') {
                if ($attr['salespersons']) {

                    $salespersonsArray = '';

                    foreach ($attr['salespersons'] as $rec) {
                        if($rec->id > 0)
                            $salespersonsArray .= $rec->id . ',';
                    }

                    $where .=" AND salepersonID in (" . substr($salespersonsArray, 0, -1) . ") ";
                }

                if ($attr['customers']) {

                    $cutomerarray = '';

                    foreach ($attr['customers'] as $rec) {
                        if($rec->id > 0)
                            $cutomerarray .= $rec->id . ',';
                    }

                    $where .=" AND custID in (" . substr($cutomerarray, 0, -1) . ") ";
                }else {

                    $sqla = "SELECT c.id 
                            FROM sr_crm_listing c
                            WHERE c.type IN (2,3) AND 
                                c.company_id=" . $this->arrUser['company_id'] . " "; 
                    /* $sqla = "SELECT  c.id
                             FROM crm c
                             WHERE c.type IN (2,3) AND 
                                   c.company_id=" . $this->arrUser['company_id'] . ""; */

                    //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
                    // echo $sqla;exit;
                    $RSa = $this->objsetup->CSI($sqla);

                    if ($RSa->RecordCount() > 0) {
                        while ($Rowa = $RSa->FetchRow()) {

                            foreach ($Rowa as $key => $value) {
                                if (is_numeric($key))
                                    unset($Rowa[$key]);
                            }

                            // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                            $cutomerarray .= $Rowa['id'] . ',';
                        }

                        $where .=" AND custID in (" . substr($cutomerarray, 0, -1) . ") ";
                    }
                    else{
                        $response['response'] = array();
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        return $response;
                    }
                }


                if ($attr['items']) {

                    $itemsarray = '';

                    foreach ($attr['items'] as $rec) {
                        if($rec->id > 0)
                            $itemsarray .= $rec->id . ',';
                    }

                    $where .=" AND product_id in (" . substr($itemsarray, 0, -1) . ") ";
                }
                else {

                    $sqla = "SELECT prd.id 
                            FROM productcache prd
                            WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

                    //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
                    // echo $sqla;exit;
                    $RSa = $this->objsetup->CSI($sqla);

                    if ($RSa->RecordCount() > 0) {
                        while ($Rowa = $RSa->FetchRow()) {

                            foreach ($Rowa as $key => $value) {
                                if (is_numeric($key))
                                    unset($Rowa[$key]);
                            }

                            $itemsarray .= $Rowa['id'] . ',';
                        }
                        $where .=" AND product_id in (" . substr($itemsarray, 0, -1) . ") ";
                    }
                    else{
                        $response['response'] = array();
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        return $response;
                    }
                }

                if ($dateFrom > 0)
                    $where .=" AND postingDate>='" . $dateFrom . "' ";

                $where .=" AND postingDate<='" . $dateTo . "' ";

                $Sql = "SELECT  *						
						FROM sr_rep_sales_figures
						WHERE company_id=" . $this->arrUser['company_id'] . " AND 
							  product_code IS NOT NULL  $where";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();

                        $row['doc_type'] = $Row['doc_type'];

                        if ($Row['postingDate'] != 0 && $Row['postingDate'] != '')
                            $row['invoice_date'] = date("d/m/Y", strtotime($Row['postingDate']));

                        $row['Custno'] = $Row['custNo'];
                        $row['name'] = $Row['custName'];
                        $row['saleperson'] = $Row['saleperson'];
                        $row['item_no'] = $Row['product_code'];
                        $row['description'] = $Row['description'];
                        $row['category'] = $Row['categoryname'];
                        $row['brand'] = $Row['brandname'];
                        $row['cref_no'] = $Row['container_no'];
                        $row['batch_no'] = $Row['batch_no'];
                        $row['qty.'] = $Row['qty'];
                        $row['stock Value'] = $Row['qty'] * $Row['price'];

                        $response['response'][] = $row;
                    }

                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
                else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
            } else if ($attr['module'] == 'UnPostedPurchaseOrder') {
                
                $supplierArray = false;
                $supplierArray = false;

                if ($attr['employees']) {

                    $employeesArray = false;

                    foreach ($attr['employees'] as $rec) {
                        if($rec->id > 0)
                            $employeesArray .= $rec->id . ',';
                    }
                   $employeesArray =  substr($employeesArray, 0, -1);

                }

                if ($attr['suppliers']) {

                    $supplierArray = false;

                    foreach ($attr['suppliers'] as $rec) {
                        if($rec->id > 0)
                            $supplierArray .= $rec->id . ',';
                    }
                   $supplierArray =  substr($supplierArray, 0, -1);
                }
                else {

                    $sqla = "SELECT s.id 
                            FROM sr_srm_general_sel s
                            WHERE s.type IN (2,3) AND 
                                  s.company_id=" . $this->arrUser['company_id'] . " ";

                    //$sqla = $this->objsetup->whereClauseAppender($sqla, 24);
                    // echo $sqla;exit;
                    $RSa = $this->objsetup->CSI($sqla);

                    if ($RSa->RecordCount() > 0) {
                        while ($Rowa = $RSa->FetchRow()) {

                            foreach ($Rowa as $key => $value) {
                                if (is_numeric($key))
                                    unset($Rowa[$key]);
                            }

                            $supplierArray .= $Rowa['id'] . ',';
                        }

                        $supplierArray = substr($supplierArray, 0, -1);
                    }
                    else{
                        $response['response'] = array();
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        return $response;
                    }
                }

                $itemsarray = '';

                if ($attr['items']) {                    

                    foreach ($attr['items'] as $rec) {
                        if($rec->id > 0)
                            $itemsarray .= $rec->id . ',';
                    }

                    $itemsarray = substr($itemsarray, 0, -1);
                }
                /* else {

                    $sqla = "SELECT prd.id 
                            FROM productcache prd
                            WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

                    $sqla = $this->objsetup->whereClauseAppender($sqla, 11);
                    // echo $sqla;exit;
                    $RSa = $this->objsetup->CSI($sqla);

                    if ($RSa->RecordCount() > 0) {
                        while ($Rowa = $RSa->FetchRow()) {

                            foreach ($Rowa as $key => $value) {
                                if (is_numeric($key))
                                    unset($Rowa[$key]);
                            }

                            $itemsarray .= $Rowa['id'] . ',';
                        }

                        $itemsarray = substr($itemsarray, 0, -1);
                    }
                    else{
                        $response['response'] = array();
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        return $response;
                    }
                } */

                $glsarray = '';

                if ($attr['gls']) {

                    foreach ($attr['gls'] as $rec) {
                        $glsarray .= $rec->id . ',';
                    }

                    // $glsarray = rtrim($glsarray, ", ");
                    $glsarray = substr($glsarray, 0, -1);
                }

                $reportOrderByID = (isset($attr['reportOrderByID']) && $attr['reportOrderByID']!='')?$attr['reportOrderByID']:0;       

                $Sql = "CALL srrep_UnpostedPurchaseOrders(" . $this->arrUser['company_id'] . ",'" . $dateFrom . "','" . $dateTo . "', '" . $supplierArray . "','" . $employeesArray . "', '" . $itemsarray . "', '" . $glsarray . "', '" . $attr['reporttype'] . "','".$reportOrderByID."')";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);
                $final = [];
                $data = [];
                $totalExclVat = $totalInclVat = 0;
                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                         
                        if ($Row['order_date'] != 0 && $Row['order_date'] != '' && $Row['order_date'] != '1970-01-01')
                            $row['order_date'] = date("d/m/Y", strtotime($Row['order_date']));

                        if ($Row['posting_date'] != 0 && $Row['posting_date'] != '' && $Row['posting_date'] != '1970-01-01')
                            $row['posting_date'] = date("d/m/Y", strtotime($Row['posting_date']));

                        $row['id'] = $Row['id'];
                        $row['order_no'] = $Row['order_no'];
                        $row['supplier_no'] = $Row['Supp_no'];
                        $row['supplier_name'] = $Row['Supp_name'];
                        $row['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
                        $row['reciept_date'] =  $this->objGeneral->convert_unix_into_date($Row['receiptDate']);
                        $row['amount_excl_vat'] = $Row['amount_excl_vat'];
                        $row['amount_incl_vat'] = $Row['amount_incl_vat'];
                        $row['ship_to_city'] = $Row['ship_to_city'];
                        $row['product_code'] = $Row['product_code'];
                        $row['product_name'] = $Row['product_name'];
                        $row['qty'] = $Row['qty'];
                        $row['total_price'] = $Row['total_price'];
                        $row['unit_price'] = $Row['unit_price'];
                        $row['item_amount_incl_vat'] = Round($Row['item_amount_incl_vat'],2);
                        $row['item_amount_excl_vat'] =  Round($Row['item_amount_excl_vat'],2);
                        
                        $totalExclVat = $totalExclVat +  Round($Row['amount_excl_vat'],2);
                        $totalInclVat = $totalInclVat +  Round($Row['amount_incl_vat'],2);
                        
                        $final[] = $row;
                    }
             
                    if($attr['reporttype']=='detail')
                    {
                        $totalExclVat = $totalInclVat = 0;
                        $salesPersonsIds = array_column($final, 'order_no', 'id');
                        //print_r($salesPersonsIds);
                    
                        foreach ($salesPersonsIds as $ids => $name)
                        {
                            $itemExclVat = $itemInclVat =  0;
                            //echo $ids;
                            foreach ($final as $Rows)
                            {
                            
                                if($ids == $Rows['id'])
                                    
                                {
                                    $itemExclVat = $itemExclVat+  Round($Rows['item_amount_excl_vat'],2);
                                    $itemInclVat = $itemInclVat+  Round($Rows['item_amount_incl_vat'],2);
                                
                                
                                    $prod = array();
                                    
                                $prod['product_code'] = $Rows['product_code'];
                                $prod['product_name'] = $Rows['product_name'];
                                $prod['qty'] = $Rows['qty'];
                                $prod['total_price'] = $Rows['total_price'];
                                $prod['unit_price'] = $Rows['unit_price'];
                                $prod['item_amount_incl_vat'] =  Round($Rows['item_amount_incl_vat'],2);
                                $prod['item_amount_excl_vat'] =  Round($Rows['item_amount_excl_vat'],2);
                                
                                $data[$ids]['products'][] = $prod;
                                    
                                $data[$ids]['id'] = $Rows['id'];     
                                $data[$ids]['order_date'] = $Rows['order_date'];
                                $data[$ids]['posting_date'] = $Rows['posting_date'];

                                // if ($Rows['order_date'] != 0 && $Rows['order_date'] != '' && $Rows['order_date'] != '1970-01-01')
                                //     $data[$ids]['order_date'] = date("d/m/Y", strtotime($Rows['order_date']));

                                // if ($Rows['posting_date'] != 0 && $Rows['posting_date'] != '' && $Rows['posting_date'] != '1970-01-01')
                                //     $data[$ids]['posting_date'] = date("d/m/Y", strtotime($Rows['posting_date']));

                                $data[$ids]['order_no'] = $Rows['order_no'];
                                $data[$ids]['supplier_no'] = $Rows['supplier_no'];
                                $data[$ids]['supplier_name'] = $Rows['supplier_name'];
                                $data[$ids]['requested_delivery_date'] = $Rows['requested_delivery_date'];
                                $data[$ids]['reciept_date'] = $Rows['reciept_date'];
                                $data[$ids]['amount_excl_vat'] = $Rows['amount_excl_vat'];
                                $data[$ids]['amount_incl_vat'] = $Rows['amount_incl_vat'];
                                $data[$ids]['ship_to_city'] = $Rows['ship_to_city'];

                                }
                                

                            $data[$ids]['itemInclVat'] =  Round($itemInclVat,2);
                            $data[$ids]['itemExclVat'] =  Round($itemExclVat,2);                          
                            
                            }                         

                        }
                
                    }
                    else {
                        $data = $final;
                    }

                    // response ordering (added by Akhtar Nawaz)
                    $records = $data;
                    $order_by_spec_col = array_column($records, 'order_no');
                    array_multisort($order_by_spec_col, SORT_ASC, $records);
                    $data = $records;

                    $response['response'] = $data;
                    $response['totalInclVat'] =  Round($totalInclVat,2) ;
                    $response['totalExclVat'] =  Round($totalExclVat,2) ;
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
                else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
                return $response;

            } else if ($attr['module'] == 'PostedPurchaseOrder') {
                
                $supplierArray = false;
                $supplierArray = false;

                $docTypeID = $attr['docTypeID'];

                if ($attr['employees']) {
                    $employeesArray = false;

                    foreach ($attr['employees'] as $rec) {
                        if($rec->id > 0)
                            $employeesArray .= $rec->id . ',';
                    }
                   $employeesArray =  substr($employeesArray, 0, -1);
                }

                if ($attr['suppliers']) {
                    $supplierArray = false;

                    foreach ($attr['suppliers'] as $rec) {
                        if($rec->id > 0)
                            $supplierArray .= $rec->id . ',';
                    }
                    $supplierArray =  substr($supplierArray, 0, -1);
                }
                else {

                    $sqla = "SELECT s.id 
                            FROM sr_srm_general_sel s
                            WHERE s.type IN (2,3) AND 
                                  s.company_id=" . $this->arrUser['company_id'] . " ";

                    //$sqla = $this->objsetup->whereClauseAppender($sqla, 24);
                    // echo $sqla;exit;
                    $RSa = $this->objsetup->CSI($sqla);

                    if ($RSa->RecordCount() > 0) {
                        while ($Rowa = $RSa->FetchRow()) {

                            foreach ($Rowa as $key => $value) {
                                if (is_numeric($key))
                                    unset($Rowa[$key]);
                            }

                            $supplierArray .= $Rowa['id'] . ',';
                        }

                        $supplierArray = substr($supplierArray, 0, -1);
                    }
                    else{
                        $response['response'] = array();
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        return $response;
                    }
                }

                
                $PurchaseTotalExclVat = 0;
                $PurchaseTotalInclVat = 0;
                $DebitNoteTotalExclVat = 0;
                $DebitNoteTotalInclVat = 0;

                $Sql = "CALL srrep_postedPurchaseOrders(" . $this->arrUser['company_id'] . ",'" . $dateFrom . "','" . $dateTo . "', '" . $supplierArray . "','" . $employeesArray . "',".$docTypeID.", '" . $attr['reporttype'] . "')";

                //echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);
                $final = [];
                $data = [];
                $totalExclVat = $totalInclVat = 0;              

                if (($RS->RecordCount() > 2) || ($RS->RecordCount() > 0 && $attr['reporttype']=='detail')) {
                    while ($Row = $RS->FetchRow()) {
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }
                        $row = array();
                         
                        if ($Row['order_date'] != 0 && $Row['order_date'] != '')
                            $row['order_date'] = date("d/m/Y", strtotime($Row['order_date']));


                        $row['id'] = $Row['id'];
                        // $row['Recid'] = $Row['id'];
                        $row['order_no'] = $Row['order_no'];
                        $row['invoice_code'] = $Row['invoice_code'];
                        $row['rank'] = $Row['rank'];
                        $row['docType'] = $Row['docType'];
                        $row['supplier_no'] = $Row['Supp_no'];
                        $row['supplier_name'] = $Row['Supp_name'];
                        $row['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);
                        
                        if($row['rank'] != 2 && $row['rank'] != 4)
                            $row['reciept_date'] =  $this->objGeneral->convert_unix_into_date($Row['receiptDate']);
                        else
                            $row['reciept_date'] =  $Row['receiptDate'];

                        $row['amount_excl_vat'] =  Round($Row['amount_excl_vat'],2);
                        $row['amount_incl_vat'] =  Round($Row['amount_incl_vat'],2);
                        $row['ship_to_city'] = $Row['ship_to_city'];
                        $row['product_code'] = $Row['product_code'];
                        $row['product_name'] = $Row['product_name'];
                        $row['qty'] = $Row['qty'];
                        $row['total_price'] = $Row['total_price'];
                        $row['unit_price'] = $Row['unit_price'];
                        $row['item_amount_incl_vat'] =  Round($Row['item_amount_incl_vat'],2);
                        $row['item_amount_excl_vat'] =  Round($Row['item_amount_excl_vat'],2);

                        
                        if($attr['reporttype']!='detail')
                        {
                            if($Row['rank'] == 2){
                                $PurchaseTotalExclVat =  Round($Row['amount_excl_vat'],2);
                                $PurchaseTotalInclVat =  Round($Row['amount_incl_vat'],2);
                            }

                            if($Row['rank'] == 4){
                                $DebitNoteTotalExclVat =  Round($Row['amount_excl_vat'],2);
                                $DebitNoteTotalInclVat =  Round($Row['amount_incl_vat'],2);
                            }
                        }
                        else{
                            $PurchaseTotalExclVat = '';
                            $PurchaseTotalInclVat = '';
                            $DebitNoteTotalExclVat = '';
                            $DebitNoteTotalInclVat = '';
                        }

                        /* if($Row['docType'] == 'Purchase Invoice' && $Row['id'] >0){
                            $totalExclVat = $totalExclVat + $Row['amount_excl_vat'];
                            $totalInclVat = $totalInclVat + $Row['amount_incl_vat'];
                        }
                        elseif($Row['docType'] == 'Debit Note' && $Row['id'] >0){
                            $totalExclVat = $totalExclVat - $Row['amount_excl_vat'];
                            $totalInclVat = $totalInclVat - $Row['amount_incl_vat'];
                        }  */                       
                        
                        
                        $final[] = $row;
                    }
             
                    if($attr['reporttype']=='detail')
                    {
                        $totalExclVat = $totalInclVat = 0;
                        $invoiceIds = array_column($final, 'order_no', 'id');
                        // print_r($invoiceIds);exit;

                        // array_reverse($final); 

                        $counter2 = 0;
                    
                        foreach ($invoiceIds as $ids => $name)
                        { 
                            $itemExclVat = $itemInclVat =  0;
                            $counter2++;                            
                            //echo $ids; // $row['Recid'] = $Row['id'];
                            foreach ($final as $Rows)
                            { 
                                

                                if($ids == $Rows['id'])                                    
                                {
                                    $data[$counter2]['id'] = $counter2;//$Rows['id']; 
                                    $itemExclVat = $itemExclVat+  Round($Rows['item_amount_excl_vat'],2);
                                    $itemInclVat = $itemInclVat+  Round($Rows['item_amount_incl_vat'],2);                               
                                
                                    $prod = array();
                                    
                                    $prod['product_code'] = $Rows['product_code'];
                                    $prod['product_name'] = $Rows['product_name'];
                                    $prod['qty'] = $Rows['qty'];
                                    $prod['total_price'] = $Rows['total_price'];
                                    $prod['unit_price'] = $Rows['unit_price'];
                                    $prod['item_amount_incl_vat'] =  Round($Rows['item_amount_incl_vat'],2);
                                    $prod['item_amount_excl_vat'] =  Round($Rows['item_amount_excl_vat'],2);                                    
                                    
                                    $data[$counter2]['products'][] = $prod;
                                        
                                        
                                    // $data[$counter2]['Recid'] = $Rows['Recid'];     
                                    $data[$counter2]['rank'] = $Rows['rank'];     
                                    $data[$counter2]['docType'] = $Rows['docType'];     
                                    $data[$counter2]['order_date'] = $Rows['order_date'];
                                    $data[$counter2]['order_no'] = $Rows['order_no'];
                                    $data[$counter2]['invoice_code'] = $Rows['invoice_code'];
                                    $data[$counter2]['supplier_no'] = $Rows['supplier_no'];
                                    $data[$counter2]['supplier_name'] = $Rows['supplier_name'];
                                    $data[$counter2]['requested_delivery_date'] = $Rows['requested_delivery_date'];
                                    $data[$counter2]['reciept_date'] = $Rows['reciept_date'];
                                    $data[$counter2]['amount_excl_vat'] = $Rows['amount_excl_vat'];
                                    $data[$counter2]['amount_incl_vat'] = $Rows['amount_incl_vat'];
                                    $data[$counter2]['ship_to_city'] = $Rows['ship_to_city'];
                                }                              

                                $data[$counter2]['itemInclVat'] =  Round($itemInclVat,2);
                                $data[$counter2]['itemExclVat'] =  Round($itemExclVat,2);                                                      
                            }                            
                        } 
                        // echo '<pre>';print_r($data);exit;

                        // sortBy('rank',   $data, 'ASC');
                        // usort($data, 'sortByRank');

                        // $data = $final;            
                    }
                    else {
                        $data = $final;
                    }
                    // echo '<pre>';print_r($data); exit;
                    

                    $response['response'] = $data;
                    // $response['totalInclVat'] = $totalInclVat ;
                    // $response['totalExclVat'] = $totalExclVat ;
                    $response['totalInclVat'] =  Round($PurchaseTotalInclVat,2) -  Round($DebitNoteTotalInclVat,2) ;
                    $response['totalExclVat'] =  Round($PurchaseTotalExclVat,2) -  Round($DebitNoteTotalExclVat,2) ;
                    $response['ack'] = 1;
                    $response['error'] = NULL;

                    if($reportXlsxType == 1){
                        $CSVDataTitle = array();
                        $CSVDataTitle['col1'] = $this->arrUser['companyName'];
                        $response['CSVData'][] = $CSVDataTitle;
    
                        $CSVDataTitle = array();
                        $CSVDataTitle['col1'] = 'Posted Purchase Invoices and Debit Notes -'.$attr['reporttype'];
                        $response['CSVData'][] = $CSVDataTitle;
    
                        $CSVDataTitle = array();
                        $CSVDataTitle['col1'] = 'From '.$attr['dateFrom'].' to '.$attr['dateTo'];
                        $response['CSVData'][] = $CSVDataTitle;                    
    
                        $response['filename']=  APP_PATH . "Reports/PostedPurchaseOrder".$this->arrUser['company_id'].".csv";
    
                        $this->createCSVfile2($response);
                       // echo "here 1 <pre>";print_r($response);exit;
                        $CSVRecCounter = 0;
    
                        $response['CSVData'] = array();
    
                        $prev_sp_id=0;
                        if(count($response['response'])>0){
                            // add an empty line
                            $CSVDataRec = array(); 
                            $response['CSVData'][] = $CSVDataRec;
        
                            $CSVDataRec = array();
                            $CSVDataRec['col1'] = 'Order Date';
                            if($attr['reporttype']=='detail'){
                                $CSVDataRec['col2'] = 'PO No.';
                                $CSVDataRec['col3'] = 'PI No.';
                            }else{
                                $CSVDataRec['col2'] = 'PO/DN No.';
                                $CSVDataRec['col3'] = 'PI/P. DN No.';    
                            }
                            $CSVDataRec['col4'] = 'Doc. Type';
                            $CSVDataRec['col5'] = 'Supplier No.';
                            $CSVDataRec['col6'] = 'Supplier Name';
                            $CSVDataRec['col7'] = 'Req. Rcpt./Delivery Date';
                            $CSVDataRec['col8'] = 'Receipt/Dispatch Date';	
                            $CSVDataRec['col9'] = 'Amount (LCY)';
                            $CSVDataRec['col10'] = 'Amount Incl.VAT (LCY)';	
                            $CSVDataRec['col11'] = 'Shipping City';	
                            
                            $response['CSVData'][] = $CSVDataRec;
                        foreach ($response['response'] as $Row) {
    
                            $CSVDataRec = array();
                            $CSVDataRec['col1'] = $Row['order_date'];
                            $CSVDataRec['col2'] = $Row['order_no'];
                            $CSVDataRec['col3'] = $Row['invoice_code'];
                            $CSVDataRec['col4'] = $Row['docType'];
                            $CSVDataRec['col5'] = $Row['supplier_no'];
                            $CSVDataRec['col6'] = $Row['supplier_name'];
                            $CSVDataRec['col7'] = $Row['requested_delivery_date'];
                            $CSVDataRec['col8'] = $Row['reciept_date'];
                            $CSVDataRec['col9'] = $Row['amount_excl_vat'];
                            $CSVDataRec['col10'] = $Row['amount_incl_vat'];
                            $CSVDataRec['col11'] = $Row['ship_to_city'];

                            $response['CSVData'][] = $CSVDataRec;                                    
                                
                                if($attr['reporttype']=='detail'){
                                    if(count($Row['products'])>0){
                                    $result = array();
                                    $result['col1'] = '';
                                    $result['col2'] = 'No.';
                                    $result['col3'] = 'Description';
                                    $result['col4'] = '';
                                    $result['col5'] = 'Quantity';
                                    $result['col6'] = '';
                                    $result['col7'] = 'Unit Price';
                                    $result['col8'] = 'Amount (LCY)';
                                    $result['col9'] = 'Amount Incl. VAT(LCY)';

                                    $response['CSVData'][] = $result;

                                        foreach($Row['products'] as $prd){
                                            $result = array();
                                            $result['col1'] = '';
                                            $result['col2'] = $prd['product_code'];
                                            $result['col3'] = $prd['product_name'];
                                            $result['col4'] = '';
                                            $result['col5'] = $prd['qty'];
                                            $result['col6'] = '';
                                            $result['col7'] = $prd['unit_price'];
                                            $result['col8'] = $prd['item_amount_excl_vat'];
                                            $result['col9'] = $prd['item_amount_incl_vat'];
                                            $response['CSVData'][] = $result;
                                        }
                                        $result = array();
                                        $result['col1'] = '';
                                        $result['col2'] = '';
                                        $result['col3'] = '';
                                        $result['col4'] = '';
                                        $result['col5'] = '';
                                        $result['col6'] = '';
                                        $result['col7'] = '';
                                        $result['col8'] = $Row['itemExclVat'];
                                        $result['col9'] = $Row['itemInclVat'];
                                        $response['CSVData'][] = $result;
                                    }
                                }

                                if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                    $CSVRecCounter = 0;
                            
                                    $this->createCSVFileAppend($response);
                                    $response['CSVData'] = array();
                                }
                        
                                $CSVRecCounter++;                            
                        }  
                        if($attr['reporttype']=='summary'){
                        $CSVDataRec = array();
                            $CSVDataRec['col1'] = '';
                            $CSVDataRec['col2'] = '';
                            $CSVDataRec['col3'] = '';
                            $CSVDataRec['col4'] = '';
                            $CSVDataRec['col5'] = '';
                            $CSVDataRec['col6'] = '';
                            $CSVDataRec['col7'] = '';
                            $CSVDataRec['col8'] = 'Total (LCY)';
                            $CSVDataRec['col9'] = $response['totalExclVat'];
                            $CSVDataRec['col10'] = $response['totalInclVat'];
                            $CSVDataRec['col11'] = '';
                            $response['CSVData'][] = $CSVDataRec;
                        }
                    }     
                       // echo "here 2 <pre>";print_r($response);exit;
                        if($CSVRecCounter>0){
                            $CSVRecCounter = 0;    
                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }  
                        $response['ack'] = 2;
                        $response['filename'] = WEB_PATH . "/Reports/PostedPurchaseOrder".$this->arrUser['company_id'].".csv";
                        $response['response'] = array();
                        // $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.'; 
                    }

                }
                else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
                return $response;
            } else if ($attr['module'] == 'PurchaseOrderGoodReceived') {

                $supplierArray = false;

                if ($attr['suppliers']) {
                    $supplierArray = false;

                    foreach ($attr['suppliers'] as $rec) {
                        if($rec->id > 0)
                            $supplierArray .= $rec->id . ',';
                    }
                    $supplierArray =  substr($supplierArray, 0, -1);
                }
                else {

                    $sqla = "SELECT s.id 
                            FROM sr_srm_general_sel s
                            WHERE s.type IN (2,3) AND 
                                  s.company_id=" . $this->arrUser['company_id'] . " ";

                    //$sqla = $this->objsetup->whereClauseAppender($sqla, 24);
                    // echo $sqla;exit;
                    $RSa = $this->objsetup->CSI($sqla);

                    if ($RSa->RecordCount() > 0) {
                        while ($Rowa = $RSa->FetchRow()) {

                            foreach ($Rowa as $key => $value) {
                                if (is_numeric($key))
                                    unset($Rowa[$key]);
                            }

                            $supplierArray .= $Rowa['id'] . ',';
                        }

                        $supplierArray = substr($supplierArray, 0, -1);
                    }
                    else{
                        $response['response'] = array();
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        return $response;
                    }
                }
                
                $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
                $dateTo = $this->objGeneral->convert_date($attr['dateTo']);	
               // if ($dateFrom > 0)
                   $where .=" AND po.invoice_date>='" . $dateFrom . "' ";
                // elseif($dateTo>0)

                $where .=" AND po.invoice_date<='" . $dateTo . "' ";


                $Sql ="Call srrep_PurchaseOrderGoodReceived(" . $this->arrUser['company_id'] . ",'" . $dateFrom . "','" . $dateTo . "', '" . $supplierArray . "')";
                // echo $Sql;exit;

                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                        $row['invoice_date'] = $this->objGeneral->convert_unix_into_date($Row['invoice_date']);
                        $row['po_no'] = $Row['order_no'];
                        $row['supplier_no'] = $Row['Supplier_no'];
                        $row['name'] = $Row['name'];
                        // $row['purchaser'] = $Row['srm_purchase_code'];
                        // $row['delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['delivery_date']);
                        // $row['product_id'] = $Row['product_id'];
                        $row['item_no'] = $Row['product_code'];
                        $row['description'] = $Row['product_name'];
                        $row['received_qty'] = $Row['qty'];
                        $row['unit_cost'] = $Row['unit_price'];                        
                        $row['date_received'] = $this->objGeneral->convert_unix_into_date($Row['receiptDate']);
                        // $row['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                        $row['total_amount'] = $Row['total_price'];
                        $response['response'][] = $row;
                    }
                    $records = $response['response'];
                    $order_by_spec_col = array_column($records, 'po_no');
                    array_multisort($order_by_spec_col, SORT_ASC, $records);
                    $response['response'] = $records;

                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
                else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
            }
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }


        return $response;
    }

    function selectLink_SO_PO($id, $type) {
        $response = array();

        if ($type == 1) { // type 1 is for get all linked Sale Order codes
            $sqld = "SELECT s.sale_order_code AS code 
					 FROM link_so_po sp
					 LEFT JOIN orders as s on s.id = sp.saleOrderID 
                     WHERE  sp.purchaseOrderID='$id'  AND 
                            sp.company_id='" . $this->arrUser['company_id'] . "' AND
							s.company_id='" . $this->arrUser['company_id'] . "'";
        } else if ($type == 2) { // type 2 is for get all linked Purchase Order codes
            $sqld = "SELECT s.order_code AS code 
					 FROM link_so_po sp
					 LEFT JOIN srm_invoice as s on s.id = sp.purchaseOrderID 
                     WHERE  sp.saleOrderID='$id'  AND 
                            sp.company_id='" . $this->arrUser['company_id'] . "' AND
							s.company_id='" . $this->arrUser['company_id'] . "'";
        }

        //  echo $sqld;exit;
        $RS = $this->objsetup->CSI($sqld);

        if ($RS->RecordCount() > 0) {

            $codesArray = '';

            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $codesArray .= $Row['code'] . ', ';
            }

            $codesArray = substr($codesArray, 0, -2);
        } else
            $codesArray = '';

        return $codesArray;
    }

    function postedCustomerInvoicesReport($attr) {
        $where = '';

        if ($attr['customers']) {

            $cutomerarray = False;

            foreach ($attr['customers'] as $rec) {
                if($rec->id > 0)
                    $cutomerarray .= $rec->id . ',';
            }
            $cutomerarray = substr($cutomerarray, 0, -1);
          //  $where .=" AND sell_to_cust_id in (" . substr($cutomerarray, 0, -1) . ") ";
        }
        else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 
            /* $sqla = "SELECT  c.id
                     FROM crm c
                     WHERE c.type IN (2,3) AND 
                           c.company_id=" . $this->arrUser['company_id'] . ""; */

           // $sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $cutomerarray .= $Rowa['id'] . ',';
                }

                $cutomerarray = substr($cutomerarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $dateFrom = $this->objGeneral->convertStartDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        $financeID = $attr['financeID'];
        $insuranceID = $attr['insuranceID'];
        $docTypeID = $attr['docTypeID'];
        $response = array();

        if ($dateTo > 0) {

            if ($attr['module'] == 'Sale') {

                $Sql ="CALL srrep_PostedSalesInvoiceAndCreditNote(".$this->arrUser['company_id'].", '".$dateFrom."', '".$dateTo."', ".$financeID.", ".$insuranceID.", ".$docTypeID.",'".$cutomerarray."')";

                // echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);

                if ($RS->RecordCount() > 0) {
                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }
                        //print_r($Row);
                        $row = array();
                        // $row['invoice_date'] = $this->objGeneral->convert_unix_into_date($Row['invoice_date']);
                        if ($Row['invoice_date'] != 0 && $Row['invoice_date'] != '')
                            $row['posting_date'] = date("d/m/Y", strtotime($Row['invoice_date']));
                        
                      //  $row['cust_order_no'] = $Row['cust_order_no'];
                       // $row['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                        //$row['sale_order_no'] = $Row['sale_order_no'];
                        $row['customer_no'] = $Row['Customer_no'];
                        $row['customer_name'] = $Row['name'];
                        $row['document_type'] = $Row['docType'];
                        $row['document_no'] = $Row['order_no'];
                        $row['amount_excl_Vat'] = $Row['amount_excl_vat_lcy'];
                        $row['amount_incl_Vat'] = $Row['amount_incl_vat_lcy'];
                        
                            
                        $row['finance'] = $Row['finance_check'];
                        $row['insurance'] = $Row['insurance_check'];
                        //$row['rank'] = $Row['rank'];
                      //  $row['salesperson'] = $Row['sale_person'];
                        //$row['shipping_city'] = $Row['ship_to_city'];
                        if($Row['rank']==2)
                        {
                            $SaleInvoice_vat_incl = $Row['amount_incl_vat_lcy'];
                            $SaleInvoice_vat_excl = $Row['amount_excl_vat_lcy'];
                        }
                         else if($Row['rank']==4)
                        {
                            $CreditNote_vat_incl = $Row['amount_incl_vat_lcy'];
                            $CreditNote_vat_excl = $Row['amount_excl_vat_lcy'];
                        }
                            
                       
                         $response['response']['sale'][] = $row;
                    }
                    $response['response']['total']['SaleInvoice_vat_incl'] = $SaleInvoice_vat_incl;
                    $response['response']['total']['SaleInvoice_vat_excl'] = $SaleInvoice_vat_excl;
                    $response['response']['total']['CreditNote_vat_incl'] = $CreditNote_vat_incl;
                    $response['response']['total']['CreditNote_vat_excl'] = $CreditNote_vat_excl;
                    $response['ack'] = 1;
                    $response['error'] = NULL;

                    if(!($SaleInvoice_vat_incl>0) && !($SaleInvoice_vat_excl>0) && !($CreditNote_vat_incl>0) && !($CreditNote_vat_excl>0) ){
                        $response['ack'] = 0;
                        $response['error'] = NULL;
                        $response['response'] = array();
                    }
                }
                else {
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
            }
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }


        return $response;
    }

    function customerPaymentReport($attr) {
        $where = '';
        $cutomerarray = false;
        if ($attr['customers']) {

            $cutomerarray = '';

            foreach ($attr['customers'] as $rec) {
                if($rec->id > 0)
                    $cutomerarray .= $rec->id . ',';
            }
            $cutomerarray = substr($cutomerarray, 0, -1); 
           // $where .=" AND sell_to_cust_id in (" .  . ") ";
        }
        else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 
            
            /* $sqla = "SELECT  c.id
                    FROM crm c
                    WHERE c.type IN (2,3) AND 
                        c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $cutomerarray .= $Rowa['id'] . ',';
                }

                $cutomerarray = substr($cutomerarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $dateFrom = $this->objGeneral->convertStartDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        $financeID = $attr['financeID'];
        $insuranceID = $attr['insuranceID'];
        $docTypeID = $attr['docTypeID'];


        $response = array();

        if ($dateTo > 0) {

            $Sql ="CALL srrep_PaymentsRefundsFromCustomer(".$this->arrUser['company_id'].", '".$dateFrom."', '".$dateTo."', ".$financeID.", ".$insuranceID.", ".$docTypeID.",'".$cutomerarray."')";
            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            $payments = $refund = 0;
            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $row = array();

                    if ($Row['posting_date2'] != 0 && $Row['posting_date2'] != '')
                        $row['posting_date'] = date("d/m/Y", strtotime($Row['posting_date2']));
                    $row['document_no'] = $Row['invoice_code'];
                    $row['Custno'] = $Row['sell_to_cust_no'];
                    $row['Customer_name'] = $Row['sell_to_cust_name'];
                    $row['DocType'] = $Row['doctype'];
                    //$row['currency'] = $Row['currency_code'];
                    //$row['Amount'] = $Row['grand_total'];
                    $row['Amount_in_LCY'] = $Row['grand_total_converted'];
                    // $row['gl_account'] = $Row['gl_account_code'];
                     $row['finance'] = ($Row['finance_check']==1?"Yes":"");
                      $row['insurance'] = ($Row['insurance_check']==1?"Yes":"");
                      if($Row['rank']==2)
                        {
                            $payments = $Row['grand_total_converted'];
                        }
                         else if($Row['rank']==4)
                        {
                            $refund = $Row['grand_total_converted'];
                        }
                    $response['response'][] = $row;
                    // $response['response'][] = $Row;
                }
                $response['total']['payments'] = $payments;
                $response['total']['refund'] = $refund;
                $response['ack'] = 1;
                $response['error'] = NULL;

                if(!($payments>0) && !($refund>0) ){
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    $response['response'] = array();
                }
            }
            else {
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }


        return $response;
    }

    function stockReport($attr) {
        $byvalue = (isset($attr['byvalue']) && $attr['byvalue'] !='')?$attr['byvalue']:0;

        $module = $attr['module'];
        $reportDesctypeID = $attr['reportDesctypeID'];

        $warehouse = $attr['warehouse']->id;
        $location = $attr['location']->id;

        if($reportDesctypeID == 1 && $module != 'RawMaterialInventory' && $module != 'stockdetailedPerpetual') 
        $module = 'location';
        else if($reportDesctypeID == 1 && $module == 'stockdetailedPerpetual') $module = 'stockSummaryPerpetual';

        // $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        $where = '';
        $where1 = '';
        $where2 = '';
        $where3 = '';
        $where4 = '';

        if ($attr['items']) {

            $itemsarray = '';

            foreach ($attr['items'] as $rec) {
                if($rec->id > 0)
                    $itemsarray .= $rec->id . ',';
            }

            $where .=" AND product_id in (" . substr($itemsarray, 0, -1) . ") ";
            $where1 .=" AND prd.id in (" . substr($itemsarray, 0, -1) . ") ";
            $where3 .=" AND ord_det.item_id in (" . substr($itemsarray, 0, -1) . ") ";
            $where4 .=" AND ord_det.product_id in (" . substr($itemsarray, 0, -1) . ") ";

            $itemsarray = substr($itemsarray, 0, -1);
        }else {

            $sqla = "SELECT prd.id 
					 FROM productcache prd
					 WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $itemsarray .= $Rowa['id'] . ',';
                }

                $where .=" AND product_id in (" . substr($itemsarray, 0, -1) . ") ";
                $where1 .=" AND prd.id in (" . substr($itemsarray, 0, -1) . ") ";
                $where3 .=" AND ord_det.item_id in (" . substr($itemsarray, 0, -1) . ") ";
                $where4 .=" AND ord_det.product_id in (" . substr($itemsarray, 0, -1) . ") ";

                $itemsarray = substr($itemsarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        if ($attr['rawMaterialItems']) {

            $rawMaterialItemsarray = '';

            foreach ($attr['rawMaterialItems'] as $rec) {
                if($rec->id > 0)
                    $rawMaterialItemsarray .= $rec->id . ',';
            }

            $rawMaterialItemsarray = substr($rawMaterialItemsarray, 0, -1);
        }elseif($module == 'RawMaterialInventory') {

            $rawMaterialItemsarray = '';

            $sqla = "SELECT prd.id 
					 FROM productcache prd
					 WHERE prd.company_id=" . $this->arrUser['company_id'] . " AND prd.rawMaterialProduct = 1 ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $rawMaterialItemsarray .= $Rowa['id'] . ',';
                }

                $rawMaterialItemsarray = substr($rawMaterialItemsarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        if ($attr['warehouse']) {

            $warehouseArray = '';

            foreach ($attr['warehouse'] as $rec) {
                if($rec->id > 0)
                    $warehouseArray .= $rec->id . ',';
            }

            // $where .=" AND warehouse_id in (" . substr($warehouseArray, 0, -1) . ") ";
            $warehouseArray = substr($warehouseArray, 0, -1);
        }

        $response = array();

        if ($dateTo > 0 && $module == 'location') {

            // $dateTo2 = $this->objGeneral->convert_date($attr['dateTo']);
            $dateTo2 = $this->objGeneral->convertStartDate($attr['dateTo']);

            $showResultBy = $attr['reportResultType'];
            $reportResultTypePurchase = $attr['reportResultTypePurchase'];
            $reportResultTypeSales = $attr['reportResultTypeSales'];
            
            $defaultCurrencyCode = $attr['defaultCurrencyCode'];
            $reportTypeExcel = $attr['_reportType'];

            // $Sql = 'CALL srrep_stockAvailabilityByWarehouse('.$this->arrUser['company_id'].',"'.$dateTo2.'","'.$warehouseArray.'","'.$itemsarray.'",'.$byvalue.')';
            // $Sql = 'CALL srrep_stockAvailabilityByWarehouseSummary('.$this->arrUser['company_id'].',"'.$dateTo2.'","'.$warehouseArray.'","'.$itemsarray.'",'.$byvalue.','.$showResultBy.')';
            $Sql = 'CALL srrep_stockAvailabilityByWarehouseSummary('.$this->arrUser['company_id'].',"'.$dateTo2.'","'.$warehouseArray.'","'.$itemsarray.'",'.$byvalue.','.$showResultBy.','.$reportResultTypePurchase.','.$reportResultTypeSales.')';
            //echo $Sql;exit;

            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {

                $arrayCount = $RS->RecordCount();

                /* if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx' ){

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Stock Availability by Warehouse - Summary';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'As At '.date("d/m/Y", $dateTo2);//'From '.date("d/m/Y", $dateFrom2).
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;
                    
                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Item No.';
                    $CSVDataTitle['Description'] = 'Description';
                    $CSVDataTitle['uom'] = 'Unit of Measure';

                    $CSVDataTitle['availQty'] = 'Available Quantity';
                    if($byvalue == 1)
                        $stockArray['Value'] = 'Available Stock Value ('.$defaultCurrencyCode.')';

                    $CSVDataTitle['allocatedQty'] = 'Allocated Quantity';
                    if($byvalue == 1)
                        $stockArray['allocatedStockValue'] = 'Allocated Stock Value ('.$defaultCurrencyCode.')';

                    $CSVDataTitle['currentQty'] = 'Current Quantity';
                    if($byvalue == 1)
                        $stockArray['currentStockValue'] = 'Current Stock Value ('.$defaultCurrencyCode.')';

                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/stockAvailabilityByWarehouse".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                        $rank = $Row['RecordType'];

                        if ($rank == 'Head1' ) {//&& $byvalue != 1
                            $stockArray = array();

                            $stockArray['itemNo'] = $Row['warehousename'].' ('.$Row['wrh_code'].')';          
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'Head2' ) {//&& $byvalue != 1
                            $stockArray = array();

                            if ($Row['location']) {
                                $stockArray['itemNo'] = $Row['warehousename'].' ('.$Row['wrh_code'].') - '.$Row['location'];
                            }
                            else{
                                 $stockArray['itemNo'] = $Row['warehousename'].' ('.$Row['wrh_code'].')';
                            }
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'Detail') {
                            $stockArray = array();

                            $stockArray['itemNo'] = $Row['product_code'];
                            $stockArray['Description'] = $Row['description'];
                            $stockArray['uom'] = $Row['unitOfMeasure'];

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableStockValue'];

                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedStockValue'];

                            $stockArray['currentQty'] = $Row['totalQty'];
                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'total') {
                            $stockArray = array();

                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = 'Total ('.$defaultCurrencyCode.')';
                            $stockArray['uom'] = '';

                            $stockArray['availQty'] = '';
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableStockValue'];

                            $stockArray['allocatedQty'] = '';
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedStockValue'];

                            $stockArray['currentQty'] = '';
                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'grand') {
                            $stockArray = array();

                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = 'Grand Total ('.$defaultCurrencyCode.')';
                            $stockArray['uom'] = '';

                            $stockArray['availQty'] = '';
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableStockValue'];

                            $stockArray['allocatedQty'] = '';
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedStockValue'];

                            $stockArray['currentQty'] = '';
                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        $counter++;


                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;
                    }


                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }
                } */

                if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx' ){

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Stock Availability Report';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    // $CSVDataTitle['itemNo'] = 'As At '.date("d/m/Y", $dateTo2);
                    $CSVDataTitle['itemNo'] = 'As At '.$attr['dateTo'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;                
                    
                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Item No.';
                    $CSVDataTitle['Description'] = 'Description';
                    $CSVDataTitle['uom'] = 'Unit of Measure';
                    $CSVDataTitle['warehouse'] = 'Warehouse';

                    $CSVDataTitle['availQty'] = 'Available Quantity';
                    if($byvalue == 1)
                        $CSVDataTitle['Value'] = 'Available Stock Value ('.$defaultCurrencyCode.')';

                    $CSVDataTitle['allocatedQty'] = 'Allocated Quantity';
                    if($byvalue == 1)
                        $CSVDataTitle['allocatedStockValue'] = 'Allocated Stock Value ('.$defaultCurrencyCode.')';

                    $CSVDataTitle['currentQty'] = 'Current Quantity';
                    if($byvalue == 1)
                        $CSVDataTitle['currentStockValue'] = 'Current Stock Value ('.$defaultCurrencyCode.')';

                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/stockAvailabilityReport".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                        $rank = $Row['RecordType'];

                        if ($rank == 'Detail') {
                            $stockArray = array();

                            $stockArray['itemNo'] = $Row['item_no'];
                            $stockArray['Description'] = $Row['item_desc'];
                            $stockArray['uom'] = $Row['unit_measure'];
                            $stockArray['warehouse'] = $Row['warehouse'];

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['currentQty'] = $Row['totalQty'];
                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'total') {
                            $stockArray = array();

                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = '';
                            $stockArray['uom'] = '';

                            if($byvalue == 1) $stockArray['warehouse'] = 'Total ('.$defaultCurrencyCode.')';
                            else $stockArray['warehouse'] = 'Total';

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['currentQty'] =  $Row['totalQty'];
                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'grand') {
                            $stockArray = array();

                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = '';
                            $stockArray['uom'] = '';

                            if($byvalue == 1) $stockArray['warehouse'] = 'Grand Total ('.$defaultCurrencyCode.')';
                            else $stockArray['warehouse'] = 'Grand Total';

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['currentQty'] = $Row['totalQty'];
                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];
                            
                            $response['CSVData'][] = $stockArray;  
                        } 

                        $counter++;

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;
                    }
                    
                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }
                }
                else{

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        /* $row = array();
                        $row['RecordType'] = $Row['RecordType'];
                        // $row['product_code'] = $Row['product_code'];
                        // $row['description'] = $Row['description'];
                        $row['product_code'] = $Row['item_no'];
                        $row['description'] = $Row['item_desc'];
                        $row['wrh_code'] = $Row['wrh_code'];
                        // $row['warehouse'] = $Row['warehousename'];
                        $row['warehouse'] = $Row['warehouse'];
                        $row['location'] = $Row['location_name'];
                        // $row['Unit_of_measure'] = $Row['unitOfMeasure'];
                        $row['Unit_of_measure'] = $Row['unit_measure'];
                        $row['Qunatity'] = $Row['availableQty'];
                        // $row['Value'] = $Row['availableStockValue'];
                        $row['Value'] = $Row['availableValue'];
                        $row['allocatedQty'] = $Row['allocatedQty'];
                        // $row['allocatedStockValue'] = $Row['allocatedStockValue'];                    
                        $row['allocatedStockValue'] = $Row['allocatedValue']; 
                        $row['currentQty'] = $Row['totalQty'];
                        $row['currentStockValue'] = $Row['totalValue'];                   
                        // $row['currentQty'] = $Row['currentQty'];
                        // $row['currentStockValue'] = $Row['currentStockValue'];
                        $response['response'][] = $row; */

                        if($showResultBy == 1){

                            if($Row['product_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['item_no'])
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['wrh_code'] = $Row['wrh_code'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['location'] = $Row['location_name'];
                                    $result['Unit_of_measure'] = $Row['unit_measure'];
                                    $result['Qunatity'] = $Row['availableQty'];
                                    $result['Value'] = $Row['availableValue'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];                 
                                    $result['allocatedStockValue'] = $Row['allocatedValue']; 
                                    $result['currentQty'] = $Row['totalQty'];
                                    $result['currentStockValue'] = $Row['totalValue'];

                                    /* $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-'; */
                                    
                                    $prev_rec_id = $Row['produitem_noct_id'];

                                    $response['response']['records'][$Row['item_no']]['product_code'] = $Row['item_no'];        
                                    $response['response']['records'][$Row['item_no']]['description'] = $Row['item_desc'];        
                                    $response['response']['records'][$Row['item_no']]['unitMeasure'] = $Row['unit_measure'];        
                                    
                                    $response['response']['records'][$Row['item_no']]['warehouse'][] = $result;
                                }
                                else
                                {
                                    $result = array();

                                    /* $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-'; */

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['wrh_code'] = $Row['wrh_code'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['location'] = $Row['location_name'];
                                    $result['Unit_of_measure'] = $Row['unit_measure'];
                                    $result['Qunatity'] = $Row['availableQty'];
                                    $result['Value'] = $Row['availableValue'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];                 
                                    $result['allocatedStockValue'] = $Row['allocatedValue']; 
                                    $result['currentQty'] = $Row['totalQty'];
                                    $result['currentStockValue'] = $Row['totalValue'];

                                    $response['response']['records'][$Row['product_id']]['warehouse'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['totalQty'] = $Row['totalQty'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                            } 

                        }else{

                            if($Row['warehouse_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['warehouse_id'])
                                {
                                    $result = array();
                                    
                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['wrh_code'] = $Row['wrh_code'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['location'] = $Row['location_name'];
                                    $result['Unit_of_measure'] = $Row['unit_measure'];
                                    $result['Qunatity'] = $Row['availableQty'];
                                    $result['Value'] = $Row['availableValue'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];                 
                                    $result['allocatedStockValue'] = $Row['allocatedValue']; 
                                    $result['currentQty'] = $Row['totalQty'];
                                    $result['currentStockValue'] = $Row['totalValue'];
                                    
                                    $prev_rec_id = $Row['warehouse_id'];
                                    $response['response']['records'][$Row['warehouse_id']]['wrh_code'] = $Row['wrh_code'];        
                                    $response['response']['records'][$Row['warehouse_id']]['warehouse'] = $Row['warehouse'];        
                                    
                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }
                                else
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['wrh_code'] = $Row['wrh_code'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['location'] = $Row['location_name'];
                                    $result['Unit_of_measure'] = $Row['unit_measure'];
                                    $result['Qunatity'] = $Row['availableQty'];
                                    $result['Value'] = $Row['availableValue'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];                 
                                    $result['allocatedStockValue'] = $Row['allocatedValue']; 
                                    $result['currentQty'] = $Row['totalQty'];
                                    $result['currentStockValue'] = $Row['totalValue'];

                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['totalQty'] = $Row['totalQty'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                            } 
                        }

                    }
                }


                // $response['ack'] = 1;
                // $response['error'] = NULL;

                if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx'){

                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/stockAvailabilityReport".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
                }
                else{
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                } 

            } else {
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        } 
        elseif ($dateTo > 0 && $module == 'stockSummaryPerpetual') {

            // $dateTo2 = $this->objGeneral->convert_date($attr['dateTo']);
            $dateTo2 = $this->objGeneral->convertStartDate($attr['dateTo']);

            $showResultBy = $attr['reportResultType'];
            $reportResultTypePurchase = $attr['reportResultTypePurchase'];
            $reportResultTypeSales = $attr['reportResultTypeSales'];
            
            $defaultCurrencyCode = $attr['defaultCurrencyCode'];
            $reportTypeExcel = $attr['_reportType'];
            
            $Sql = 'CALL srrep_stockAvailabilitySummaryWithoutStockAlloc('.$this->arrUser['company_id'].',"'.$dateTo2.'","'.$warehouseArray.'","'.$itemsarray.'",'.$byvalue.','.$showResultBy.','.$reportResultTypePurchase.','.$reportResultTypeSales.')';
            //echo $Sql;exit;

            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {

                $arrayCount = $RS->RecordCount();

                if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx' ){

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Stock Availability Report';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    // $CSVDataTitle['itemNo'] = 'As At '.date("d/m/Y", $dateTo2);
                    $CSVDataTitle['itemNo'] = 'As At '.$attr['dateTo'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;                
                    
                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Item No.';
                    $CSVDataTitle['Description'] = 'Description';
                    $CSVDataTitle['uom'] = 'Unit of Measure';
                    $CSVDataTitle['warehouse'] = 'Warehouse';

                    $CSVDataTitle['availQty'] = 'Available Quantity';
                    if($byvalue == 1)
                        $CSVDataTitle['Value'] = 'Available Stock Value ('.$defaultCurrencyCode.')';

                    $CSVDataTitle['allocatedQty'] = 'Allocated Quantity';
                    if($byvalue == 1)
                        $CSVDataTitle['allocatedStockValue'] = 'Allocated Stock Value ('.$defaultCurrencyCode.')';

                    $CSVDataTitle['currentQty'] = 'Current Quantity';
                    if($byvalue == 1)
                        $CSVDataTitle['currentStockValue'] = 'Current Stock Value ('.$defaultCurrencyCode.')';

                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/stockAvailabilityReport".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                        $rank = $Row['RecordType'];

                        if ($rank == 'Detail') {
                            $stockArray = array();

                            $stockArray['itemNo'] = $Row['item_no'];
                            $stockArray['Description'] = $Row['item_desc'];
                            $stockArray['uom'] = $Row['unit_measure'];
                            $stockArray['warehouse'] = $Row['warehouse'];

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['currentQty'] = $Row['totalQty'];
                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'total') {
                            $stockArray = array();

                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = '';
                            $stockArray['uom'] = '';

                            if($byvalue == 1) $stockArray['warehouse'] = 'Total ('.$defaultCurrencyCode.')';
                            else $stockArray['warehouse'] = 'Total';

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['currentQty'] =  $Row['totalQty'];
                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'grand') {
                            $stockArray = array();

                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = '';
                            $stockArray['uom'] = '';

                            if($byvalue == 1) $stockArray['warehouse'] = 'Grand Total ('.$defaultCurrencyCode.')';
                            else $stockArray['warehouse'] = 'Grand Total';

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['currentQty'] = $Row['totalQty'];
                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];
                            
                            $response['CSVData'][] = $stockArray;  
                        } 

                        $counter++;

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;
                    }
                    
                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }
                }
                else{

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        if($showResultBy == 1){

                            if($Row['product_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['item_no'])
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['wrh_code'] = $Row['wrh_code'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['location'] = $Row['location_name'];
                                    $result['Unit_of_measure'] = $Row['unit_measure'];
                                    $result['Qunatity'] = $Row['availableQty'];
                                    $result['Value'] = $Row['availableValue'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];                 
                                    $result['allocatedStockValue'] = $Row['allocatedValue']; 
                                    $result['currentQty'] = $Row['totalQty'];
                                    $result['currentStockValue'] = $Row['totalValue'];                                    
                                    $prev_rec_id = $Row['produitem_noct_id'];

                                    $response['response']['records'][$Row['item_no']]['product_code'] = $Row['item_no'];        
                                    $response['response']['records'][$Row['item_no']]['description'] = $Row['item_desc'];        
                                    $response['response']['records'][$Row['item_no']]['unitMeasure'] = $Row['unit_measure'];        
                                    
                                    $response['response']['records'][$Row['item_no']]['warehouse'][] = $result;
                                }
                                else
                                {
                                    $result = array();
                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['wrh_code'] = $Row['wrh_code'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['location'] = $Row['location_name'];
                                    $result['Unit_of_measure'] = $Row['unit_measure'];
                                    $result['Qunatity'] = $Row['availableQty'];
                                    $result['Value'] = $Row['availableValue'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];                 
                                    $result['allocatedStockValue'] = $Row['allocatedValue']; 
                                    $result['currentQty'] = $Row['totalQty'];
                                    $result['currentStockValue'] = $Row['totalValue'];
                                    $response['response']['records'][$Row['product_id']]['warehouse'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['totalQty'] = $Row['totalQty'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                            } 

                        }else{

                            if($Row['warehouse_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['warehouse_id'])
                                {
                                    $result = array();
                                    
                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['wrh_code'] = $Row['wrh_code'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['location'] = $Row['location_name'];
                                    $result['Unit_of_measure'] = $Row['unit_measure'];
                                    $result['Qunatity'] = $Row['availableQty'];
                                    $result['Value'] = $Row['availableValue'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];                 
                                    $result['allocatedStockValue'] = $Row['allocatedValue']; 
                                    $result['currentQty'] = $Row['totalQty'];
                                    $result['currentStockValue'] = $Row['totalValue'];
                                    
                                    $prev_rec_id = $Row['warehouse_id'];
                                    $response['response']['records'][$Row['warehouse_id']]['wrh_code'] = $Row['wrh_code'];        
                                    $response['response']['records'][$Row['warehouse_id']]['warehouse'] = $Row['warehouse'];        
                                    
                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }
                                else
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['wrh_code'] = $Row['wrh_code'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['location'] = $Row['location_name'];
                                    $result['Unit_of_measure'] = $Row['unit_measure'];
                                    $result['Qunatity'] = $Row['availableQty'];
                                    $result['Value'] = $Row['availableValue'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];                 
                                    $result['allocatedStockValue'] = $Row['allocatedValue']; 
                                    $result['currentQty'] = $Row['totalQty'];
                                    $result['currentStockValue'] = $Row['totalValue'];

                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['totalQty'] = $Row['totalQty'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                            } 
                        }

                    }
                }


                // $response['ack'] = 1;
                // $response['error'] = NULL;

                if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx'){

                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/stockAvailabilityReport".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
                }
                else{
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                } 

            } else {
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        }
        elseif ($module == 'Inventory') {

            $attr = array();
            $Sql = "SELECT prd.description, prd.id,prd.product_code,prd.category_name,prd.brand_name,prd.unit_name,
						   prd.wh_warehouse_id,prd.wh_wrh_code,prd.wh_warehouse,prd.current_stock,prd.available_stock,
						   prd.allocated_stock,prd.wh_status,prd.wh_default_warehouse
                	FROM sr_product_warehouse_improved AS prd 
                	WHERE prd.company_id=" . $this->arrUser['company_id'] . " $where1  ORDER BY prd.id";

            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);
            $prev_row_id = 0;
            $prev_wh_id = 0;
            $count = -1;
            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $result = array();
                    // $result['id'] = $Row3['id'];
                    $result['no.'] = $Row['product_code'];
                    $result['description'] = $Row['description'];
                    $result['category'] = $Row['category_name'];
                    $result['brand'] = $Row['brand_name'];
                    $result['unit'] = $Row['unit_name'];
                    $result['warehouse_no.'] = $Row['wh_wrh_code'];
                    $result['warehouse'] = $Row['wh_warehouse'];
                    $result['total_stock'] = $Row['current_stock'];
                    $result['available_stock'] = $Row['available_stock'];
                    $result['allocated_stock'] = $Row['allocated_stock'];

                    if ($prev_row_id != $Row['id']) {
                        $count++;
                        $attr['product_id'] = $Row['id'];
                        // $Row['arr_units'] = self::get_unit_setup_list_category_by_item($attr);
                        // $sales_prices = self::getSalesPriceOfferVolumebyItemID($Row['id']);
                        // $Row['sales_prices'] = $sales_prices['response'];
                        // $response['response'][$count] = $Row;
                        $response['response'][$count] = $result;
                        $prev_row_id = $Row['id'];
                    }
                }
                $response['ack'] = 1;
                $response['error'] = null;
            } else
                $response['response'] = array();
        }
        elseif ($module == 'CostPrice') {

            $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
            $dateTo = $this->objGeneral->convert_date($attr['dateTo']);


            $attr = array();//

            $Sql = 'CALL srrep_inventoryCostSalesPriceList('.$this->arrUser['company_id'].',"'.$dateTo.'","'.$itemsarray.'")';
            // echo $Sql;exit;

            // $Sql = "SELECT prd.id,prd.product_code,prd.description,prd.category_name,prd.brand_name,prd.unit_name
            //     	FROM sr_product_sel_1 AS prd 					
            //     	WHERE prd.company_id=" . $this->arrUser['company_id'] . " $where1  ORDER BY prd.id";

            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $result = array();
                    $result['product_code'] = $Row['product_code'];
                    $result['description'] = $Row['description'];
                    $result['category'] = $Row['category'];
                    $result['brand'] = $Row['brand'];
                    $result['uom'] = $Row['uom'];
                    // $result['costPrice'] = self::getPurchaseAddCostAverageitem($Row['id'], $dateFrom, $dateTo);
                    // $result['salePrice'] = self::getSalePriceAverageitem($Row['id'], $dateFrom, $dateTo);

                    $result['costPrice'] = $Row['costPrice'];
                    $result['salePrice'] = $Row['salePrice'];

                    $response['response'][] = $result;
                }
                $response['ack'] = 1;
                $response['error'] = null;
            } else
                $response['response'] = array();
        }
        elseif ($module == 'SaleOrderDetail') {

            $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);


            $attr = array();
            $Sql = "SELECT  o.sale_order_code,
							ord_det.product_code,
							ord_det.item_name,
							ord_det.warehouse,
							ord_det.qty,
							SR_CURRENT_OR_AVAILABLE_STOCK(ord_det.item_id," . $this->arrUser['company_id'] . ",1)  AS current_stock,
							SR_CURRENT_OR_AVAILABLE_STOCK(ord_det.item_id," . $this->arrUser['company_id'] . ",2)  AS available_stock,
							SR_CURRENT_OR_AVAILABLE_STOCK(ord_det.item_id," . $this->arrUser['company_id'] . ",3)  AS allocated_stock,
							ord_det.unit_price,
							(SELECT SUM(wa.quantity) 
							 FROM warehouse_allocation AS wa 
							 WHERE  wa.company_id=" . $this->arrUser['company_id'] . " AND 
							 		wa.type=2 AND 
									wa.order_id = o.id AND 
									wa.sale_order_detail_id = ord_det.id) AS ttlAllocated
					FROM orders AS o
					LEFT JOIN order_details AS ord_det ON ord_det.order_id=o.id
					LEFT JOIN warehouse_allocation AS wa ON wa.order_id = o.id AND wa.sale_order_detail_id = ord_det.id
					WHERE o.type=2 AND o.company_id=" . $this->arrUser['company_id'] . " AND ord_det.type=0  AND wa.sale_status=1
					  		$where3
					GROUP BY ord_det.id  
					ORDER BY o.id";

            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $result = array();
                    $result['no.'] = $Row['sale_order_code'];
                    $result['product_no.'] = $Row['product_code'];
                    $result['Item'] = $Row['item_name'];
                    $result['warehouse'] = $Row['warehouse'];
                    $result['order_qty'] = $Row['qty'];
                    $result['price'] = $Row['unit_price'];
                    $result['current_stock'] = $Row['current_stock'];
                    $result['available_stock'] = $Row['available_stock'];

                    if ($Row['available_stock'] > $Row['qty']) {
                        $result['allocated_stock'] = $Row['ttlAllocated'];
                        $result['stock_to_be_allocated'] = '-';
                    } elseif ($Row['available_stock'] < $Row['qty'] && $Row['qty'] > $Row['ttlAllocated']) {
                        $result['allocated_stock'] = $Row['ttlAllocated'];
                        $result['stock_to_be_allocated'] = $Row['qty'] - $Row['ttlAllocated'];
                        $result['allocated_stock Value'] = $Row['ttlAllocated'] * $Row['unit_price'];
                        $result['Un-allocated_stock Value'] = $result['stock_to_be_allocated'] * $Row['unit_price'];
                    } elseif ($Row['available_stock'] < $Row['qty'] && $Row['qty'] == $Row['ttlAllocated']) {
                        $result['allocated_stock'] = $Row['ttlAllocated'];
                        $result['stock_to_be_allocated'] = '-';
                        $result['allocated_stock Value'] = $Row['ttlAllocated'] * $Row['unit_price'];
                        $result['Un-allocated_stock Value'] = $result['stock_to_be_allocated'] * $Row['unit_price'];
                    } else {
                        $result['allocated_stock'] = $Row['ttlAllocated'];
                        $result['stock_to_be_allocated'] = '-';
                        $result['allocated_stock Value'] = $Row['ttlAllocated'] * $Row['unit_price'];
                        $result['Un-allocated_stock Value'] = $result['stock_to_be_allocated'] * $Row['unit_price'];
                    }

                    // $result['allocated_stock'] = $Row['qty']-$Row['available_stock']; 
                    // $result['stock_to_be_allocated'] = $Row['available_stock']-$Row['qty']; 
                    // $result['itemValue'] = $Row['itemValue']; 
                    // $result['PurchasePriceAverage'] = self::getPurchasePriceAverageitem($Row['id'],$dateFrom,$dateTo);  
                    // $result['PurchaseAddCostAverage'] = self::getPurchaseAddCostAverageitem($Row['id'],$dateFrom,$dateTo);  
                    // $result['SalePriceAverage'] = self::getSalePriceAverageitem($Row['id'],$dateFrom,$dateTo);          

                    $response['response'][] = $result;
                }
                $response['ack'] = 1;
                $response['error'] = null;
            } else
                $response['response'] = array();
        }
        elseif ($module == 'PurchaseOrderDetail') {

            $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);

            $attr = array();
            $Sql = "SELECT  o.order_code,
							ord_det.product_code,
							ord_det.product_name,
							ord_det.warehouse,
							ord_det.qty,
							SR_CURRENT_OR_AVAILABLE_STOCK(ord_det.product_id," . $this->arrUser['company_id'] . ",1)  AS current_stock,
							SR_CURRENT_OR_AVAILABLE_STOCK(ord_det.product_id," . $this->arrUser['company_id'] . ",2)  AS available_stock,
							SR_CURRENT_OR_AVAILABLE_STOCK(ord_det.product_id," . $this->arrUser['company_id'] . ",3)  AS allocated_stock,
							ord_det.unit_price,
							(SELECT SUM(wa.quantity) 
							 FROM warehouse_allocation AS wa 
							 WHERE  wa.company_id=" . $this->arrUser['company_id'] . " AND 
							 		wa.type=1 AND 
									wa.order_id = o.id AND 
									wa.purchase_order_detail_id = ord_det.id) AS ttlAllocated
					FROM srm_invoice AS o
					LEFT JOIN srm_invoice_detail AS ord_det ON ord_det.invoice_id=o.id
					LEFT JOIN warehouse_allocation AS wa ON wa.order_id = o.id AND wa.purchase_order_detail_id = ord_det.id
					WHERE o.type=3 AND o.company_id=" . $this->arrUser['company_id'] . " AND ord_det.type=0  AND wa.purchase_status=1
					  		$where4
					GROUP BY ord_det.id  
					ORDER BY o.id";

            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $result = array();
                    $result['no.'] = $Row['order_code'];
                    $result['product_no.'] = $Row['product_code'];
                    $result['Item'] = $Row['product_name'];
                    $result['warehouse'] = $Row['warehouse'];
                    $result['order_qty'] = $Row['qty'];
                    $result['price'] = $Row['unit_price'];
                    $result['current_stock'] = $Row['current_stock'];
                    $result['available_stock'] = $Row['available_stock'];

                    if ($Row['available_stock'] > $Row['qty']) {
                        $result['allocated_stock'] = $Row['ttlAllocated'];
                        $result['stock_to_be_allocated'] = '-';
                    } elseif ($Row['available_stock'] < $Row['qty'] && $Row['qty'] > $Row['ttlAllocated']) {
                        $result['allocated_stock'] = $Row['ttlAllocated'];
                        $result['stock_to_be_allocated'] = $Row['qty'] - $Row['ttlAllocated'];
                        $result['allocated_stock Value'] = $Row['ttlAllocated'] * $Row['unit_price'];
                        $result['Un-allocated_stock Value'] = $result['stock_to_be_allocated'] * $Row['unit_price'];
                    } elseif ($Row['available_stock'] < $Row['qty'] && $Row['qty'] == $Row['ttlAllocated']) {
                        $result['allocated_stock'] = $Row['ttlAllocated'];
                        $result['stock_to_be_allocated'] = '-';
                        $result['allocated_stock Value'] = $Row['ttlAllocated'] * $Row['unit_price'];
                        $result['Un-allocated_stock Value'] = $result['stock_to_be_allocated'] * $Row['unit_price'];
                    } else {
                        $result['allocated_stock'] = $Row['ttlAllocated'];
                        $result['stock_to_be_allocated'] = '-';
                        $result['allocated_stock Value'] = $Row['ttlAllocated'] * $Row['unit_price'];
                        $result['Un-allocated_stock Value'] = $result['stock_to_be_allocated'] * $Row['unit_price'];
                    }

                    // $result['allocated_stock'] = $Row['qty']-$Row['available_stock']; 
                    // $result['stock_to_be_allocated'] = $Row['available_stock']-$Row['qty']; 
                    // $result['itemValue'] = $Row['itemValue']; 
                    // $result['PurchasePriceAverage'] = self::getPurchasePriceAverageitem($Row['id'],$dateFrom,$dateTo);  
                    // $result['PurchaseAddCostAverage'] = self::getPurchaseAddCostAverageitem($Row['id'],$dateFrom,$dateTo);  
                    // $result['SalePriceAverage'] = self::getSalePriceAverageitem($Row['id'],$dateFrom,$dateTo);          

                    $response['response'][] = $result;
                }
                $response['ack'] = 1;
                $response['error'] = null;
            } else
                $response['response'] = array();
        }
        elseif($dateTo>0 && $module == 'stockdetailed'){

            //$dateTo2 = $this->objGeneral->convert_date($attr['dateTo']);
            $dateTo2 = $this->objGeneral->convertStartDate($attr['dateTo']); 

            $showResultBy = $attr['reportResultType'];
            $reportResultTypePurchase = $attr['reportResultTypePurchase'];
            $reportResultTypeSales = $attr['reportResultTypeSales'];
            $reportTypeExcel = $attr['_reportType'];
            $defaultCurrencyCode = $attr['defaultCurrencyCode'];

            $Sql = 'CALL srrep_stockAvailabilityReport('.$this->arrUser['company_id'].',"'.$dateTo2.'","'.$warehouseArray.'","'.$itemsarray.'",'.$byvalue.','.$showResultBy.','.$reportResultTypePurchase.','.$reportResultTypeSales.')';

            // $Sql = 'CALL srrep_stockAvailabilityByWarehouseDetail('.$this->arrUser['company_id'].',"'.$dateTo2.'","'.$warehouseArray.'","'.$itemsarray.'",'.$byvalue.','.$showResultBy.','.$reportResultTypePurchase.','.$reportResultTypeSales.')';
            // echo $Sql;exit;

            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {

                $arrayCount = $RS->RecordCount();

                $counter = 0;
                $prevglAccountNo = 0;
                $glAccountTotal = 0;

                /* if($arrayCount > MAX_REPORT_RECORDS  || $reportTypeExcel == 'xlsx'){

                    $CSVDataTitle = array();
                    $CSVDataTitle['product_code'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['product_code'] = 'Stock Availability By Warehouse - Detailed';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['product_code'] = 'Date '.$attr['dateTo'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;
                    
                    $CSVDataTitle = array();
                    $CSVDataTitle['product_code'] = 'Item No.';
                    $CSVDataTitle['description'] = 'Description';
                    $CSVDataTitle['unitMeasure'] = 'U.O.M';
                    $CSVDataTitle['consignmentNo'] = 'Consignment No.';
                    $CSVDataTitle['refNo'] = 'Ref. No';
                    $CSVDataTitle['supplierInvoiceNo'] = 'Doc. No.';//Supplier Invoice			
                    $CSVDataTitle['totalQty'] = 'Received Qty.';
                    $CSVDataTitle['soldQty'] = 'Sold Qty.';

                    $CSVDataTitle['allocatedQty'] = 'Allocated Qty.';
                    if($byvalue >0){
                        $CSVDataTitle['allocatedStockValue'] = 'Allocated Stock Value';
                    }

                    $CSVDataTitle['availableQty'] = 'Available Qty.';
                    if($byvalue >0){
                        $CSVDataTitle['avblStockValue'] = 'Available Stock Value';
                    }
                    if($byvalue >0){
                        $CSVDataTitle['totalValue'] = 'Total Stock Value';
                    }

                    $CSVDataTitle['date_received'] = 'Date Received';
                    $CSVDataTitle['use_by_date'] = 'Expiry Date';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/StockAvailabilityByWarehouseDetailed_".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    while ($Row = $RS->FetchRow()) {
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }                       

                        $rank = $Row['RecordType'];

                        if ($rank == 'Head1') {

                            $head1TitleArray = array();

                            $head1TitleArray['product_code'] = $Row['warehouse'];
                            $head1TitleArray['description'] = '';
                            $head1TitleArray['unitMeasure'] = '';
                            $head1TitleArray['consignmentNo'] = '';
                            $head1TitleArray['refNo'] = '';
                            $head1TitleArray['supplierInvoiceNo'] = '';			
                            $head1TitleArray['totalQty'] = '';
                            $head1TitleArray['soldQty'] = '';
                            $head1TitleArray['allocatedQty'] = '';
                            if($byvalue >0){
                                $head1TitleArray['allocatedStockValue'] = '';
                            }

                            $head1TitleArray['availableQty'] = '';
                            if($byvalue >0){
                                $head1TitleArray['avblStockValue'] = '';
                            }
                            if($byvalue >0){
                                $head1TitleArray['totalValue'] = '';
                            }

                            $head1TitleArray['date_received'] = '';
                            $head1TitleArray['use_by_date'] = '';                            
                            $response['CSVData'][] = $head1TitleArray;                           
                            
                        }

                        if ($rank == 'Detail'){

                            $detailArray = array();

                            $detailArray['product_code'] = $Row['item_no'];
                            $detailArray['description'] = $Row['item_desc'];
                            $detailArray['unitMeasure'] = $Row['unit_measure'];
                            $detailArray['consignmentNo'] = $Row['consignment_no'];
                            $detailArray['refNo'] = $Row['ref_no'];
                            $detailArray['supplierInvoiceNo'] = $Row['docType'];		
                            $detailArray['totalQty'] = $Row['qty'];
                            $detailArray['soldQty'] = $Row['soldQty'];
                            $detailArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue >0){
                                $detailArray['allocatedStockValue'] = number_format((float)$Row['allocatedValue'], 2, '.', '');
                            }

                            $detailArray['availableQty'] = $Row['availableQty'];
                            if($byvalue >0){
                                $detailArray['avblStockValue'] = number_format((float)$Row['availableValue'], 2, '.', '');
                            }
                            if($byvalue >0){
                                $detailArray['totalValue'] = number_format((float)$Row['totalValue'], 2, '.', '');
                            }

                            $detailArray['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                            $detailArray['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';                          
                            $response['CSVData'][] = $detailArray;                             
                            
                        }

                        if ($rank == 'total') {

                            $totalArray = array();

                            $totalArray['product_code'] = 'Total';
                            $totalArray['description'] = '';
                            $totalArray['unitMeasure'] = '';
                            $totalArray['consignmentNo'] = '';
                            $totalArray['refNo'] = '';
                            $totalArray['supplierInvoiceNo'] = '';			
                            $totalArray['totalQty'] = $Row['qty'];
                            $totalArray['soldQty'] = $Row['soldQty'];
                            $totalArray['allocatedQty'] = $Row['allocatedQty'];

                            if($byvalue >0){
                                $totalArray['allocatedStockValue'] = number_format((float)$Row['allocatedValue'], 2, '.', '');
                            }

                            $totalArray['availableQty'] = $Row['availableQty'];
                            if($byvalue >0){
                                $totalArray['avblStockValue'] = number_format((float)$Row['availableValue'], 2, '.', '');
                            }
                            if($byvalue >0){
                                $totalArray['totalValue'] = number_format((float)$Row['totalValue'], 2, '.', '');
                            }

                            $totalArray['date_received'] = '';
                            $totalArray['use_by_date'] = ''; 

                            $response['CSVData'][] = $totalArray;  
                        }

                        if ($rank == 'grand') {

                            $grandtotalArray = array();

                            $grandtotalArray['product_code'] = 'Grand Total';
                            $grandtotalArray['description'] = '';
                            $grandtotalArray['unitMeasure'] = '';
                            $grandtotalArray['consignmentNo'] = '';
                            $grandtotalArray['refNo'] = '';
                            $grandtotalArray['supplierInvoiceNo'] = '';			
                            $grandtotalArray['totalQty'] = $Row['qty'];
                            $grandtotalArray['soldQty'] = $Row['soldQty'];
                            $grandtotalArray['allocatedQty'] = $Row['allocatedQty'];
                            
                            if($byvalue >0){
                                $grandtotalArray['allocatedStockValue'] = number_format((float)$Row['allocatedValue'], 2, '.', '');
                            }

                            $grandtotalArray['availableQty'] = $Row['availableQty'];
                            if($byvalue >0){
                                $grandtotalArray['avblStockValue'] = number_format((float)$Row['availableValue'], 2, '.', '');
                            }
                            if($byvalue >0){
                                $grandtotalArray['totalValue'] = number_format((float)$Row['totalValue'], 2, '.', '');
                            }

                            $grandtotalArray['date_received'] = '';
                            $grandtotalArray['use_by_date'] = ''; 

                            $response['CSVData'][] = $grandtotalArray;  
                        }

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;
                    }

                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }
                } */

                if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx' ){

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Stock Availability Report';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    // $CSVDataTitle['itemNo'] = 'As At '.date("d/m/Y", $dateTo2);
                    $CSVDataTitle['itemNo'] = 'As At '.$attr['dateTo'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;  

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Item No.';
                    $CSVDataTitle['description'] = 'Description';
                    $CSVDataTitle['uom'] = 'Unit of Measure';
                    $CSVDataTitle['warehouse'] = 'Warehouse';
                    $CSVDataTitle['consignmentNo'] = 'Consignment No.';
                    $CSVDataTitle['refNo'] = 'Ref. No';
                    $CSVDataTitle['supplierInvoiceNo'] = 'Doc. No.';			
                    $CSVDataTitle['totalQty'] = 'Received Qty.';
                    $CSVDataTitle['soldQty'] = 'Sold Qty.';

                    $CSVDataTitle['allocatedQty'] = 'Allocated Qty.';
                    if($byvalue >0){
                        $CSVDataTitle['allocatedStockValue'] = 'Allocated Stock Value';
                    }

                    $CSVDataTitle['availableQty'] = 'Available Qty.';
                    if($byvalue >0){
                        $CSVDataTitle['avblStockValue'] = 'Available Stock Value';
                    }
                    if($byvalue >0){
                        $CSVDataTitle['totalValue'] = 'Total Stock Value';
                    }

                    $CSVDataTitle['date_received'] = 'Date Received';
                    $CSVDataTitle['use_by_date'] = 'Expiry Date';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/stockAvailabilityReport".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                        $rank = $Row['RecordType'];

                        if ($rank == 'Detail') {
                            $stockArray = array();

                            $stockArray['itemNo'] = $Row['item_no'];
                            $stockArray['Description'] = $Row['item_desc'];
                            $stockArray['uom'] = $Row['unit_measure'];
                            $stockArray['warehouse'] = $Row['warehouse'];
                            $stockArray['consignmentNo'] = $Row['consignment_no'];
                            $stockArray['refNo'] = $Row['ref_no'];
                            $stockArray['supplierInvoiceNo'] = $Row['docType'];			
                            $stockArray['totalQty'] = $Row['qty'];
                            $stockArray['soldQty'] = $Row['soldQty'];

                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];

                            $stockArray['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                            $stockArray['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'total') {
                            $stockArray = array();
                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = '';
                            $stockArray['uom'] = '';
                            $stockArray['warehouse'] = '';
                            $stockArray['consignmentNo'] = '';
                            $stockArray['refNo'] = '';

                            if($byvalue == 1) $stockArray['supplierInvoiceNo'] = 'Total ('.$defaultCurrencyCode.')';
                            else $stockArray['supplierInvoiceNo'] = 'Total';		

                            $stockArray['totalQty'] = '';//$Row['allocatedQty'] + $Row['availableQty'];//$Row['qty'];
                            $stockArray['soldQty'] = $Row['soldQty'];
                            
                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];

                            $stockArray['date_received'] = '';
                            $stockArray['use_by_date'] = '';                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'grand') {
                            $stockArray = array();
                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = '';
                            $stockArray['uom'] = '';
                            $stockArray['warehouse'] = '';
                            $stockArray['consignmentNo'] = '';
                            $stockArray['refNo'] = '';

                            if($byvalue == 1) $stockArray['supplierInvoiceNo'] = 'Grand Total ('.$defaultCurrencyCode.')';	
                            else $stockArray['supplierInvoiceNo'] = 'Grand Total';

                            $stockArray['totalQty'] = '';//$Row['allocatedQty'] + $Row['availableQty'];//$Row['qty'];
                            $stockArray['soldQty'] = $Row['soldQty'];
                            
                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];

                            $stockArray['date_received'] = '';
                            $stockArray['use_by_date'] = '';                            
                            $response['CSVData'][] = $stockArray;  
                        } 
                        $counter++;

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;
                    }
                    
                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;
                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }
                }
                else{

                    $prev_rec_id = '';

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        /* $row = array();
                        $row['RecordType'] = $Row['RecordType'];
                        $row['warehouse'] = $Row['warehouse'];
                        $row['product_code'] = $Row['item_no'];
                        $row['description'] = $Row['item_desc'];
                        $row['unitMeasure'] = $Row['unit_measure'];
                        $row['consignmentNo'] = $Row['consignment_no'];
                        $row['refNo'] = $Row['ref_no'];
                        $row['supplierInvoiceNo'] = $Row['docType'];
                        $row['traceId'] = $Row['traceId'];
                        $row['totalQty'] = $Row['qty'];
                        $row['cost_price'] = $Row['cost_price'];
                        $row['unit_cost_price'] = $Row['unit_cost_price'];
                        $row['soldQty'] = $Row['soldQty'];
                        $row['allocatedQty'] = $Row['allocatedQty'];
                        $row['allocatedStockValue'] = $Row['allocatedValue'];                      
                        $row['availableQty'] = $Row['availableQty'];
                        $row['avblStockValue'] = $Row['availableValue'];
                        $row['totalValue'] = $Row['totalValue'];
                        $row['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                        $row['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                        $response['response'][] = $row; */ 

                        if($showResultBy == 1){

                            if($Row['product_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['item_no'])
                                {
                                    $result = array();
                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                                    
                                    $prev_rec_id = $Row['item_no'];

                                    $response['response']['records'][$Row['item_no']]['product_code'] = $Row['item_no'];        
                                    $response['response']['records'][$Row['item_no']]['description'] = $Row['item_desc'];        
                                    $response['response']['records'][$Row['item_no']]['unitMeasure'] = $Row['unit_measure'];        
                                    
                                    $response['response']['records'][$Row['item_no']]['warehouse'][] = $result;
                                }
                                else
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';

                                    $response['response']['records'][$Row['item_no']]['warehouse'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['totalQty'] = $Row['allocatedQty'] + $Row['availableQty'];//$Row['qty'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                            } 

                        }else{

                            if($Row['warehouse_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['warehouse_id'])
                                {
                                    $result = array();
                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['unitMeasure'] = $Row['unit_measure'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                                    
                                    $prev_rec_id = $Row['warehouse_id'];
                                    $response['response']['records'][$Row['warehouse_id']]['warehouse'] = $Row['warehouse'];        
                                    
                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }
                                else
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['unitMeasure'] = $Row['unit_measure'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['totalQty'] = $Row['allocatedQty'] + $Row['availableQty'];//$Row['qty'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                            } 
                        }
                    }
                }

                if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx'){
                    $response['ack'] = 2;
                    // $response['filename'] = WEB_PATH . "/Reports/StockAvailabilityByWarehouseDetailed_".$this->arrUser['company_id'].".csv";
                    $response['filename']=  WEB_PATH . "/Reports/stockAvailabilityReport".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
                }
                elseif(count($response) >0){
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }else{
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
               
            } else {
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
		}
        elseif($dateTo>0 && $module == 'stockdetailedPerpetual'){
            $dateTo2 = $this->objGeneral->convertStartDate($attr['dateTo']); 

            $showResultBy = $attr['reportResultType'];
            $reportResultTypePurchase = $attr['reportResultTypePurchase'];
            $reportResultTypeSales = $attr['reportResultTypeSales'];
            $reportTypeExcel = $attr['_reportType'];
            $defaultCurrencyCode = $attr['defaultCurrencyCode'];

            $Sql = 'CALL srrep_stockAvailabilityWithoutStockAlloc('.$this->arrUser['company_id'].',"'.$dateTo2.'","'.$warehouseArray.'","'.$itemsarray.'",'.$byvalue.','.$showResultBy.','.$reportResultTypePurchase.','.$reportResultTypeSales.')';
            // echo $Sql;exit;

            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {

                $arrayCount = $RS->RecordCount();

                $counter = 0;
                $prevglAccountNo = 0;
                $glAccountTotal = 0;

                if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx' ){

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Stock Availability Report';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    // $CSVDataTitle['itemNo'] = 'As At '.date("d/m/Y", $dateTo2);
                    $CSVDataTitle['itemNo'] = 'As At '.$attr['dateTo'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;  

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Item No.';
                    $CSVDataTitle['description'] = 'Description';
                    $CSVDataTitle['uom'] = 'Unit of Measure';
                    $CSVDataTitle['warehouse'] = 'Warehouse';
                    $CSVDataTitle['consignmentNo'] = 'Consignment No.';
                    $CSVDataTitle['refNo'] = 'Ref. No';
                    $CSVDataTitle['supplierInvoiceNo'] = 'Doc. No.';			
                    $CSVDataTitle['totalQty'] = 'Received Qty.';
                    $CSVDataTitle['soldQty'] = 'Sold Qty.';

                    $CSVDataTitle['allocatedQty'] = 'Allocated Qty.';
                    if($byvalue >0){
                        $CSVDataTitle['allocatedStockValue'] = 'Allocated Stock Value';
                    }

                    $CSVDataTitle['availableQty'] = 'Available Qty.';
                    if($byvalue >0){
                        $CSVDataTitle['avblStockValue'] = 'Available Stock Value';
                    }
                    if($byvalue >0){
                        $CSVDataTitle['totalValue'] = 'Total Stock Value';
                    }

                    $CSVDataTitle['date_received'] = 'Date Received';
                    $CSVDataTitle['use_by_date'] = 'Expiry Date';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/stockAvailabilityReport".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                        $rank = $Row['RecordType'];

                        if ($rank == 'Detail') {
                            $stockArray = array();

                            $stockArray['itemNo'] = $Row['item_no'];
                            $stockArray['Description'] = $Row['item_desc'];
                            $stockArray['uom'] = $Row['unit_measure'];
                            $stockArray['warehouse'] = $Row['warehouse'];
                            $stockArray['consignmentNo'] = $Row['consignment_no'];
                            $stockArray['refNo'] = $Row['ref_no'];
                            $stockArray['supplierInvoiceNo'] = $Row['docType'];			
                            $stockArray['totalQty'] = $Row['qty'];
                            $stockArray['soldQty'] = $Row['soldQty'];

                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];

                            $stockArray['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                            $stockArray['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'total') {
                            $stockArray = array();
                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = '';
                            $stockArray['uom'] = '';
                            $stockArray['warehouse'] = '';
                            $stockArray['consignmentNo'] = '';
                            $stockArray['refNo'] = '';

                            if($byvalue == 1) $stockArray['supplierInvoiceNo'] = 'Total ('.$defaultCurrencyCode.')';
                            else $stockArray['supplierInvoiceNo'] = 'Total';		

                            $stockArray['totalQty'] = '';//$Row['allocatedQty'] + $Row['availableQty'];//$Row['qty'];
                            $stockArray['soldQty'] = $Row['soldQty'];
                            
                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];

                            $stockArray['date_received'] = '';
                            $stockArray['use_by_date'] = '';                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == 'grand') {
                            $stockArray = array();
                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = '';
                            $stockArray['uom'] = '';
                            $stockArray['warehouse'] = '';
                            $stockArray['consignmentNo'] = '';
                            $stockArray['refNo'] = '';

                            if($byvalue == 1) $stockArray['supplierInvoiceNo'] = 'Grand Total ('.$defaultCurrencyCode.')';	
                            else $stockArray['supplierInvoiceNo'] = 'Grand Total';

                            $stockArray['totalQty'] = '';//$Row['allocatedQty'] + $Row['availableQty'];//$Row['qty'];
                            $stockArray['soldQty'] = $Row['soldQty'];
                            
                            $stockArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue == 1)
                                $stockArray['allocatedStockValue'] = $Row['allocatedValue'];

                            $stockArray['availQty'] = $Row['availableQty'];
                            if($byvalue == 1)
                                $stockArray['Value'] = $Row['availableValue'];

                            if($byvalue == 1)
                                $stockArray['currentStockValue'] = $Row['totalValue'];

                            $stockArray['date_received'] = '';
                            $stockArray['use_by_date'] = '';                            
                            $response['CSVData'][] = $stockArray;  
                        } 
                        $counter++;

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;
                    }
                    
                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;
                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }
                }
                else{

                    $prev_rec_id = '';

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        if($showResultBy == 1){

                            if($Row['product_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['item_no'])
                                {
                                    $result = array();
                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                                    
                                    $prev_rec_id = $Row['item_no'];

                                    $response['response']['records'][$Row['item_no']]['product_code'] = $Row['item_no'];        
                                    $response['response']['records'][$Row['item_no']]['description'] = $Row['item_desc'];        
                                    $response['response']['records'][$Row['item_no']]['unitMeasure'] = $Row['unit_measure'];        
                                    
                                    $response['response']['records'][$Row['item_no']]['warehouse'][] = $result;
                                }
                                else
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';

                                    $response['response']['records'][$Row['item_no']]['warehouse'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['totalQty'] = $Row['allocatedQty'] + $Row['availableQty'];//$Row['qty'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                            } 

                        }else{

                            if($Row['warehouse_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['warehouse_id'])
                                {
                                    $result = array();
                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['unitMeasure'] = $Row['unit_measure'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                                    
                                    $prev_rec_id = $Row['warehouse_id'];
                                    $response['response']['records'][$Row['warehouse_id']]['warehouse'] = $Row['warehouse'];        
                                    
                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }
                                else
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['unitMeasure'] = $Row['unit_measure'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['totalQty'] = $Row['allocatedQty'] + $Row['availableQty'];//$Row['qty'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                            } 
                        }
                    }
                }

                if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx'){
                    $response['ack'] = 2;
                    // $response['filename'] = WEB_PATH . "/Reports/StockAvailabilityByWarehouseDetailed_".$this->arrUser['company_id'].".csv";
                    $response['filename']=  WEB_PATH . "/Reports/stockAvailabilityReport".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
                }
                elseif(count($response) >0){
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }else{
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
               
            } else {
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
		}
        elseif($dateTo>0 && $module == 'stockAvailabilityByDispatchDate'){

            $dateTo2 = $this->objGeneral->convertStartDate($attr['dateTo']); 

            $showResultBy = $attr['reportResultType'];

            $Sql = 'CALL srrep_stockAvailabilityByDispatchDate('.$this->arrUser['company_id'].',"'.$dateTo2.'","'.$warehouseArray.'","'.$itemsarray.'",'.$byvalue.','.$showResultBy.')';
            // echo $Sql;exit;

            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {

                $arrayCount = $RS->RecordCount();

                $counter = 0;
                $prevglAccountNo = 0;
                $glAccountTotal = 0;

                if($arrayCount > MAX_REPORT_RECORDS ){

                    $CSVDataTitle = array();
                    $CSVDataTitle['product_code'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['product_code'] = 'Stock Availability Report';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['product_code'] = 'Date '.$attr['dateTo'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;
                    
                    $CSVDataTitle = array();
                    $CSVDataTitle['product_code'] = 'Item No.';
                    $CSVDataTitle['description'] = 'Description';
                    $CSVDataTitle['unitMeasure'] = 'U.O.M';
                    $CSVDataTitle['consignmentNo'] = 'Consignment No.';
                    $CSVDataTitle['refNo'] = 'Ref. No';
                    $CSVDataTitle['supplierInvoiceNo'] = 'Doc. No.';//Supplier Invoice			
                    $CSVDataTitle['totalQty'] = 'Received Qty.';
                    $CSVDataTitle['soldQty'] = 'Sold Qty.';

                    $CSVDataTitle['allocatedQty'] = 'Allocated Qty.';
                    if($byvalue >0){
                        $CSVDataTitle['allocatedStockValue'] = 'Allocated Stock Value';
                    }

                    $CSVDataTitle['availableQty'] = 'Available Qty.';
                    if($byvalue >0){
                        $CSVDataTitle['avblStockValue'] = 'Available Stock Value';
                    }
                    if($byvalue >0){
                        $CSVDataTitle['totalValue'] = 'Total Stock Value';
                    }

                    $CSVDataTitle['date_received'] = 'Date Received';
                    $CSVDataTitle['use_by_date'] = 'Expiry Date';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/StockAvailabilityByDispatchDate_".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    while ($Row = $RS->FetchRow()) {
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }                       

                        $rank = $Row['RecordType'];

                        if ($rank == 'Head1') {

                            $head1TitleArray = array();

                            $head1TitleArray['product_code'] = $Row['warehouse'];
                            $head1TitleArray['description'] = '';
                            $head1TitleArray['unitMeasure'] = '';
                            $head1TitleArray['consignmentNo'] = '';
                            $head1TitleArray['refNo'] = '';
                            $head1TitleArray['supplierInvoiceNo'] = '';			
                            $head1TitleArray['totalQty'] = '';
                            $head1TitleArray['soldQty'] = '';
                            $head1TitleArray['allocatedQty'] = '';
                            if($byvalue >0){
                                $head1TitleArray['allocatedStockValue'] = '';
                            }

                            $head1TitleArray['availableQty'] = '';
                            if($byvalue >0){
                                $head1TitleArray['avblStockValue'] = '';
                            }
                            if($byvalue >0){
                                $head1TitleArray['totalValue'] = '';
                            }

                            $head1TitleArray['date_received'] = '';
                            $head1TitleArray['use_by_date'] = '';                            
                            $response['CSVData'][] = $head1TitleArray;                           
                            
                        }

                        if ($rank == 'Detail'){

                            $detailArray = array();

                            $detailArray['product_code'] = $Row['item_no'];
                            $detailArray['description'] = $Row['item_desc'];
                            $detailArray['unitMeasure'] = $Row['unit_measure'];
                            $detailArray['consignmentNo'] = $Row['consignment_no'];
                            $detailArray['refNo'] = $Row['ref_no'];
                            $detailArray['supplierInvoiceNo'] = $Row['docType'];		
                            $detailArray['totalQty'] = $Row['qty'];
                            $detailArray['soldQty'] = $Row['soldQty'];
                            $detailArray['allocatedQty'] = $Row['allocatedQty'];
                            if($byvalue >0){
                                $detailArray['allocatedStockValue'] = number_format((float)$Row['allocatedValue'], 2, '.', '');
                            }

                            $detailArray['availableQty'] = $Row['availableQty'];
                            if($byvalue >0){
                                $detailArray['avblStockValue'] = number_format((float)$Row['availableValue'], 2, '.', '');
                            }
                            if($byvalue >0){
                                $detailArray['totalValue'] = number_format((float)$Row['totalValue'], 2, '.', '');
                            }

                            $detailArray['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                            $detailArray['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';                          
                            $response['CSVData'][] = $detailArray;                             
                            
                        }

                        if ($rank == 'total') {

                            $totalArray = array();

                            $totalArray['product_code'] = 'Total';
                            $totalArray['description'] = '';
                            $totalArray['unitMeasure'] = '';
                            $totalArray['consignmentNo'] = '';
                            $totalArray['refNo'] = '';
                            $totalArray['supplierInvoiceNo'] = '';			
                            $totalArray['totalQty'] = $Row['qty'];
                            $totalArray['soldQty'] = $Row['soldQty'];
                            $totalArray['allocatedQty'] = $Row['allocatedQty'];

                            if($byvalue >0){
                                $totalArray['allocatedStockValue'] = number_format((float)$Row['allocatedValue'], 2, '.', '');
                            }

                            $totalArray['availableQty'] = $Row['availableQty'];
                            if($byvalue >0){
                                $totalArray['avblStockValue'] = number_format((float)$Row['availableValue'], 2, '.', '');
                            }
                            if($byvalue >0){
                                $totalArray['totalValue'] = number_format((float)$Row['totalValue'], 2, '.', '');
                            }

                            $totalArray['date_received'] = '';
                            $totalArray['use_by_date'] = ''; 

                            $response['CSVData'][] = $totalArray;  
                        }

                        if ($rank == 'grand') {

                            $grandtotalArray = array();

                            $grandtotalArray['product_code'] = 'Grand Total';
                            $grandtotalArray['description'] = '';
                            $grandtotalArray['unitMeasure'] = '';
                            $grandtotalArray['consignmentNo'] = '';
                            $grandtotalArray['refNo'] = '';
                            $grandtotalArray['supplierInvoiceNo'] = '';			
                            $grandtotalArray['totalQty'] = $Row['qty'];
                            $grandtotalArray['soldQty'] = $Row['soldQty'];
                            $grandtotalArray['allocatedQty'] = $Row['allocatedQty'];
                            
                            if($byvalue >0){
                                $grandtotalArray['allocatedStockValue'] = number_format((float)$Row['allocatedValue'], 2, '.', '');
                            }

                            $grandtotalArray['availableQty'] = $Row['availableQty'];
                            if($byvalue >0){
                                $grandtotalArray['avblStockValue'] = number_format((float)$Row['availableValue'], 2, '.', '');
                            }
                            if($byvalue >0){
                                $grandtotalArray['totalValue'] = number_format((float)$Row['totalValue'], 2, '.', '');
                            }

                            $grandtotalArray['date_received'] = '';
                            $grandtotalArray['use_by_date'] = ''; 

                            $response['CSVData'][] = $grandtotalArray;  
                        }

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;
                    }

                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }
                }
                else{

                    $prev_rec_id = 0;

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        /* $row = array();
                        $row['RecordType'] = $Row['RecordType'];
                        $row['warehouse'] = $Row['warehouse'];
                        $row['product_code'] = $Row['item_no'];
                        $row['description'] = $Row['item_desc'];
                        $row['unitMeasure'] = $Row['unit_measure'];
                        $row['consignmentNo'] = $Row['consignment_no'];
                        $row['refNo'] = $Row['ref_no'];
                        $row['supplierInvoiceNo'] = $Row['docType'];
                        $row['traceId'] = $Row['traceId'];
                        $row['totalQty'] = $Row['qty'];
                        $row['cost_price'] = $Row['cost_price'];
                        $row['unit_cost_price'] = $Row['unit_cost_price'];
                        $row['soldQty'] = $Row['soldQty'];
                        $row['allocatedQty'] = $Row['allocatedQty'];
                        $row['allocatedStockValue'] = $Row['allocatedValue'];                      
                        $row['availableQty'] = $Row['availableQty'];
                        $row['avblStockValue'] = $Row['availableValue'];
                        $row['totalValue'] = $Row['totalValue'];
                        $row['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                        $row['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                        $response['response'][] = $row; */ 

                        // if($showResultBy == 1){

                            if($Row['product_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['product_id'])
                                {
                                    $result = array();
                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                                    
                                    $prev_rec_id = $Row['product_id'];

                                    $response['response']['records'][$Row['product_id']]['product_code'] = $Row['item_no'];        
                                    $response['response']['records'][$Row['product_id']]['description'] = $Row['item_desc'];        
                                    $response['response']['records'][$Row['product_id']]['unitMeasure'] = $Row['unit_measure'];        
                                    $response['response']['records'][$Row['product_id']]['product_id'] = $Row['product_id'];        
                                    
                                    $response['response']['records'][$Row['product_id']]['warehouse'][] = $result;
                                }
                                else
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';

                                    $response['response']['records'][$Row['product_id']]['warehouse'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['totalQty'] = $Row['qty'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                            } 

                        /* }else{

                            if($Row['warehouse_id']>0 && $Row['RecordType'] !='grand'){

                                if($prev_rec_id != $Row['warehouse_id'])
                                {
                                    $result = array();
                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['unitMeasure'] = $Row['unit_measure'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                                    
                                    $prev_rec_id = $Row['warehouse_id'];
                                    $response['response']['records'][$Row['warehouse_id']]['warehouse'] = $Row['warehouse'];        
                                    
                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }
                                else
                                {
                                    $result = array();

                                    $result['RecordType'] = $Row['RecordType'];
                                    $result['warehouse'] = $Row['warehouse'];
                                    $result['product_code'] = $Row['item_no'];
                                    $result['description'] = $Row['item_desc'];
                                    $result['unitMeasure'] = $Row['unit_measure'];
                                    $result['consignmentNo'] = $Row['consignment_no'];
                                    $result['refNo'] = $Row['ref_no'];
                                    $result['supplierInvoiceNo'] = $Row['docType'];
                                    $result['traceId'] = $Row['traceId'];
                                    $result['totalQty'] = $Row['qty'];
                                    $result['cost_price'] = $Row['cost_price'];
                                    $result['unit_cost_price'] = $Row['unit_cost_price'];
                                    $result['soldQty'] = $Row['soldQty'];
                                    $result['allocatedQty'] = $Row['allocatedQty'];
                                    $result['allocatedStockValue'] = $Row['allocatedValue'];                      
                                    $result['availableQty'] = $Row['availableQty'];
                                    $result['avblStockValue'] = $Row['availableValue'];
                                    $result['totalValue'] = $Row['totalValue'];
                                    $result['date_received'] = ($Row['date_received'] >0 )?$this->objGeneral->convert_unix_into_date($Row['date_received']) : '-';
                                    $result['use_by_date'] = ($Row['use_by_date'] >0 )?$this->objGeneral->convert_unix_into_date($Row['use_by_date']) : '-';
                                    $response['response']['records'][$Row['warehouse_id']]['items'][] = $result;
                                }                    
                            }
                            else{
                                $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                                $response['response']['records']['grandtotal']['soldQty'] = $Row['soldQty'];
                                $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                                $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                                $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                                $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                                $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                            } 
                        } */
                    }
                }

                if($arrayCount > MAX_REPORT_RECORDS ){
                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/StockAvailabilityByDispatchDate_".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
                }
                elseif(count($response) >0){
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }else{
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                }
               
            } else {
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
		}        
        elseif($dateTo>0 && $module == 'RawMaterialInventory'){

            $dateFrom = $this->objGeneral->convertStartDate($attr['dateFrom']);
            $dateTo2 = $this->objGeneral->convertEndDate($attr['dateTo']); 

            $defaultCurrencyCode = $attr['defaultCurrencyCode'];
            $reportTypeExcel = $attr['_reportType'];

            $Sql = 'CALL srrep_stockAvailabilityForRawMaterial(
                            '.$this->arrUser['company_id'].',
                            "'.$dateFrom.'",
                            "'.$dateTo2.'",
                            "'.$rawMaterialItemsarray.'")';
            // echo $Sql;exit;

            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {      

                // $prevItemID = '';

                if($reportTypeExcel == 'xlsx' ){

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Raw Material Inventory';//Stock Availability For 
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'From '.$attr['dateFrom'].' to '.$attr['dateTo'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;                
                    
                    $CSVDataTitle = array();
                    $CSVDataTitle['itemNo'] = 'Item No.';
                    $CSVDataTitle['Description'] = 'Description';
                    $CSVDataTitle['openingStock'] = 'Opening Stock Qty.';

                    if($byvalue == 1)
                        $CSVDataTitle['openingStock_price'] = 'Opening Stock Value ('.$defaultCurrencyCode.')';

                    $CSVDataTitle['currentInStock'] = 'Stock In Qty.';
                    if($byvalue == 1)
                        $CSVDataTitle['currentInStock_price'] = 'Stock In Value ('.$defaultCurrencyCode.')';

                    $CSVDataTitle['currentOutStock'] = 'Stock Out Qty.';
                    if($byvalue == 1)
                        $CSVDataTitle['currentOutStock_price'] = 'Stock Out Value ('.$defaultCurrencyCode.')';

                    $CSVDataTitle['closingStock'] = 'Closing Stock Qty.';
                    if($byvalue == 1)
                        $CSVDataTitle['closingStock_price'] = 'Closing Stock Value ('.$defaultCurrencyCode.')';

                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/stockAvailabilityForRawMaterialReport".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    while ($Row = $RS->FetchRow()) {

                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        $row = array();
                        $rank = $Row['id'];

                        if ($rank != '9999999') {
                            $stockArray = array();

                            $stockArray['itemNo'] = $Row['product_code'];
                            $stockArray['Description'] = $Row['description'];

                            $stockArray['openingStock'] = $Row['openingStock'];
                            if($byvalue == 1)
                                $stockArray['openingStock_price'] = $Row['openingStock_price'];

                            $stockArray['currentInStock'] = $Row['currentInStock'];
                            if($byvalue == 1)
                                $stockArray['currentInStock_price'] = $Row['currentInStock_price'];

                            $stockArray['currentOutStock'] = $Row['currentOutStock'];
                            if($byvalue == 1)
                                $stockArray['currentOutStock_price'] = $Row['currentOutStock_price'];

                            $stockArray['closingStock'] = $Row['closingStock'];
                            if($byvalue == 1)
                                $stockArray['closingStock_price'] = $Row['closingStock_price'];
                            
                            $response['CSVData'][] = $stockArray;  
                        }

                        if ($rank == '9999999' && $byvalue == 1) {                           

                            $stockArray = array();

                            $stockArray['itemNo'] = '';
                            $stockArray['Description'] = 'Total';

                            $stockArray['openingStock'] = '';
                            if($byvalue == 1)
                                $stockArray['openingStock_price'] = $Row['openingStock_price'];

                            $stockArray['currentInStock'] = '';
                            if($byvalue == 1)
                                $stockArray['currentInStock_price'] = $Row['currentInStock_price'];

                            $stockArray['currentOutStock'] = '';
                            if($byvalue == 1)
                                $stockArray['currentOutStock_price'] = $Row['currentOutStock_price'];

                            $stockArray['closingStock'] = '';
                            if($byvalue == 1)
                                $stockArray['closingStock_price'] = $Row['closingStock_price'];
                            
                            $response['CSVData'][] = $stockArray;  
                        } 

                        $counter++;

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;
                    }
                    
                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }
                }
                else{

                    while ($Row = $RS->FetchRow()) {
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }
                        /* if($Row['itemID']>0 && $Row['Rank'] !=4){

                            if($prevItemID != $Row['item_no'])
                            {
                                $result = array();
                                $result['posting_date'] = date("d/m/Y", $Row['posting_date']);//strtotime()
                                $result['order_date'] = date("d/m/Y", $Row['receipt_date']);
                                // $result['document_no'] = $Row['docNo'];
                                $result['Rank'] = $Row['Rank'];
                                $result['docRank'] = $Row['docRank'];
                                $result['doctype2'] = $Row['doctype2'];

                                if($Row['invoice_code'])
                                    $result['document_no'] = $Row['invoice_code'];
                                else
                                    $result['document_no'] = $Row['order_code'];

                                
                                $result['unit_measure'] = $Row['uom_name'];
                                $result['qty'] = $Row['qty'];
                                $result['remaining_qty'] = $Row['remaining_qty'];

                                $result['warehousename'] = $Row['warehousename'];
                                $result['location_name'] = $Row['location_name'];
                                $result['consignmentNo'] = $Row['consignmentNo'];
                                $result['container_no2'] = $Row['container_no2'];
                                $result['batch_no'] = $Row['batch_no'];
                                $result['user_no'] = $Row['user_no'];
                                $result['user_name'] = $Row['user_name'];
                                
                                $prevItemID = $Row['item_no'];

                                $response['response']['records'][$Row['item_no']]['itemCode'] = $Row['item_no'];
                                $response['response']['records'][$Row['item_no']]['itemDesc'] = $Row['item_desc'];
                                $response['response']['records'][$Row['item_no']]['uom'] = $Row['uom_name']; 
                                $response['response']['records'][$Row['item_no']]['itemID'] = $Row['itemID']; 

                                if($Row['doctype2'] !='0')
                                    $response['response']['records'][$Row['item_no']][$Row['doctype2']]['invoices'][] = $result;
                            }
                            else
                            {
                                $result = array();
                                $result['posting_date'] = date("d/m/Y", $Row['posting_date']);
                                $result['order_date'] = date("d/m/Y", $Row['receipt_date']);

                                // $result['document_no'] = $Row['docNo'];

                                if($Row['invoice_code'])
                                    $result['document_no'] = $Row['invoice_code'];
                                else
                                    $result['document_no'] = $Row['order_code'];

                                $result['Rank'] = $Row['Rank'];
                                $result['docRank'] = $Row['docRank'];
                                $result['doctype2'] = $Row['doctype2'];
                                $result['unit_measure'] = $Row['uom_name'];
                                $result['qty'] = $Row['qty'];
                                $result['remaining_qty'] = $Row['remaining_qty'];

                                $result['warehousename'] = $Row['warehousename'];
                                $result['location_name'] = $Row['location_name'];
                                $result['consignmentNo'] = $Row['consignmentNo'];
                                $result['container_no2'] = $Row['container_no2'];
                                $result['batch_no'] = $Row['batch_no'];
                                $result['user_no'] = $Row['user_no'];
                                $result['user_name'] = $Row['user_name'];

                                if($Row['doctype2'] !='0')
                                    $response['response']['records'][$Row['item_no']][$Row['doctype2']]['invoices'][] = $result;
                            }                    
                        }  */   

                        $response['response'][] =  $Row;              
                    }
                }

                if($reportTypeExcel == 'xlsx'){

                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/stockAvailabilityForRawMaterialReport".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
                }
                else{
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }
            } else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        }
        else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }


        return $response;
    }

    function stockActivityForReport($attr){

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo2 = $this->objGeneral->convert_date($attr['dateTo']); 
        $prdID = $attr['prdID']; 
        $activityType = $attr['activityType']; 

        if($activityType == 1){
            // purchase Order
            $PO_Sql =  "SELECT  si.order_code AS code,
                                si.invoice_code AS invoice_code,
                                si.invoice_date AS posting_date,
                                si.sell_to_cust_no as user_no,
                                si.sell_to_cust_name AS user_name,
                                'purchase' AS doctype2,
                                (CASE WHEN si.type = 3 THEN 'Purchase Order'
                                    WHEN si.type <> 3 THEN 'Purchase Invoice'
                                    END) AS docType,
                                si.type as order_type,
                                '3' AS trailtype,
                                NULL AS o_dispatch_date,
                                si.receiptDate as receipt_date,
                                wbl.title AS location_name,
                                wa.id AS rec_id, 
                                wh.name AS warehousename, 
                                si.comm_book_in_no AS consignmentNo, 
                                wa.container_no AS container_no2, 
                                wa.unit_measure_name AS uom_name,
                                si.id as oid,                            
                                IFNULL(wa.quantity,0) AS qty2,
                                wa.id,
                                wa.batch_no,
                                wa.prod_date,
                                wa.use_by_date,
                                wa.date_received,
                                wa.type,
                                wa.order_id,
                                wa.warehouse_id,
                                wa.product_id,
                                wa.sale_status,
                                wa.company_id  
                        FROM warehouse_allocation wa
                        LEFT JOIN srm_invoice si ON si.id=wa.order_id
                        LEFT JOIN warehouse wh ON wh.id = wa.warehouse_id 
                        LEFT JOIN product_warehouse_location pw ON pw.id = wa.location   
                        LEFT JOIN warehouse_bin_location wbl ON wbl.id = pw.warehouse_loc_id               
                        WHERE wa.product_id = '". $prdID."' AND 
                            wa.type = 1 AND
                            wa.status = 1 AND 
                            wa.purchase_return_status = 0 AND
                            wa.raw_material_out IS NULL AND
                            wa.purchase_status IN (2,3) AND
                            si.invoice_date >= '".$dateFrom."' AND
                            si.invoice_date <= '".$dateTo2."' AND
                            wa.company_id='" . $this->arrUser['company_id'] . "'
                        "; //HAVING remaining_qty > 0 

                // credit note
            $CN_Sql =  "SELECT  cn.return_order_code AS code, 
                                cn.return_invoice_code AS invoice_code,
                                cn.posting_date AS posting_date,
                                cn.sell_to_cust_no as user_no,
                                cn.sell_to_cust_name AS user_name,
                                'creditnote' AS doctype2,
                                (CASE WHEN cn.type = 1 THEN 'Credit Note'
                                    WHEN cn.type <> 1 THEN 'Credit Note Invoice'
                                    END) AS docType, 
                                cn.type as order_type,
                                '2' AS trailtype,
                                NULL AS o_dispatch_date,
                                cn.delivery_date as receipt_date,
                                wbl.title AS location_name,
                                wa.id AS rec_id, 
                                wh.name AS warehousename,
                                '-' AS consignmentNo,  
                                wa.container_no AS container_no2, 
                                wa.unit_measure_name AS uom_name,
                                cn.id as oid,
                                IFNULL(wa.quantity,0) as qty2, 
                                wa.id,
                                wa.batch_no,
                                wa.prod_date,
                                wa.use_by_date,
                                cn.delivery_date as date_received,
                                wa.type,
                                wa.order_id,
                                wa.warehouse_id,
                                wa.product_id,
                                wa.sale_status,
                                wa.company_id 
                        FROM warehouse_allocation wa
                        LEFT JOIN return_orders cn ON cn.id = wa.order_id  
                        LEFT JOIN warehouse wh ON wh.id = wa.warehouse_id 
                        LEFT JOIN product_warehouse_location pw ON pw.id = wa.location   
                        LEFT JOIN warehouse_bin_location wbl ON wbl.id = pw.warehouse_loc_id        
                        WHERE wa.product_id = '" . $prdID . "' AND 
                            wa.type = 2 AND 
                            wa.status = 1 AND
                            wa.sale_return_status = 1 AND
                            wa.sale_status IN (2,3) AND
                            cn.posting_date >= '".$dateFrom."' AND
                            cn.posting_date <= '".$dateTo2."' AND
                            wa.company_id='" . $this->arrUser['company_id'] . "'
                        ";
            /* HAVING remaining_qty > 0  AND (SELECT COUNT(id) AS ttl 
                                                        FROM warehouse_allocation AS tbl2 
                                                        WHERE tbl2.product_id = wa.product_id AND 
                                                            tbl2.warehouse_id = wa.warehouse_id AND
                                                            tbl2.company_id = wa.company_id AND
                                                            tbl2.type = 1 AND 
                                                                tbl2.status = 1 AND
                                                                tbl2.purchase_return_status = 0 AND 
                                                                tbl2.purchase_status IN (2,3) AND                         
                                                                tbl2.raw_material_out IS NULL ) = 0 */


            // opening balance sql.
            $opBalnc_Sql =  "SELECT  '-' AS code,
                                    '-' AS invoice_code,
                                    ob.posting_date AS posting_date,
                                    '-' as user_no,
                                    '-' AS user_name,
                                    'StockOpenBalanc' AS doctype2,
                                    'Stock Opening Balances' AS docType, 
                                    '-' as order_type,
                                    '4' AS trailtype,
                                    NULL AS o_dispatch_date,
                                    NULL as receipt_date,
                                    wbl.title AS location_name,
                                    wa.id AS rec_id, 
                                    wh.name AS warehousename,
                                    ob.comm_book_in_no AS consignmentNo, 
                                    wa.container_no AS container_no2,  
                                    wa.unit_measure_name AS uom_name,
                                    ob.id as oid,
                                    SUM(ob.qty) as qty2,
                                    wa.id,
                                    wa.batch_no,
                                    wa.prod_date,
                                    wa.use_by_date,
                                    wa.date_received,
                                    wa.type,
                                    wa.order_id,
                                    wa.warehouse_id,
                                    wa.product_id,
                                    wa.sale_status,
                                    wa.company_id  
                            FROM warehouse_allocation wa
                            LEFT JOIN opening_balance_stock ob ON ob.id=wa.opBalncID 
                            LEFT JOIN warehouse wh ON wh.id = wa.warehouse_id
                            LEFT JOIN product_warehouse_location pw ON pw.id = wa.location   
                            LEFT JOIN warehouse_bin_location wbl ON wbl.id = pw.warehouse_loc_id               
                            WHERE wa.product_id = '". $prdID ."' AND 
                                wa.type = 4 AND 
                                wa.status = 1 AND
                                ob.posting_date >= '".$dateFrom."' AND
                                ob.posting_date <= '".$dateTo2."' AND
                                wa.company_id='" . $this->arrUser['company_id'] . "'
                            GROUP BY wa.opBalncID
                             ";//HAVING remaining_qty > 0


            // Item Ledger Positive
            $itemLedgerPosSql =  "SELECT  '-' AS code,
                                            si.acc_code AS invoice_code,
                                            ijd.posting_date AS posting_date,
                                            '-' as user_no,
                                            '-' AS user_name,
                                            'itemLedger' AS doctype2,
                                            'Item Ledger In' AS docType,
                                            si.type as order_type,
                                            '1' AS trailtype,
                                            NULL AS o_dispatch_date,
                                            NULL as receipt_date,
                                            wbl.title AS location_name,
                                            wa.id AS rec_id, 
                                            wh.name AS warehousename, 
                                            wa.container_no AS consignmentNo, 
                                            wa.container_no AS container_no2,                                       
                                            ijd.uom_name,
                                            si.id as oid,                            
                                            IFNULL(wa.quantity,0) AS qty2, 
                                            wa.id,
                                            wa.batch_no,
                                            wa.prod_date,
                                            wa.use_by_date,
                                            wa.date_received,
                                            wa.type,
                                            wa.order_id,
                                            wa.warehouse_id,
                                            wa.product_id,
                                            wa.sale_status,
                                            wa.company_id  
                                    FROM item_journal_details ijd 
                                    LEFT JOIN warehouse_allocation wa ON ijd.id=wa.item_journal_detail_id
                                    LEFT JOIN gl_journal_receipt si ON si.id=wa.order_id
                                    LEFT JOIN warehouse wh ON wh.id = wa.warehouse_id 
                                    LEFT JOIN product_warehouse_location pw ON pw.id = wa.location   
                                    LEFT JOIN warehouse_bin_location wbl ON wbl.id = pw.warehouse_loc_id                
                                    WHERE wa.product_id = '". $prdID ."' AND 
                                        wa.type = 3 AND
                                        wa.ledger_type = 1 AND
                                        wa.journal_status = 2 AND
                                        si.type = 2 AND
                                        wa.status = 1 AND 
                                        ijd.item_id  = '". $prdID ."' AND 
                                        ijd.posting_date >= '".$dateFrom."' AND
                                        ijd.posting_date <= '".$dateTo2."' AND
                                        wa.company_id='" . $this->arrUser['company_id'] . "' AND 
                                        ijd.company_id='" . $this->arrUser['company_id'] . "'
                                    ";//HAVING remaining_qty > 0 
            
            
            $Sql = $PO_Sql." UNION ".$opBalnc_Sql." UNION ".$CN_Sql." UNION ".$itemLedgerPosSql;

        }
        else{
            // purchase Order
            $PO_Sql =  "SELECT  si.order_code AS code,
                                si.invoice_code AS invoice_code,
                                si.invoice_date AS posting_date,
                                si.sell_to_cust_no as user_no,
                                si.sell_to_cust_name AS user_name,
                                'purchase' AS doctype2,
                                (CASE WHEN si.type = 3 THEN 'Purchase Order'
                                    WHEN si.type <> 3 THEN 'Purchase Invoice'
                                    END) AS docType,
                                si.type as order_type,
                                '3' AS trailtype,
                                NULL AS o_dispatch_date,
                                si.receiptDate as receipt_date,
                                wbl.title AS location_name,
                                wa.id AS rec_id, 
                                wh.name AS warehousename, 
                                si.comm_book_in_no AS consignmentNo, 
                                wa.container_no AS container_no2, 
                                wa.unit_measure_name AS uom_name,
                                si.id as oid,                            
                                IFNULL(wa.quantity,0)*(-1) AS qty2,
                                wa.id,
                                wa.batch_no,
                                wa.prod_date,
                                wa.use_by_date,
                                wa.date_received,
                                wa.type,
                                wa.order_id,
                                wa.warehouse_id,
                                wa.product_id,
                                wa.sale_status,
                                wa.company_id  
                        FROM warehouse_allocation wa
                        LEFT JOIN srm_invoice si ON si.id=wa.order_id
                        LEFT JOIN warehouse wh ON wh.id = wa.warehouse_id 
                        LEFT JOIN product_warehouse_location pw ON pw.id = wa.location   
                        LEFT JOIN warehouse_bin_location wbl ON wbl.id = pw.warehouse_loc_id               
                        WHERE wa.product_id = '". $prdID."' AND 
                            wa.type = 1 AND
                            wa.status = 1 AND 
                            wa.purchase_return_status = 0 AND
                            wa.raw_material_out = 1 AND
                            wa.purchase_status IN (2,3) AND
                            si.invoice_date >= '".$dateFrom."' AND
                            si.invoice_date <= '".$dateTo2."' AND
                            wa.company_id='" . $this->arrUser['company_id'] . "'
                        "; //HAVING remaining_qty > 0 
            
            $SO_Sql = "SELECT   o.sale_order_code AS code, 
                            o.sale_invioce_code AS invoice_code,
                            o.posting_date AS posting_date,
                            o.sell_to_cust_no as user_no,
                            o.sell_to_cust_name AS user_name,
                            'sales' AS doctype2, 
                            (CASE WHEN o.type = 1 THEN 'Sales Order'
                                  WHEN o.type <> 1 THEN 'Sales Invoice'
                                  END) AS docType,
                            o.type as order_type,
                            '1' AS trailtype,
                            o.dispatch_date as o_dispatch_date,
                            NULL AS receipt_date,
                            wbl.title AS location_name,
                            wa.id AS rec_id,
                            wh.name AS warehousename,
                            wa.container_no AS consignmentNo,
                            wa.container_no AS container_no2,  
                            wa.unit_measure_name as uom_name,
                            o.id as oid, 
                            IFNULL(wa.quantity,0)*(-1) as qty2, 
                            wa.id,
                            wa.batch_no,
                            wa.prod_date,
                            wa.use_by_date,
                            wa.date_received,
                            wa.type,
                            wa.order_id,
                            wa.warehouse_id,
                            wa.product_id,
                            wa.sale_status,
                            wa.company_id 
                    FROM warehouse_allocation wa
                    LEFT JOIN orders o ON o.id = wa.order_id  
                    LEFT JOIN warehouse wh ON wh.id = wa.warehouse_id  
                    LEFT JOIN product_warehouse_location pw ON pw.id = wa.location   
                    LEFT JOIN warehouse_bin_location wbl ON wbl.id = pw.warehouse_loc_id           
                    WHERE wa.product_id = '" . $prdID . "' AND 
                          wa.type = 2 AND 
                          wa.status = 1 AND 
                          wa.sale_status IN (2,3) AND
                          wa.sale_return_status = 0  AND
                          o.posting_date >= '".$dateFrom."' AND
                          o.posting_date <= '".$dateTo2."' AND
                          wa.company_id='" . $this->arrUser['company_id'] . "'";

             $DN_Sql =  "SELECT  si.debitNoteCode AS code,
                            si.invoice_code AS invoice_code,
                            si.supplierCreditNoteDate AS posting_date,
                            si.supplierNo as user_no,
                            si.supplierName AS user_name,
                            'debitnote' AS doctype2,
                            (CASE WHEN si.type = 3 THEN 'Debit Note'
                                  WHEN si.type <> 3 THEN 'Debit Note Invoice'
                                  END) AS docType,
                            si.type as order_type,
                            '4' AS trailtype,
                            NULL AS o_dispatch_date,
                            si.supplierReceiptDate as receipt_date,
                            wbl.title AS location_name,
                            wa.id AS rec_id, 
                            wh.name AS warehousename,
                            wa.container_no AS consignmentNo,
                            wa.container_no AS container_no2,  
                            wa.unit_measure_name as uom_name,
                            si.id as oid,
                            IFNULL(wa.quantity,0)*(-1) as qty2,  
                            wa.id,
                            wa.batch_no,
                            wa.prod_date,
                            wa.use_by_date,
                            wa.date_received,
                            wa.type,
                            wa.order_id,
                            wa.warehouse_id,
                            wa.product_id,
                            wa.sale_status,
                            wa.company_id
                    FROM warehouse_allocation wa
                    LEFT JOIN srm_order_return si ON si.id=wa.order_id 
                    LEFT JOIN warehouse wh ON wh.id = wa.warehouse_id
                    LEFT JOIN product_warehouse_location pw ON pw.id = wa.location   
                    LEFT JOIN warehouse_bin_location wbl ON wbl.id = pw.warehouse_loc_id               
                    WHERE wa.product_id = '". $prdID ."' AND 
                          wa.type = 1 AND 
                          wa.status = 1 AND
                          wa.purchase_status IN (2,3) AND
                          wa.purchase_return_status = 1 AND
                          si.supplierCreditNoteDate >= '".$dateFrom."' AND
                          si.supplierCreditNoteDate <= '".$dateTo2."' AND
                          wa.company_id='" . $this->arrUser['company_id'] . "'";

            // Item Ledger Negative
            $itemLedgerNegSql =  "SELECT  '-' AS code,
                                            si.acc_code AS invoice_code,
                                            ijd.posting_date AS posting_date,
                                            '-' as user_no,
                                            '-' AS user_name,
                                            'itemLedger' AS doctype2,
                                            'Item Ledger In' AS docType,
                                            si.type as order_type,
                                            '1' AS trailtype,
                                            NULL AS o_dispatch_date,
                                            NULL as receipt_date,
                                            wbl.title AS location_name,
                                            wa.id AS rec_id, 
                                            wh.name AS warehousename, 
                                            wa.container_no AS consignmentNo, 
                                            wa.container_no AS container_no2,                                       
                                            ijd.uom_name,
                                            si.id as oid,                            
                                            IFNULL(wa.quantity,0)*(-1) AS qty2, 
                                            wa.id,
                                            wa.batch_no,
                                            wa.prod_date,
                                            wa.use_by_date,
                                            wa.date_received,
                                            wa.type,
                                            wa.order_id,
                                            wa.warehouse_id,
                                            wa.product_id,
                                            wa.sale_status,
                                            wa.company_id  
                                    FROM item_journal_details ijd 
                                    LEFT JOIN warehouse_allocation wa ON ijd.id=wa.item_journal_detail_id
                                    LEFT JOIN gl_journal_receipt si ON si.id=wa.order_id
                                    LEFT JOIN warehouse wh ON wh.id = wa.warehouse_id 
                                    LEFT JOIN product_warehouse_location pw ON pw.id = wa.location   
                                    LEFT JOIN warehouse_bin_location wbl ON wbl.id = pw.warehouse_loc_id                
                                    WHERE wa.product_id = '". $prdID ."' AND 
                                        wa.type = 3 AND
                                        wa.ledger_type = 2 AND
                                        wa.journal_status = 2 AND
                                        si.type = 2 AND
                                        wa.status = 1 AND 
                                        ijd.item_id  = '". $prdID ."' AND
                                        ijd.posting_date >= '".$dateFrom."' AND
                                        ijd.posting_date <= '".$dateTo2."' AND
                                        wa.company_id='" . $this->arrUser['company_id'] . "' AND 
                                        ijd.company_id='" . $this->arrUser['company_id'] . "'
                                    ";//HAVING remaining_qty > 0 
            
            
            $Sql = $PO_Sql." UNION ".$SO_Sql." UNION ".$DN_Sql." UNION ".$itemLedgerNegSql;
        }        
        // echo $Sql;exit;

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {   

            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                } 

                // $Row['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $Row['date_received'] = $this->objGeneral->convert_unix_into_date($Row['date_received']);

                $response['response'][] =  $Row;              
            }

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return $response;
    }

    function getPurchasePriceAverageitem($itemID, $dateFrom, $dateTo) {

        $Sql = "SELECT SUM(priceQty) AS priceQty,SUM(price) AS price
				FROM sr_rep_inventoryPurchasePrice				
				WHERE product_id=" . $itemID . " AND 
					  invoice_order_date<= '" . $dateFrom . "' AND 
					  invoice_order_date<= '" . $dateTo . "' limit 1";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();

            $price = $Row['price'];
            $priceQty = $Row['priceQty'];

            $average = $price / $priceQty;
        } else
            $average = 0;

        return $average;
    }

    function getPurchaseAddCostAverageitem($itemID, $dateFrom, $dateTo) {

        $Sql = "SELECT SUM(addCostQty) AS priceQty,SUM(addCostAmount) AS price
				FROM sr_rep_inventorypurchasepriceaddcost				
				WHERE product_id=" . $itemID . " AND 
					  postingDate<= '" . $dateFrom . "' AND 
					  postingDate<= '" . $dateTo . "'  limit 1";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();

            $price = $Row['price'];
            $priceQty = $Row['priceQty'];

            $average = $price / $priceQty;
        } else
            $average = 0;

        return $average;
    }

    function getSalePriceAverageitem($itemID, $dateFrom, $dateTo) {

        $Sql = "SELECT SUM(priceQty) AS priceQty,SUM(price) AS price
				FROM sr_rep_inventorysaleprice				
				WHERE item_id=" . $itemID . " AND 
					  order_date>= '" . $dateFrom . "' AND 
					  order_date<= '" . $dateTo . "'  limit 1";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();

            $price = $Row['price'];
            $priceQty = $Row['priceQty'];

            $average = $price / $priceQty;
        } else
            $average = 0;

        return $average;
    }

    function employeeReport($attr) {
        $module = $attr['module'];

        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);

        $where = '';
        $where1 = '';
        $where2 = '';

        if ($attr['employeesArr']) {

            $empArray = '';

            foreach ($attr['employeesArr'] as $rec) {
                if($rec->id > 0)
                    $empArray .= $rec->id . ',';
            }

            $where .=" AND emp.id in (" . substr($empArray, 0, -1) . ") ";
            $where1 .=" AND emp.id in (" . substr($empArray, 0, -1) . ") ";
            $where2 .=" AND emp.id in (" . substr($empArray, 0, -1) . ") ";
        }

        $response = array();

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);

        if ($dateFrom > 0) {
            $where1 .=" AND e.status_inactive_date >=" . $dateFrom;
            $where2 .=" AND ho.holiday_date_to >=" . $dateFrom;
        }

        if ($dateTo > 0) {
            $where1 .=" AND e.status_inactive_date <=" . $dateTo;
            $where2 .=" AND ho.holiday_date_to <=" . $dateTo;
        }

        // if($dateTo>0){

        if ($module == 'Employee') {

            $Sql = "SELECT   emp.* 
						FROM sr_employee_sel emp
						WHERE emp.user_company=" . $this->arrUser['company_id'] . "  $where";
                        /* AND 
                              emp.status = 1 */
        
        } elseif ($module == 'AbsencesList') {

            $Sql = "SELECT   emp.* , c.id as cid, c.name as cname,e.status_inactive_date as dateFrom,'' as dateTo
						FROM sr_employee_sel emp
						left join employees e on e.id = emp.id
						left join cause_of_inactivity c on e.cause_of_inactivity = c.id
						WHERE emp.user_company=" . $this->arrUser['company_id'] . " AND c.status=1 AND  emp.status = 0 $where1
						
						UNION
						
						SELECT   emp.* , ho.id as cid, 
								 CASE  WHEN ho.holiday_type = 1 THEN 'Paid Holiday' 
									   WHEN ho.holiday_type = 2 THEN 'Unpaid Holiday'
									   END AS cname,
								 ho.holiday_date_from as dateFrom,ho.holiday_date_to as dateTo
						FROM sr_employee_sel emp
						left join hr_holidays ho on ho.emp_id = emp.id
						WHERE emp.user_company=" . $this->arrUser['company_id'] . " AND ho.status=1 AND  emp.status = 0 $where2";
        }

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $result = array();
                $result['id'] = $Row['id'];
                $result['no'] = $Row['user_code'];
                $result['name'] = $Row['first_name'] . ' ' . $Row['last_name'];
                $result['job_title'] = $Row['job_title'];
                $result['Department'] = $Row['dname'];
                $result['Email'] = $Row['user_email'];
                // $result['internal_ext'] = $Row['internal_extention'];
                $result['Telephone'] = $Row['work_phone'];
                $result['Mobile'] = $Row['mobile_phone'];
                $result['employee_type'] = $Row['emp_type'];

                if ($module == 'AbsencesList') {
                    $result['reason'] = $Row['cname'];
                    $result['date_from'] = $this->objGeneral->convert_unix_into_date($Row['dateFrom']);
                    $result['date_to'] = $this->objGeneral->convert_unix_into_date($Row['dateTo']);
                } else {

                    /* if ($Row['allow_login'] == 1)
                        $result['Allow_login'] = "Yes";
                    else
                        $result['Allow_login'] = "No"; */
                    $result['Allow_login'] = $Row['allow_login'];
                }

                // $result['status'] = $Row['statusp'];

                $response['response'][] = $result;
            }
            // response ordering (added by Akhtar Nawaz)
            $records = $response['response'];
            $order_by_spec_col = array_column($records, 'no');
            array_multisort($order_by_spec_col, SORT_ASC, $records);
            $response['response'] = $records;

            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        // }
        // else{
        // 	$response['response'] = array();
        // 	$response['ack'] = 0;
        // 	$response['error'] = NULL;
        // }


        return $response;
    }

    function employeeAbsenceReport($attr) {
        //echo '<pre>';print_r($attr);exit;
        $reporttype = $attr['reporttype'];

        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);

        $names_arr = [];
        if ($attr['employeesArr']) {
            $employeesArray = false;

            foreach ($attr['employeesArr'] as $rec) {
                if($rec->id > 0)
                    $employeesArray .= $rec->id . ',';
                    $names_arr[$rec->id] = $rec->name;
            }
           $employeesArray =  substr($employeesArray, 0, -1);
        }else {

            /* $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . " OR
            emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
            emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : ""; */

            

            $sqla = "SELECT emp.id,CONCAT(first_name,' ',last_name) AS name
                     FROM employees AS emp
                     WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND emp.status = 1      
                          $where_line_manager";

            // $sqla = "SELECT id,name
			// 		 FROM sr_employee_sel
			// 		 WHERE company_id=" . $this->arrUser['company_id'] . " ";

            

            $subQueryForBuckets = " SELECT  emp.id
                                    FROM employees emp
                                    WHERE emp.company_id=" . $this->arrUser['company_id'] . "";

            //$subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 1);

            $sqla .= " AND (emp.id IN (".$subQueryForBuckets.")) ";

            // echo $sqla;exit;

            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $employeesArray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['name'];
                }

                $employeesArray = substr($employeesArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        if ($attr['departments']) {
            $where = " AND cr.id IN (".$attr['departments'].")";
        }else {
            $where = '';
        }
        $dept_names_arr = [];
            $sqla = "SELECT cr.id,
            cr.name
        FROM  config_departments AS cr
        WHERE cr.company_id=" . $this->arrUser['company_id'] . "  ".$where."
        GROUP BY cr.id";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $deptsArray .= $Rowa['id'] . ',';
                    $dept_names_arr[$Rowa['id']] = $Rowa['name'];
                }

                $deptsArray = substr($deptsArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        


        $holidayArray = false;
        if ($attr['holiday']) {        
            foreach ($attr['holiday'] as $rec) {
                if($rec > 0)
                    $holidayArray .= $rec . ',';
            }
           $holidayArray =  substr($holidayArray, 0, -1); 
        }

        $response = array();

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
        $filter_by = $attr['filter_by'];

        // if($dateTo>0){
            $Sql = "CALL srrep_employeeAbsenceList(".$this->arrUser['company_id'].", $dateFrom, $dateTo, '$deptsArray', '$employeesArray', '$holidayArray','$reporttype','$filter_by')";

            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $result = array();
                $result['id'] = $Row['id'];
                $result['Rank'] = $Row['Rank'];
                $result['RecordType'] = $Row['RecordType'];
                $result['emp_code'] = $Row['emp_code'];
                $result['emp_name'] = $Row['emp_name'];
                $result['department_id'] = $Row['department_id'];
                //$result['department'] = $Row['department'];
                $result['department'] = $dept_names_arr[$Row['department_id']];
                $result['holidays'] = $Row['holidays'];
                $result['holiday_nature'] = $Row['holiday_nature'];
                $result['leave_type'] = $Row['leave_type'];
                $result['holiday_from'] = $this->objGeneral->convert_unix_into_date($Row['holiday_from']);
                $result['holiday_to'] = $this->objGeneral->convert_unix_into_date($Row['holiday_to']);

                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        // }
        // else{
        // 	$response['response'] = array();
        // 	$response['ack'] = 0;
        // 	$response['error'] = NULL;
        // }


        return $response;
    }


    // Employee List
    //--------------------------------------
    

    function get_unit_setup_list_category_by_item($attr) {
        $response2 = array();
        $where = "";

        if (isset($attr['product_code']))
            $where .= "c.product_code= '" . $attr['product_code'] . "'  AND ";
        if (isset($attr['product_id']))
            $where .= "c.product_id= '" . $attr['product_id'] . "'  AND ";

        $Sql = "SELECT  c.id,
                        c.quantity,
                        us.title as name,
                        c.cat_id,
                        c.ref_unit_id,
                        c.ref_quantity
                FROM  units_of_measure_setup  c
                RIGHT JOIN units_of_measure us on us.id=c.cat_id
                where   $where 
                        c.status=1  AND 
                        us.status=1 AND
                        c.company_id=" . $this->arrUser['company_id'] . "
                GROUP BY us.title ASC 
                ORDER BY c.id  ASC";
        //echo  $Sql;exit;

        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            while ($Row3 = $RS->FetchRow()) {
                $result = array();
                $result['id'] = $Row3['id'];
                $result['name'] = $Row3['name'];

                if ($attr['product_id'] != 0) {
                    $result['quantity'] = $Row3['quantity'];
                    $result['unit_id'] = $Row3['cat_id'];
                    $result['ref_unit_id'] = $Row3['ref_unit_id'];
                    $result['ref_quantity'] = $Row3['ref_quantity'];
                }
                $response2['response'][] = $result;
            }
        }
        return $response2;
    }

    function getSalesPriceOfferVolumebyItemID($itemID) {
        $Sql = "SELECT  pp.product_id,
                        pp.discount_type AS discountType,
                        pp.min_qty AS min_sale_qty,
                        pp.max_qty  AS max_sale_qty,
                        pp.standard_price,
                        pp.min_max_sale_price,
                        ppv.id,
                        pp.discount_type AS discountType,
                        ppv.discount,
                        ppv.min_qty as min
				FROM product_price AS pp
				JOIN product AS prd ON pp.product_id = prd.id
				LEFT JOIN product_price_volume AS ppv ON ppv.price_id = pp.id					
				WHERE prd.id = $itemID AND 
					  pp.type=1 AND
					  UNIX_TIMESTAMP(NOW()) BETWEEN pp.start_date AND pp.end_date";
        // echo $Sql;exit;

        $RS = $this->objsetup->CSI($Sql);
        $prev_row_id = 0;
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }


                if ($prev_row_id != $Row['product_id']) {
                    $response['response']['standard_price'] = $Row['standard_price'];
                    $response['response']['min_sale_price'] = $Row['min_max_sale_price'];
                    $response['response']['min_sale_qty'] = $Row['min_sale_qty'];
                    $response['response']['max_sale_qty'] = $Row['max_sale_qty'];
                    $response['response']['discountType'] = $Row['discountType'];

                    $prev_row_id = $Row['product_id'];
                }

                if ($prev_row_id == $Row['product_id']) {
                    if ($Row['min'] != null && $Row['discount'] != null) {
                        $temp_arr = array();
                        $temp_arr['min'] = $Row['min'];
                        $temp_arr['discount'] = $Row['discount'];
                        $response['response']['arr_sales_price'][] = $temp_arr;
                    }
                }
            }
            $response['ack'] = 1;
        } else {
            $response['ack'] = 0;
            $response['response'] = array();
        }
        return $response;
    }

    function getRemittanceAdviceData($attr) {

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);

        if ($attr['suppliers']) {

            $supplierarray = '';
            foreach ($attr['suppliers'] as $rec) {
                $supplierarray .= $rec->id . ',';
            }
            $supplierarray = rtrim($supplierarray, ", ");
        }
        else {

            $sqla = "SELECT s.id 
                    FROM sr_srm_general_sel s
                    WHERE s.type IN (2,3) AND 
                            s.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 24);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $supplierarray .= $Rowa['id'] . ',';
                }

                $supplierarray = substr($supplierarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }       

        $Sql = "CALL srrep_remittenceAdvice(".$this->arrUser['company_id'].", ".$attr['type'].", $dateFrom, $dateTo, '$supplierarray')";
        // $Sql = "CALL srrep_remittenceAdvice(133, 1, 1522886400, 1542326400, '2505')";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        $prev_payment_id = 0;
        $response = array();
            
        if ($RS->RecordCount() > 0) {
            $final_response = array();
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                // $Row['payment_id'] = $Row['pd_posting_date'];
                
                if($prev_payment_id != $Row['payment_id'])
                {
                    $result = array();
                    $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                    $result['document_no'] = $Row['invoice_no'];
                    $result['document_type'] = $Row['payment_type'];
                    $result['suplier_invoice_no'] = $Row['suplier_invoice_no'];
                    $result['original_payment'] = $Row['original_amount'];
                    
                    $result['previous_allocations'] = $Row['previous_allocations'];
                    $result['current_payment'] = $Row['current_payment'];
                    $result['payment_detail_id'] = $Row['payment_detail_id'];
                    
                    $result['remaining_amount'] = floatval($Row['original_amount']) - floatval($Row['previous_allocations']) - floatval($Row['current_payment']);
                    
                    $prev_payment_id = $Row['payment_id'];
                    $response['response'][$Row['payment_id']]['address'] = explode('***',$Row['address_line']);
                    $response['response'][$Row['payment_id']]['currency'] = $Row['currency'];
                    $response['response'][$Row['payment_id']]['pd_document_no'] = $Row['pd_document_no'];
                    $response['response'][$Row['payment_id']]['document_type'] = $Row['document_type'];
                    $response['response'][$Row['payment_id']]['pd_posting_date'] = $this->objGeneral->convert_unix_into_date($Row['pd_posting_date']);
                    $response['response'][$Row['payment_id']]['payment_total_amount'] = $Row['payment_total_amount'];
                    $response['response'][$Row['payment_id']]['total_paid'] = $Row['current_payment'];
                    $response['response'][$Row['payment_id']]['invoices'][] = $result;
                    $response['response'][$Row['payment_id']]['account_id'] = $Row['account_id'];
                }
                else
                {
                    $result = array();
                    $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                    $result['document_no'] = $Row['invoice_no'];
                    $result['document_type'] = $Row['payment_type'];
                    $result['suplier_invoice_no'] = $Row['suplier_invoice_no'];
                    $result['original_payment'] = $Row['original_amount'];
                    $result['remaining_amount'] = floatval($Row['original_amount']) - floatval($Row['previous_allocations']) - floatval($Row['current_payment']);
                    
                    $result['current_payment'] = $Row['current_payment'];                    
                    $result['previous_allocations'] = $Row['previous_allocations'];
                    $result['payment_detail_id'] = $Row['payment_detail_id'];
                    
                    $response['response'][$Row['payment_id']]['document_type'] = $Row['document_type'];
                    $response['response'][$Row['payment_id']]['total_paid'] += $Row['current_payment'];
                    $response['response'][$Row['payment_id']]['invoices'][] = $result;
                    $response['response'][$Row['payment_id']]['account_id'] = $Row['account_id'];
                }
                
            }
            $response['ack'] = 1;
        } else {
            $response['ack'] = 0;
            $response['response'] = array();
        }
        return $response;
    }

    function remittanceAdviceEmail($attr) {

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);

        $company_logo_url = $attr['company_logo_url'];

        // $supplierarray = [];
        $response = array();
        $result2 = array();
        $suppliers = array();
        // $suppliers = $attr['suppliers'];
        $remittenceSelSuppArr = $attr['remittenceSelSuppArr'];
        $fullReportsDataArr = $attr['reportsDataArr'];

        $module = 'PurchaseInvoices';    

        $id = "";
        $Sql = "SELECT id,json 
                FROM auto_email_templates 
                WHERE company_id = " . $this->arrUser['company_id'] . " AND 
                      template_name = 'RemittanceAdvice'";
        //echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $record = $RS->FetchRow();
            $id = $record['id'];
            $txt = $record['json'];
        }
        else{
            $filePath = SERVER_PATH . "/autoEmailTemplates/Purchases_RemittanceAdvice.json";

            $myfile = fopen($filePath , "r");
            $txt = fread($myfile, filesize($filePath));
            fclose($myfile);
        }

        if ($txt){
            $response['id'] = $id;
            $txt = preg_replace('/\R+/', " ", $txt);
            $response['template'] = json_decode($txt);

            $senderEmailID = $response['template']->senderEmail;                      
            // $templateSubject = 'Remittance Advice';           
            // $templateBody = 'Remittance Advice';     
            $templateSubject = strip_tags($response['template']->templateSubject);            
            $templateBody = $response['template']->templateBody;       

            // $Sql = "SELECT cc.*, 
            //                CONCAT(ve.username, '@', cc.mailDomain) as username,
            //                ve.password as password 
            //         FROM virtual_emails ve 
            //         LEFT JOIN client__configuration cc ON ve.configurationId = cc.id 
            //         WHERE ve.id = $senderEmailID";

            // //  echo $Sql;exit;
            // $RS = $this->objsetup->CSI($Sql);


            if(!empty($senderEmailID)){

                $Sql = "SELECT ve.username, ve.alias FROM virtual_emails ve WHERE ve.id = $senderEmailID ;";
                //  echo $Sql;exit;
                $RS = $this->objsetup->CSI($Sql);
                $results = array();
                if ($RS->RecordCount() > 0) {
                    while ($row = $RS->FetchRow()) {
                        $results['alias'] = $row['alias'];
                        $results['username'] = $row['username'];
                        $results['templateSubject'] = $templateSubject;
                        $results['templateBody'] = $templateBody; 
                    }
                }
                else{
                    $results=array();
                }
            }
            else{
                $results=array();
            }


            /* if ($RS->RecordCount() > 0) {
                while ($row = $RS->FetchRow()) {

                    $clientConfiguration = array('username' => $row['username'],
                                                 'password' => $row['password'],
                                                 'pop3server' => $row['pop3server'],
                                                 'pop3port' => $row['pop3port'],
                                                 'pop3ssl' => $row['pop3ssl'],
                                                 'pop3spa' => $row['pop3spa'],
                                                 'imapserver' => $row['imapserver'],
                                                 'imapport' => $row['imapport'],
                                                 'imapssl' => $row['imapssl'],
                                                 'imapspa' => $row['imapspa'],
                                                 'smtpserver' => $row['smtpserver'],
                                                 'smtpport' => $row['smtpport'],
                                                 'smtpssl' => $row['smtpssl'],
                                                 'smtpspa' => $row['smtpspa'],
                                                 'smtpauth' => $row['smtpauth'],
                                                 'alias' => $row['alias']);
                }
            }
            else{
                $clientConfiguration = array();
            } */

            if(!empty($results)){
                if (count($remittenceSelSuppArr) >0) {
                    foreach ($remittenceSelSuppArr as $rec2) {
                        $suppResponse = array();
                        $confirmChk = 0;

                        foreach ($fullReportsDataArr as $rec) {
                            if($rec->account_id == $rec2){
                                $confirmChk++;
                                $suppResponse['reportsDataArr'][] = $rec;
                            }                
                        }
                        $suppResponse['company_logo_url'] = $company_logo_url;
                        $suppResponse['suppID'] = $rec2;

                        if($confirmChk>0)
                            $result2[$rec2] = $this->sendEmailRemittanceAdvice($suppResponse,$results);
                    } 

                    $rejectedInvoicesCounter= 0;
                    $sendEmailInvoicesCounter = 0;  
                    $rejectedInvoicesReason = '';      

                    foreach ($result2 as $rec) {

                        if($rec['rejectedInvoicesCounter'] >0){
                            $rejectedInvoicesCounter++;                
                            $rejectedInvoicesReason .= $rec['rejectedInvoices'].', ';
                        }
                        elseif($rec['sendEmailInvoicesCounter'] >0){
                            $sendEmailInvoicesCounter++;
                        }
                    } 
                    // exit;

                    if($sendEmailInvoicesCounter >0 && $rejectedInvoicesCounter >0){
                        $response['ack'] = 0;
                        $response['error'] = $rejectedInvoicesReason;
                    }
                    elseif($sendEmailInvoicesCounter >0){
                        $response['ack'] = 1;
                    }
                    elseif($rejectedInvoicesCounter >0){
                        $response['ack'] = 0;
                        $response['error'] = $rejectedInvoicesReason;
                    }
                    else{
                        $response['ack'] = 0;
                        $response['error'] = $rejectedInvoicesReason;
                        $response['response'] = array();
                    }  
                } 
            }
            else{

                $response['error'] = 'Email configuration does not exist.';  
                $response['rejectedInvoices'] .= 'Email configuration does not exist.';      
                $rejectedInvoicesCounter++;   
            }

            if($rejectedInvoicesCounter >0 && $sendEmailInvoicesCounter >0 ){
                $response['ack'] = 2;
                $response['rejectedInvoicesCounter'] = $rejectedInvoicesCounter;
                $response['sendEmailInvoicesCounter'] = $sendEmailInvoicesCounter;
            }
            else if($sendEmailInvoicesCounter >0 ){            
                $response['ack'] = 1;
                $response['error'] = null;
                $response['rejectedInvoicesCounter'] = $rejectedInvoicesCounter;
                $response['sendEmailInvoicesCounter'] = $sendEmailInvoicesCounter;
            }
            else{            
                $response['ack'] = 0;
                $response['error'] = null; 
                $response['rejectedInvoicesCounter'] = $rejectedInvoicesCounter;
                $response['sendEmailInvoicesCounter'] = $sendEmailInvoicesCounter;
            } 
        }
        else{            
            $response['ack'] = 0;
            $response['error'] = 'Invoice template does not exist.'; //Sale    
            $response['rejectedInvoices'] = 'Invoice template does not exist.';             
        }

        return $response;
    }

    function sendEmailRemittanceAdvice($remittanceArray,$clientConfiguration){

        $response3['rejectedInvoices'] = '';  
        $response3['rejectedInvoicesReason'] = array();  
        $response3['sendEmailInvoices'] = array();  

        $rejectedInvoicesCounter = 0;  
        $sendEmailInvoicesCounter = 0; 

        //Mail object initialization
        $mail = new \SendGrid\Mail\Mail();

        $invoice_email = '';
        $invoiceEmail = '';
        $invoiceCode = '';
        $invoiceName = ''; 
        // $emailSubject = '';
        $emailBody = '';

        $get_last_id = 0;
        $attachmentPath =  '';
        $bank_account_id = 0;

        $Sql2 = "SELECT srm_finance.remittanceAdviceEmail,srm.supplier_code,srm.name
                 FROM srm_finance,srm 
                 WHERE srm_finance.company_id = ".$this->arrUser['company_id']." AND 
                       srm_finance.supplier_id =  '".$remittanceArray['suppID']."' AND 
                       srm.id = '".$remittanceArray['suppID']."'";

        // echo $Sql2;exit;
        $RS2 = $this->objsetup->CSI($Sql2);

        $invoiceEmail = $RS2->fields['remittanceAdviceEmail'];
        $suppName = $RS2->fields['name'];
        $supplier_code = $RS2->fields['supplier_code'];

        $srmID = $remittanceArray['suppID'];
        $account_id = $srmID;

        $moduleName = '';
        $recordName = '';
        $recordId = 0;

        // $emailSubject = 'Remittance Advice';
        // $emailBody = 'Remittance Advice'; 

        if($clientConfiguration['templateSubject'])
            $emailSubject = str_replace('[[supplier_no]]', $supplier_code, $clientConfiguration['templateSubject']);
        else
            $emailSubject = 'Remittance Advice';

        if($clientConfiguration['templateBody'])
            $emailBody .= str_replace('[[supplier_no]]', $supplier_code, $clientConfiguration['templateBody']);
        else
            $emailBody .= 'Remittance Advice';           

        $moduleName = 'Remittance Advice';
        $invoiceName = 'RemittanceAdvice.'.$srmID.'.'.$this->arrUser['company_id'] .'.pdf';

        $basePath = UPLOAD_PATH . 'attachments/';
        $file_url = $basePath . $invoiceName; 

        // echo file_exists($file_url);     

        $remittanceArray['template']->fileName =  $invoiceName;
        $remittanceArray['file_url'] =  $file_url;
        // echo '<pre>';print_r($remittanceArray);exit; 
        $result = $this->CreatePrintTemplateRemittanceAdvice($remittanceArray,$invoiceName);

        // echo '<pre>';print_r($result);exit; 

        if($result['ack'] == 1){

            $outputInvNamePath = $result['file_url'];
            // print_r($outputInvNamePath);exit; 
            $emailBody = str_replace('[[View Document]]',"<a target='_blank' href='$outputInvNamePath'> View Document </a>", $emailBody);  
            // $emailBody .= "<a target='_blank' href='$outputInvNamePath'> Remittance Advice Report</a>";/*  Preview Document */
        }
        else
            $rejectedPdfCounter++;                    
        
        $emailDetails = array(
            "to" => array_unique(explode(';',$invoiceEmail)),
            "cc" => '',
            "from" => $clientConfiguration['username'],
            "fromName" => $clientConfiguration['alias'],
            "subject" => $emailSubject,
            "body" => $emailBody,
            "attachment" => '',
            "host" => $clientConfiguration['smtpserver'],
            "password" => $clientConfiguration['password'],
            "smtpAuth" => $clientConfiguration['smtpauth']=="On"?true:false,
            "smtpSecure" => $clientConfiguration['smtpssl']=="On"?"ssl":"tls",
            "smtpPort" => $clientConfiguration['smtpport']
        );                                 

        if($invoiceEmail){
            try {                    
                //Recipients
                $mail->setFrom($emailDetails['from'], $emailDetails['fromName']);
                for ($k = 0; $k < count($emailDetails['to']); $k++) {
                    $mail->AddTo($emailDetails['to'][$k]);
                }
                
                if (file_exists(UPLOAD_PATH . 'attachments' . '/'.$invoiceName)){

                    $attachmentPath = UPLOAD_PATH . 'attachments' . '/'.$invoiceName;
                    $filename = $invoiceName;
                    $file_encoded = base64_encode(file_get_contents($attachmentPath));
                    // $attachment = new \SendGrid\Mail\Attachment();
                    // $attachment->setType("application/text");
                    // $attachment->setContent($file_encoded);
                    // $attachment->setDisposition("attachment");
                    // $attachment->setFilename($filename);
                    // $mail->addAttachment($attachment);
                    //Content
                    $mail->setSubject($emailDetails['subject']);
                    $mail->addContent("text/html",$emailDetails['body']);

                    try {
                        $response2 = $this->sendgrid->send($mail);    
                        $response2 =  (array) $response2;   
                        $response['sentData'][] = $response2;
                        array_push($response3['sendEmailInvoices'],$invoiceName);  //$rec->sale_invioce_code                              
                        $sendEmailInvoicesCounter++;
                                
                    } catch (Exception $e) {
                        $response2['message'] =  $e->getMessage();
                        $response2['mailObj'] = $mail;
                        $response2['ack'] = 0;
                        $response3['rola'][] = $response2;
                        // echo 'Caught exception: '.  $e->getMessage(). "\n";
                    }                      // Set email format to HTML
                                        
                    // $mail->CharSet = 'UTF-8'; //before sending it of course
                }                                                               
                else{
                    $rejectedInvoicesCounter++; 
                    $response3['rejectedInvoices'] .= $suppName.' Email Attachment is Missing';                                      
                }

            } catch (Exception $e) {
                $response3['configIssue'] = 1;
                $response3['message'] =   $mail->ErrorInfo;
                $response3['mailObj'] = $mail;
                $response3['debug'] = $mail->smtp->smtp_errors;
                
                $response3['rejectedInvoices'] .= ' Email sending Failed';  
                $rejectedInvoicesCounter++; 
            }
        }
        else{
            $response3['rejectedInvoices'] .= $suppName.' Email is Missing';   
            $rejectedInvoicesCounter++; 
        }

        if($rejectedInvoicesCounter >0 && $sendEmailInvoicesCounter >0 ){
            $response3['ack'] = 2;
            $response3['rejectedInvoicesCounter'] = $rejectedInvoicesCounter;
            $response3['sendEmailInvoicesCounter'] = $sendEmailInvoicesCounter;
        }
        else if($sendEmailInvoicesCounter >0 ){            
            $response3['ack'] = 1;
            $response3['error'] = null;
            $response3['rejectedInvoicesCounter'] = $rejectedInvoicesCounter;
            $response3['sendEmailInvoicesCounter'] = $sendEmailInvoicesCounter;
        }
        else{            
            $response3['ack'] = 0;
            $response3['error'] = null; 
            $response3['rejectedInvoicesCounter'] = $rejectedInvoicesCounter;
            $response3['sendEmailInvoicesCounter'] = $sendEmailInvoicesCounter;
        } 
        
        return $response3;
    }

    function CreatePrintTemplateRemittanceAdvice($response,$invoiceName){

        // error_reporting(E_ALL);
        $result = "";
        $server_output = "";
        $file_url = $response['file_url'];

        $result->template->shortid = "BJeryU_LuN";
        $result->data = $response;


        // print_r(json_encode($result));exit;

        // $url = 'http://silverowreports.azurewebsites.net/api/report';
        $url = 'https://silverowjsreport2.azurewebsites.net/api/report';

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, 1);

        curl_setopt($ch, CURLOPT_POSTFIELDS,json_encode($result));  //Post Fields
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        
        $reqheaders = [
            'Authorization: "Basic '.base64_encode("admin:admin123").'"',
            'Content-Type: application/json'              
        ];

        curl_setopt($ch, CURLOPT_HTTPHEADER, $reqheaders);        

        $server_output = curl_exec ($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $errors = curl_error($ch);
        // print_r($errors);exit;

        curl_close ($ch);               
        // header("Content-type:application/pdf");                
        
        try {

            // echo $file_url;
            $open = file_get_contents($file_url); 
            
            // Write the contents back to the file 
            file_put_contents($file_url, $server_output); 

        } catch (HttpException $ex) {
            echo $ex;
            $response['file_url'] = $ex;
            exit;
        }         

        if(file_exists($file_url)){
            $response['ack'] = 1; 

            $key = hash('sha256', SECRET_KEY);
            $iv = substr(hash('sha256', SECRET_IV), 0, 16);
            $outputInvName = openssl_encrypt($invoiceName, SECRET_METHOD, $key, 0, $iv);
            $outputInvName = base64_encode($outputInvName);

            $response['file_url'] = WEB_PATH . '/api/setup/invoice?alpha='.$outputInvName; 
        }
        else{
            $response['ack'] = 0; 
            $response['file_url'] = ''; 
        }                               
          
        return $response;             
    }

    function CreatePrintTemplateCustomerStatement($response,$invoiceName){

        // error_reporting(E_ALL);
        $result = "";
        $server_output = "";
        $file_url = $response['file_url'];

        $result->template->shortid = "r1gSoJRhD4";
        $result->data = $response;


        // print_r(json_encode($result));exit;

        // $url = 'http://silverowreports.azurewebsites.net/api/report';
        $url = 'https://silverowjsreport2.azurewebsites.net/api/report';

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, 1);

        curl_setopt($ch, CURLOPT_POSTFIELDS,json_encode($result));  //Post Fields
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        
        $reqheaders = [
            'Authorization: "Basic '.base64_encode("admin:admin123").'"',
            'Content-Type: application/json'              
        ];

        curl_setopt($ch, CURLOPT_HTTPHEADER, $reqheaders);        

        $server_output = curl_exec ($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $errors = curl_error($ch);
        // print_r($errors);exit;

        curl_close ($ch);               
        // header("Content-type:application/pdf");                
        
        try {

            // echo $file_url;
            $open = file_get_contents($file_url); 
            
            // Write the contents back to the file 
            file_put_contents($file_url, $server_output); 

        } catch (HttpException $ex) {
            echo $ex;
            $response['file_url'] = $ex;
            exit;
        }         

        if(file_exists($file_url)){
            $response['ack'] = 1; 

            $key = hash('sha256', SECRET_KEY);
            $iv = substr(hash('sha256', SECRET_IV), 0, 16);
            $outputInvName = openssl_encrypt($invoiceName, SECRET_METHOD, $key, 0, $iv);
            $outputInvName = base64_encode($outputInvName);

            $response['file_url'] = WEB_PATH . '/api/setup/invoice?alpha='.$outputInvName; 
        }
        else{
            $response['ack'] = 0; 
            $response['file_url'] = ''; 
        }                               
          
        return $response;             
    }

    function customerStatementEmail($attr) {
        //echo '<pre>';print_r($attr);exit;
        //$dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        //$dateTo = $this->objGeneral->convert_date($attr['dateTo']);

        $response2['rejectedInvoices'] = '';  
        $response2['rejectedInvoicesReason'] = array();  
        $response2['rejectedInvoicesReasonEmailMissing'] = array();  
        
        $rejectedInvoicesReasonEmailMissing = 'Email is missing for following customers ';  
        $response2['sendEmailInvoices'] = array(); 
        $response2['sendFailedEmailInvoices'] = array();   

        $rejectedInvoicesCounter = 0;  
        $sendEmailInvoicesCounter = 0; 
        $rejectedInvoicesReasonEmailMissingCounter = 0; 

        $company_logo_url = $attr['company_logo_url'];
        $currentDate = $attr['currentDate'];
        $upToDate = $attr['upToDate'];
        $company_name = $attr['company_name'];

        // $supplierarray = [];
        $response = array();


        $module = 'Sales';    

        $id = "";
        $Sql = "SELECT id,json 
                FROM auto_email_templates 
                WHERE company_id = " . $this->arrUser['company_id'] . " AND 
                      template_name = 'CustomerStatement'";
        //echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $record = $RS->FetchRow();
            $id = $record['id'];
            $txt = $record['json'];
        }
        else{
            $response['ack'] = 0;
            $response['error'] = 'Sales template does not exist.'; //Sale    
            return $response;  
            /* $filePath = SERVER_PATH . "/autoEmailTemplates/$module.json";

            $myfile = fopen($filePath , "r");
            $txt = fread($myfile, filesize($filePath));
            fclose($myfile); */
        }

        if ($txt){
            $response['id'] = $id;
            $txt = preg_replace('/\R+/', " ", $txt);
            $response['template'] = json_decode($txt);

            $senderEmailID = $response['template']->senderEmail;            
            $templateSubject = strip_tags($response['template']->templateSubject);            
            $templateBody = $response['template']->templateBody;       

            $Sql = "SELECT
                           username,
                           alias
                    FROM virtual_emails ve 
                    WHERE ve.id = $senderEmailID";

            //  echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($row = $RS->FetchRow()) {

                    $clientConfiguration = array('username' => $row['username'],
                                                 'alias' => $row['alias']);
                }
            }
            else{
                $clientConfiguration = array();
            }

            if(!empty($clientConfiguration)){
                //Mail object initialization
                
                $response2 = [];
                $numItems = count($attr['reportsDataArr']);

                foreach($attr['reportsDataArr'] as $rec){

                    $templateBody = $response['template']->templateBody; 
                    $mail = new \SendGrid\Mail\Mail();  
                    $statementArray = array();
                    $statementArray['reportsDataArr'][] = $rec;
                    $invoice_email = '';
                    $invoiceEmail = '';
                    $invoiceCode = '';
                    $invoiceName = ''; 

                    $get_last_id = 0;
                    $attachmentPath =  '';
                    $bank_account_id = 0;

                    $Sql2 = "SELECT c.id,c.customer_code, c.name,f.statement_email 
                    FROM crm c,finance f
                    WHERE c.customer_code='".$rec->customer_code."' AND
                        c.id=f.customer_id AND 
                        c.company_id=".$this->arrUser['company_id']."";

                    // echo $Sql2;exit;
                    $RS2 = $this->objsetup->CSI($Sql2);

                    $invoiceEmail = $RS2->fields['statement_email'];
                    $customer_name = $rec->name;
                    $account_id = $RS2->fields['id'];

                    $moduleName = '';
                    $recordName = $rec->customer_code . " - " . $rec->name;
                    $recordId = 0;
                    $moduleId = 1;
                    $moduleName = 'Customer';
                    $file_name = 'CS.'.$account_id.'.'.$this->arrUser['company_id'] .'.pdf';
                    //echo '<br>'. $file_name;
                    $basePath = UPLOAD_PATH . 'attachments/';
                    $file_url = $basePath . $file_name; 

                    // echo file_exists($file_url);     

                    $statementArray['template']->fileName =  $file_name;
                    $statementArray['file_url'] =  $file_url;
                    $statementArray['company_logo_url'] =  $company_logo_url;
                    $statementArray['company_name'] =  $company_name;
                    $statementArray['currentDate'] =  $currentDate;
                    $statementArray['upToDate'] =  $upToDate; 
                    // echo '<pre>';print_r($statementArray);exit; 
                    $result = $this->CreatePrintTemplateCustomerStatement($statementArray,$file_name);

                    // echo '<pre>';print_r($result);exit; 
                    $emailBody = '';
                    if($result['ack'] == 1){

                        $outputInvNamePath = $result['file_url'];
                        // print_r($outputInvNamePath);exit; 
                        $templateBody = str_replace('[[View Document]]',"<a target='_blank' href='$outputInvNamePath'> View Document </a>", $templateBody);  
                        // $templateBody .= "<a target='_blank' href='$outputInvNamePath'> Customer Statement Report</a>";
                    }
                    else
                        $rejectedPdfCounter++;     
                        
                    // $emailSubject = str_replace('1 [[customer_no]]', $rec->customer_code,$templateSubject);
                    // $emailBody = str_replace('2 [[customer_no]]',$rec->customer_code, $templateBody);

                    $emailSubject = str_replace('[[customer_no]]', $rec->customer_code, $templateSubject);
                    $emailBody .= str_replace('[[customer_no]]', $rec->customer_code, $templateBody);
                    //echo $emailBody;exit;

                    $emailDetails = array(
                        "to" => array_unique(explode(';',$invoiceEmail)),
                        "cc" => '',
                        "from" => $clientConfiguration['username'],
                        "fromName" => $clientConfiguration['alias'],
                        "subject" => $emailSubject,
                        "body" =>  $emailBody,
                        "attachment" => ''
                    );   
                
                    if($invoiceEmail){
                        try {                    
                            //Recipients
                            $mail->setFrom($emailDetails['from'], $emailDetails['fromName']);
                            for ($k = 0; $k < count($emailDetails['to']); $k++) {
                                //echo '<br>'. $emailDetails['to'][$k];
                                $mail->AddTo($emailDetails['to'][$k]);
                            }
                            
                            if (file_exists(UPLOAD_PATH . 'attachments' . '/'.$file_name)){

                                $attachmentPath = UPLOAD_PATH . 'attachments' . '/'.$file_name;
                                $filename = $file_name;
                                $file_encoded = base64_encode(file_get_contents($attachmentPath));
                                // $attachment = new \SendGrid\Mail\Attachment();
                                // $attachment->setType("application/text");
                                // $attachment->setContent($file_encoded);
                                // $attachment->setDisposition("attachment");
                                // $attachment->setFilename($filename);
                                // $mail->addAttachment($attachment);
                                //Content
                                $mail->setSubject($emailDetails['subject']);
                                $mail->addContent("text/html",$emailDetails['body']);
                                // echo '<pre>';print_r($attachment);
                                try {
                                    $result2 = $this->sendgrid->send($mail);   
                                    $result2 =  (array) $result2;
                                    // print_r($result2);
                                    $statusCode=[];
                                    foreach ($result2 as $key => $value) {
                                        if (strpos($key, "statusCode") > -1){
                                            $statusCode['statusCode'] = $value;
                                        }
                                        else if (strpos($key, "body") > -1){
                                            $response2['body'] = json_decode($value);
                                        }
                                    }

                                    if ($statusCode['statusCode'] == 202){
                                        $response2['message'] =  "E-mail sent successfully";
                                        $response2['ack'] = 1;
                                        $sendEmailInvoicesCounter++;
                                        array_push($response2['sendEmailInvoices'],$file_name); 
                                    }
                                    else{
                                        $response2['mailObj'] = $mail;
                                        $response2['ack'] = 0;
                                        $response2['message'] =  $response['body']->errors[0]->message;
                                    }
                                    $response2['sentData'][] = $response2;

                                    /* $SqlInsert = "INSERT INTO email_save 
                                                    SET
                                                        email_address_from='" . $emailDetails['from'] . "',
                                                        email_address_to='" . implode(";",array_unique(explode(';',$invoiceEmail))) . "',
                                                        email_subject='" . $emailDetails['subject'] . "',
                                                        sender_id='" . $this->arrUser['id'] . "',
                                                        account_id='".$account_id."',
                                                        record_name='".$recordName."',
                                                        email_body= '" . base64_encode(trim(stripslashes($emailDetails['body'] ))) . "',
                                                        email_header= 'abc',
                                                        module_id= '" . $moduleId . "',
                                                        module_name= '" . $moduleName . "',
                                                        company_id= '" . $this->arrUser['company_id'] . "',
                                                        user_id='" . $this->arrUser['id'] . "',
                                                        date_added='" . current_date_time . "', 
                                                        type = 1,
                                                        virtualEmail = '".$senderEmailID."'"; 
                                    // echo $SqlInsert;
                                    $RS = $this->objsetup->CSI($SqlInsert);
                                    $get_last_id = $this->Conn->Insert_ID(); */
                                    /* if($moduleName){
                                    $associationsSql = "INSERT INTO document_association
                                                                        SET
                                                                            module_type     =   'email',
                                                                            module_id       =   '$get_last_id',
                                                                            record_type     =   '$moduleName',
                                                                            record_id       =   '$account_id',
                                                                            record_name     =   '$recordName',
                                                                            AddedBy         =   '" . $this->arrUser['id'] . "',
                                                                            AddedOn         =   '".current_date_time."'";

                                    // echo $associationsSql;exit;
                                    $RSAssociation = $this->objsetup->CSI($associationsSql); 
                                    } */
                                    //echo '<br>here = '.$account_id.'<br>';                                                        
                                            
                                } catch (Exception $e) {
                                    array_push($response2['sendFailedEmailInvoices'],$file_name);                                    
                                }                                
                            }                                                               
                            else{
                                $rejectedInvoicesCounter++; 
                                $rejectedInvoicesReason .= $customer_name.' Email Attachment is Missing, ';                                      
                            }

                        } catch (Exception $e) {
                            $response2['configIssue'] = 1;
                            $response2['message'] =   $mail->ErrorInfo;
                            $response2['mailObj'] = $mail;
                            $response2['debug'] = $mail->smtp->smtp_errors;
                            
                            $rejectedInvoicesReason .= 'Email sending Failed, ';  
                            
                            $rejectedInvoicesCounter++; 
                        }
                    }
                    else{
                        $rejectedInvoicesReason .= $customer_name.' Email is Missing, ';
                        if($rejectedInvoicesReasonEmailMissingCounter > 0) {
                            $rejectedInvoicesReasonEmailMissing .= ', '.$customer_name;   
                        }  
                        else {
                            $rejectedInvoicesReasonEmailMissing .= $customer_name;   
                        }
                        $rejectedInvoicesCounter++; 
                        $rejectedInvoicesReasonEmailMissingCounter++;
                    }
                }
               // echo $sendEmailInvoicesCounter;
               if($sendEmailInvoicesCounter >0 && $rejectedInvoicesCounter >0){
                   $response2['ack'] = 0;
                   $response2['error'] = $rejectedInvoicesReason;
                   // $response2['error'] = $rejectedInvoicesReasonEmailMissing;
                }
                elseif($sendEmailInvoicesCounter >0){
                    $response2['ack'] = 1;
                }
                elseif($rejectedInvoicesCounter >0){
                    $response2['ack'] = 0;
                    $response2['error'] = $rejectedInvoicesReason;
                    //$response2['error'] = $rejectedInvoicesReasonEmailMissing;
                }
                else{
                    $response2['ack'] = 0;
                    $response2['error'] = $rejectedInvoicesReason;
                    $response2['response'] = array();
                }  

                // if($sendEmailInvoicesCounter>0){
                //     $response2['message'] =  "E-mail(s) sent";
                //     $response2['error'] = null;   
                //     $response2['ack'] = 1; 
                // }else{
                //     $response2['message'] =  " No E-mail(s) sent";
                //     $response2['ack'] = 0; 
                //     $response2['error'] = implode(',',$response2['rejectedInvoices']);   
                // }
                // print_r($response2); exit;
                //return $response2; exit;

            }
            else{

                $response2['error'] = 'Email configuration does not exist.';  
                $response2['rejectedInvoices'] .= 'Email configuration does not exist.';      
                $rejectedInvoicesCounter++;   
            }
        }
        else{            
            $response2['ack'] = 0;
            $response2['error'] = 'Sales template does not exist.'; //Sale    
            $response2['rejectedInvoices'] = 'Sales template does not exist.';             
        }

        return $response2;
    }

    function sales_figure_report_customer($attr)
    {
        if (count($attr['customers']) > 0) {

            $customersarray = '';
            foreach ($attr['customers'] as $rec) {
                $customersarray .= $rec->id . ',';
            }
            $customersarray = rtrim($customersarray, ", ");
        }else {
            if(isset($attr['customer_bucket']) && $attr['customer_bucket'] == 1)
            {
                $sqla = "SELECT c.id 
                        FROM sr_crm_listing c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . " "; 
                /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

                //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
                $sqla .= " ORDER BY c.customer_code ASC";
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }

                        // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                        $customersarray .= $Rowa['id'] . ',';
                    }

                    $customersarray = substr($customersarray, 0, -1);
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }
            else
                $customersarray = '';
        }

        if (count($attr['salespersons']) > 0) {

            $salespersonsarray = '';
            foreach ($attr['salespersons'] as $rec) {
                $salespersonsarray .= $rec->id . ',';
            }
            $salespersonsarray = rtrim($salespersonsarray, ", ");
        }
        else
        {
            if(isset($attr['sale_person_bucket']) && $attr['sale_person_bucket'] == 1)
            {
                $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . "  OR
                emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id in (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
                emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : "";
                    $sqla = "  SELECT * FROM (SELECT emp.id,
                                                emp.user_code,
                                                emp.line_manager_name_id,
                                                CONCAT(first_name,' ',last_name) AS name,
                                                emp.user_email AS email,
                                                emp.job_title,
                                                (CASE WHEN emp.employee_type>0 THEN empType.name 
                                                    ELSE '' 
                                                    END )AS employee_type
                                            FROM employees AS emp,
                                                employee_type AS empType 
                                            WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND
                                                (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                                $where_line_manager                                        
                                            GROUP BY emp.id
                                            ORDER BY emp.user_code ASC) AS tbl  
                                where 1  " . $where_clause . " ";           
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }

                        $salespersonsarray .= $Rowa['id'] . ',';
                    }

                    $salespersonsarray = substr($salespersonsarray, 0, -1);
                }
            }
            else
                $salespersonsarray = "";
        }
        
        if ($attr['items']) {

            $itemsarray = '';
            foreach ($attr['items'] as $rec) {
                $itemsarray .= $rec->id . ',';
            }
            $itemsarray = rtrim($itemsarray, ", ");
        }else {

            $sqla = "SELECT prd.id 
					 FROM productcache prd
					 WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
            $sqla .= " ORDER BY prd.`product_code`";
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $itemsarray .= $Rowa['id'] . ',';
                }

                $itemsarray = substr($itemsarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $names_arr = [];
        $territories_arr = [];
        if ($attr['territories']) {

            $territoriesarray = '';
            foreach ($attr['territories'] as $rec) {
                $territoriesarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->title;
                $territories_arr[$rec->id] = $rec->title;
            }
            $territoriesarray = rtrim($territoriesarray, ", ");
        }else {

            $sqla = "SELECT id,title
					 FROM crm_region
					 WHERE company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $territoriesarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['title'];
                    $territories_arr[$Rowa['id']] = $Rowa['title'];

                }

                $territoriesarray = substr($territoriesarray, 0, -1);
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // // return $response;
                $territoriesarray = "";
            }
        }

        $buying_grps_arr = [];
        if ($attr['buyingGroups']) {

            $buyingGroupsarray = '';
            foreach ($attr['buyingGroups'] as $rec) {
                $buyingGroupsarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->title;
                $buying_grps_arr[$rec->id] = $rec->title;
            }
            $buyingGroupsarray = rtrim($buyingGroupsarray, ", ");
        }else {

            $sqla = "SELECT id,title
					 FROM crm_buying_group
					 WHERE company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $buyingGroupsarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['title'];
                    $buying_grps_arr[$Rowa['id']] = $Rowa['title'];
                }

                $buyingGroupsarray = substr($buyingGroupsarray, 0, -1);
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // return $response;
                $buyingGroupsarray = "";
            }
        }

        $segments_arr = [];
        if ($attr['segments']) {

            $segmentsarray = '';
            foreach ($attr['segments'] as $rec) {
                $segmentsarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->title;
                $segments_arr[$rec->id] = $rec->title;
            }
            $segmentsarray = rtrim($segmentsarray, ", ");
        }else {

            $sqla = "SELECT id,title
					 FROM crm_segment
					 WHERE company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $segmentsarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['title'];
                    $segments_arr[$Rowa['id']] = $Rowa['title'];
                }

                $segmentsarray = substr($segmentsarray, 0, -1);
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // return $response;
                $segmentsarray = "";
            }
        }

        $brands_arr = [];
        if ($attr['brands']) {

            $brandsarray = '';
            foreach ($attr['brands'] as $rec) {
                $brandsarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->name;
                $brands_arr[$rec->id] = $rec->name;
            }
            $brandsarray = rtrim($brandsarray, ", ");
        }else {

            $brandsarray = '0,';

            $sqla = "SELECT id,brandname AS name
					 FROM brand
					 WHERE status = 1 AND company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $brandsarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['name'];
                    $brands_arr[$Rowa['id']] = $Rowa['name'];
                }

                $brandsarray = substr($brandsarray, 0, -1);
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // return $response;
                $brandsarray = "";
            }
        }

        $categories_arr = [];
        if ($attr['categories']) {

            $categoriesarray = '';
            foreach ($attr['categories'] as $rec) {
                $categoriesarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->name;
                $categories_arr[$rec->id] = $rec->name;
            }
            $categoriesarray = rtrim($categoriesarray, ", ");
        }else {

            $categoriesarray = '0,';

            $sqla = "SELECT id,name
					 FROM category
					 WHERE status = 1 AND company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $categoriesarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['name'];
                    $categories_arr[$Rowa['id']] = $Rowa['name'];
                }

                $categoriesarray = substr($categoriesarray, 0, -1);
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // return $response;
                $categoriesarray = "";
            }
        }
        
        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        // echo $segmentsarray; exit;

        $division_1 = $attr['division_1'];
        $division_2 = $attr['division_2'];

        $reportXlsxType = (isset($attr['reportXlsxType']) && $attr['reportXlsxType']!='')?$attr['reportXlsxType']:0; 

        $Sql = "CALL srrep_SalesFigureCustomerSalesPerson(".$this->arrUser['company_id'].", ".$attr['type'].", $attr[date_type], '$dateFrom', '$dateTo', '$customersarray', '$salespersonsarray', '$itemsarray', '$territoriesarray', '$buyingGroupsarray', '$segmentsarray', '$brandsarray', '$categoriesarray', '$division_1', '$division_2')";
        // $Sql = "CALL srrep_SalesFigureCustomerSalesPerson(132, 1, '2018-02-02', '2018-11-17', '334021', '')";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);

        $response = array();
            
        if ($RS->RecordCount() > 0) {
            if($attr['type'] == 1) // 1 -> Customer
            {
                $prev_cust_id = 0;
                $response['response']['posted_grand_total_amount_in_vat']  = 0;
                $response['response']['posted_grand_total_amount_ex_vat']  = 0;
                $response['response']['posted_grand_total_rebate_price']   = 0;

                $response['response']['unposted_grand_total_amount_in_vat']  = 0;
                $response['response']['unposted_grand_total_amount_ex_vat']  = 0;
                $response['response']['unposted_grand_total_rebate_price']   = 0;


                $response['response']['grand_total_amount_in_vat']  = 0;
                $response['response']['grand_total_amount_ex_vat']  = 0;
                $response['response']['grand_total_rebate_price']   = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_cust_id != $Row['cust_id'])
                    {
                        $response['response']['records'][$Row['cust_id']]['total_sales'] = 0;
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        /* if($Row['doc_type'] == 'Credit Note')
                        {
                            $Row['amount_in_vat'] = intval($Row['amount_in_vat']) * -1;
                            $Row['amount_ex_vat'] = intval($Row['amount_ex_vat']) * -1;
                        } */
                        $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $result['rebate_price']  = round($Row['rebate_price'], 2);
                        
                        $result['sp_code'] = $Row['sp_code'];
                        $result['sp_name'] = $Row['sp_name'];
                        
                        $prev_cust_id = $Row['cust_id'];
                        $response['response']['records'][$Row['cust_id']]['cust_name'] = $Row['cust_name'];
                        $response['response']['records'][$Row['cust_id']]['cust_code'] = $Row['cust_code'];
                         
                        $response['response']['records'][$Row['cust_id']][$Row['posting_type']]['total_amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $response['response']['records'][$Row['cust_id']][$Row['posting_type']]['total_amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $response['response']['records'][$Row['cust_id']][$Row['posting_type']]['total_rebate_price'] = round($Row['rebate_price'], 2);
                        $response['response']['records'][$Row['cust_id']][$Row['posting_type']]['invoices'][] = $result;
                        
                        $response['response'][$Row['posting_type'].'_grand_total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_rebate_price'] += round($Row['rebate_price'], 2);

                        $response['response']['grand_total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response']['grand_total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response']['grand_total_rebate_price'] += round($Row['rebate_price'], 2);
                        // total sale for sale person (added by Akhtar Nawaz)
                        $response['response']['records'][$Row['cust_id']]['total_sales'] += round(($Row['amount_ex_vat'] - $Row['rebate_price']),2);
                        
                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        $result['sp_code'] = $Row['sp_code'];
                        $result['sp_name'] = $Row['sp_name'];
                        /* if($Row['doc_type'] == 'Credit Note')
                        {
                            $Row['amount_in_vat'] = intval($Row['amount_in_vat']) * -1;
                            $Row['amount_ex_vat'] = intval($Row['amount_ex_vat']) * -1;
                        } */
                        $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $result['rebate_price']  = round($Row['rebate_price'], 2);
                        

                        $response['response']['records'][$Row['cust_id']][$Row['posting_type']]['total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response']['records'][$Row['cust_id']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response']['records'][$Row['cust_id']][$Row['posting_type']]['total_rebate_price']  += round($Row['rebate_price'], 2);
                        $response['response']['records'][$Row['cust_id']][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_rebate_price']  += round($Row['rebate_price'], 2);

                        $response['response']['grand_total_amount_in_vat']  += round($Row['amount_in_vat'], 2);
                        $response['response']['grand_total_amount_ex_vat']  += round($Row['amount_ex_vat'], 2);
                        $response['response']['grand_total_rebate_price']   += round($Row['rebate_price'], 2);

                        // total sale for sale person (added by Akhtar Nawaz)
                        $response['response']['records'][$Row['cust_id']]['total_sales'] += round(($Row['amount_ex_vat'] - $Row['rebate_price']),2);

                    }                    
                }
                 // total sale for sale person (added by Akhtar Nawaz)
                 $records = $response['response']['records'];
                 $total_sales = array_column($records, 'total_sales');
                 //echo '<pre>';print_r($total_sales);exit;
                 array_multisort($total_sales, SORT_DESC, $records);
                 $response['response']['records'] = $records;
            }
            else if($attr['type'] == 2) // 2 -> Sales Person
            {
                $prev_sp_id = 0;

                $response['response']['posted_grand_total_amount_in_vat']  = 0;
                $response['response']['posted_grand_total_amount_ex_vat']  = 0;
                $response['response']['posted_grand_total_rebate_price']   = 0;

                $response['response']['unposted_grand_total_amount_in_vat']  = 0;
                $response['response']['unposted_grand_total_amount_ex_vat']  = 0;
                $response['response']['unposted_grand_total_rebate_price']   = 0;


                $response['response']['grand_total_amount_in_vat']  = 0;
                $response['response']['grand_total_amount_ex_vat']  = 0;
                $response['response']['grand_total_rebate_price']   = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_sp_id != $Row['sp_id'])
                    {
                        $response['response']['records'][$Row['sp_id']]['total_sales'] = 0;
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        /* if($Row['doc_type'] == 'Credit Note')
                        {
                            $Row['amount_in_vat'] = intval($Row['amount_in_vat']) * -1;
                            $Row['amount_ex_vat'] = intval($Row['amount_ex_vat']) * -1;
                        } */
                        $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $result['rebate_price'] = round($Row['rebate_price'], 2);
                        $result['cust_name'] = $Row['cust_name'];
                        $result['cust_code'] = $Row['cust_code'];
                        
                        $prev_sp_id = $Row['sp_id'];
                        $response['response']['records'][$Row['sp_id']]['sp_code'] = $Row['sp_code'];
                        $response['response']['records'][$Row['sp_id']]['sp_name'] = $Row['sp_name'];
                        
                        $response['response']['records'][$Row['sp_id']][$Row['posting_type']]['total_amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $response['response']['records'][$Row['sp_id']][$Row['posting_type']]['total_amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $response['response']['records'][$Row['sp_id']][$Row['posting_type']]['total_rebate_price'] = round($Row['rebate_price'], 2);
                        $response['response']['records'][$Row['sp_id']][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_rebate_price']  += round($Row['rebate_price'], 2);

                        $response['response']['grand_total_amount_in_vat']  += round($Row['amount_in_vat'], 2);
                        $response['response']['grand_total_amount_ex_vat']  += round($Row['amount_ex_vat'], 2);
                        $response['response']['grand_total_rebate_price']   += round($Row['rebate_price'], 2);
                         // total sale for sale person (added by Akhtar Nawaz)
                        $response['response']['records'][$Row['sp_id']]['total_sales'] += round(($Row['amount_ex_vat'] - $Row['rebate_price']),2);
                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        $result['cust_name'] = $Row['cust_name'];
                        $result['cust_code'] = $Row['cust_code'];
                        /* if($Row['doc_type'] == 'Credit Note')
                        {
                            $Row['amount_in_vat'] = intval($Row['amount_in_vat']) * -1;
                            $Row['amount_ex_vat'] = intval($Row['amount_ex_vat']) * -1;
                        } */
                        $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $result['rebate_price'] = round($Row['rebate_price'], 2);

                        $response['response']['records'][$Row['sp_id']][$Row['posting_type']]['total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response']['records'][$Row['sp_id']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response']['records'][$Row['sp_id']][$Row['posting_type']]['total_rebate_price']  += round($Row['rebate_price'], 2);
                        $response['response']['records'][$Row['sp_id']][$Row['posting_type']]['invoices'][] = $result;
    
                        $response['response'][$Row['posting_type'].'_grand_total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_rebate_price']  += round($Row['rebate_price'], 2);

                        $response['response']['grand_total_amount_in_vat']  += round($Row['amount_in_vat'], 2);
                        $response['response']['grand_total_amount_ex_vat']  += round($Row['amount_ex_vat'], 2);
                        $response['response']['grand_total_rebate_price']   += round($Row['rebate_price'], 2);
                        // total sale for sale person (added by Akhtar Nawaz)
                        $response['response']['records'][$Row['sp_id']]['total_sales'] += round(($Row['amount_ex_vat'] - $Row['rebate_price']),2);
                    }
                    
                }
                 // total sale for sale person (added by Akhtar Nawaz)
                $records = $response['response']['records'];
                $total_sales = array_column($records, 'total_sales');
                array_multisort($total_sales, SORT_DESC, $records);
                $response['response']['records'] = $records;
            }
            else if($attr['type'] == 3) // 3 -> Sales Person summary
            {
                 while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $response['response'][] = $Row;
                 }
            }
            else if($attr['type'] == 4) // 4 -> item
            {
                $prev_item_id = 0;
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_item_id != $Row['item_id'])
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        /* if($Row['doc_type'] == 'Credit Note')
                        {
                            $Row['amount_in_vat'] = intval($Row['amount_in_vat']) * -1;
                            $Row['amount_ex_vat'] = intval($Row['amount_ex_vat']) * -1;
                        } */
                        $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $result['cust_name'] = $Row['cust_name'];
                        $result['cust_code'] = $Row['cust_code'];
                        $result['sp_name'] = $Row['sp_name'];
                        $result['sp_code'] = $Row['sp_code'];
                        $result['qty'] = $Row['qty'];
                        $result['uom'] = $Row['uom'];
                        $result['unit_price'] = round($Row['unit_price'], 2);
                        
                        $prev_item_id = $Row['item_id'];
                        $response['response'][$Row['item_id']]['item_code'] = $Row['item_code'];
                        $response['response'][$Row['item_id']]['item_name'] = $Row['item_name'];
                        
                        $response['response'][$Row['item_id']]['total_amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['item_id']]['total_amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $response['response'][$Row['item_id']]['total_qty'] = $Row['qty'];
                        $response['response'][$Row['item_id']]['_uom'] = $Row['uom'];
                        $response['response'][$Row['item_id']]['invoices'][] = $result;

                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        $result['cust_name'] = $Row['cust_name'];
                        $result['cust_code'] = $Row['cust_code'];
                        $result['sp_name'] = $Row['sp_name'];
                        $result['sp_code'] = $Row['sp_code'];
                        /* if($Row['doc_type'] == 'Credit Note')
                        {
                            $Row['amount_in_vat'] = intval($Row['amount_in_vat']) * -1;
                            $Row['amount_ex_vat'] = intval($Row['amount_ex_vat']) * -1;
                        } */
                        $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $result['qty'] = $Row['qty'];
                        $result['uom'] = $Row['uom'];
                        $result['unit_price'] = round($Row['unit_price'], 2);
                        
                        $response['response'][$Row['item_id']]['total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['item_id']]['total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response'][$Row['item_id']]['total_qty'] += $Row['qty'];
                        $response['response'][$Row['item_id']]['invoices'][] = $result;
                    }                    
                }
                // total sale for sale person (added by Akhtar Nawaz)
                $records = $response['response'];
                $total_sales = array_column($records, 'total_amount_ex_vat');
                //echo '<pre>';print_r($total_sales);exit;
                array_multisort($total_sales, SORT_DESC, $records);
                $response['response'] = $records;
            }
            else if($attr['type'] == 5) // 5 -> Customer summary
            {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $response['response'][] = $Row;
                 }
            } 
            else if($attr['type'] == 6 || $attr['type'] == 8 || $attr['type'] == 10) // territories, buying group or segments
            {
                $prev_sp_id_1 = 0;
               
                $response['response']['posted_grand_total_amount_in_vat']  = 0;
                $response['response']['posted_grand_total_amount_ex_vat']  = 0;
                $response['response']['posted_grand_total_rebate_price']   = 0;

                $response['response']['unposted_grand_total_amount_in_vat']  = 0;
                $response['response']['unposted_grand_total_amount_ex_vat']  = 0;
                $response['response']['unposted_grand_total_rebate_price']   = 0;


                $response['response']['grand_total_amount_in_vat']  = 0;
                $response['response']['grand_total_amount_ex_vat']  = 0;
                $response['response']['grand_total_rebate_price']   = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($Row['rep_type']==1){
                        $prev_sp_id = $Row['region_id'];
                    }elseif($Row['rep_type']==2){
                        $prev_sp_id = $Row['buying_grp_id'];
                    }elseif($Row['rep_type']==3){
                        $prev_sp_id = $Row['segment_id'];
                    }
                    if($prev_sp_id_1 != $prev_sp_id)
                    {
                        $result = array();
                        $response['response']['records'][$prev_sp_id]['total_sales'] = 0;
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        /* if($Row['doc_type'] == 'Credit Note')
                        {
                            $Row['amount_in_vat'] = intval($Row['amount_in_vat']) * -1;
                            $Row['amount_ex_vat'] = intval($Row['amount_ex_vat']) * -1;
                        } */
                        $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $result['rebate_price'] = round($Row['rebate_price'], 2);
                        $result['cust_name'] = $Row['cust_name'];
                        $result['cust_code'] = $Row['cust_code'];
                        $result['sp_code'] = $Row['sp_code'];
                        $result['sp_name'] = $Row['sp_name'];

                        $prev_sp_id_1 = $prev_sp_id;
                        $response['response']['records'][$prev_sp_id]['sale_by_name'] = $names_arr[$prev_sp_id];

                        $response['response']['records'][$prev_sp_id][$Row['posting_type']]['total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response']['records'][$prev_sp_id][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response']['records'][$prev_sp_id][$Row['posting_type']]['total_rebate_price'] += round($Row['rebate_price'], 2);
                        //echo '<pre>';print_r($result);
                        $response['response']['records'][$prev_sp_id][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_rebate_price']  += round($Row['rebate_price'], 2);

                        $response['response']['grand_total_amount_in_vat']  += round($Row['amount_in_vat'], 2);
                        $response['response']['grand_total_amount_ex_vat']  += round($Row['amount_ex_vat'], 2);
                        $response['response']['grand_total_rebate_price']   += round($Row['rebate_price'], 2);
                        // total sale for sale person (added by Akhtar Nawaz)
                        $response['response']['records'][$prev_sp_id]['total_sales'] += round(($Row['amount_ex_vat'] - $Row['rebate_price']),2);
                    }
                    else
                    {                       
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['order_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        $result['cust_name'] = $Row['cust_name'];
                        $result['cust_code'] = $Row['cust_code'];
                        $result['sp_code'] = $Row['sp_code'];
                        $result['sp_name'] = $Row['sp_name'];
                        /* if($Row['doc_type'] == 'Credit Note')
                        {
                            $Row['amount_in_vat'] = intval($Row['amount_in_vat']) * -1;
                            $Row['amount_ex_vat'] = intval($Row['amount_ex_vat']) * -1;
                        } */
                        $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['amount_ex_vat'], 2);
                        $result['rebate_price'] = round($Row['rebate_price'], 2);

                        $response['response']['records'][$prev_sp_id]['sale_by_name'] = $names_arr[$prev_sp_id];
                        
                        $response['response']['records'][$prev_sp_id][$Row['posting_type']]['total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response']['records'][$prev_sp_id][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response']['records'][$prev_sp_id][$Row['posting_type']]['total_rebate_price'] += round($Row['rebate_price'], 2);
                        //echo '<pre>';print_r($result);
                        $response['response']['records'][$prev_sp_id][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['amount_ex_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_rebate_price']  += round($Row['rebate_price'], 2);

                        $response['response']['grand_total_amount_in_vat']  += round($Row['amount_in_vat'], 2);
                        $response['response']['grand_total_amount_ex_vat']  += round($Row['amount_ex_vat'], 2);
                        $response['response']['grand_total_rebate_price']   += round($Row['rebate_price'], 2);
                        // total sale for sale person (added by Akhtar Nawaz)
                        $response['response']['records'][$prev_sp_id]['total_sales'] += round(($Row['amount_ex_vat'] - $Row['rebate_price']),2);
                    }                    
                }
                //echo '<pre>';print_r($response['response']['records']);exit;
                // total sale for sale person (added by Akhtar Nawaz)
                $records = $response['response']['records'];
                $total_sales = array_column($records, 'total_sales');
                array_multisort($total_sales, SORT_DESC, $records);
                $response['response']['records'] = $records;

            }else if($attr['type'] == 7 || $attr['type'] == 9 || $attr['type'] == 11) // territories, buying group or segments summaries
            {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($Row['cust_code'] || $Row['cust_name'] || $Row['sp_name'] || $Row['sum_amount_ex_vat'] ){
                         $response['response'][] = $Row;
                    }else{
                        $response['ack'] = 0;
                        $response['response'] = array();
                        return $response;
                    }
                   
                 }
            }
            else if($attr['type'] == 12) // 12 -> Item summary
            {
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $response['response'][] = $Row;
                 }
            }
            else if($attr['type'] == 13) // Item sales by Category/Brand/Segment & Territory- By Customer
            {
                // division_type_1 = 1-> Territory, 2-> Buying Group, 3-> Segment
                // division_type_2 = 1-> Brand, 2-> Category

                $field = "";
                if($division_1 == 1)
                    $field = "region_id";
                else if($division_1 == 2)
                    $field = "buying_grp_id";
                else if($division_1 == 3)
                    $field = "segment_id";
                else if($division_1 == 4)
                    $field = "cust_id";
                
                $prev_id = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_id != $Row[$field])
                    {
                        $result = array();
                        $Row['brand_name'] =  $brands_arr[$Row['brand_id']];
                        $Row['category_name'] =  $categories_arr[$Row['category_id']];
                        $Row['segment_name'] =  $segments_arr[$Row['segment_id']];
                        $Row['buying_grp_name'] =  $buying_grps_arr[$Row['buying_grp_id']];
                        $Row['territory_name'] = $territories_arr[$Row['region_id']];
                        
                        $response['response'][$Row[$field]]['records'][] = $Row;
                        $response['response'][$Row[$field]]['total_amount_ex_vat'] += $Row['amount_ex_vat'];
                        $response['response'][$Row[$field]]['total_qty'] += $Row['qty'];
                    }
                    else
                    {
                        $result = array();
                        $Row['brand_name'] =  $brands_arr[$Row['brand_id']];
                        $Row['category_name'] =  $categories_arr[$Row['category_id']];
                        $Row['segment_name'] =  $segments_arr[$Row['segment_id']];
                        $Row['buying_grp_name'] =  $buying_grps_arr[$Row['buying_grp_id']];
                        $Row['territory_name'] = $territories_arr[$Row['region_id']];
                        
                        $response['response'][$Row[$field]]['records'][] = $Row;
                        $response['response'][$Row[$field]]['total_amount_ex_vat'] = $Row['amount_ex_vat'];
                        $response['response'][$Row[$field]]['total_qty'] = $Row['qty'];
                    }
                }
            }
            else if($attr['type'] == 14) // Item sales by Category/Brand/Segment & Territory- By Item
            {
                // division_type_1 = 1-> Territory, 2-> Buying Group, 3-> Segment
                // division_type_2 = 1-> Brand, 2-> Category

                $field = "";
                if($division_2 == 1)
                    $field = "brand_id";
                else if($division_2 == 2)
                    $field = "category_id";
                else if($division_2 == 3)
                    $field = "item_id";
                
                $prev_id = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_id != $Row[$field])
                    {
                        $result = array();
                        $Row['brand_name'] =  $brands_arr[$Row['brand_id']];
                        $Row['category_name'] =  $categories_arr[$Row['category_id']];
                        $Row['segment_name'] =  $segments_arr[$Row['segment_id']];
                        $Row['buying_grp_name'] =  $buying_grps_arr[$Row['buying_grp_id']];
                        $Row['territory_name'] = $territories_arr[$Row['region_id']];
                        
                        $response['response'][$Row[$field]]['records'][] = $Row;
                        $response['response'][$Row[$field]]['total_amount_ex_vat'] += $Row['amount_ex_vat'];
                        $response['response'][$Row[$field]]['total_qty'] += $Row['qty'];
                    }
                    else
                    {
                        $result = array();
                        $Row['brand_name'] =  $brands_arr[$Row['brand_id']];
                        $Row['category_name'] =  $categories_arr[$Row['category_id']];
                        $Row['segment_name'] =  $segments_arr[$Row['segment_id']];
                        $Row['buying_grp_name'] =  $buying_grps_arr[$Row['buying_grp_id']];
                        $Row['territory_name'] = $territories_arr[$Row['region_id']];
                        
                        $response['response'][$Row[$field]]['records'][] = $Row;
                        $response['response'][$Row[$field]]['total_amount_ex_vat'] = $Row['amount_ex_vat'];
                        $response['response'][$Row[$field]]['total_qty'] = $Row['qty'];
                    }
                }
            }

            if($reportXlsxType == 1 && $attr['type'] == 1){
                    $CSVDataTitle = array();
                    $CSVDataTitle['col1'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['col1'] = 'Sales Figures by Customer(s) - Detailed';
                    $response['CSVData'][] = $CSVDataTitle;                                     

                    $response['filename']=  APP_PATH . "Reports/salesFigureCustomer".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);
                   // echo "here 1 <pre>";print_r($response);exit;
                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();
                    foreach ($response['response']['records'] as $Row) {
                        // add an empty line
                        $CSVDataRec = array(); 
                        $response['CSVData'][] = $CSVDataRec;

                        $CSVDataRec = array(); 
                        $CSVDataRec['col1'] = 'Customer No.';
                        $CSVDataRec['col2'] = $Row['cust_code'];
                        $response['CSVData'][] = $CSVDataRec;

                        $CSVDataRec = array(); 
                        $CSVDataRec['col1'] = 'Customer Name';
                        $CSVDataRec['col2'] = $Row['cust_name'];
                        $response['CSVData'][] = $CSVDataRec; 
                        
                        $CSVDataRec = array();
                        $CSVDataRec['col1'] = (($attr['date_type']==1) ? 'Posting Date' : 'Order Date').' From '.$attr['dateFrom'].' to '.$attr['dateTo'];
                        $response['CSVData'][] = $CSVDataRec;  

                        // add an empty line
                        $CSVDataRec = array(); 
                        $response['CSVData'][] = $CSVDataRec;                       
                        if(count($Row['posted']['invoices'])>0){
                            $CSVDataRec = array(); 
                            $CSVDataRec['col1'] = 'Posted';
                            $response['CSVData'][] = $CSVDataRec;
                            // add an empty line
                            $CSVDataRec = array(); 
                            $response['CSVData'][] = $CSVDataRec;
                            $CSVDataRec = array();
                            $CSVDataRec['col1'] = ($attr['date_type']==1) ? 'Posting Date' : 'Order Date';
                            $CSVDataRec['col2'] = 'Document Type';
                            $CSVDataRec['col3'] = 'Document No.';
                            $CSVDataRec['col4'] = 'Salesperson';
                            $CSVDataRec['col5'] = 'Sales';
                            $CSVDataRec['col6'] = 'Rebate';
                            $CSVDataRec['col7'] = 'Total';
                            $response['CSVData'][] = $CSVDataRec;
                            
                            foreach($Row['posted']['invoices'] as $inv){
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = ($attr['date_type']==1) ? $inv['posting_date'] : $inv['order_date'];
                                $CSVDataRec['col2'] = $inv['document_type'];
                                $CSVDataRec['col3'] = $inv['document_no'];
                                $CSVDataRec['col4'] = $inv['sp_name'];
                                $CSVDataRec['col5'] =  round($inv['amount_ex_vat'],2);
                                $CSVDataRec['col6'] =  round($inv['rebate_price'],2);
                                $CSVDataRec['col7'] =  round($inv['amount_ex_vat'] - $inv['rebate_price'],2);

                                $response['CSVData'][] = $CSVDataRec;
                                if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                    $CSVRecCounter = 0;                       
                                    $this->createCSVFileAppend($response);
                                    $response['CSVData'] = array();
                                }                      
                                    $CSVRecCounter++;
                            }

                            $CSVDataRec = array();
                                $CSVDataRec['col1'] = '';
                                $CSVDataRec['col2'] = '';
                                $CSVDataRec['col3'] = '';
                                $CSVDataRec['col4'] = "Total Posted";
                                $CSVDataRec['col5'] =  round($Row['posted']['total_amount_ex_vat'],2);
                                $CSVDataRec['col6'] =  round($Row['posted']['total_rebate_price'],2);
                                $CSVDataRec['col7'] =  round(($Row['posted']['total_amount_ex_vat'] - $Row['posted']['total_rebate_price']),2);

                             $response['CSVData'][] = $CSVDataRec;
                                if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                $CSVRecCounter = 0;
                        
                                $this->createCSVFileAppend($response);
                                $response['CSVData'] = array();
                            }                       
                    
                            $CSVRecCounter++;  
                        }

                        // add an empty line
                        $CSVDataRec = array(); 
                        $response['CSVData'][] = $CSVDataRec;                       
                        if(count($Row['unposted']['invoices'])>0){
                            $CSVDataRec = array(); 
                            $CSVDataRec['col1'] = 'UnPosted';
                            $response['CSVData'][] = $CSVDataRec;
                            // add an empty line
                            $CSVDataRec = array(); 
                            $response['CSVData'][] = $CSVDataRec;
                            $CSVDataRec = array();
                            $CSVDataRec['col1'] = ($attr['date_type']==1) ? 'Posting Date' : 'Order Date';
                            $CSVDataRec['col2'] = 'Document Type';
                            $CSVDataRec['col3'] = 'Document No.';
                            $CSVDataRec['col4'] = 'Salesperson';
                            $CSVDataRec['col5'] = 'Sales';
                            $CSVDataRec['col6'] = 'Rebate';
                            $CSVDataRec['col7'] = 'Total';
                            $response['CSVData'][] = $CSVDataRec;
                            
                            foreach($Row['unposted']['invoices'] as $inv){
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = ($attr['date_type']==1) ? $inv['posting_date'] : $inv['order_date'];
                                $CSVDataRec['col2'] = $inv['document_type'];
                                $CSVDataRec['col3'] = $inv['document_no'];
                                $CSVDataRec['col4'] = $inv['sp_name'];
                                $CSVDataRec['col5'] =  round($inv['amount_ex_vat'],2);
                                $CSVDataRec['col6'] =  round($inv['rebate_price'],2);
                                $CSVDataRec['col7'] =  round($inv['amount_ex_vat'] - $inv['rebate_price'],2);

                                $response['CSVData'][] = $CSVDataRec;
                                if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                    $CSVRecCounter = 0;                       
                                    $this->createCSVFileAppend($response);
                                    $response['CSVData'] = array();
                                }                      
                                    $CSVRecCounter++;
                            }

                            $CSVDataRec = array();
                                $CSVDataRec['col1'] = '';
                                $CSVDataRec['col2'] = '';
                                $CSVDataRec['col3'] = '';
                                $CSVDataRec['col4'] = "Total UnPosted";
                                $CSVDataRec['col5'] =  round($Row['unposted']['total_amount_ex_vat'],2);
                                $CSVDataRec['col6'] =  round($Row['unposted']['total_rebate_price'],2);
                                $CSVDataRec['col7'] =  round(($Row['unposted']['total_amount_ex_vat'] - $Row['unposted']['total_rebate_price']),2);

                             $response['CSVData'][] = $CSVDataRec;
                                if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                $CSVRecCounter = 0;
                        
                                $this->createCSVFileAppend($response);
                                $response['CSVData'] = array();
                            }                       
                    
                            $CSVRecCounter++;  
                        }

                        $CSVDataRec = array();
                        $CSVDataRec['col1'] = 'Total For '.$Row['cust_name'];
                        $response['CSVData'][] = $CSVDataRec;  

                        $CSVDataRec = array();
                                $CSVDataRec['col1'] = '';
                                $CSVDataRec['col2'] = '';
                                $CSVDataRec['col3'] = 'Posted';
                                $CSVDataRec['col4'] = "UnPosted";
                                $CSVDataRec['col5'] = 'Total';
                                $CSVDataRec['col6'] = 'Rebate';
                                $CSVDataRec['col7'] =  'Net Total';

                             $response['CSVData'][] = $CSVDataRec;
                        
                        $total = (round($Row['posted']['total_amount_ex_vat'],2) + round($Row['unposted']['total_amount_ex_vat'],2));
                        $total_rebate = (round($Row['posted']['total_rebate_price'],2) + round($Row['unposted']['total_rebate_price'],2));

                        $CSVDataRec = array();
                                $CSVDataRec['col1'] = '';
                                $CSVDataRec['col2'] = '';
                                $CSVDataRec['col3'] = round($Row['posted']['total_amount_ex_vat'],2);
                                $CSVDataRec['col4'] = round($Row['unposted']['total_rebate_price'],2);
                                $CSVDataRec['col5'] =  round($total,2);
                                $CSVDataRec['col6'] =  round($total_rebate,2);
                                $CSVDataRec['col7'] =  round(($total - $total_rebate),2);

                             $response['CSVData'][] = $CSVDataRec;                        
                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                    }
                    // add an empty line
                    $CSVDataRec = array(); 
                    $response['CSVData'][] = $CSVDataRec;  

                    $CSVDataRec = array();
                    $CSVDataRec['col1'] = '';
                    $CSVDataRec['col2'] = '';
                    $CSVDataRec['col3'] = 'Posted';
                    $CSVDataRec['col4'] = "UnPosted";
                    $CSVDataRec['col5'] = 'Total';
                    $CSVDataRec['col6'] = 'Rebate';
                    $CSVDataRec['col7'] =  'Net Total';

                 $response['CSVData'][] = $CSVDataRec;

                 $gtotal = (round($response['response']['posted_grand_total_amount_ex_vat'],2) + round($response['response']['unposted_grand_total_amount_ex_vat'],2));
                 $gtotal_rebate = (round($response['response']['posted_grand_total_rebate_price'],2) + round($response['response']['unposted_grand_total_rebate_price'],2));

            $CSVDataRec = array();
                    $CSVDataRec['col1'] = '';
                    $CSVDataRec['col2'] = '';
                    $CSVDataRec['col3'] = round($response['response']['posted_grand_total_amount_ex_vat'],2);
                    $CSVDataRec['col4'] = round($response['response']['unposted_grand_total_amount_ex_vat'],2);
                    $CSVDataRec['col5'] =  round($gtotal,2);
                    $CSVDataRec['col6'] =  round($gtotal_rebate,2);
                    $CSVDataRec['col7'] =  round(($gtotal - $gtotal_rebate),2);

                 $response['CSVData'][] = $CSVDataRec;                        

                    $this->createCSVFileAppend($response);
                    $response['CSVData'] = array();

                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/salesFigureCustomer".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    // $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.'; 

            }else{
            $response['ack'] = 1;
            }
        } else {
            $response['ack'] = 0;
            $response['response'] = array();
        }

        //echo '<pre>';print_r($response);exit;

        return $response;
    }

    function itemSalesMarginalAnalysis($attr)
    {
        if (count($attr['customers']) > 0) {

            $customersarray = '';
            foreach ($attr['customers'] as $rec) {
                $customersarray .= $rec->id . ',';
            }
            $customersarray = rtrim($customersarray, ", ");
        }else {
            if(isset($attr['customer_bucket']) && $attr['customer_bucket'] == 1)
            {
                $sqla = "SELECT c.id 
                        FROM sr_crm_listing c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . " "; 
                /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

                //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
                $sqla .= " ORDER BY c.customer_code ASC";
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }

                        // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                        $customersarray .= $Rowa['id'] . ',';
                    }

                    $customersarray = substr($customersarray, 0, -1);
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }
            else
                $customersarray = '';
        }

        if (count($attr['salespersons']) > 0) {

            $salespersonsarray = '';
            foreach ($attr['salespersons'] as $rec) {
                $salespersonsarray .= $rec->id . ',';
            }
            $salespersonsarray = rtrim($salespersonsarray, ", ");
        }
        else
        {
            if(isset($attr['sale_person_bucket']) && $attr['sale_person_bucket'] == 1)
            {
                $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . "  OR
                emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id in (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
                emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : "";
                    $sqla = "  SELECT * FROM (SELECT emp.id,
                                                emp.user_code,
                                                emp.line_manager_name_id,
                                                CONCAT(first_name,' ',last_name) AS name,
                                                emp.user_email AS email,
                                                emp.job_title,
                                                (CASE WHEN emp.employee_type>0 THEN empType.name 
                                                    ELSE '' 
                                                    END )AS employee_type
                                            FROM employees AS emp,
                                                employee_type AS empType 
                                            WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND
                                                (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                                $where_line_manager                                        
                                            GROUP BY emp.id
                                            ORDER BY emp.user_code ASC) AS tbl  
                                where 1  " . $where_clause . " ";           
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }

                        $salespersonsarray .= $Rowa['id'] . ',';
                    }

                    $salespersonsarray = substr($salespersonsarray, 0, -1);
                }
            }
            else
                $salespersonsarray = "";
        }
        
        if ($attr['items']) {

            $itemsarray = '';
            foreach ($attr['items'] as $rec) {
                $itemsarray .= $rec->id . ',';
            }
            $itemsarray = rtrim($itemsarray, ", ");
        }else {

            $sqla = "SELECT prd.id 
					 FROM productcache prd
					 WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
            $sqla .= " ORDER BY prd.`product_code`";
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $itemsarray .= $Rowa['id'] . ',';
                }

                $itemsarray = substr($itemsarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }
        
        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);
        
        $Sql = "CALL srrep_itemSalesMarginalAnalysis(".$this->arrUser['company_id'].", ".$attr['type'].", '$dateFrom', '$dateTo', '$customersarray', '$salespersonsarray', '$itemsarray')";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        $response = array();
            
        if ($RS->RecordCount() > 0) {
            
            if($attr['type'] == 4) // 4 -> Item(s) Sales Margin Analysis Detail
            {
                $prev_item_id = '';

                $response['response']['grand_total_profitBeforeProm']  = 0;
                $response['response']['grand_total_profitAfterProm']  = 0;
                $response['response']['grand_total_qty']   = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_item_id != $Row['item_code'])
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        
                        
                        $result['profitBeforeProm'] = round($Row['profitBeforeProm'], 2);
                        $result['profitAfterProm'] = round($Row['profitAfterProm'], 2);
                        $result['cust_name'] = $Row['cust_name'];
                        $result['cust_code'] = $Row['cust_code'];
                        $result['sp_name'] = $Row['sp_name'];
                        $result['sp_code'] = $Row['sp_code'];
                        $result['qty'] = $Row['qty'];
                        $result['uom'] = $Row['uom'];
                        $result['unit_price'] = round($Row['unit_price'], 2);
                        
                        $prev_item_id = $Row['item_code'];
                        $response['response'][$Row['item_code']]['item_code'] = $Row['item_code'];
                        $response['response'][$Row['item_code']]['item_name'] = $Row['item_name'];
                        
                        $response['response'][$Row['item_code']]['total_profitBeforeProm'] = round($Row['profitBeforeProm'], 2);
                        $response['response'][$Row['item_code']]['total_profitAfterProm'] = round($Row['profitAfterProm'], 2);
                        $response['response'][$Row['item_code']]['total_qty'] = $Row['qty'];
                        $response['response'][$Row['item_code']]['_uom'] = $Row['uom'];

                        $response['response']['grand_total_profitBeforeProm'] += round($Row['profitBeforeProm'], 2);
                        $response['response']['grand_total_profitAfterProm'] += round($Row['profitAfterProm'], 2);
                        $response['response']['grand_total_qty'] += round($Row['qty'], 2);

                        $response['response'][$Row['item_code']]['invoices'][] = $result;
                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        $result['cust_name'] = $Row['cust_name'];
                        $result['cust_code'] = $Row['cust_code'];
                        $result['sp_name'] = $Row['sp_name'];
                        $result['sp_code'] = $Row['sp_code'];
                        
                        
                        $result['profitBeforeProm'] = round($Row['profitBeforeProm'], 2);
                        $result['profitAfterProm'] = round($Row['profitAfterProm'], 2);
                        $result['qty'] = $Row['qty'];
                        $result['uom'] = $Row['uom'];
                        $result['unit_price'] = round($Row['unit_price'], 2);
                        
                        $response['response'][$Row['item_code']]['total_profitBeforeProm'] += round($Row['profitBeforeProm'], 2);
                        $response['response'][$Row['item_code']]['total_profitAfterProm'] += round($Row['profitAfterProm'], 2);
                        $response['response'][$Row['item_code']]['total_qty'] += $Row['qty'];

                        $response['response']['grand_total_profitBeforeProm'] += round($Row['profitBeforeProm'], 2);
                        $response['response']['grand_total_profitAfterProm'] += round($Row['profitAfterProm'], 2);
                        $response['response']['grand_total_qty'] += round($Row['qty'], 2);

                        $response['response'][$Row['item_code']]['invoices'][] = $result;
                    }                    
                }
            }
            else if($attr['type'] == 12) // 12 -> Item(s) Sales Margin Analysis summary
            {
                /* $response['response']['grand_total_profitBeforeProm']  = 0;
                $response['response']['grand_total_profitAfterProm']  = 0;
                $response['response']['grand_total_qty']   = 0; */

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    /* $response['response']['grand_total_profitBeforeProm'] += round($Row['profitBeforeProm'], 2);
                    $response['response']['grand_total_profitAfterProm'] += round($Row['profitAfterProm'], 2);
                    $response['response']['grand_total_qty'] += round($Row['qty'], 2); */

                    $response['response'][] = $Row;
                 }
            }
            
            $response['ack'] = 1;
        } else {
            $response['ack'] = 0;
            $response['response'] = array();
        }

        //echo '<pre>';print_r($response);exit;

        return $response;
    }

    function salesFigureByGL($attr)
    {
        if (count($attr['customers']) > 0) {

            $customersarray = '';
            foreach ($attr['customers'] as $rec) {
                $customersarray .= $rec->id . ',';
            }
            $customersarray = rtrim($customersarray, ", ");
        }else {
            if(isset($attr['customer_bucket']) && $attr['customer_bucket'] == 1)
            {
                $sqla = "SELECT c.id 
                        FROM sr_crm_listing c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . " "; 
                /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

                //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
                $sqla .= " ORDER BY c.customer_code ASC";
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }

                        // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                        $customersarray .= $Rowa['id'] . ',';
                    }

                    $customersarray = substr($customersarray, 0, -1);
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }
            else
                $customersarray = '';
        }

        if (count($attr['salespersons']) > 0) {

            $salespersonsarray = '';
            foreach ($attr['salespersons'] as $rec) {
                $salespersonsarray .= $rec->id . ',';
            }
            $salespersonsarray = rtrim($salespersonsarray, ", ");
        }
        else
        {
            if(isset($attr['sale_person_bucket']) && $attr['sale_person_bucket'] == 1)
            {
                $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . "  OR
                emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id in (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
                emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : "";
                    $sqla = "  SELECT * FROM (SELECT emp.id,
                                                emp.user_code,
                                                emp.line_manager_name_id,
                                                CONCAT(first_name,' ',last_name) AS name,
                                                emp.user_email AS email,
                                                emp.job_title,
                                                (CASE WHEN emp.employee_type>0 THEN empType.name 
                                                    ELSE '' 
                                                    END )AS employee_type
                                            FROM employees AS emp,
                                                employee_type AS empType 
                                            WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND
                                                (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                                $where_line_manager                                        
                                            GROUP BY emp.id
                                            ORDER BY emp.user_code ASC) AS tbl  
                                where 1  " . $where_clause . " ";           
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }

                        $salespersonsarray .= $Rowa['id'] . ',';
                    }

                    $salespersonsarray = substr($salespersonsarray, 0, -1);
                }
            }
            else
                $salespersonsarray = "";
        }

        $glsarray = '';
        $customersarray = '';
        $salespersonsarray = '';
        
        if ($attr['gls']) {
            foreach ($attr['gls'] as $rec) {
                $glsarray .= $rec->id . ',';
            }
            $glsarray = rtrim($glsarray, ", ");
        }
        
        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);
        
        $Sql = "CALL srrep_salesFigureByGL(".$this->arrUser['company_id'].", ".$attr['type'].", '$dateFrom', '$dateTo', '$customersarray', '$salespersonsarray', '$glsarray')";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        $response = array();
            
        if ($RS->RecordCount() > 0) {
            
            if($attr['type'] == 4) // 4 ->  FigureByGL Detail
            {
                // $prev_sp_id = 0;
                $prev_gl_id = 0;

                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    // if($prev_sp_id != $Row['sp_id'])
                    if($prev_gl_id != $Row['gl_id'])
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];

                        // $result['gl_code'] = $Row['gl_code'];
                        // $result['gl_name'] = $Row['gl_name'];

                        // $result['empCode'] = $Row['sp_code'];
                        $result['saleperson'] = $Row['sp_name'];

                        $result['entry_no'] = $Row['entry_no'];
                        $result['cust_code'] = $Row['cust_code'];
                        $result['cust_name'] = $Row['cust_name'];
                        $result['gl_code'] = $Row['gl_code'];
                        $result['gl_name'] = $Row['gl_name'];
                        $result['amount'] =  round(($Row['debit_amount'] - $Row['credit_amount']),2);
                        
                        // $prev_sp_id = $Row['sp_id'];
                        $prev_gl_id = $Row['gl_id'];
                        // $response['response'][$Row['sp_id']]['empCode'] = $Row['sp_code'];
                        // $response['response'][$Row['sp_id']]['saleperson'] = $Row['sp_name'];

                        $response['response'][$Row['gl_id']]['gl_code'] = $Row['gl_code'];
                        $response['response'][$Row['gl_id']]['gl_name'] = $Row['gl_display_name'];
                        
                        $response['response'][$Row['gl_id']][$Row['documentType']]['total_amount'] += $result['amount'];
                        $response['response'][$Row['gl_id']][$Row['documentType']]['invoices'][] = $result;
                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        $result['document_no'] = $Row['invoice_code'];
                        $result['document_type'] = $Row['doc_type'];
                        // $result['gl_code'] = $Row['gl_code'];
                        // $result['gl_name'] = $Row['gl_name'];
                        // $result['empCode'] = $Row['sp_code'];
                        $result['saleperson'] = $Row['sp_name'];

                        $result['entry_no'] = $Row['entry_no'];
                        $result['cust_code'] = $Row['cust_code'];
                        $result['cust_name'] = $Row['cust_name'];
                        $result['gl_code'] = $Row['gl_code'];
                        $result['gl_name'] = $Row['gl_name'];
                        $result['amount'] =  round(($Row['debit_amount'] - $Row['credit_amount']),2);
                        
                        $response['response'][$Row['gl_id']][$Row['documentType']]['total_amount'] += $result['amount'];
                        $response['response'][$Row['gl_id']][$Row['documentType']]['invoices'][] = $result;
                    }                   
                }
                 // total sale for sale person (added by Akhtar Nawaz)
                 /* $records = $response['response']['records'];
                 $total_sales = array_column($records, 'total_sales');
                 //echo '<pre>';print_r($total_sales);exit;
                 array_multisort($total_sales, SORT_DESC, $records);
                 $response['response']['records'] = $records; */
            }
            else if($attr['type'] == 12) // 12 -> FigureByGL summary
            {

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $response['response'][] = $Row;
                 }
            }
            
            $response['ack'] = 1;
        } else {
            $response['ack'] = 0;
            $response['response'] = array();
        }

        //echo '<pre>';print_r($response);exit;

        return $response;
    }

    function customer_avg_payment_days($attr)
    {
        if ($attr['customers']) {

            $customersarray = '';
            foreach ($attr['customers'] as $rec) {
                $customersarray .= $rec->id . ',';
            }
            $customersarray = rtrim($customersarray, ", ");
        }else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 
            
            /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $customersarray .= $Rowa['id'] . ',';
                }

                $customersarray = substr($customersarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        
        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        $SQL = "CALL srrep_CustomerAveragePaymentDays(". $this->arrUser['company_id'] . ", '". $dateFrom  . "', '". $dateTo  . "', '". $customersarray. "')";
        // print_r($SQL);exit;
        $RS = $this->objsetup->CSI($SQL);
        
       
        $responseObj = array();
        $response = array();
        $isConfigSet = 0;

        if ($RS->RecordCount() > 0) {
                // error_reporting(E_ALL);
                    while ($Row = $RS->FetchRow()) {
                        $row = array();
                    $row['id'] = $Row['id'];
                    $row['Rank'] = $Row['Rank'];
                    $row['RecordType'] = $Row['RecordType'];
                    $row['average_days'] = $Row['average_days'];
                    $row['customer_code'] = $Row['customer_code'];
                    $row['customer_id'] = $Row['customer_id'];
                    $row['customer_name'] = $Row['customer_name'];
                    $response['response'][] = $row;
                    }                  
                    $response['ack'] = 1;
                    $response['error'] = NULL;
        
            }
            else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }


                return  $response;
    }

    function supplier_avg_payment_days($attr)
    {
        if ($attr['suppliers']) {

            $suppliersarray = '';
            foreach ($attr['suppliers'] as $rec) {
                $suppliersarray .= $rec->id . ',';
            }
            $suppliersarray = rtrim($suppliersarray, ", ");
        }else {

            $sqla = "SELECT s.id 
            FROM sr_srm_general_sel s
            WHERE s.type IN (2,3) AND 
                  s.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 24);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $suppliersarray .= $Rowa['id'] . ',';
                }

                $suppliersarray = substr($suppliersarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        
        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        $SQL = "CALL srrep_SupplierAveragePaymentDays(". $this->arrUser['company_id'] . ", '". $dateFrom  . "', '". $dateTo  . "', '". $suppliersarray. "')";
        // print_r($SQL);exit;
        $RS = $this->objsetup->CSI($SQL);
        
       
        $responseObj = array();
        $response = array();
        $isConfigSet = 0;

        if ($RS->RecordCount() > 0) {
                // error_reporting(E_ALL);
                    while ($Row = $RS->FetchRow()) {
                        $row = array();
                    $row['id'] = $Row['id'];
                    $row['Rank'] = $Row['Rank'];
                    $row['RecordType'] = $Row['RecordType'];
                    $row['average_days'] = $Row['average_days'];
                    $row['supplier_code'] = $Row['supplier_code'];
                    $row['supplier_id'] = $Row['supplier_id'];
                    $row['supplier_name'] = $Row['supplier_name'];
                    $response['response'][] = $row;
                    }                  
                    $response['ack'] = 1;
                    $response['error'] = NULL;
        
            }
            else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }


                return  $response;
    }

    function get_ec_sales_list($attr)
    {
        $dateFrom = $this->objGeneral->convertStartDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        $Sql = "CALL srrep_EC_salesList('" . $this->arrUser['company_id'] . "', '" . $this->arrUser['id'] . "', '" . $this->arrUser['user_type'] . "', '" . $dateFrom. "','" . $dateTo. "','" . $EUCountriesArray. "')";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        $prev_cust_id = 0;
        $response = array();
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                
                $result = array();

                $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $result['document_no'] = $Row['invoice_code'];
                $result['document_type'] = $Row['doc_type'];
                $result['country_code'] = $Row['country_code'];
                $result['cust_name'] = $Row['cust_name'];
                $result['cust_code'] = $Row['cust_code'];
                $result['vat_number'] = $Row['vat_number'];
                
                $result['ec_goods_1'] = round($Row['ec_goods_1'],2);
                $result['ec_goods_2'] = round($Row['ec_goods_2'],2);
                $result['ec_goods_3'] = round($Row['ec_goods_3'],2);
                $result['total_ec_goods'] = round($Row['ec_goods_1'],2) + round($Row['ec_goods_2'],2) + round($Row['ec_goods_3'],2);

                $response['response'][$Row['cust_id']]['invoices'][] = $result;
                $response['response'][$Row['cust_id']]['t_ec_goods_1'] += round($Row['ec_goods_1'],2);
                $response['response'][$Row['cust_id']]['t_ec_goods_2'] += round($Row['ec_goods_2'],2);
                $response['response'][$Row['cust_id']]['t_ec_goods_3'] += round($Row['ec_goods_3'],2);
                $response['response'][$Row['cust_id']]['t_total_ec_goods'] += round($result['total_ec_goods'],2);
                $response['total'] += round($result['total_ec_goods'],2);
                $response['total_ec_goods_1'] += $result['ec_goods_1'];
                $response['total_ec_goods_2'] += $result['ec_goods_2'];
                $response['total_ec_goods_3'] += $result['ec_goods_3'];
            }


            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    }

    function get_item_purchases_by_supplier($attr)
    {
        if ($attr['suppliers']) {

            $suppliersarray = '';
            foreach ($attr['suppliers'] as $rec) {
                $suppliersarray .= $rec->id . ',';
            }
            $suppliersarray = rtrim($suppliersarray, ", ");
        }
        else {

            $sqla = "SELECT s.id 
                    FROM sr_srm_general_sel s
                    WHERE s.type IN (2,3) AND 
                            s.company_id=" . $this->arrUser['company_id'] . " ";

           //$sqla = $this->objsetup->whereClauseAppender($sqla, 24);
            $sqla .= " ORDER BY s.supplier_code";
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $suppliersarray .= $Rowa['id'] . ',';
                }

                $suppliersarray = substr($suppliersarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        if ($attr['gls']) {

            $glsarray = '';
            foreach ($attr['gls'] as $rec) {
                $glsarray .= $rec->id . ',';
            }
            $glsarray = rtrim($glsarray, ", ");
        }
        
        if ($attr['items']) {

            $itemsarray = '';
            foreach ($attr['items'] as $rec) {
                $itemsarray .= $rec->id . ',';
            }
            $itemsarray = rtrim($itemsarray, ", ");
        }
        else {

            if(!(strlen($glsarray) > 0))
            {
                $sqla = "SELECT prd.id 
                        FROM productcache prd
                        WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

                //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }

                        $itemsarray .= $Rowa['id'] . ',';
                    }

                    $itemsarray = substr($itemsarray, 0, -1);
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }
        }
        

        $dateFrom = $this->objGeneral->convertStartDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        $reportType = $attr['_reportType']; 
        $reportTypeID = (isset($attr['report_type']) && $attr['report_type']!='')?$attr['report_type']:0;       

        $Sql = "CALL srrep_PurchaseSplitBySupplier('" . $this->arrUser['company_id'] . "',
                                                    '" . $dateFrom. "',
                                                    '" . $dateTo. "',
                                                    '" . $itemsarray. "',
                                                    '" . $glsarray. "',
                                                    '" . $suppliersarray. "',
                                                    $reportTypeID)";

        // echo $Sql;exit; 
        $RS = $this->objsetup->CSI($Sql);
        $prev_prod_id = '';
        $response = array(); 
        if ($RS->RecordCount() > 0) {

            if($reportType == 'xlsx'){

                $CSVDataTitle = array();
                $CSVDataTitle['item_number'] = $this->arrUser['companyName'];
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $CSVDataTitle['item_number'] = 'Item Purchases By Supplier(s)';
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $CSVDataTitle['item_number'] = 'From '.$attr['dateFrom'].' to '.$attr['dateTo'];
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $CSVDataTitle['item_number'] = 'Item No.';
                $CSVDataTitle['description'] = 'Description';
                if($reportTypeID == 1) $CSVDataTitle['orderNo'] = 'Invoice No.';
                $CSVDataTitle['supplierNo'] = 'Supplier No.';
                $CSVDataTitle['supplierName'] = 'Supplier Name';
                $CSVDataTitle['uom'] = 'U.O.M';
                $CSVDataTitle['qty'] = 'Quantity';
                $CSVDataTitle['amount'] = 'Amount (LCY)';
                $CSVDataTitle['amountInclVAT'] = 'Amount Incl. VAT (LCY)';

                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $response['CSVData'][] = $CSVDataTitle;

                $response['filename']=  APP_PATH . "Reports/itemPurhcasesBySupplier".$this->arrUser['company_id'].".csv";

                $this->createCSVfile2($response);

                $CSVRecCounter = 0;

                $response['CSVData'] = array();


                while ($Row = $RS->FetchRow()) {
                
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    
                    $CSVDataRec = array();
                    
                    $CSVDataRec['item_number'] = $Row['product_code'];
                    $CSVDataRec['description'] =  $Row['product_name'];
                    if($reportTypeID == 1) 
                        $CSVDataTitle['orderNo'] = $Row['invoice_code'];
                    $CSVDataRec['supplierNo'] = $Row['supp_code'];
                    $CSVDataRec['supplierName'] = $Row['supp_name'];
                    $CSVDataRec['uom'] = $Row['uom'];
                    $CSVDataRec['qty'] = $Row['qty'];		
                    $CSVDataRec['amount'] =  $Row['amount_ex_vat'];
                    $CSVDataRec['amountInclVAT'] =  $Row['amount_in_vat'];

                    $response['CSVData'][] = $CSVDataRec;
                    

                    if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }

                    $CSVRecCounter++;                        
                }

                if($CSVRecCounter>0){
                    $CSVRecCounter = 0;

                    $this->createCSVFileAppend($response);
                    $response['CSVData'] = array();
                }

                

                $response['ack'] = 1;
                $response['filename'] = WEB_PATH . "/Reports/itemPurhcasesBySupplier".$this->arrUser['company_id'].".csv";
                $response['response'] = array();
                $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.'; 

                /* while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_prod_id != $Row['product_id'])
                    {
                        $result = array();

                        $result['amount_in_vat'] = $Row['amount_in_vat'];
                        $result['amount_ex_vat'] = $Row['amount_ex_vat'];
                        $result['supp_code'] = $Row['supp_code'];
                        $result['supp_name'] = $Row['supp_name'];
                        $result['uom'] = $Row['uom'];
                        $result['qty'] = $Row['qty'];
                        
                        $prev_prod_id = $Row['product_id'];
                        $response['response'][$prev_prod_id]['product_name'] = $Row['product_name'];
                        $response['response'][$prev_prod_id]['product_code'] = $Row['product_code'];
                        
                        $response['response'][$Row['product_id']]['total_amount_in_vat'] += $Row['amount_in_vat'];
                        $response['response'][$Row['product_id']]['total_amount_ex_vat'] += $Row['amount_ex_vat'];
                        $response['response'][$Row['product_id']]['total_qty'] += $Row['qty'];
                        $response['response'][$Row['product_id']]['invoices'][] = $result;
                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                        
                        $result['supp_code'] = $Row['supp_code'];
                        $result['supp_name'] = $Row['supp_name'];
                        $result['uom'] = $Row['uom'];
                        $result['qty'] = $Row['qty'];

                        $result['amount_in_vat'] = $Row['amount_in_vat'];
                        $result['amount_ex_vat'] = $Row['amount_ex_vat'];

                        $response['response'][$Row['product_id']]['total_amount_in_vat'] += $Row['amount_in_vat'];
                        $response['response'][$Row['product_id']]['total_amount_ex_vat'] += $Row['amount_ex_vat'];
                        $response['response'][$Row['product_id']]['total_qty'] += $Row['qty'];
                        $response['response'][$Row['product_id']]['invoices'][] = $result;
                    }                    
                } */
            }
            else{

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_prod_id != $Row['product_code'])
                    {
                        $result = array();

                        $result['amount_in_vat'] = $Row['amount_in_vat'];
                        $result['amount_ex_vat'] = $Row['amount_ex_vat'];
                        $result['invoice_code'] = $Row['invoice_code'];
                        $result['supp_code'] = $Row['supp_code'];
                        $result['supp_name'] = $Row['supp_name'];
                        $result['uom'] = $Row['uom'];
                        $result['qty'] = $Row['qty'];
                        
                        $prev_prod_id = $Row['product_code'];
                        $response['response'][$prev_prod_id]['product_name'] = $Row['product_name'];
                        $response['response'][$prev_prod_id]['product_code'] = $Row['product_code'];
                        
                        $response['response'][$Row['product_code']]['total_amount_in_vat'] += $Row['amount_in_vat'];
                        $response['response'][$Row['product_code']]['total_amount_ex_vat'] += $Row['amount_ex_vat'];
                        $response['response'][$Row['product_code']]['total_qty'] += $Row['qty'];
                        $response['response'][$Row['product_code']]['invoices'][] = $result;
                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);                        
                        
                        $result['invoice_code'] = $Row['invoice_code'];
                        $result['supp_code'] = $Row['supp_code'];
                        $result['supp_name'] = $Row['supp_name'];
                        $result['uom'] = $Row['uom'];
                        $result['qty'] = $Row['qty'];

                        $result['amount_in_vat'] = $Row['amount_in_vat'];
                        $result['amount_ex_vat'] = $Row['amount_ex_vat'];

                        $response['response'][$Row['product_code']]['total_amount_in_vat'] += $Row['amount_in_vat'];
                        $response['response'][$Row['product_code']]['total_amount_ex_vat'] += $Row['amount_ex_vat'];
                        $response['response'][$Row['product_code']]['total_qty'] += $Row['qty'];
                        $response['response'][$Row['product_code']]['invoices'][] = $result;
                    }                    
                }
                // response ordering (added by Akhtar Nawaz)
                $records = $response['response'];
                $order_by_spec_col = array_column($records, 'product_code');
                array_multisort($order_by_spec_col, SORT_ASC, $records);
                $response['response'] = $records;
            }
            $response['ack'] = 1;
        }
        else
        {
            $response['ack'] = 0;
        }

        return $response;
    }

    function salespersonCommissionReport($attr) {
 
        $whereClause = '';

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
        
        //  if ($attr['salespersons']) {
            
        // } 
        $salespersonsArray = false;
        // echo '<pre>';print_r($attr['salepersons']);

        if (count($attr['salepersons']) > 0) {          

            foreach ($attr['salepersons'] as $rec) {
                if($rec->id > 0)
                    $salespersonsArray .= $rec->id . ',';
            }
            $salespersonsArray = substr($salespersonsArray, 0, -1);

        } 
        else 
        {
            $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . "  OR
            emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
            emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : "";
            
            $sqla = "  SELECT * FROM (SELECT emp.id,
                                        emp.user_code,
                                        emp.line_manager_name_id,
                                        CONCAT(first_name,' ',last_name) AS name,
                                        emp.user_email AS email,
                                        emp.job_title,
                                        (CASE WHEN emp.employee_type>0 THEN empType.name 
                                            ELSE '' 
                                            END )AS employee_type
                                    FROM employees AS emp,
                                        employee_type AS empType 
                                    WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND emp.status = 1 AND
                                        (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                        $where_line_manager                                        
                                    GROUP BY emp.id
                                    ORDER BY emp.user_code DESC) AS tbl  
                        where 1  " . $where_clause . " ";
            
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    $salespersonsArray .= $Rowa['id'] . ',';
                }
                $salespersonsArray = substr($salespersonsArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $reportOrderBy = (isset($attr['reportOrderBy']) && $attr['reportOrderBy']!='')?$attr['reportOrderBy']:0;        
        // $reporttype = (isset($attr['reporttype']) && $attr['reporttype']!='')?$attr['reporttype']:0;  
        $reporttype = $attr['reporttype'];     

        $Sql = "CALL srrep_SalespersonCommissionReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$salespersonsArray."','".$reporttype."','".$reportOrderBy."')";

        // echo $Sql; exit; //SalespersonActvityReport 
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {

            if($reporttype == 'summary'){
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key)) {
                            unset($Row[$key]);
                        }
                        if($key=='salepersonID'){
                            unset($Row[$key]);
                        }
                    }
                    $response['response'][] = $Row;                   
                }
                 // total sale for sale person (added by Akhtar Nawaz)
                 $records = $response['response'];
                 $total_sales = array_column($records, 'netTotalConverted');
                 //echo '<pre>';print_r($total_sales);exit;
                 array_multisort($total_sales, SORT_DESC, $records);
                 $response['response'] = $records;
            }
            elseif($reporttype == 'detail'){           

                $prev_sp_id = 0;

                // $response['response']['posted_grand_total_amount_in_vat']  = 0;
                $response['response']['posted_grand_total_amount_ex_vat']  = 0;
                $response['response']['posted_grand_total_commission']   = 0;

                // $response['response']['unposted_grand_total_amount_in_vat']  = 0;
                $response['response']['unposted_grand_total_amount_ex_vat']  = 0;
                $response['response']['unposted_grand_total_commission']   = 0;


                // $response['response']['grand_total_amount_in_vat']  = 0;
                $response['response']['grand_total_amount_ex_vat']  = 0;
                $response['response']['grand_total_commission']   = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_sp_id != $Row['salepersonID'])
                    {
                        $result = array();
                        $response['response']['records'][$Row['salepersonID']]['total_sales'] = 0;
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['postingDate']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['orderDate']);
                        $result['document_no'] = $Row['order_code'];
                        $result['document_type'] = $Row['RecordType'];
                        // $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['netTotalConverted'], 2);
                        $result['commission'] = round($Row['commission'], 2);
                        $result['salepersonCommissionRate'] = round($Row['salepersonCommissionRate'], 2);
                        // $result['cust_name'] = $Row['cust_name'];
                        // $result['cust_code'] = $Row['cust_code'];
                        
                        $prev_sp_id = $Row['salepersonID'];
                        $response['response']['records'][$Row['salepersonID']]['empCode'] = $Row['empCode'];
                        $response['response']['records'][$Row['salepersonID']]['saleperson'] = $Row['saleperson'];
                        $response['response']['records'][$Row['salepersonID']]['salepersonCommissionRate'] = $Row['salepersonCommissionRate'];
                        
                        // $response['response']['records'][$Row['salepersonID']][$Row['posting_type']]['total_amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $response['response']['records'][$Row['salepersonID']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['netTotalConverted'], 2);
                        $response['response']['records'][$Row['salepersonID']][$Row['posting_type']]['total_commission'] += $Row['commission'];//round($Row['commission'], 2);
                        $response['response']['records'][$Row['salepersonID']][$Row['posting_type']]['invoices'][] = $result;

                        // $response['response'][$Row['posting_type'].'_grand_total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['netTotalConverted'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_commission']  += $Row['commission'];//round($Row['commission'], 2);

                        // $response['response']['grand_total_amount_in_vat']  += round($Row['amount_in_vat'], 2);
                        $response['response']['grand_total_amount_ex_vat']  += round($Row['netTotalConverted'], 2);
                        $response['response']['grand_total_commission']   += $Row['commission'];//round($Row['commission'], 2);
                       // echo $Row['salepersonID'];exit;
                       $response['response']['records'][$Row['salepersonID']]['total_sales'] += round($Row['netTotalConverted'], 2);
                    }
                    else
                    {
                       //echo $response['response']['records'][$Row['salepersonID']]['total_sales'];exit;
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['postingDate']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['orderDate']);
                        $result['document_no'] = $Row['order_code'];
                        $result['document_type'] = $Row['RecordType'];
                        // $result['cust_name'] = $Row['cust_name'];
                        // $result['cust_code'] = $Row['cust_code'];
                        // $result['amount_in_vat'] = round($Row['amount_in_vat'], 2);
                        $result['amount_ex_vat'] = round($Row['netTotalConverted'], 2);
                        $result['commission'] = round($Row['commission'], 2);
                        $result['salepersonCommissionRate'] = round($Row['salepersonCommissionRate'], 2);

                        // $response['response']['records'][$Row['sp_id']][$Row['posting_type']]['total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response']['records'][$Row['salepersonID']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['netTotalConverted'], 2);
                        $response['response']['records'][$Row['salepersonID']][$Row['posting_type']]['total_commission']  += $Row['commission'];//round($Row['commission'], 2);
                        $response['response']['records'][$Row['salepersonID']][$Row['posting_type']]['invoices'][] = $result;

                        // $response['response'][$Row['posting_type'].'_grand_total_amount_in_vat'] += round($Row['amount_in_vat'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['netTotalConverted'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_commission']  += $Row['commission'];//round($Row['commission'], 2);

                        // $response['response']['grand_total_amount_in_vat']  += round($Row['amount_in_vat'], 2);
                        $response['response']['grand_total_amount_ex_vat']  += round($Row['netTotalConverted'], 2);
                        $response['response']['grand_total_commission']   += $Row['commission'];//round($Row['commission'], 2);
                        
                        $response['response']['records'][$Row['salepersonID']]['total_sales'] += round($Row['netTotalConverted'], 2);
                    }                   
                }
                 // total sale for sale person (added by Akhtar Nawaz)
                 $records = $response['response']['records'];
                 $total_sales = array_column($records, 'total_sales');
                 //echo '<pre>';print_r($total_sales);exit;
                 array_multisort($total_sales, SORT_DESC, $records);
                 $response['response']['records'] = $records;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    } 

    function salespersonSystemLoginReport($attr) {
 
        $whereClause = '';

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
        
        //  if ($attr['salespersons']) {
            
        // } 
        $salespersonsArray = false;
        // echo '<pre>';print_r($attr['salepersons']);

        if (count($attr['salepersons']) > 0) {          

            foreach ($attr['salepersons'] as $rec) {
                if($rec->id > 0)
                    $salespersonsArray .= $rec->id . ',';
            }
            $salespersonsArray = substr($salespersonsArray, 0, -1);

        } 
        else 
        {
            $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . "  OR
            emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
            emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : "";
            
            $sqla = "  SELECT * FROM (SELECT emp.id,
                                        emp.user_code,
                                        emp.line_manager_name_id,
                                        CONCAT(first_name,' ',last_name) AS name,
                                        emp.user_email AS email,
                                        emp.job_title,
                                        (CASE WHEN emp.employee_type>0 THEN empType.name 
                                            ELSE '' 
                                            END )AS employee_type
                                    FROM employees AS emp,
                                        employee_type AS empType 
                                    WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND emp.status = 1 AND
                                        (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                        $where_line_manager                                        
                                    GROUP BY emp.id
                                    ORDER BY emp.user_code DESC) AS tbl  
                        where 1  " . $where_clause . " ";
            
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    $salespersonsArray .= $Rowa['id'] . ',';
                }
                $salespersonsArray = substr($salespersonsArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        } 

        $Sql = "SELECT emp.id as salepersonID, emp.name AS saleperson, emp.user_code as empCode,ea.login_time, ea.logout_time
        FROM sr_employee_sel emp
        LEFT JOIN employee_activity ea ON emp.id=ea.emp_id
        WHERE emp.company_id=" . $this->arrUser['company_id'] . "
        AND emp.status = 1
        AND emp.id IN (".$salespersonsArray.") 
        AND (( DATE(FROM_UNIXTIME(ea.login_time)) >= DATE(FROM_UNIXTIME(". $dateFrom."))) AND (DATE(FROM_UNIXTIME(ea.logout_time)) <= DATE(FROM_UNIXTIME(".$dateTo."))))      
        
        ORDER BY emp.user_code ASC";// AND ( DATE(FROM_UNIXTIME(ea.login_time)) BETWEEN DATE(FROM_UNIXTIME(". $dateFrom.")) AND DATE(FROM_UNIXTIME(".$dateTo."))) || DATE(FROM_UNIXTIME(ea.logout_time)) BETWEEN DATE(FROM_UNIXTIME(". $dateFrom.")) AND DATE(FROM_UNIXTIME(".$dateTo."))

        // echo $Sql; exit; //AND ea.login_time BETWEEN ". $dateFrom." AND ".$dateTo."
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $prev_sp_id=0;
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                if($prev_sp_id != $Row['salepersonID'])
                {
                    $result = array();
                    $result['login_time'] = $this->objGeneral->convert_unix_into_datetime($Row['login_time']);
                    $result['logout_time'] = ($Row['logout_time']>0) ? $this->objGeneral->convert_unix_into_datetime($Row['logout_time']):$Row['logout_time'];

                    $dateDiff = ($Row['logout_time']>0) ?intval(($Row['logout_time']-$Row['login_time'])/60) : 0;
                    $hours = intval($dateDiff/60);
                    $minutes = $dateDiff%60;
                    $result['total'] = $hours.' Hours '.($minutes>0) ? $minutes.' Min'  : '';                    
                    
                    $prev_sp_id = $Row['salepersonID'];
                    $response['response']['records'][$Row['salepersonID']]['empCode'] = $Row['empCode'];
                    $response['response']['records'][$Row['salepersonID']]['saleperson'] = $Row['saleperson'];
                    
                    $response['response']['records'][$Row['salepersonID']]['total_hours'] += $minutes;
                    $response['response']['records'][$Row['salepersonID']]['activity'][] = $result;

                }
                else
                {
                    $result = array();
                    $result['login_time'] = $this->objGeneral->convert_unix_into_datetime($Row['login_time']);
                    $result['logout_time'] = ($Row['logout_time']>0) ? $this->objGeneral->convert_unix_into_datetime($Row['logout_time']):$Row['logout_time'];

                    $dateDiff = ($Row['logout_time']>0) ?intval(($Row['logout_time']-$Row['login_time'])/60) : 0;
                    $hours = intval($dateDiff/60);
                    $minutes = $dateDiff%60;
                    $result['total'] = $hours.' Hours '.($minutes>0) ? $minutes.' Min'  : '';                
                    
                    $response['response']['records'][$Row['salepersonID']]['total_hours'] += $minutes;
                    $response['response']['records'][$Row['salepersonID']]['activity'][] = $result;
                }                   
            }
                 // total sale for sale person (added by Akhtar Nawaz)
                 $records = $response['response']['records'];
                 $total_sales = array_column($records, 'empCode');
                 //echo '<pre>';print_r($total_sales);exit;
                 array_multisort($total_sales, SORT_ASC, $records);
                 $response['response']['records'] = $records;

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    }

    function customerRebateReport($attr) {
 
        $whereClause = '';

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);        
        
        $cutomerarray = '';
        $cutomerarray2 = '';

        if ($attr['customers']) {

            foreach ($attr['customers'] as $rec) {
                $cutomerarray .= $rec->id . ',';
            }

            $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
            $cutomerarray2 = substr($cutomerarray, 0, -1);

        } else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 
            /* $sqla = "SELECT  c.id
                     FROM crm c
                     WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    $cutomerarray .= $Rowa['id'] . ',';
                }

                $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
                $cutomerarray2 = substr($cutomerarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $rebateTypeID = (isset($attr['rebateTypeID']) && $attr['rebateTypeID']!='')?$attr['rebateTypeID']:0;         
        $reporttype = $attr['reporttype'];     

        $Sql = "CALL srrep_customerRebateReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$cutomerarray2."','".$reporttype."','".$rebateTypeID."')";

        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {

            if($reporttype == 'summary'){
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key)) {
                            unset($Row[$key]);
                        }
                    }
                    $Row['rebStartDate'] = $this->objGeneral->convert_unix_into_date($Row['rebStartDate']);
                    $Row['rebEndDate'] = $this->objGeneral->convert_unix_into_date($Row['rebEndDate']);

                    $response['response'][] = $Row;                   
                }
            }
            elseif($reporttype == 'detail'){           

                $prev_sp_id = 0;

                $response['response']['saleInvoice_grand_total_amount_ex_vat'] = 0;
                $response['response']['saleInvoice_grand_total_commission'] = 0;
                
                $response['response']['creditNote_grand_total_amount_ex_vat'] = 0;
                $response['response']['creditNote_grand_total_commission'] = 0;
                
                $response['response']['purchaseInvoice_grand_total_amount_ex_vat'] = 0;
                $response['response']['purchaseInvoice_grand_total_commission'] = 0;
                
                $response['response']['grand_total_amount_ex_vat'] = 0;
                $response['response']['grand_total_commission'] = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_sp_id != $Row['custID'])
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['postingDate']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['orderDate']);
                        $result['document_no'] = $Row['order_code'];
                        $result['document_type'] = $Row['RecordType'];
                        $result['rebatePriceType'] = $Row['rebatePriceType'];
                        $result['amount_ex_vat'] = round($Row['orderItemPrice'], 2);
                        $result['rebPrice'] = round($Row['rebatePrice'], 2);
                        $result['rebate'] = round($Row['rebate'], 2);
                        
                        $prev_sp_id = $Row['custID'];
                        $response['response']['records'][$Row['custID']]['custNo'] = $Row['custNo'];
                        $response['response']['records'][$Row['custID']]['custName'] = $Row['custName'];
                        $response['response']['records'][$Row['custID']]['rebate'] = $Row['rebate'];                        
                        $response['response']['records'][$Row['custID']]['rebatePriceType'] = $Row['rebatePriceType'];                        
                        
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['total_commission'] += round($Row['rebatePrice'], 2);
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_commission']  += round($Row['rebatePrice'], 2);

                        $response['response']['grand_total_amount_ex_vat']  += round($Row['orderItemPrice'], 2);
                        $response['response']['grand_total_commission']   += round($Row['rebatePrice'], 2);
                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['postingDate']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['orderDate']);
                        $result['document_no'] = $Row['order_code'];
                        $result['document_type'] = $Row['RecordType'];
                        $result['rebatePriceType'] = $Row['rebatePriceType'];

                        $result['amount_ex_vat'] = round($Row['orderItemPrice'], 2);
                        $result['rebPrice'] = round($Row['rebatePrice'], 2);
                        $result['rebate'] = round($Row['rebate'], 2);
                        
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['total_commission']  += round($Row['rebatePrice'], 2);
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_commission']  += round($Row['rebatePrice'], 2);

                        $response['response']['grand_total_amount_ex_vat']  += round($Row['orderItemPrice'], 2);
                        $response['response']['grand_total_commission']   += round($Row['rebatePrice'], 2);
                    }                    
                }
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    } 
    
    function crmRebateReport($attr) {
 
        $whereClause = '';

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);        
        
        $crmArray = '';
        $crmArray2 = '';

        if ($attr['crm']) {

            foreach ($attr['crm'] as $rec) {
                $crmArray .= $rec->id . ',';
            }

            $whereClause .=" WHERE sel.id IN (" . substr($crmArray, 0, -1) . ") ";
            $crmArray2 = substr($crmArray, 0, -1);

        } else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (1) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 40);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    $crmArray .= $Rowa['id'] . ',';
                }

                $whereClause .=" WHERE sel.id IN (" . substr($crmArray, 0, -1) . ") ";
                $crmArray2 = substr($crmArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $rebateTypeID = (isset($attr['rebateTypeID']) && $attr['rebateTypeID']!='')?$attr['rebateTypeID']:0;         
        $reporttype = $attr['reporttype'];     

        $Sql = "CALL srrep_crmRebateReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$crmArray2."','".$reporttype."','".$rebateTypeID."')";

        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {

            if($reporttype == 'summary'){
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key)) {
                            unset($Row[$key]);
                        }
                    }
                    $Row['rebStartDate'] = $this->objGeneral->convert_unix_into_date($Row['rebStartDate']);
                    $Row['rebEndDate'] = $this->objGeneral->convert_unix_into_date($Row['rebEndDate']);

                    $response['response'][] = $Row;                   
                }
            }
            elseif($reporttype == 'detail'){           

                $prev_sp_id = 0;

                $response['response']['saleInvoice_grand_total_amount_ex_vat'] = 0;
                $response['response']['saleInvoice_grand_total_commission'] = 0;
                
                $response['response']['creditNote_grand_total_amount_ex_vat'] = 0;
                $response['response']['creditNote_grand_total_commission'] = 0;
                
                $response['response']['purchaseInvoice_grand_total_amount_ex_vat'] = 0;
                $response['response']['purchaseInvoice_grand_total_commission'] = 0;
                
                $response['response']['grand_total_amount_ex_vat'] = 0;
                $response['response']['grand_total_commission'] = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($prev_sp_id != $Row['custID'])
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['postingDate']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['orderDate']);
                        $result['document_no'] = $Row['order_code'];
                        $result['document_type'] = $Row['RecordType'];
                        $result['amount_ex_vat'] = round($Row['orderItemPrice'], 2);
                        $result['rebPrice'] = round($Row['rebatePrice'], 2);
                        $result['rebate'] = round($Row['rebate'], 2);
                        
                        $prev_sp_id = $Row['custID'];
                        $response['response']['records'][$Row['custID']]['custNo'] = $Row['custNo'];
                        $response['response']['records'][$Row['custID']]['custName'] = $Row['custName'];
                        $response['response']['records'][$Row['custID']]['rebate'] = $Row['rebate'];                        
                        
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['total_commission'] += round($Row['rebatePrice'], 2);
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_commission']  += round($Row['rebatePrice'], 2);

                        $response['response']['grand_total_amount_ex_vat']  += round($Row['orderItemPrice'], 2);
                        $response['response']['grand_total_commission']   += round($Row['rebatePrice'], 2);
                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['postingDate']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['orderDate']);
                        $result['document_no'] = $Row['order_code'];
                        $result['document_type'] = $Row['RecordType'];

                        $result['amount_ex_vat'] = round($Row['orderItemPrice'], 2);
                        $result['rebPrice'] = round($Row['rebatePrice'], 2);
                        $result['rebate'] = round($Row['rebate'], 2);
                        
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['total_commission']  += round($Row['rebatePrice'], 2);
                        $response['response']['records'][$Row['custID']][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_commission']  += round($Row['rebatePrice'], 2);

                        $response['response']['grand_total_amount_ex_vat']  += round($Row['orderItemPrice'], 2);
                        $response['response']['grand_total_commission']   += round($Row['rebatePrice'], 2);
                    }                    
                }
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    } 

    function supplierRebateReport($attr) {
 
        $whereClause = '';

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);        
        
        $suppliersArray = '';

         if ($attr['suppliers']) {

            $suppliersArray = '';

            foreach ($attr['suppliers'] as $rec) {
                if($rec->id > 0)
                    $suppliersArray .= $rec->id . ',';
            }

            $suppliersArray = substr($suppliersArray, 0, -1);

        } else {

            $sqla = "SELECT s.id 
					 FROM sr_srm_general_sel s
					 WHERE s.type IN (2,3) AND 
						   s.company_id=" . $this->arrUser['company_id'] . " ";

           // $sqla = $this->objsetup->whereClauseAppender($sqla, 24);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $suppliersArray .= $Rowa['id'] . ',';
                }
                $suppliersArray = substr($suppliersArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }
 
        $rebateTypeID = (isset($attr['rebateTypeID']) && $attr['rebateTypeID']!='')?$attr['rebateTypeID']:0;         
        $reporttype = $attr['reporttype'];     

        $Sql = "CALL srrep_supplierRebateReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$suppliersArray."','".$reporttype."','".$rebateTypeID."')";

        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {

            if($reporttype == 'summary'){
                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key)) {
                            unset($Row[$key]);
                        }
                    }
                    $Row['rebStartDate'] = $this->objGeneral->convert_unix_into_date($Row['rebStartDate']);
                    $Row['rebEndDate'] = $this->objGeneral->convert_unix_into_date($Row['rebEndDate']);

                    $response['response'][] = $Row;                   
                }
            }
            elseif($reporttype == 'detail'){           

                $prev_sp_id = 0;                

                $response['response']['debitNote_grand_total_amount_ex_vat'] = 0;
                $response['response']['debitNote_grand_total_commission'] = 0;
                
                $response['response']['purchaseInvoice_grand_total_amount_ex_vat'] = 0;
                $response['response']['purchaseInvoice_grand_total_commission'] = 0;
                
                $response['response']['grand_total_amount_ex_vat'] = 0;
                $response['response']['grand_total_commission'] = 0;

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    
                    if($prev_sp_id != $Row['suppID'])
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['postingDate']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['orderDate']);
                        $result['document_no'] = $Row['order_code'];
                        $result['document_type'] = $Row['RecordType'];
                        $result['rebatePriceType'] = $Row['rebatePriceType'];
                        $result['amount_ex_vat'] = round($Row['orderItemPrice'], 2);
                        $result['rebPrice'] = round($Row['rebatePrice'], 2);
                        $result['rebate'] = round($Row['rebate'], 2);
                        
                        $prev_sp_id = $Row['suppID'];
                        
                        $response['response']['records'][$Row['suppID']]['suppNo'] = $Row['suppNo'];
                        $response['response']['records'][$Row['suppID']]['suppName'] = $Row['suppName'];
                        $response['response']['records'][$Row['suppID']]['rebate'] = $Row['rebate'];                          
                        
                        $response['response']['records'][$Row['suppID']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response']['records'][$Row['suppID']][$Row['posting_type']]['total_commission'] += round($Row['rebatePrice'], 2);
                        $response['response']['records'][$Row['suppID']][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_commission']  += round($Row['rebatePrice'], 2);

                        $response['response']['grand_total_amount_ex_vat']  += round($Row['orderItemPrice'], 2);
                        $response['response']['grand_total_commission']   += round($Row['rebatePrice'], 2);
                    }
                    else
                    {
                        $result = array();
                        $result['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['postingDate']);
                        $result['order_date'] = $this->objGeneral->convert_unix_into_date($Row['orderDate']);
                        $result['document_no'] = $Row['order_code'];
                        $result['document_type'] = $Row['RecordType'];
                        $result['rebatePriceType'] = $Row['rebatePriceType'];

                        $result['amount_ex_vat'] = round($Row['orderItemPrice'], 2);
                        $result['rebPrice'] = round($Row['rebatePrice'], 2);
                        $result['rebate'] = round($Row['rebate'], 2);
                        
                        $response['response']['records'][$Row['suppID']][$Row['posting_type']]['total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response']['records'][$Row['suppID']][$Row['posting_type']]['total_commission']  += round($Row['rebatePrice'], 2);
                        $response['response']['records'][$Row['suppID']][$Row['posting_type']]['invoices'][] = $result;

                        $response['response'][$Row['posting_type'].'_grand_total_amount_ex_vat'] += round($Row['orderItemPrice'], 2);
                        $response['response'][$Row['posting_type'].'_grand_total_commission']  += round($Row['rebatePrice'], 2);

                        $response['response']['grand_total_amount_ex_vat']  += round($Row['orderItemPrice'], 2);
                        $response['response']['grand_total_commission']   += round($Row['rebatePrice'], 2);
                    }                    
                }
                $records = $response['response']['records'];
                $order_by_spec_col = array_column($records, 'suppNo');
                array_multisort($order_by_spec_col, SORT_ASC, $records);
                $response['response']['records'] = $records;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    } 

    function customerWithNoActivityReport($attr) {
 
        $whereClause = '';

        $upToDate = $this->objGeneral->convert_date($attr['upToDate']);     
        $salespersonsArray = false;
        // echo '<pre>';print_r($attr['salepersons']);

        if (count($attr['salepersons']) > 0) {          

            foreach ($attr['salepersons'] as $rec) {
                if($rec->id > 0)
                    $salespersonsArray .= $rec->id . ',';
            }
            $salespersonsArray = substr($salespersonsArray, 0, -1);
        } 
        else 
        {
            $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . "  OR
            emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
            emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : " AND emp.user_type NOT IN (1) ";
            
            $sqla = "  SELECT * FROM (SELECT emp.id,
                                        emp.user_code,
                                        emp.line_manager_name_id,
                                        CONCAT(first_name,' ',last_name) AS name,
                                        emp.user_email AS email,
                                        emp.job_title,
                                        (CASE WHEN emp.employee_type>0 THEN empType.name 
                                            ELSE '' 
                                            END )AS employee_type
                                    FROM employees AS emp,
                                        employee_type AS empType 
                                    WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND emp.status = 1 AND
                                        (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                        $where_line_manager                                        
                                    GROUP BY emp.id
                                    ORDER BY emp.user_code DESC) AS tbl  
                        where 1  " . $where_clause . " ";
            
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    $salespersonsArray .= $Rowa['id'] . ',';
                }
                $salespersonsArray = substr($salespersonsArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }   

        $Sql = "CALL srrep_customerWithNoActivityReport(".$this->arrUser['company_id'].",'".$upToDate."','".$salespersonsArray."')";

        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {

            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key)) {
                        unset($Row[$key]);
                    }
                }

                if($Row['lastInvoiceDate']>0)
                    $Row['lastInvoiceDate'] = date("d/m/Y", $Row['lastInvoiceDate']);
                else 
                    $Row['lastInvoiceDate'] = '';

                if($Row['lastOrderDate']>0)
                    $Row['lastOrderDate'] = date("d/m/Y", $Row['lastOrderDate']);
                else 
                    $Row['lastOrderDate'] = '';

                if($Row['lastInvoiceNo'] == '0')
                    $Row['lastInvoiceNo'] = '';

                if($Row['lastOrderNo']=='0')
                    $Row['lastOrderNo'] = '';

                $response['response'][] = $Row;                   
            }
            
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    } 

    function accessByTransNumReport($attr) { 

        $transactionFrom = $attr['transactionFrom'];  
        $transactionTo = $attr['transactionTo'];  

        $Sql = "CALL srrep_accessByTransNumReport(".$this->arrUser['company_id'].",'".$transactionFrom."','".$transactionTo."')";

        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {

            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key)) {
                        unset($Row[$key]);
                    }
                }

                $response['response'][] = $Row;                   
            }
            
            $response['ack'] = 1;
            $response['error'] = NULL;

        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    }

    function unPostedOrderDetailReport($attr) {
 
        $whereClause = '';

        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);  

        $reportName = $attr['reportName']; 
        $reportOrderByID = (isset($attr['reportOrderByID']) && $attr['reportOrderByID']!='')?$attr['reportOrderByID']:0;         
        $reportOrderTypeID = (isset($attr['reportOrderTypeID']) && $attr['reportOrderTypeID']!='')?$attr['reportOrderTypeID']:0;         
        $reporttype = $attr['reporttype'];  
        $reportXlsxType = (isset($attr['reportXlsxType']) && $attr['reportXlsxType']!='')?$attr['reportXlsxType']:0; 

        if($reportName == 'UnPostedSalesOrdersDetail'){

            $cutomerarray = '';
            $cutomerarray2 = '';

            if ($attr['customers']) {

                foreach ($attr['customers'] as $rec) {
                    $cutomerarray .= $rec->id . ',';
                }

                $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
                $cutomerarray2 = substr($cutomerarray, 0, -1);

            } else {

                $sqla = "SELECT c.id 
                        FROM sr_crm_listing c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . " "; 
                /* $sqla = "SELECT  c.id
                         FROM crm c
                         WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

                //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }
                        $cutomerarray .= $Rowa['id'] . ',';
                    }

                    $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
                    $cutomerarray2 = substr($cutomerarray, 0, -1);
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }
            
            $Sql = "CALL srrep_unPostedCustOrderDetailReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$cutomerarray2."','".$reporttype."','".$reportOrderByID."','".$reportOrderTypeID."')";

            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            $totalRecords = $RS->RecordCount();

            if ($RS->RecordCount() > 0) {     

                $prev_sp_id = '';

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($Row['custID']>0 && $Row['Rank'] !=4){

                        if($prev_sp_id != $Row['custNo'])
                        {
                            $result = array();
                            // $result['posting_date'] = $Row['postingDate'];
                            // $result['order_date'] = $Row['orderDate'];

                            $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                            $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));

                            $result['document_no'] = $Row['docNo'];
                            $result['document_type'] = $Row['orderDetailType'];
                            $result['Rank'] = $Row['Rank'];
                            $result['docRank'] = $Row['docRank'];
                            $result['itemCode'] = $Row['itemCode'];
                            $result['itemDesc'] = $Row['itemDesc'];
                            $result['unit_measure'] = $Row['unit_measure'];
                            $result['vat'] = $Row['vat'];
                            $result['qty'] = $Row['qty'];
                            $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                            $result['discount_price'] = round($Row['discount_price'], 2);
                            $result['total_price'] = round($Row['total_price'], 2);
                            
                            $prev_sp_id = $Row['custNo'];
                            $response['response']['records'][$Row['custNo']]['custNo'] = $Row['custNo'];
                            $response['response']['records'][$Row['custNo']]['custName'] = $Row['custName'];

                            if($Row['docRank'] == 4){
                                $response['response']['records'][$Row['custNo']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);
                            }            
                            
                            $response['response']['records'][$Row['custNo']][$Row['docType']]['invoices'][] = $result;
                        }
                        else
                        {
                            $result = array();
                            // $result['posting_date'] = $Row['postingDate'];
                            // $result['order_date'] = $Row['orderDate'];
                            $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                            $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));

                            $result['document_no'] = $Row['docNo'];
                            $result['document_type'] = $Row['orderDetailType'];
                            $result['Rank'] = $Row['Rank'];
                            $result['docRank'] = $Row['docRank'];
                            $result['itemCode'] = $Row['itemCode'];
                            $result['itemDesc'] = $Row['itemDesc'];
                            $result['unit_measure'] = $Row['unit_measure'];
                            $result['vat'] = $Row['vat'];
                            $result['qty'] = $Row['qty'];
                            $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                            $result['discount_price'] = round($Row['discount_price'], 2);
                            $result['total_price'] = round($Row['total_price'], 2);

                            if($Row['docRank'] == 4){
                                $response['response']['records'][$Row['custNo']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);
                            }

                            $response['response']['records'][$Row['custNo']][$Row['docType']]['invoices'][] = $result;
                        }                    
                    }
                    else{
                        $response['response']['records']['grandtotal'][$Row['docRank']]['orderType'] = $Row['custName'];
                        $response['response']['records']['grandtotal']['custName'] = 'Grand Total';
                        $response['response']['records']['grandtotal'][$Row['docRank']]['item_converted_price'] = $Row['item_converted_price'];
                        $response['response']['records']['grandtotal'][$Row['docRank']]['discount_price'] = $Row['discount_price'];
                        $response['response']['records']['grandtotal'][$Row['docRank']]['total_price'] = $Row['total_price'];
                    }                    
                }

                if($reportXlsxType == 1){
                    $CSVDataTitle = array();
                    $CSVDataTitle['itemCode'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemCode'] = 'Unposted Customer Orders Detail - Breakdown by Items (G.L)';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemCode'] = 'From '.$attr['dateFrom'].' to '.$attr['dateTo'];
                    $response['CSVData'][] = $CSVDataTitle;                    

                    $response['filename']=  APP_PATH . "Reports/UnPostedSalesOrdersDetail".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);
                   // echo "here 1 <pre>";print_r($response);exit;
                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    $prev_sp_id=0;
                    foreach ($response['response']['records'] as $Row) {
                            if($Row['custName']!='Grand Total'){
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;

                                $CSVDataRec = array(); 
                                $CSVDataRec['itemCode'] = 'Customer Name';
                                $CSVDataRec['itemDesc'] = $Row['custName'];
                                $response['CSVData'][] = $CSVDataRec;

                                $CSVDataRec = array(); 
                                $CSVDataRec['itemCode'] = 'Customer Code';
                                $CSVDataRec['itemDesc'] = $Row['custNo'];
                                $response['CSVData'][] = $CSVDataRec;

                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;
                            // for sales Quotes
                            if(count($Row['saleQuote']['invoices'])>0){
                                $CSVDataRec = array(); 
                                $CSVDataRec['itemCode'] = 'Sales Quotes';                               
                                $response['CSVData'][] = $CSVDataRec;
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;
            
                                $CSVDataRec = array();
                                $CSVDataRec['itemCode'] = 'Item No.';
                                $CSVDataRec['itemDesc'] = 'Description';
                                $CSVDataRec['unit_measure'] = 'UOM';
                                $CSVDataRec['vat'] = 'VAT Rate';
                                $CSVDataRec['qty'] = 'Qty.';
                                $CSVDataRec['item_converted_price'] = 'Unit Price';
                                $CSVDataRec['discount_price'] = 'Discount (Excl.VAT)';
                                $CSVDataRec['total_price'] = 'Total Amount (Excl.VAT)';		
                                
                                $response['CSVData'][] = $CSVDataRec;
                                    foreach($Row['saleQuote']['invoices'] as $row){

                                    if($row['docRank']==1){
                                        $CSVDataRec = array();
                                        if($reportOrderByID==1)
                                        $CSVDataRec['itemCode'] = date("d/m/Y", strtotime($row['order_date']));
                                        if($reportOrderByID==2)
                                        $CSVDataRec['itemCode'] = date("d/m/Y", strtotime($row['posting_date']));
                                        $CSVDataRec['itemDesc'] = 'Sales Quote No. '.$row['document_no'];
                                        $CSVDataRec['unit_measure'] = '';
                                        $CSVDataRec['vat'] = '';
                                        $CSVDataRec['qty'] = '';
                                        $CSVDataRec['item_converted_price'] = '';
                                        $CSVDataRec['discount_price'] = '';
                                        $CSVDataRec['total_price'] = '';
                                    }
                                    if($row['docRank']==2){
                                        $CSVDataRec = array();
                                        $CSVDataRec['itemCode'] = $row['itemCode'];
                                        $CSVDataRec['itemDesc'] = $row['itemDesc'];
                                        $CSVDataRec['unit_measure'] = $row['unit_measure'];
                                        $CSVDataRec['vat'] = $row['vat'];
                                        $CSVDataRec['qty'] = $row['qty'];
                                        $CSVDataRec['item_converted_price'] = round($row['item_converted_price'], 2);
                                        $CSVDataRec['discount_price'] = round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] = round($row['total_price'], 2);	
                                    }
                                    if($row['docRank']==3){
                                        $CSVDataRec = array();
                                        $CSVDataRec['itemCode'] = '';
                                        $CSVDataRec['itemDesc'] = 'Total';
                                        $CSVDataRec['unit_measure'] = '';
                                        $CSVDataRec['vat'] = '';
                                        $CSVDataRec['qty'] = '';
                                        $CSVDataRec['item_converted_price'] = '';
                                        $CSVDataRec['discount_price'] = round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] = round($row['total_price'], 2);	
                                    }
                                    if($row['docRank']==4){
                                        $CSVDataRec = array();
                                        $CSVDataRec['itemCode'] = '';
                                        $CSVDataRec['itemDesc'] = 'Total Sales Quote';
                                        $CSVDataRec['unit_measure'] = '';
                                        $CSVDataRec['vat'] = '';
                                        $CSVDataRec['qty'] = '';
                                        $CSVDataRec['item_converted_price'] = '';
                                        $CSVDataRec['discount_price'] = round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] = round($row['total_price'], 2);	
                                    }                             
                                $response['CSVData'][] = $CSVDataRec;
                                    if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                        $CSVRecCounter = 0;
                                
                                        $this->createCSVFileAppend($response);
                                        $response['CSVData'] = array();
                                    }                       
                            
                                    $CSVRecCounter++;   
                                }
                            }
                            // for sales orders
                            if(count($Row['saleOrder']['invoices'])>0){
                                $CSVDataRec = array(); 
                                $CSVDataRec['itemCode'] = 'Sales Orders';                               
                                $response['CSVData'][] = $CSVDataRec;
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;
            
                                $CSVDataRec = array();
                                $CSVDataRec['itemCode'] = 'Item No.';
                                $CSVDataRec['itemDesc'] = 'Description';
                                $CSVDataRec['unit_measure'] = 'UOM';
                                $CSVDataRec['vat'] = 'VAT Rate';
                                $CSVDataRec['qty'] = 'Qty.';
                                $CSVDataRec['item_converted_price'] = 'Unit Price';
                                $CSVDataRec['discount_price'] = 'Discount (Excl.VAT)';
                                $CSVDataRec['total_price'] = 'Total Amount (Excl.VAT)';		
                                
                                $response['CSVData'][] = $CSVDataRec;
                                    foreach($Row['saleOrder']['invoices'] as $row){

                                    if($row['docRank']==1){
                                        $CSVDataRec = array();
                                        if($reportOrderByID==1)
                                        $CSVDataRec['itemCode'] = date("d/m/Y", strtotime($row['order_date']));
                                        if($reportOrderByID==2)
                                        $CSVDataRec['itemCode'] = date("d/m/Y", strtotime($row['posting_date']));
                                        $CSVDataRec['itemDesc'] = 'Order No. '.$row['document_no'];
                                        $CSVDataRec['unit_measure'] = '';
                                        $CSVDataRec['vat'] = '';
                                        $CSVDataRec['qty'] = '';
                                        $CSVDataRec['item_converted_price'] = '';
                                        $CSVDataRec['discount_price'] = '';
                                        $CSVDataRec['total_price'] = '';
                                    }
                                    if($row['docRank']==2){
                                        $CSVDataRec = array();
                                        $CSVDataRec['itemCode'] = $row['itemCode'];
                                        $CSVDataRec['itemDesc'] = $row['itemDesc'];
                                        $CSVDataRec['unit_measure'] = $row['unit_measure'];
                                        $CSVDataRec['vat'] = $row['vat'];
                                        $CSVDataRec['qty'] = $row['qty'];
                                        $CSVDataRec['item_converted_price'] = round($row['item_converted_price'], 2);
                                        $CSVDataRec['discount_price'] = round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] = round($row['total_price'], 2);	
                                    }
                                    if($row['docRank']==3){
                                        $CSVDataRec = array();
                                        $CSVDataRec['itemCode'] = '';
                                        $CSVDataRec['itemDesc'] = 'Total';
                                        $CSVDataRec['unit_measure'] = '';
                                        $CSVDataRec['vat'] = '';
                                        $CSVDataRec['qty'] = '';
                                        $CSVDataRec['item_converted_price'] = '';
                                        $CSVDataRec['discount_price'] = round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] = round($row['total_price'], 2);	
                                    }
                                    if($row['docRank']==4){
                                        $CSVDataRec = array();
                                        $CSVDataRec['itemCode'] = '';
                                        $CSVDataRec['itemDesc'] = 'Total Sale Orders';
                                        $CSVDataRec['unit_measure'] = '';
                                        $CSVDataRec['vat'] = '';
                                        $CSVDataRec['qty'] = '';
                                        $CSVDataRec['item_converted_price'] = '';
                                        $CSVDataRec['discount_price'] = round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] = round($row['total_price'], 2);	
                                    }                             
                                $response['CSVData'][] = $CSVDataRec;
                                    if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                        $CSVRecCounter = 0;
                                
                                        $this->createCSVFileAppend($response);
                                        $response['CSVData'] = array();
                                    }                       
                            
                                    $CSVRecCounter++;   
                                }
                            }
                            // for credit notes
                            if(count($Row['creditNote']['invoices'])>0){
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;

                                $CSVDataRec = array(); 
                                $CSVDataRec['itemCode'] = 'Credit Notes';                               
                                $response['CSVData'][] = $CSVDataRec;
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;
            
                                $CSVDataRec = array();
                                $CSVDataRec['itemCode'] = 'Item No.';
                                $CSVDataRec['itemDesc'] = 'Description';
                                $CSVDataRec['unit_measure'] = 'UOM';
                                $CSVDataRec['vat'] = 'VAT Rate';
                                $CSVDataRec['qty'] = 'Qty.';
                                $CSVDataRec['item_converted_price'] = 'Unit Price';
                                $CSVDataRec['discount_price'] = 'Discount (Excl.VAT)';
                                $CSVDataRec['total_price'] = 'Total Amount (Excl.VAT)';		
                                
                                $response['CSVData'][] = $CSVDataRec;
                                    foreach($Row['creditNote']['invoices'] as $row){

                                    if($row['docRank']==1){
                                        $CSVDataRec = array();
                                        if($reportOrderByID==1)
                                        $CSVDataRec['itemCode'] = date("d/m/Y", strtotime($row['order_date']));
                                        if($reportOrderByID==2)
                                        $CSVDataRec['itemCode'] = date("d/m/Y", strtotime($row['posting_date']));
                                        $CSVDataRec['itemDesc'] = 'Credit Note No. '.$row['document_no'];
                                        $CSVDataRec['unit_measure'] = '';
                                        $CSVDataRec['vat'] = '';
                                        $CSVDataRec['qty'] = '';
                                        $CSVDataRec['item_converted_price'] = '';
                                        $CSVDataRec['discount_price'] = '';
                                        $CSVDataRec['total_price'] = '';
                                    }
                                    if($row['docRank']==2){
                                        $CSVDataRec = array();
                                        $CSVDataRec['itemCode'] = $row['itemCode'];
                                        $CSVDataRec['itemDesc'] = $row['itemDesc'];
                                        $CSVDataRec['unit_measure'] = $row['unit_measure'];
                                        $CSVDataRec['vat'] = $row['vat'];
                                        $CSVDataRec['qty'] = $row['qty'];
                                        $CSVDataRec['item_converted_price'] = round($row['item_converted_price'], 2);
                                        $CSVDataRec['discount_price'] = round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] = round($row['total_price'], 2);	
                                    }
                                    if($row['docRank']==3){
                                        $CSVDataRec = array();
                                        $CSVDataRec['itemCode'] = '';
                                        $CSVDataRec['itemDesc'] = 'Total';
                                        $CSVDataRec['unit_measure'] = '';
                                        $CSVDataRec['vat'] = '';
                                        $CSVDataRec['qty'] = '';
                                        $CSVDataRec['item_converted_price'] = '';
                                        $CSVDataRec['discount_price'] = round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] = round($row['total_price'], 2);	
                                    }
                                    if($row['docRank']==4){
                                        $CSVDataRec = array();
                                        $CSVDataRec['itemCode'] = '';
                                        $CSVDataRec['itemDesc'] = 'Total Credit Notes';
                                        $CSVDataRec['unit_measure'] = '';
                                        $CSVDataRec['vat'] = '';
                                        $CSVDataRec['qty'] = '';
                                        $CSVDataRec['item_converted_price'] = '';
                                        $CSVDataRec['discount_price'] = round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] = round($row['total_price'], 2);	
                                    }                             
                                $response['CSVData'][] = $CSVDataRec;
                                    if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                        $CSVRecCounter = 0;
                                
                                        $this->createCSVFileAppend($response);
                                        $response['CSVData'] = array();
                                    }                       
                            
                                    $CSVRecCounter++;   
                                }
                            }

                            // total for the customer
                            if($Row['custNo']!=''){
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;

                                $CSVDataRec = array(); 
                                $CSVDataRec['itemCode'] = 'Total For '.$Row['custName'];                           
                                $response['CSVData'][] = $CSVDataRec;

                                    $CSVDataRec = array();
                                    if($reportOrderTypeID==1)
                                    $CSVDataRec['itemCode'] = 'Sales Quote';
                                    $CSVDataRec['itemDesc'] = 'Sales Orders';
                                    $CSVDataRec['unit_measure'] = 'Credit Notes';
                                    $CSVDataRec['vat'] = 'Total Amount (Excl.VAT)';
                            
                                    $response['CSVData'][] = $CSVDataRec;

                                    $CSVDataRec = array();
                                    if($reportOrderTypeID==1)
                                    $CSVDataRec['itemCode'] = round($Row['saleQuote']['total_amount_ex_vat'], 2);
                                    $CSVDataRec['itemDesc'] = round($Row['saleOrder']['total_amount_ex_vat'], 2);
                                    $CSVDataRec['unit_measure'] = round($Row['creditNote']['total_amount_ex_vat'], 2);
                                    $CSVDataRec['vat'] = round((round($Row['saleQuote']['total_amount_ex_vat'], 2) + round($Row['saleOrder']['total_amount_ex_vat'], 2)) - round($Row['creditNote']['total_amount_ex_vat'], 2),2);	
                            
                                    $response['CSVData'][] = $CSVDataRec;


                                if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                    $CSVRecCounter = 0;
                            
                                    $this->createCSVFileAppend($response);
                                    $response['CSVData'] = array();
                                }          

                            }
                        }
                    }   

                   // echo "here 2 <pre>";print_r($response);exit;
                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }    
                    $CSVDataRec = array(); 
                    $response['CSVData'][] = $CSVDataRec;
                    $CSVDataRec = array(); 
                    $CSVDataRec['itemCode'] = 'Grand Total';                           
                    $response['CSVData'][] = $CSVDataRec;

                    $CSVDataRec = array();
                    $CSVDataRec['itemCode'] = 'Doc. Type';
                    $CSVDataRec['itemDesc'] = 'Discount (Excl.VAT)';
                    $CSVDataRec['unit_measure'] = 'Total Amount (Excl.VAT)';            
                    $response['CSVData'][] = $CSVDataRec;

                    foreach ($response['response']['records']['grandtotal'] as $Row) {
                        $CSVDataRec = array();
                        $CSVDataRec['itemCode'] = $Row['orderType'];
                        $CSVDataRec['itemDesc'] = $Row['discount_price'];
                        $CSVDataRec['unit_measure'] = $Row['total_price'];    
                        $response['CSVData'][] = $CSVDataRec;
                    }
                    $this->createCSVFileAppend($response);
                    $response['CSVData'] = array();

                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/UnPostedSalesOrdersDetail".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    // $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.'; 

                }else{               

                $response['ack'] = 1;
                $response['error'] = NULL;
            }
            }  
            else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        }
        elseif($reportName == 'UnPostedCustomerOrdersByItem'){

            $itemsarray = '';

            if ($attr['items']) {

                $itemsarray = '';

                foreach ($attr['items'] as $rec) {
                    if($rec->id > 0)
                        $itemsarray .= $rec->id . ',';
                }
                $itemsarray =  substr($itemsarray, 0, -1);
                $where .=" AND product_id in (" . $itemsarray. ") ";
            }
            else {

                $sqla = "SELECT prd.id 
                        FROM productcache prd
                        WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

                //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }
                        $itemsarray .= $Rowa['id'] . ',';                    
                    }
                    $itemsarray =  substr($itemsarray, 0, -1);
                    $where .=" AND product_id in (" . $itemsarray . ") ";
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }

            $Sql = "CALL srrep_unPostedOrdersByItemReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$itemsarray."','".$reporttype."','".$reportOrderByID."','".$reportOrderTypeID."')";

            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {      

                $prevItemID = '';

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($Row['itemID']>0 && $Row['Rank'] !=4){

                        if($prevItemID != $Row['itemCode'])
                        {
                            $result = array();
                            $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                            $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));
                            // $result['posting_date'] = $Row['postingDate'];
                            // $result['order_date'] = $Row['orderDate'];
                            $result['document_no'] = $Row['docNo'];
                            $result['document_type'] = $Row['orderDetailType'];
                            $result['Rank'] = $Row['Rank'];
                            $result['docRank'] = $Row['docRank'];
                            // $result['itemCode'] = $Row['itemCode'];
                            // $result['itemDesc'] = $Row['itemDesc'];

                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['unit_measure'] = $Row['unit_measure'];
                            $result['warehouse'] = $Row['warehouse'];
                            $result['vat'] = $Row['vat'];
                            $result['qty'] = $Row['qty'];
                            $result['allocQty'] = $Row['allocQty'];
                            $result['unallocQty'] = $Row['unallocQty'];
                            $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                            $result['discount_price'] = round($Row['discount_price'], 2);
                            $result['total_price'] = round($Row['total_price'], 2);
                            
                            $prevItemID = $Row['itemCode'];
                            // $response['response']['records'][$Row['itemID']]['custNo'] = $Row['custNo'];
                            // $response['response']['records'][$Row['itemID']]['custName'] = $Row['custName'];

                            $response['response']['records'][$Row['itemCode']]['itemCode'] = $Row['itemCode'];
                            $response['response']['records'][$Row['itemCode']]['itemDesc'] = $Row['itemDesc'];
                            $response['response']['records'][$Row['itemCode']]['uom'] = $Row['unit_measure'];
                            

                            if($Row['docRank'] == 4){
                                $response['response']['records'][$Row['itemCode']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);
                            }            
                            
                            $response['response']['records'][$Row['itemCode']][$Row['docType']]['invoices'][] = $result;
                        }
                        else
                        {
                            $result = array();
                            // $result['posting_date'] = $Row['postingDate'];
                            // $result['order_date'] = $Row['orderDate'];
                            $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                            $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));

                            $result['document_no'] = $Row['docNo'];
                            $result['document_type'] = $Row['orderDetailType'];
                            $result['Rank'] = $Row['Rank'];
                            $result['docRank'] = $Row['docRank'];
                            // $result['itemCode'] = $Row['itemCode'];
                            // $result['itemDesc'] = $Row['itemDesc'];
                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['unit_measure'] = $Row['unit_measure'];
                            $result['warehouse'] = $Row['warehouse'];
                            $result['vat'] = $Row['vat'];
                            $result['qty'] = $Row['qty'];
                            $result['allocQty'] = $Row['allocQty'];
                            $result['unallocQty'] = $Row['unallocQty'];
                            $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                            $result['discount_price'] = round($Row['discount_price'], 2);
                            $result['total_price'] = round($Row['total_price'], 2);

                            if($Row['docRank'] == 4){
                                $response['response']['records'][$Row['itemCode']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);
                            }

                            $response['response']['records'][$Row['itemCode']][$Row['docType']]['invoices'][] = $result;
                        }                    
                    }
                    else{
                        // $response['response']['records']['grandtotal'][$Row['docRank']]['orderType'] = $Row['custName'];
                        // $response['response']['records']['grandtotal']['custName'] = 'Grand Total';

                        $response['response']['records']['grandtotal'][$Row['docRank']]['orderType'] = $Row['custName'];
                        $response['response']['records']['grandtotal']['itemDesc'] = 'Grand Total';

                        $response['response']['records']['grandtotal'][$Row['docRank']]['item_converted_price'] = $Row['item_converted_price'];
                        $response['response']['records']['grandtotal'][$Row['docRank']]['discount_price'] = $Row['discount_price'];
                        $response['response']['records']['grandtotal'][$Row['docRank']]['total_price'] = $Row['total_price'];
                    }                    
                }

                if($reportXlsxType == 1){
                    $CSVDataTitle = array();
                    $CSVDataTitle['itemCode'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemCode'] = 'Unposted Customer Orders By Item(s)';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['itemCode'] = 'From '.$attr['dateFrom'].' to '.$attr['dateTo'];
                    $response['CSVData'][] = $CSVDataTitle;                    

                    $response['filename']=  APP_PATH . "Reports/UnPostedCustomerOrdersByItem".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);
                   // echo "here 1 <pre>";print_r($response);exit;
                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();

                    $prev_sp_id=0;
                    foreach ($response['response']['records'] as $Row) {
                            if($Row['itemDesc']!='Grand Total'){
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;

                                $CSVDataRec = array(); 
                                $CSVDataRec['custNo'] = 'Item No';
                                $CSVDataRec['custName'] = $Row['itemCode'];
                                $response['CSVData'][] = $CSVDataRec;

                                $CSVDataRec = array(); 
                                $CSVDataRec['custNo'] = 'Description';
                                $CSVDataRec['custName'] = $Row['itemDesc'];
                                $response['CSVData'][] = $CSVDataRec; 
                                
                                $CSVDataRec = array(); 
                                $CSVDataRec['custNo'] = 'Unit of Measure';
                                $CSVDataRec['custName'] = $Row['uom'];
                                $response['CSVData'][] = $CSVDataRec;

                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;
                            // for sales Quotes
                            if(count($Row['saleQuote']['invoices'])>0){
                                $CSVDataRec = array(); 
                                $CSVDataRec['custNo'] = 'Sales Quotes';                               
                                $response['CSVData'][] = $CSVDataRec;
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;
            
                                $CSVDataRec = array();
                                $CSVDataRec['custNo'] = 'Cust. No.';
                                $CSVDataRec['custName'] = 'Cust. Name';
                                if($reportOrderByID==1)
                                $CSVDataRec['date'] = 'Order Date';
                                if($reportOrderByID==2)
                                $CSVDataRec['date'] = 'Posting Date';
                                $CSVDataRec['docNo'] = 'Sales Quote No.';
                                $CSVDataRec['qty'] = 'Qty.';
                                $CSVDataRec['allocQty'] = 'Alloc. Qty.';
                                $CSVDataRec['UnallocQty'] = 'Unalloc. Qty.';
                                $CSVDataRec['unitPrice'] = 'Unit Price';
                                $CSVDataRec['discount_price'] = 'Discount (Excl.VAT)';
                                $CSVDataRec['total_price'] = 'Total Amount (Excl.VAT)';			
                                
                                $response['CSVData'][] = $CSVDataRec;
                                    foreach($Row['saleQuote']['invoices'] as $row){

                                    if($row['docRank']==2){
                                        $CSVDataRec = array();
                                        $CSVDataRec['custNo'] = $row['custNo'];
                                        $CSVDataRec['custName'] = $row['custName'];
                                        if($reportOrderByID==1)
                                        $CSVDataRec['date'] = date("d/m/Y", strtotime($row['order_date']));
                                        if($reportOrderByID==2)
                                        $CSVDataRec['date'] = date("d/m/Y", strtotime($row['posting_date']));
                                        $CSVDataRec['docNo'] = $row['document_no'];
                                        $CSVDataRec['qty'] = $row['qty'];
                                        $CSVDataRec['allocQty'] = $row['allocQty'];
                                        $CSVDataRec['UnallocQty'] = $row['unallocQty'];
                                        $CSVDataRec['unitPrice'] =  round($row['item_converted_price'], 2);
                                        $CSVDataRec['discount_price'] =  round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] =  round($row['total_price'], 2);	
                                    }
                                    
                                    if($row['docRank']==4){
                                        $CSVDataRec = array();
                                        $CSVDataRec['custNo'] = '';
                                        $CSVDataRec['custName'] = '';
                                        $CSVDataRec['date'] = '';
                                        $CSVDataRec['docNo'] = 'Total Sales Quote';
                                        $CSVDataRec['qty'] = $row['qty'];
                                        $CSVDataRec['allocQty'] = $row['allocQty'];
                                        $CSVDataRec['UnallocQty'] = $row['unallocQty'];
                                        $CSVDataRec['unitPrice'] =  '';
                                        $CSVDataRec['discount_price'] =  round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] =  round($row['total_price'], 2);	
                                    }                             
                                $response['CSVData'][] = $CSVDataRec;
                                    if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                        $CSVRecCounter = 0;
                                
                                        $this->createCSVFileAppend($response);
                                        $response['CSVData'] = array();
                                    }                       
                            
                                    $CSVRecCounter++;   
                                }
                            }
                            // for sales orders
                            if(count($Row['saleOrder']['invoices'])>0){
                                $CSVDataRec = array(); 
                                $CSVDataRec['custNo'] = 'Sales Orders';                               
                                $response['CSVData'][] = $CSVDataRec;
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;
            
                                $CSVDataRec = array();
                                $CSVDataRec['custNo'] = 'Cust. No.';
                                $CSVDataRec['custName'] = 'Cust. Name';
                                if($reportOrderByID==1)
                                $CSVDataRec['date'] = 'Order Date';
                                if($reportOrderByID==2)
                                $CSVDataRec['date'] = 'Posting Date';
                                $CSVDataRec['docNo'] = 'Order No.';
                                $CSVDataRec['Warehouse'] = 'Warehouse';
                                $CSVDataRec['qty'] = 'Qty.';
                                $CSVDataRec['allocQty'] = 'Alloc. Qty.';
                                $CSVDataRec['UnallocQty'] = 'Unalloc. Qty.';
                                $CSVDataRec['unitPrice'] = 'Unit Price';
                                $CSVDataRec['discount_price'] = 'Discount (Excl.VAT)';
                                $CSVDataRec['total_price'] = 'Total Amount (Excl.VAT)';			
                                
                                $response['CSVData'][] = $CSVDataRec;
                                    foreach($Row['saleOrder']['invoices'] as $row){

                                    if($row['docRank']==2){
                                        $CSVDataRec = array();
                                        $CSVDataRec['custNo'] = $row['custNo'];
                                        $CSVDataRec['custName'] = $row['custName'];
                                        if($reportOrderByID==1)
                                        $CSVDataRec['date'] = date("d/m/Y", strtotime($row['order_date']));
                                        if($reportOrderByID==2)
                                        $CSVDataRec['date'] = date("d/m/Y", strtotime($row['posting_date']));
                                        $CSVDataRec['docNo'] = $row['document_no'];
                                        $CSVDataRec['warehouse'] = $row['warehouse'];
                                        $CSVDataRec['qty'] = $row['qty'];
                                        $CSVDataRec['allocQty'] = $row['allocQty'];
                                        $CSVDataRec['UnallocQty'] = $row['unallocQty'];
                                        $CSVDataRec['unitPrice'] =  round($row['item_converted_price'], 2);
                                        $CSVDataRec['discount_price'] =  round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] =  round($row['total_price'], 2);	
                                    }
                                    
                                    if($row['docRank']==4){
                                        $CSVDataRec = array();
                                        $CSVDataRec['custNo'] = '';
                                        $CSVDataRec['custName'] = '';
                                        $CSVDataRec['date'] = '';
                                        $CSVDataRec['docNo'] = '';
                                        $CSVDataRec['warehouse'] = 'Total Sales Orders';
                                        $CSVDataRec['qty'] = $row['qty'];
                                        $CSVDataRec['allocQty'] = $row['allocQty'];
                                        $CSVDataRec['UnallocQty'] = $row['unallocQty'];
                                        $CSVDataRec['unitPrice'] =  '';
                                        $CSVDataRec['discount_price'] =  round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] =  round($row['total_price'], 2);	
                                    }                             
                                $response['CSVData'][] = $CSVDataRec;
                                    if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                        $CSVRecCounter = 0;
                                
                                        $this->createCSVFileAppend($response);
                                        $response['CSVData'] = array();
                                    }                       
                            
                                    $CSVRecCounter++;   
                                }
                            }
                            // for credit notes
                            if(count($Row['creditNote']['invoices'])>0){
                                $CSVDataRec = array(); 
                                $CSVDataRec['custNo'] = 'Credit Notes';                               
                                $response['CSVData'][] = $CSVDataRec;
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;
            
                                $CSVDataRec = array();
                                $CSVDataRec['custNo'] = 'Cust. No.';
                                $CSVDataRec['custName'] = 'Cust. Name';
                                if($reportOrderByID==1)
                                $CSVDataRec['date'] = 'Order Date';
                                if($reportOrderByID==2)
                                $CSVDataRec['date'] = 'Posting Date';
                                $CSVDataRec['docNo'] = 'Credit Note No.';
                                $CSVDataRec['Warehouse'] = 'Warehouse';
                                $CSVDataRec['qty'] = 'Qty.';
                                $CSVDataRec['allocQty'] = 'Alloc. Qty.';
                                $CSVDataRec['UnallocQty'] = 'Unalloc. Qty.';
                                $CSVDataRec['unitPrice'] = 'Unit Price';
                                $CSVDataRec['discount_price'] = 'Discount (Excl.VAT)';
                                $CSVDataRec['total_price'] = 'Total Amount (Excl.VAT)';			
                                
                                $response['CSVData'][] = $CSVDataRec;
                                    foreach($Row['creditNote']['invoices'] as $row){

                                    if($row['docRank']==2){
                                        $CSVDataRec = array();
                                        $CSVDataRec['custNo'] = $row['custNo'];
                                        $CSVDataRec['custName'] = $row['custName'];
                                        if($reportOrderByID==1)
                                        $CSVDataRec['date'] = date("d/m/Y", strtotime($row['order_date']));
                                        if($reportOrderByID==2)
                                        $CSVDataRec['date'] = date("d/m/Y", strtotime($row['posting_date']));
                                        $CSVDataRec['docNo'] = $row['document_no'];
                                        $CSVDataRec['warehouse'] = $row['warehouse'];
                                        $CSVDataRec['qty'] = $row['qty'];
                                        $CSVDataRec['allocQty'] = $row['allocQty'];
                                        $CSVDataRec['UnallocQty'] = $row['unallocQty'];
                                        $CSVDataRec['unitPrice'] =  round($row['item_converted_price'], 2);
                                        $CSVDataRec['discount_price'] =  round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] =  round($row['total_price'], 2);	
                                    }
                                    
                                    if($row['docRank']==4){
                                        $CSVDataRec = array();
                                        $CSVDataRec['custNo'] = '';
                                        $CSVDataRec['custName'] = '';
                                        $CSVDataRec['date'] = '';
                                        $CSVDataRec['docNo'] = '';
                                        $CSVDataRec['warehouse'] = 'Total Credit Notes';
                                        $CSVDataRec['qty'] = $row['qty'];
                                        $CSVDataRec['allocQty'] = $row['allocQty'];
                                        $CSVDataRec['UnallocQty'] = $row['unallocQty'];
                                        $CSVDataRec['unitPrice'] =  '';
                                        $CSVDataRec['discount_price'] =  round($row['discount_price'], 2);
                                        $CSVDataRec['total_price'] =  round($row['total_price'], 2);	
                                    }                             
                                $response['CSVData'][] = $CSVDataRec;
                                    if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                        $CSVRecCounter = 0;
                                
                                        $this->createCSVFileAppend($response);
                                        $response['CSVData'] = array();
                                    }                       
                            
                                    $CSVRecCounter++;   
                                }
                            }

                            // total for the customer
                            if($Row['itemCode']!=''){
                                // add an empty line
                                $CSVDataRec = array(); 
                                $response['CSVData'][] = $CSVDataRec;

                                $CSVDataRec = array(); 
                                $CSVDataRec['custNo'] = 'Total For '.$Row['itemDesc'];                           
                                $response['CSVData'][] = $CSVDataRec;

                                    $CSVDataRec = array();
                                    if($reportOrderTypeID==1)
                                    $CSVDataRec['custNo'] = 'Sales Quote';
                                    $CSVDataRec['custName'] = 'Sales Orders';
                                    $CSVDataRec['date'] = 'Credit Notes';
                                    $CSVDataRec['docNo'] = 'Total Amount (Excl.VAT)';
                            
                                    $response['CSVData'][] = $CSVDataRec;

                                    $CSVDataRec = array();
                                    if($reportOrderTypeID==1)
                                    $CSVDataRec['custNo'] = round($Row['saleQuote']['total_amount_ex_vat'], 2);
                                    $CSVDataRec['custName'] = round($Row['saleOrder']['total_amount_ex_vat'], 2);
                                    $CSVDataRec['date'] = round($Row['creditNote']['total_amount_ex_vat'], 2);
                                    $CSVDataRec['docNo'] = round((round($Row['saleQuote']['total_amount_ex_vat'], 2) + round($Row['saleOrder']['total_amount_ex_vat'], 2)) - round($Row['creditNote']['total_amount_ex_vat'], 2),2);	
                            
                                    $response['CSVData'][] = $CSVDataRec;


                                if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                    $CSVRecCounter = 0;
                            
                                    $this->createCSVFileAppend($response);
                                    $response['CSVData'] = array();
                                }          

                            }
                        }
                    }   

                   // echo "here 2 <pre>";print_r($response);exit;
                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }    
                    $CSVDataRec = array(); 
                    $response['CSVData'][] = $CSVDataRec;
                    $CSVDataRec = array(); 
                    $CSVDataRec['custNo'] = 'Grand Total';                           
                    $response['CSVData'][] = $CSVDataRec;

                    $CSVDataRec = array();
                    $CSVDataRec['custNo'] = 'Doc. Type';
                    $CSVDataRec['custName'] = 'Discount (Excl.VAT)';
                    $CSVDataRec['date'] = 'Total Amount (Excl.VAT)';            
                    $response['CSVData'][] = $CSVDataRec;

                    foreach ($response['response']['records']['grandtotal'] as $Row) {
                        $CSVDataRec = array();
                        $CSVDataRec['custNo'] = $Row['orderType'];
                        $CSVDataRec['custName'] = $Row['discount_price'];
                        $CSVDataRec['date'] = $Row['total_price'];    
                        $response['CSVData'][] = $CSVDataRec;
                    }
                    $this->createCSVFileAppend($response);
                    $response['CSVData'] = array();

                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/UnPostedCustomerOrdersByItem".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    // $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.'; 

                }else{               

                $response['ack'] = 1;
                $response['error'] = NULL;
            }
            } else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        } 
        elseif($reportName == 'UnallocatedStock'){

            $itemsarray = '';

            if ($attr['items']) {

                $itemsarray = '';

                foreach ($attr['items'] as $rec) {
                    if($rec->id > 0)
                        $itemsarray .= $rec->id . ',';
                }
                $itemsarray =  substr($itemsarray, 0, -1);
                $where .=" AND product_id in (" . $itemsarray. ") ";
            }
            else {

                $sqla = "SELECT prd.id 
                        FROM productcache prd
                        WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

                //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }
                        $itemsarray .= $Rowa['id'] . ',';                    
                    }
                    $itemsarray =  substr($itemsarray, 0, -1);
                    $where .=" AND product_id in (" . $itemsarray . ") ";
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }

            $cutomerarray = '';
            $cutomerarray2 = '';

            if ($attr['customers']) {

                foreach ($attr['customers'] as $rec) {
                    $cutomerarray .= $rec->id . ',';
                }

                $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
                $cutomerarray2 = substr($cutomerarray, 0, -1);

            } else {

                $sqla = "SELECT c.id 
                        FROM sr_crm_listing c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . " "; 

                /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

                //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }
                        $cutomerarray .= $Rowa['id'] . ',';
                    }

                    $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
                    $cutomerarray2 = substr($cutomerarray, 0, -1);
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }

            $reportXlsxType = (isset($attr['reportXlsxType']) && $attr['reportXlsxType']!='')?$attr['reportXlsxType']:0; 

            $Sql = "CALL srrep_unPostedCustOrderUnallocStockReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$cutomerarray2."','".$itemsarray."','".$reporttype."','".$reportOrderByID."','".$reportOrderTypeID."')";

            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {  

                if($reportXlsxType == 1){
                    $CSVDataTitle = array();
                    $CSVDataTitle['item_number'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['item_number'] = 'Unallocated Stock';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['item_number'] = 'Item No.';
                    $CSVDataTitle['description'] = 'Description';
                    $CSVDataTitle['uom'] = 'UOM';
                    $CSVDataTitle['warehouse'] = 'Warehouse';
                    $CSVDataTitle['orderType'] = 'Order Type';
                    $CSVDataTitle['orderNo'] = 'Order No.';
                    $CSVDataTitle['requestedDelivery'] = 'Req. Delivery Date';//
                    $CSVDataTitle['custNo'] = 'Cust. No.';
                    $CSVDataTitle['custName'] = 'Cust. Name';		
                    $CSVDataTitle['qty'] = 'Qty.';
                    $CSVDataTitle['allocQty'] = 'Alloc. Qty.';
                    $CSVDataTitle['unallocQty'] = 'Unalloc. Qty.';

                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/unallocatedStock".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();


                    while ($Row = $RS->FetchRow()) {
                    
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }
                      
                        
                        
                        /* if($Row['itemID']>0 && $Row['Rank'] !=4){

                            if($prevItemID != $Row['itemID'])
                            {
                                $result = array();
                                $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                                $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));
                                $result['document_no'] = $Row['docNo'];
                                $result['document_type'] = $Row['orderDetailType'];
                                $result['Rank'] = $Row['Rank'];
                                $result['docRank'] = $Row['docRank'];
                                $result['custNo'] = $Row['custNo'];
                                $result['custName'] = $Row['custName'];
                                $result['unit_measure'] = $Row['unit_measure'];
                                $result['vat'] = $Row['vat'];
                                $result['qty'] = $Row['qty'];
                                $result['allocQty'] = $Row['allocQty'];
                                $result['unallocQty'] = $Row['unallocQty'];                                
                                $prevItemID = $Row['itemID'];

                                $response['response']['records'][$Row['itemID']]['itemCode'] = $Row['itemCode'];
                                $response['response']['records'][$Row['itemID']]['itemDesc'] = $Row['itemDesc'];
                                $response['response']['records'][$Row['itemID']]['uom'] = $Row['unit_measure'];           
                                
                                $response['response']['records'][$Row['itemID']][$Row['docType']]['invoices'][] = $result;
                            }
                            else
                            {
                                $result = array();
                                $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                                $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));

                                $result['document_no'] = $Row['docNo'];
                                $result['document_type'] = $Row['orderDetailType'];
                                $result['Rank'] = $Row['Rank'];
                                $result['docRank'] = $Row['docRank'];
                                $result['custNo'] = $Row['custNo'];
                                $result['custName'] = $Row['custName'];
                                $result['unit_measure'] = $Row['unit_measure'];
                                $result['vat'] = $Row['vat'];
                                $result['qty'] = $Row['qty'];
                                $result['allocQty'] = $Row['allocQty'];
                                $result['unallocQty'] = $Row['unallocQty'];

                                $response['response']['records'][$Row['itemID']][$Row['docType']]['invoices'][] = $result;
                            }                    
                        } */

                        if($Row['itemID']>0 && $Row['docRank'] !=1 && $Row['docRank'] !=3){

                            $CSVDataRec = array();
                            $CSVDataRec['item_number'] = $Row['itemCode'];
                            $CSVDataRec['description'] = $Row['itemDesc'];
                            $CSVDataRec['uom'] = $Row['unit_measure'];
                            $CSVDataRec['warehouse'] = $Row['warehouse'];
                            $CSVDataRec['orderType'] = $Row['orderDetailType'];
                            $CSVDataRec['orderNo'] = $Row['docNo'];

                            if($Row['requestedDeliveryDate'] == 0 || $Row['requestedDeliveryDate'] == '' || $Row['requestedDeliveryDate'] == NULL) $CSVDataRec['requestedDelivery'] = '';
                            else $CSVDataRec['requestedDelivery'] =  date("d/m/Y", $Row['requestedDeliveryDate']);
                            //requestedDeliveryDate
                            $CSVDataRec['custNo'] = $Row['custNo'];
                            $CSVDataRec['custName'] = $Row['custName'];
                            $CSVDataRec['qty'] = $Row['qty'];
                            $CSVDataRec['allocQty'] = $Row['allocQty'];
                            $CSVDataRec['unallocQty'] = $Row['unallocQty'];

                            $response['CSVData'][] = $CSVDataRec;
                        }

                        
                        // $response['response'][] = $Row;

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;                        
                    }

                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }

                    

                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/unallocatedStock".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    // $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.'; 

                }
                else{                 

                    $prevItemID = 0;

                    while ($Row = $RS->FetchRow()) {
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }
                        if($Row['itemID']>0 && $Row['Rank'] !=4){

                            if($prevItemID != $Row['itemID'])
                            {
                                $result = array();
                                $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                                $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));
                                $result['document_no'] = $Row['docNo'];
                                $result['document_type'] = $Row['orderDetailType'];
                                $result['Rank'] = $Row['Rank'];
                                $result['docRank'] = $Row['docRank'];
                                // $result['itemCode'] = $Row['itemCode'];
                                // $result['itemDesc'] = $Row['itemDesc'];

                                $result['custNo'] = $Row['custNo'];
                                $result['custName'] = $Row['custName'];
                                $result['unit_measure'] = $Row['unit_measure'];
                                // $result['warehouse'] = $Row['warehouse'];
                                $result['vat'] = $Row['vat'];
                                $result['qty'] = $Row['qty'];
                                $result['allocQty'] = $Row['allocQty'];
                                $result['unallocQty'] = $Row['unallocQty'];
                                // $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                                // $result['discount_price'] = round($Row['discount_price'], 2);
                                // $result['total_price'] = round($Row['total_price'], 2);
                                
                                $prevItemID = $Row['itemID'];
                                // $response['response']['records'][$Row['itemID']]['custNo'] = $Row['custNo'];
                                // $response['response']['records'][$Row['itemID']]['custName'] = $Row['custName'];

                                $response['response']['records'][$Row['itemID']]['itemCode'] = $Row['itemCode'];
                                $response['response']['records'][$Row['itemID']]['itemDesc'] = $Row['itemDesc'];
                                $response['response']['records'][$Row['itemID']]['uom'] = $Row['unit_measure'];
                                

                                /* if($Row['docRank'] == 4){
                                    $response['response']['records'][$Row['itemID']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);
                                }  */           
                                
                                $response['response']['records'][$Row['itemID']][$Row['docType']]['invoices'][] = $result;
                            }
                            else
                            {
                                $result = array();
                                // $result['posting_date'] = $Row['postingDate'];
                                // $result['order_date'] = $Row['orderDate'];
                                $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                                $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));

                                $result['document_no'] = $Row['docNo'];
                                $result['document_type'] = $Row['orderDetailType'];
                                $result['Rank'] = $Row['Rank'];
                                $result['docRank'] = $Row['docRank'];
                                // $result['itemCode'] = $Row['itemCode'];
                                // $result['itemDesc'] = $Row['itemDesc'];
                                $result['custNo'] = $Row['custNo'];
                                $result['custName'] = $Row['custName'];
                                $result['unit_measure'] = $Row['unit_measure'];
                                // $result['warehouse'] = $Row['warehouse'];
                                $result['vat'] = $Row['vat'];
                                $result['qty'] = $Row['qty'];
                                $result['allocQty'] = $Row['allocQty'];
                                $result['unallocQty'] = $Row['unallocQty'];
                                // $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                                // $result['discount_price'] = round($Row['discount_price'], 2);
                                // $result['total_price'] = round($Row['total_price'], 2);

                                /* if($Row['docRank'] == 4){
                                    $response['response']['records'][$Row['itemID']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);
                                } */

                                $response['response']['records'][$Row['itemID']][$Row['docType']]['invoices'][] = $result;
                            }                    
                        }
                        else{
                            // $response['response']['records']['grandtotal'][$Row['docRank']]['orderType'] = $Row['custName'];
                            // $response['response']['records']['grandtotal']['custName'] = 'Grand Total';

                            // $response['response']['records']['grandtotal'][$Row['docRank']]['orderType'] = $Row['custName'];
                            // $response['response']['records']['grandtotal']['itemDesc'] = 'Grand Total';

                            // $response['response']['records']['grandtotal'][$Row['docRank']]['item_converted_price'] = $Row['item_converted_price'];
                            // $response['response']['records']['grandtotal'][$Row['docRank']]['discount_price'] = $Row['discount_price'];
                            // $response['response']['records']['grandtotal'][$Row['docRank']]['total_price'] = $Row['total_price'];
                        }                    
                    }

                    // response ordering (added by Akhtar Nawaz)
                    $records = $response['response']['records'];
                    $order_by_spec_col = array_column($records, 'itemCode');
                    array_multisort($order_by_spec_col, SORT_ASC, $records);
                    $response['response']['records'] = $records;

                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }               

                
            } else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        }    
        return $response;
    } 

    function supplierStatementReport($attr) {
 
        $whereClause = '';
        $suppliersArray = '';
        $suppliersArray2 = '';

        if ($attr['suppliers']) {

            $suppliersArray = '';

            foreach ($attr['suppliers'] as $rec) {
                if($rec->id > 0)
                    $suppliersArray .= $rec->id . ',';
            }

            $suppliersArray = substr($suppliersArray, 0, -1);

        } else {

            $sqla = "SELECT s.id 
					 FROM sr_srm_general_sel s
					 WHERE s.type IN (2,3) AND 
						   s.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 24);
            $sqla .= " ORDER BY s.supplier_code ASC";
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $suppliersArray .= $Rowa['id'] . ',';
                }
                $suppliersArray = substr($suppliersArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        if ($attr['upToDate'] > 0)
            $upToDate = $this->objGeneral->convertEndDate($attr['upToDate']);
        else
            $upToDate = date("Y-m-d");

        $prevSupplier = 0;
        $singleSuppChk = 0;
        $reportXlsxType = (isset($attr['reportXlsxType']) && $attr['reportXlsxType']!='')?$attr['reportXlsxType']:0; 

        $sqll = 'CALL srrep_supplierStatement('.$this->arrUser['company_id'].',"'.$suppliersArray.'","'.$upToDate.'")';                

        // echo $sqll;exit;
        $RSS = $this->objsetup->CSI($sqll);

        if ($RSS->RecordCount() > 0) {
            while ($RowS = $RSS->FetchRow()) {

                foreach ($RowS as $key => $value) {
                    if (is_numeric($key))
                        unset($RowS[$key]);
                }            

                if(!($prevSupplier>0) || $prevSupplier != $RowS['srmID']){   

                    if($prevSupplier>0)
                    {
                        $singleSuppChk = 0;
                        
                        if(count($supplierArray['res'])>0)
                            $response['response'][] = $supplierArray;
                    }
                    else{
                        $singleSuppChk = 1;
                    }               

                    $prevSupplier = $RowS['srmID'];
                    $supplierArray = array();  

                    $runningTotals = 0;                  
                }                   
                
                if($prevSupplier == $RowS['srmID']){

                    if($RowS['Rank'] == 1){                        
                        $supplierArray['supplierCode'] = $RowS['supplierCode'];
                        $supplierArray['name'] = $RowS['supplierName'];
                        $supplierArray['primary_address_1'] = $RowS['primary_address_1'];
                        $supplierArray['primary_address_2'] = $RowS['primary_address_2'];
                        $supplierArray['primaryc_phone'] = $RowS['primaryc_phone'];
                        $supplierArray['primaryc_email'] = $RowS['primaryc_email'];

                        $supplierArray['city'] = $RowS['city'];
                        $supplierArray['county'] = $RowS['county'];
                        $supplierArray['postcode'] = $RowS['postcode'];
                        $supplierArray['country'] = $RowS['country_name'];

                        $supplierArray['postingGroup'] = $RowS['postingGroup'];
                        $supplierArray['vat_number'] = $RowS['vat_number'];
                        $supplierArray['bank_name'] = $RowS['bank_name'];
                        $supplierArray['account_name'] = $RowS['account_name'];
                        $supplierArray['swift_code'] = $RowS['swift_code'];
                        $supplierArray['iban'] = $RowS['iban'];
                        $supplierArray['sort_code'] = $RowS['sort_code'];
                        $supplierArray['account_no'] = $RowS['account_no'];
                        $supplierArray['currency'] = $RowS['currency'];
                        $supplierArray['payment_terms'] = $RowS['payment_terms'];
                    }

                    if($RowS['Rank'] == 2){   

                        $supplierStatementArray = array();

                        $supplierStatementArray['Posting_Date'] = $this->objGeneral->convert_unix_into_date($RowS['posting_date']);

                        if($RowS['document_type'] == 'Negative General Journal' || $RowS['document_type'] == 'Positive General Journal'){
                            $supplierStatementArray['Document_Type'] = 'General Journal';
                        }
                        else{
                            $supplierStatementArray['Document_Type'] = $RowS['document_type'];
                        }
                        
                        $supplierStatementArray['Document_No'] = $RowS['document_no'];
                        $supplierStatementArray['Ref_No'] = $RowS['ref_no'];
                        $supplierStatementArray['currency'] = $RowS['currency'];
                        $RowS['remaining_amount'] = $RowS['total_amount'] - $RowS['setteled_amount'];

                        if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7 || ($RowS['dType'] == 9 && $RowS['document_type'] == 'Positive General Journal'))
                            $supplierStatementArray['Original_Amount'] = $RowS['total_amount'];
                        else
                            $supplierStatementArray['Original_Amount'] = (-1) * $RowS['total_amount'];

                        $supplierStatementArray['Settled_Amount'] = $RowS['setteled_amount'];

                        if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7 || ($RowS['dType'] == 9 && $RowS['document_type'] == 'Positive General Journal'))
                            $RemainingAmount = $RowS['remaining_amount'];
                        else
                            $RemainingAmount = (-1) * $RowS['remaining_amount'];

                        $supplierStatementArray['Outstanding_Amount'] = $RemainingAmount;

                        /* if ($RowS['due_date'] != 0 || $RowS['due_date'] != '')
                            $supplierStatementArray['Due Date'] = $this->objGeneral->convert_unix_into_date($RowS['due_date']);
                        else
                            $supplierStatementArray['Due Date'] = ''; */

                        $supplierStatementArray['DueDate'] = $RowS['due_date'];
                        
                        if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7 || ($RowS['dType'] == 9 && $RowS['document_type'] == 'Positive General Journal'))
                            $runningTotals = $runningTotals + $RowS['remaining_amount'];
                        else
                            $runningTotals = $runningTotals - $RowS['remaining_amount'];                        

                        $supplierStatementArray['balance'] = $runningTotals;
                        $RowS['totalSUM'] = $runningTotals;

                        $supplierArray['res'][] = $supplierStatementArray;
                    }

                    if($RowS['Rank'] == 3){   

                        $supplierArray['summary']['s0to30days'] = $RowS['30days'];
                        $supplierArray['summary']['s60DaysStartDate'] = $RowS['60DaysStartDate'];
                        $supplierArray['summary']['s60DaysEndDate'] = $RowS['60DaysEndDate'];
                        $supplierArray['summary']['s31to60days'] = $RowS['60days'];
                        $supplierArray['summary']['s90DaysStartDate'] = $RowS['90DaysStartDate'];
                        $supplierArray['summary']['90DaysEndDate'] = $RowS['90DaysEndDate'];
                        $supplierArray['summary']['s61to90days'] = $RowS['90days'];
                        $supplierArray['summary']['s120DaysStartDate'] = $RowS['120DaysStartDate'];
                        $supplierArray['summary']['s120DaysEndDate'] = $RowS['120DaysEndDate'];
                        $supplierArray['summary']['s91to120days'] = $RowS['120days'];
                        $supplierArray['summary']['over120DaysStartDate'] = $RowS['over120DaysStartDate'];
                        $supplierArray['summary']['over120DaysEndDate'] = $RowS['over120DaysEndDate'];
                        $supplierArray['summary']['over120days'] = $RowS['over120days'];
                        $supplierArray['summary']['total'] = $RowS['total'];
                        $supplierArray['summary']['currency'] = $supplierArray['currency'];
                    }
                }                           
            }

            // if($singleSuppChk > 0){
                if(count($supplierArray['res'])>0)
                    $response['response'][] = $supplierArray;

            // }                         
            // echo '<pre>';print_r($response['response']);exit;            

            if(count($response['response']) == 0){
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            else{

                if($reportXlsxType == 1){
                        $CSVDataTitle = array();
                        $CSVDataTitle['col1'] = $this->arrUser['companyName'];
                        $response['CSVData'][] = $CSVDataTitle;
    
                        $CSVDataTitle = array();
                        $CSVDataTitle['col1'] = 'Supplier Statement';
                        $response['CSVData'][] = $CSVDataTitle;                  
    
                        $response['filename']=  APP_PATH . "Reports/supplierStatement".$this->arrUser['company_id'].".csv";
    
                        $this->createCSVfile2($response);
                       // echo "here 1 <pre>";print_r($response);exit;
                        $CSVRecCounter = 0;    
                        $response['CSVData'] = array();

                         // add an empty line
                         $CSVDataRec = array(); 
                         $response['CSVData'][] = $CSVDataRec;
                        foreach($response['response'] as $Row){
                            // add an empty line
                            $CSVDataRec = array(); 
                            $response['CSVData'][] = $CSVDataRec;

                            $CSVDataRec = array();
                            $CSVDataRec['col1'] = $Row['name']." (".$Row['supplierCode'].")";
                            $response['CSVData'][] = $CSVDataRec;
                            if($Row['primary_address_1']){
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = $Row['primary_address_1'];
                                $response['CSVData'][] = $CSVDataRec;
                            }
                            if($Row['primary_address_2']){
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = $Row['primary_address_2'];
                                $response['CSVData'][] = $CSVDataRec;
                            }
                            if($Row['city']){
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = $Row['city'];
                                $response['CSVData'][] = $CSVDataRec;
                            }
                            if($Row['county']){
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = $Row['county'];
                                $response['CSVData'][] = $CSVDataRec;
                            }
                            if($Row['postcode']){
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = $Row['postcode'];
                                $response['CSVData'][] = $CSVDataRec;
                            }
                            if($Row['country']){
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = $Row['country'];
                                $response['CSVData'][] = $CSVDataRec;
                            }
                            if($Row['primaryc_phone']){
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = $Row['primaryc_phone'];
                                $response['CSVData'][] = $CSVDataRec;
                            }
                                $CSVDataRec = array();
                                $CSVDataRec['col1'] = 'As at';
                                $CSVDataRec['col2'] = $attr['upToDate'];
                                $response['CSVData'][] = $CSVDataRec;
                            
                            // add an empty line
                            $CSVDataRec = array(); 
                            $response['CSVData'][] = $CSVDataRec;
                            if(count($Row['res'])>0){
                            $result = array();
                            $result['col1'] = 'Posting Date';
                            $result['col2'] = 'Document Type';
                            $result['col3'] = 'Document No';
                            $result['col4'] = 'Supplier Ref. No.';
                            $result['col5'] = 'Currency';
                            $result['col6'] = 'Original Amount';
                            $result['col7'] = 'Settled Amount';
                            $result['col8'] = 'Outstanding Amount';	
                            $result['col9'] = 'Due Date';
                            $result['col10'] = 'Balance';	
                            
                            $response['CSVData'][] = $result;
                            foreach($Row['res'] as $res){
                                $result = array();
                                $result['col1'] = $res['Posting_Date'];
                                $result['col2'] = $res['Document_Type'];
                                $result['col3'] = $res['Document_No'];
                                $result['col4'] = $res['Ref_No'];
                                $result['col5'] = $res['currency'];
                                $result['col6'] = $res['Original_Amount'];
                                $result['col7'] = $res['Settled_Amount'];
                                $result['col8'] = $res['Outstanding_Amount'];
                                $result['col9'] = $res['DueDate'];
                                $result['col10'] = $res['balance'];
                                
                                $response['CSVData'][] = $result;

                                if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                    $CSVRecCounter = 0;
                            
                                    $this->createCSVFileAppend($response);
                                    $response['CSVData'] = array();
                                }                       
                        
                                $CSVRecCounter++;
                            }
                            }
                        }

                        if($CSVRecCounter>0){
                            $CSVRecCounter = 0;
    
                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }
                        
                        $response['ack'] = 2;
                        $response['filename'] = WEB_PATH . "/Reports/supplierStatement".$this->arrUser['company_id'].".csv";
                        $response['response'] = array();
                        $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.'; 
                }else{
                    $response['ack'] = 1;
                    $response['error'] = NULL;
                }

                
            }

        }else {

            $response['response'][] = array();
        }

        return $response;
    }

    function customerStatementReport($attr) {
        
        $whereClause = '';
        $cutomerarray = '';
        $cutomerarray2 = '';

        if ($attr['customers']) {

            foreach ($attr['customers'] as $rec) {
                $cutomerarray .= $rec->id . ',';
            }

            $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
            $cutomerarray2 = substr($cutomerarray, 0, -1);

        } else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 
            /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $cutomerarray .= $Rowa['id'] . ',';
                }

                $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
                $cutomerarray2 = substr($cutomerarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }


        //  echo $where;exit;
        if ($attr['upToDate'] > 0)
            $upToDate = $this->objGeneral->convertEndDate($attr['upToDate']);
        else
            $upToDate = date("Y-m-d");

        $prevCustomer = 0;
        $singleCustChk = 0;

        $company_logo = '';
        $company_name = '';
        $decimal_range = '';

        if(isset($attr['companyID']) && $attr['companyID']>0){

            $this->arrUser['company_id'] = $attr['companyID'];

            $Sql = "SELECT comp.logo as company_logo,
                           comp.name as company_name,
                           comp.decimal_range
                    FROM company as comp 
                    WHERE  comp.id = ".$attr['companyID']."
                    LIMIT 1";
            // echo $Sql;exit;

            $RS = $this->Conn->Execute($Sql);
            if ($RS->RecordCount() > 0) {
                $Row = $RS->FetchRow();

                $company_logo = $Row['company_logo'];
                $company_name = $Row['company_name'];
                $decimal_range = $Row['decimal_range'];
            }
        }
        
        $sqll = 'CALL srrep_customerStatement('.$this->arrUser['company_id'].',"'.$cutomerarray2.'","'.$upToDate.'")';                

        // echo $sqll;exit;
        $RSS = $this->objsetup->CSI($sqll);

        if ($RSS->RecordCount() > 0) {
            while ($RowS = $RSS->FetchRow()) {

                foreach ($RowS as $key => $value) {
                    if (is_numeric($key))
                        unset($RowS[$key]);
                }            

                if(!($prevCustomer>0) || $prevCustomer != $RowS['crmID']){   

                    if($prevCustomer>0)
                    {
                        $singleCustChk = 0;
                        
                        if(count($customerArray['res'])>0)
                            $response['response'][] = $customerArray;
                    }
                    else{
                        $singleCustChk = 1;
                    }               

                    $prevCustomer = $RowS['crmID'];
                    $customerArray = array();  

                    $runningTotals = 0;                  
                }                   
                
                if($prevCustomer == $RowS['crmID']){

                    if($RowS['Rank'] == 1){                        
                        $customerArray['customer_code'] = $RowS['customerCode'];
                        $customerArray['name'] = $RowS['customerName'];
                        $customerArray['primary_address_1'] = $RowS['primary_address_1'];
                        $customerArray['primary_address_2'] = $RowS['primary_address_2'];
                        $customerArray['primaryc_phone'] = $RowS['primaryc_phone'];
                        $customerArray['primaryc_email'] = $RowS['primaryc_email'];

                        $customerArray['city'] = $RowS['city'];
                        $customerArray['county'] = $RowS['county'];
                        $customerArray['postcode'] = $RowS['postcode'];
                        $customerArray['country'] = $RowS['country_name'];

                        $customerArray['postingGroup'] = $RowS['postingGroup'];
                        $customerArray['vat_number'] = $RowS['vat_number'];
                        $customerArray['bank_name'] = $RowS['bank_name'];
                        $customerArray['account_name'] = $RowS['account_name'];
                        $customerArray['swift_code'] = $RowS['swift_code'];
                        $customerArray['iban'] = $RowS['iban'];
                        $customerArray['sort_code'] = $RowS['sort_code'];
                        $customerArray['account_no'] = $RowS['account_no'];
                        $customerArray['currency'] = $RowS['currency'];
                        $customerArray['payment_terms'] = $RowS['payment_terms'];
                    }

                    if($RowS['Rank'] == 2){   

                        $customerStatementArray = array();

                        $customerStatementArray['Posting_Date'] = $this->objGeneral->convert_unix_into_date($RowS['posting_date']);

                        if($RowS['document_type'] == 'Negative General Journal' || $RowS['document_type'] == 'Positive General Journal'){
                            $customerStatementArray['Document_Type'] = 'General Journal';
                        }
                        else{
                            $customerStatementArray['Document_Type'] = $RowS['document_type'];
                        }
                        
                        $customerStatementArray['Document_No'] = $RowS['document_no'];
                        $customerStatementArray['Ref_No'] = $RowS['ref_no'];
                        $customerStatementArray['currency'] = $RowS['currency'];
                        $RowS['remaining_amount'] = $RowS['total_amount'] - $RowS['setteled_amount'];

                        if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7 || ($RowS['dType'] == 9 && $RowS['document_type'] == 'Negative General Journal'))
                            $customerStatementArray['Original_Amount'] = (-1) * $RowS['total_amount'];
                        else
                            $customerStatementArray['Original_Amount'] = $RowS['total_amount'];

                        $customerStatementArray['Settled_Amount'] = $RowS['setteled_amount'];

                        if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7 || ($RowS['dType'] == 9 && $RowS['document_type'] == 'Negative General Journal'))
                            $RemainingAmount = (-1) * $RowS['remaining_amount'];
                        else
                            $RemainingAmount = $RowS['remaining_amount'];

                        $customerStatementArray['Outstanding_Amount'] = $RemainingAmount;

                        /* if ($RowS['due_date'] != 0 || $RowS['due_date'] != '')
                            $customerStatementArray['Due Date'] = $this->objGeneral->convert_unix_into_date($RowS['due_date']);
                        else
                            $customerStatementArray['Due Date'] = ''; */

                        $customerStatementArray['DueDate'] = $RowS['due_date'];
                        
                        if ($RowS['dType'] == 2 || $RowS['dType'] == 3 || $RowS['dType'] == 6 || $RowS['dType'] == 7 || ($RowS['dType'] == 9 && $RowS['document_type'] == 'Negative General Journal'))
                            $runningTotals = $runningTotals - $RowS['remaining_amount'];
                        else
                            $runningTotals = $runningTotals + $RowS['remaining_amount'];                        

                        $customerStatementArray['balance'] = $runningTotals;
                        $RowS['totalSUM'] = $runningTotals;

                        $customerArray['res'][] = $customerStatementArray;
                    }

                    if($RowS['Rank'] == 3){   

                        $customerArray['summary']['s0to30days'] = $RowS['30days'];
                        $customerArray['summary']['s60DaysStartDate'] = $RowS['60DaysStartDate'];
                        $customerArray['summary']['s60DaysEndDate'] = $RowS['60DaysEndDate'];
                        $customerArray['summary']['s31to60days'] = $RowS['60days'];
                        $customerArray['summary']['s90DaysStartDate'] = $RowS['90DaysStartDate'];
                        $customerArray['summary']['90DaysEndDate'] = $RowS['90DaysEndDate'];
                        $customerArray['summary']['s61to90days'] = $RowS['90days'];
                        $customerArray['summary']['s120DaysStartDate'] = $RowS['120DaysStartDate'];
                        $customerArray['summary']['s120DaysEndDate'] = $RowS['120DaysEndDate'];
                        $customerArray['summary']['s91to120days'] = $RowS['120days'];
                        $customerArray['summary']['over120DaysStartDate'] = $RowS['over120DaysStartDate'];
                        $customerArray['summary']['over120DaysEndDate'] = $RowS['over120DaysEndDate'];
                        $customerArray['summary']['over120days'] = $RowS['over120days'];
                        $customerArray['summary']['total'] = $RowS['total'];
                        $customerArray['summary']['currency'] = $customerArray['currency'];
                    }
                }                           
            }

            // if($singleCustChk > 0){
                if(count($customerArray['res'])>0)
                    $response['response'][] = $customerArray;

            // }                         
            //echo '<pre>';print_r($response['response']);exit;            

            if(count($response['response']) == 0){
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            else{
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['company_logo'] = $company_logo;
                $response['company_name'] = $company_name;
                $response['decimal_range'] = $decimal_range;
            }

        }else {

            $response['response'][] = array();
        }

        return $response;
    }

    function get_employees_by_dept_id($attr) {
        $Sql = "SELECT 
                emp.*,
                cd.name AS department,
                cd.type AS deptype 
              FROM
                sr_employee_sel emp 
                LEFT JOIN hr_selected_departments AS hr 
                  ON hr.hr_id = emp.id 
                  LEFT JOIN `config_departments` cd ON cd.`id` = hr.`department_id`
                where emp.user_company=" . $this->arrUser['company_id'] . "
                     AND emp.status = 1 and cd.type = " . $attr['department_id'] . "
                     ";
        // echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);


        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['code'] = $Row['user_code'];
                $row['name'] = $Row['first_name'] . ' ' . $Row['last_name'];
                $row['email'] = $Row['user_email'];
                $row['job_title'] = $Row['job_title'];
                $row['employee_type'] = $Row['emp_type'];
                $row['department'] = $Row['department'];


                $result['response'][] = $row;
            }
            $result['ack'] = 1;
            $result['error'] = null;
            
        }
        else {
            $result['ack'] = 0;
            $result['error'] = 'No Record found!';
        }
        require_once(SERVER_PATH . "/classes/Setup.php");
        $objsetup = new Setup($this->arrUser);

        $result['response']['tbl_meta_data'] = $objsetup->GetTableMetaData('SalePersonsDetailModal', 1);
        return $result;
    }

    function salepersonActivityReport($attr) {

        $final = array();
        $intype = "";

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
          if ($attr['salespersons']) {

                  
                    //$where .=" AND orders.sale_person_id in (" . substr($salespersonsArray, 0, -1) . ") ";
                }
        $salespersonsArray = false;
        if (count($attr['salespersons']) > 0) {          

            foreach ($attr['salespersons'] as $rec) {
                if($rec->id > 0)
                    $salespersonsArray .= $rec->id . ',';
            }
            $salespersonsArray = substr($salespersonsArray, 0, -1);
        } else {
            
            /* $sqla = "SELECT * FROM (SELECT emp.id AS empID,
                        emp.user_code,
                        CONCAT(emp.first_name,' ',emp.last_name) AS name,
                        emp.user_email as email,
                        emp.job_title,
                        (CASE WHEN emp.employee_type>0 THEN empType.name ELSE '' END )AS employee_type
                
                FROM crm_salesperson AS cp
                LEFT JOIN  employees AS emp ON cp.salesperson_id=emp.id
                LEFT JOIN employee_type AS empType ON empType.id=emp.employee_type
                WHERE cp.company_id=" . $this->arrUser['company_id'] . " 

                UNION 
                SELECT  emp.id AS empID,
                        emp.user_code,
                        CONCAT(emp.first_name,' ',emp.last_name) AS name,
                        emp.user_email as email,
                        emp.job_title,
                            (CASE WHEN emp.employee_type>0 THEN empType.name ELSE '' END )AS employee_type
                FROM orders AS cp
                LEFT JOIN  employees AS emp ON cp.sale_person_id=emp.id
                LEFT JOIN employee_type AS empType ON empType.id=emp.employee_type

                WHERE cp.company_id=" . $this->arrUser['company_id'] . " AND cp.sale_person_id > 0
                GROUP BY empID
                ) AS tbl where 1  "; */
                // $sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            
                $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . "  OR
                emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
                emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) )" : "";
                $sqla = "  SELECT * FROM (SELECT emp.id,
                                            emp.user_code,
                                            emp.line_manager_name_id,
                                            CONCAT(first_name,' ',last_name) AS name,
                                            emp.user_email AS email,
                                            emp.job_title,
                                            (CASE WHEN emp.employee_type>0 THEN empType.name 
                                                ELSE '' 
                                                END )AS employee_type
                                        FROM employees AS emp,
                                            employee_type AS empType 
                                        WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND emp.status = 1 AND
                                            (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                            $where_line_manager                                        
                                        GROUP BY emp.id
                                        ORDER BY emp.user_code DESC) AS tbl  
                            where 1  " . $where_clause . " ";           
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $salespersonsArray .= $Rowa['id'] . ',';
                }

                $salespersonsArray = substr($salespersonsArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $Sql = "CALL srrep_SalespersonActvityReport(" . $this->arrUser['company_id'] . ", '" . $dateFrom . "', '" . $dateTo . "','".$salespersonsArray."')";
      // echo $Sql;
         $RS = $this->objsetup->CSI($Sql);
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key)) {
                        unset($Row[$key]);
                    }
                }
                // $Row['AddedOn'] = $this->objGeneral->convert_unix_into_datetime($Row['datetime']);
                $final[] = $Row;
            }
        } else {
            $final = [];
        }
                
        $salesPersonsIds = array_column($final, 'salespersonName', 'salespersonId');
        $data = [];
        $grandTotalArray = [];

        $grandTotalNotes = 0;                                 
        $grandTotalCrm = 0;                              
        $grandTotalCustomer = 0;                                 
        $grandTotalTask = 0;  

        $timestamp = current_date_time;
        foreach ($salesPersonsIds as $ids => $name)
        {
            $crm_counter =  $customer_counter = $tasks_counter = $notes_counter = 0;
            // print_r($final);exit;
            foreach ($final as $row)
            {
                //print_r($row['salespersonId']);
                if($ids == $row['salespersonId'])                    
                {  
                    $status = $row['status'];   
                    //  print_r($row);
                    if($row['listtype']=='crm')
                    {
                        $crm_counter = $crm_counter +1;
                    }
                    if($row['listtype']=='customer')
                    {
                        $customer_counter = $customer_counter +1;
                    }
                    if($row['listtype']=='tasks')
                    {
                            // if ($row['datetime'] < $timestamp) {
                            if ($status == 1) {
                                $row['taskStatus'] = 'Overdue';
                                $row['taskStatusColor'] = 'red';
                            }
                            // else if ($row['datetime'] > $timestamp) {
                            else if ($status == 2) {
                                $row['taskStatus'] = 'Future';
                                $row['taskStatusColor'] = 'yellow';
                            }

                            // if ($row['datetime'] == 1) {
                            if ($status == 3) {
                                $row['taskStatus'] = 'Completed';
                                $row['taskStatusColor'] = 'green';
                            }
                            // print_r($row); exit;
                            $row['dueDate'] =  $this->objGeneral->convert_unix_into_datetime($row['datetime']);
                            // $row['dueDate'] =  $this->objGeneral->convert_unix_into_datetime($row['datetime']);
            
                            $tasks_counter = $tasks_counter +1;
                    }

                    if($row['listtype']=='notes')
                    {
                        $notes_counter = $notes_counter +1;
                    }
                    $row['AddedTimestamp'] = intval($row['AddedTimestamp']);
                    $data[$ids]['customers'][] = $row;
                }
                
                $data[$ids]['summary']['name'] = $name;
                $data[$ids]['summary']['totalNotes'] = ($notes_counter == 0) ? '-' : $notes_counter;
                $data[$ids]['summary']['totalCrm'] = ($crm_counter == 0) ? '-' : $crm_counter;
                $data[$ids]['summary']['totalCustomer'] = ($customer_counter == 0) ? '-' : $customer_counter;
                $data[$ids]['summary']['totalTask'] = ($tasks_counter == 0) ? '-' : $tasks_counter;  

            }
                $grandTotalNotes = $grandTotalNotes + $notes_counter;                                
                $grandTotalCrm = $grandTotalCrm + $crm_counter;                              
                $grandTotalCustomer = $grandTotalCustomer + $customer_counter;                                 
                $grandTotalTask = $grandTotalTask + $tasks_counter;                                                                                    
        }
        $grandTotalArray['name'] = 'Grand Total';                                 
        $grandTotalArray['totalNotes'] = $grandTotalNotes;                                 
        $grandTotalArray['totalCrm'] = $grandTotalCrm;                                 
        $grandTotalArray['totalCustomer'] = $grandTotalCustomer;                                 
        $grandTotalArray['totalTask'] = $grandTotalTask;                  
        
        if (count($data) > 0) {
            $response['response'] = $data;
            $response['grandTotalArray'] = $grandTotalArray;
            $response['ack'] = 1;
        } else {
            $response['response'] = [];
            $response['ack'] = 0;
        }
        // print_r($final);

        return $response;
    }

    function createCSVfile($attr){

        $filename =  $attr['filename'];
        $array = $attr['CSVData'];
        $delimiter = ',';

        // print_r($array);exit;

        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="'.$filename.'"');

        // open the "output" stream
        $output = fopen($filename, 'w+');

        foreach ($array as $line) {
            fputcsv($output, $line);
        }
        
        fclose($output);
    }

    function createCSVfile2($attr){

        $filename =  $attr['filename'];
        $array = $attr['CSVData'];

        // print_r($array);exit;

        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="'.$filename.'"');

        // open the "output" stream
        $output = fopen($filename, 'w+');

        foreach ($array as $line) {
            fputcsv($output, $line);
        }
        
        fclose($output);
    }

    function createCSVFileAppend($attr){

        $filename =  $attr['filename'];
        $array = $attr['CSVData'];
        $delimiter = ',';

        // print_r($array);exit;

        // open the "output" stream
        $output = fopen($filename, 'a+');

        foreach ($array as $line) {
            fputcsv($output, $line);
        }
        
        fclose($output);        
    }

    function addToFavReport($arr_attr){
        $this->objGeneral->mysql_clean($arr_attr);


        // $SqlForTotalReports = "SELECT COUNT(userId) as total_fav FROM favourite_reports where "
        //  . "company_id=" . $this->arrUser['company_id'] 
        // . " AND userId=" . $this->arrUser['id'] 
        // . ";";
        // $RS1 = $this->objsetup->CSI($SqlForTotalReports);
        //  if ($RS1->RecordCount() > 0) {
        //      $total_fav['total_fav'] = $RS1->FetchRow()['total_fav'];
        //      echo $Sql;exit;
        //     // print_r($total_fav);exit;
        //     }

        $Sql = "INSERT INTO favourite_reports SET userId ="
        .$arr_attr['userId']
        . ", reportId = ".$arr_attr['reportId'] 
        . ", status = ".$arr_attr['isFav'] 
        . ", company_id=" . $this->arrUser['company_id'] 
        . ", AddedBy='" . $this->arrUser['id'] 
        . "', AddedOn=UNIX_TIMESTAMP (NOW()) ON DUPLICATE KEY UPDATE " 
        . "status = ".$arr_attr['isFav'] 
        . ", ChangedBy='" . $this->arrUser['id'] 
        . "', ChangedOn=UNIX_TIMESTAMP (NOW()) " 
        . ";"      
        ;

        $RS = $this->objsetup->CSI($Sql);
        // echo $Sql;exit;
        // print_r($RS);exit;


        if ($this->Conn->Insert_ID()) {
               $lastInsertid = $this->Conn->Insert_ID();
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['response'][] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        return $response;
    }
    function getFavReport($arr_attr){
        $this->objGeneral->mysql_clean($arr_attr);
        $Sql = "SELECT reportId, shortId, title  FROM favourite_reports AS fr,reports as rep WHERE fr.reportId = rep.id and  userId="
        .$arr_attr['userId']
        ." AND fr.status = 1 ;" 
        ;

        $RS = $this->objsetup->CSI($Sql);
        // print_r($RS);exit;
        $response = array();
        if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {
                    $row = array();
                    $row['reportId'] = $Row['reportId'];
                    $row['shortId'] = $Row['shortId'];
                    $row['title'] = $Row['title'];
                    $response['response'][] = $row;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['ack'] = 0;
                $response['response'][] = array();
            }
            return $response;


    }
    function profitLossStatement($arr_attr){
        $this->objGeneral->mysql_clean($arr_attr);

        $dateFrom = $this->objGeneral->convertStartDate($arr_attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($arr_attr['dateTo']);


        
        $datediff =  strtotime($dateTo) - strtotime($dateFrom);
        $daysdiff = round($datediff / (60 * 60 * 24));
        $newFromDate = date('Y-m-d', strtotime($dateFrom.  ' - '. $daysdiff .' days'));
        $newToDate = date('Y-m-d', strtotime($dateFrom. ' - 1 days'));


        $isCompare = $arr_attr['compare']; 
        $isPercentageTurnover = $arr_attr['percentageTurnover']; 
        $reportFrequency = 1;
        if($isCompare){
            $reportFrequency = 2;
        } else {
            $reportFrequency = 1;
        }
        $pnlSQL = "CALL srrep_profit_and_loss(". $this->arrUser['company_id'] . ", '". $dateFrom . "', '". $dateTo . "', ". $reportFrequency. ")";
        // print_r($pnlSQL);exit;
        $RS = $this->objsetup->CSI($pnlSQL);
        
       
        $responseObj = array();
        $response = array();
        $plTotalIncome = array();
        $plTotalCostOfSales =array();
        $plTotalOverheads = array();
        if ($RS->RecordCount() > 0) {
                // error_reporting(E_ALL);
                    while ($Row = $RS->FetchRow()) {
                        $row = array();

                            if($Row['category'] == "Income"){

                                $row['total'] = $Row['cr_lcy'] - $Row['dr_lcy'];
                                $plTotalIncome[$Row['num_of_comp']] = $plTotalIncome[$Row['num_of_comp']] + $row['total'];

                            } else if($Row['subCategory'] == "Direct Expenses"){
                                $row['total'] = $Row['dr_lcy'] - $Row['cr_lcy'];
                                $plTotalCostOfSales[$Row['num_of_comp']] = $plTotalCostOfSales[$Row['num_of_comp']] + $row['total'];
                            
                            } else if($Row['subCategory'] == "Overheads"){
                                $row['total'] = $Row['dr_lcy'] - $Row['cr_lcy'];
                                // $row['total'] = $Row['cr_lcy'] - $Row['dr_lcy'];
                                $plTotalOverheads[$Row['num_of_comp']] = $plTotalOverheads[$Row['num_of_comp']] + $row['total'];
                            }


                            $row['cr_lcy'] = $Row['cr_lcy'];
                            $row['dr_lcy'] = $Row['dr_lcy'];
                            $row['account'] = $Row['account'];
                            $row['category'] = $Row['category'];
                            $row['subCategory'] = $Row['subCategory'];
                            $row['gl_account_code'] = $Row['gl_account_code'];
                            $row['period_title'] = $Row['period_title'];
                            $row['num_of_comp'] = $Row['num_of_comp'];
                            $response['response'][$Row['num_of_comp']-1][] = $row;
                    }
                    $response['summary']['plTotalIncome'] = $plTotalIncome; 
                    // $response['summary']['plTotalCostOfSales']['value'] = $plTotalCostOfSales; 
                    // $response['summary']['plTotalCostOfSales']['percentage'] = ($plTotalCostOfSales/$plTotalIncome)*100; 
                    // $response['summary']['plTotalOverheads']['value'] = $plTotalOverheads; 
                    // $response['summary']['plTotalOverheads']['percentage'] = ($plTotalOverheads/$plTotalIncome)*100; 
                    // $response['summary']['plGrossProfit']['value'] = $plTotalIncome - $plTotalCostOfSales; 
                    // $response['summary']['plGrossProfit']['percentage'] = (($plTotalIncome - $plTotalCostOfSales)/$plTotalIncome)*100; 
                    // $response['summary']['netProfit']['value'] =  ($plTotalIncome - $plTotalCostOfSales ) - $plTotalOverheads; 
                    // $response['summary']['netProfit']['percentage'] =  ((($plTotalIncome - $plTotalCostOfSales ) - $plTotalOverheads)/$plTotalIncome)/100; 




                    $response['ack'] = 1;
                    $response['loop'] = $num;
                    $response['error'] = NULL;
        
            } else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }


                return  $response;
          

    }



    function balanceSheetReport($arr_attr){
        $this->objGeneral->mysql_clean($arr_attr);

        $date = $this->objGeneral->convertStartDate($arr_attr['upToDate']);

        $isCompare = $arr_attr['compare']; 
        $reportFrequency = 1;
        if($isCompare){
            $reportFrequency = 2;
        } else {
            $reportFrequency = 1;
        }

     
        $SQL = "CALL srrep_balance_sheet(". $this->arrUser['company_id'] . ", '". $date  . "', ". $reportFrequency. ")";
        // print_r($SQL);exit;
        $RS = $this->objsetup->CSI($SQL);
        
       
        $responseObj = array();
        $response = array();
        $isConfigSet = 0;

        if ($RS->RecordCount() > 0) {
                // error_reporting(E_ALL);
                    while ($Row = $RS->FetchRow()) {
                        $row = array();

                        $response['settings']['period_title'][$Row['num_of_comp']-1]["title"] = $Row['period_title'];

                            $row['displayName'] = $Row['displayName'];
                            $row['glaccountCode'] = $Row['glaccountCode'];
                            $row['accountTotal'] = $Row['accountTotal'];
                            $row['glaccountTypeID'] = $Row['glaccountTypeID'];
                            $row['period_title'] = $Row['period_title'];
                            $row['num_of_comp'] = $Row['num_of_comp'];
                            $row['category'] = $Row['category'];
                            $row['gltranscation'] = $Row['gltranscation'];
                            $row['subCategory'] = $Row['subCategory'];
                            $row['Credit'] = $Row['Credit'];
                            $row['Debit'] = $Row['Debit'];
                            if($Row['category'] == "Assets"){
                                $row['total'] = $Row['Debit'] - $Row['Credit'];
                            } else {
                                $row['total'] = $Row['Credit'] - $Row['Debit'];
                            }

                            if($Row['glaccountTypeID'] == 4 && $Row['category'] != "Assets"){
                                $row['total'] = $row['total'] * -1;
                                $row['accountTotal'] = $row['accountTotal'] * -1;
                            }
                            
                            $response['response'][$Row['glaccountCode']][] = $row;
                    }
                  
                    $response['ack'] = 1;
                    $response['isCompare'] = $isCompare;
                    $response['loop'] = $num;
                    $response['error'] = NULL;
        
            }
            else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }


                return  $response;
          

    }

    function openSaleOrdersDetail($arr_attr){


        // error_reporting(1);

        $this->objGeneral->mysql_clean($arr_attr);

        $dateFrom = $this->objGeneral->convert_date($arr_attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($arr_attr['dateTo']);

        if ($arr_attr['items']) {

            $itemsarray = '';

            foreach ($arr_attr['items'] as $rec) {
                if($rec->id > 0)
                    $itemsarray .= $rec->id . ',';
            }
            $itemsarray =  substr($itemsarray, 0, -1);
            $where .=" AND product_id in (" . $itemsarray. ") ";
        }
        else {

            $sqla = "SELECT prd.id 
                    FROM productcache prd
                    WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    $itemsarray .= $Rowa['id'] . ',';                    
                }
                $itemsarray =  substr($itemsarray, 0, -1);
                $where .=" AND product_id in (" . $itemsarray . ") ";
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $SQL = "CALL srrep_open_sales_order_detail(".$this->arrUser['company_id'].", $dateFrom, $dateTo, '$itemsarray')";
        // echo $SQL; exit;
        $RS = $this->objsetup->CSI($SQL);

        $groupIndex = 0;
        $loopIndex = 0;
        if ($RS->RecordCount() > 0) {
                while ($Row= $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    if($loopIndex == 0){
                        $groupIndexSwitcher = $Row["product_code"];   
                        $response1['response'][$groupIndex][number_format($Row["isAllocated"])][] = $Row;                    
                    } else{
                        if($groupIndexSwitcher == $Row["product_code"]){
                            $response1['response'][$groupIndex][number_format($Row["isAllocated"])][] = $Row;
                        } else {
                            $groupIndexSwitcher = $Row["product_code"]; 
                            $groupIndex++; 
                            $response1['response'][$groupIndex][number_format($Row["isAllocated"])][] = $Row;
                        }
                    }


                    // $response1['response'][] = $Row;

                    $loopIndex++;
                }

                $response1['ack'] = 1;
                $response1['error'] = NULL;

            }
            else{
                $response1['response'] = array();
                $response1['ack'] = 0;
                $response1['error'] = NULL;
            }
            // print_r($response); exit;

            return $response1;

    }


    function customerActivityReport($arr_attr){
        $this->objGeneral->mysql_clean($arr_attr);
        $responseBalance = array();
        $dateFrom = $this->objGeneral->convert_date($arr_attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($arr_attr['dateTo']);

        
        if ($arr_attr['customers']) {

            $cutomerarray = '';

            foreach ($arr_attr['customers'] as $rec) {
                if($rec->id > 0)
                    $cutomerarray .= $rec->id . ',';
            }
            $cutomerarray = substr($cutomerarray, 0, -1);
            // $where .=" AND orders.sell_to_cust_id in (" . substr($cutomerarray, 0, -1) . ") ";
        }else {

            $sqla = "SELECT c.id 
                    FROM sr_crm_listing c
                    WHERE c.type IN (2,3) AND 
                        c.company_id=" . $this->arrUser['company_id'] . " "; 
            
            /* $sqla = "SELECT  c.id
                    FROM crm c
                    WHERE c.type IN (2,3) AND 
                        c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $cutomerarray .= $Rowa['id'] . ',';
                }

                $cutomerarray = substr($cutomerarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }


        // echo $cutomerarray; exit;

        $SQL = "CALL srrep_CustomerActivity(".$this->arrUser['company_id'].", $dateFrom, $dateTo, '$cutomerarray')";
        // echo $SQL; exit;
        $RS = $this->objsetup->CSI($SQL);

        $responseObj = array();
        $response = array();
        $isConfigSet = 0;
        $index = 0;

        $runningCustomer = "";
        $runningBalance = 0;
        if ($RS->RecordCount() > 0) {
                // error_reporting(E_ALL);
                    while ($Row = $RS->FetchRow()) {


                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        if($index == 0){
                            $runningCustomer = $Row['sell_to_cust_no'];                           
                            
                            // $runningBalance = $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'];
                        }
                        
                        if($Row['rank'] ==1){
                            $runningBalance = ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];
                            $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'] = ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];
                        }

                        if($Row['rank'] ==2){

                            $Row['posting_date'] = date("d/m/Y", strtotime($Row['posting_date2']));
                            $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
                            $Row['on_hold_check'] = (intval($Row['on_hold']) > 0) ? true : false;
                            
                            $Row['remaining_amount'] =  Round($Row['remaining_amount'],2);
                            $Row['remaining_amount_lcy'] =  Round($Row['remaining_amount_lcy'],2);
                            $Row['amount_without_vat'] =  Round($Row['amount_without_vat'],2);

                            $Row['amount_paid'] =  floatval($Row['grand_total']) - floatval($Row['remaining_amount']);
                            $Row['openingBalance'] =  ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];// $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'];

                        }

                            
                            if($runningCustomer == $Row['sell_to_cust_no']){

                                if($Row['rank'] ==2){

                                    $runningBalance = $runningBalance + floatval($Row['grand_total']);
                                    // $runningBalance = $runningBalance + $Row['remaining_amount'];
                                    $Row['runningBalance'] = $runningBalance;
                                }
                                
                                
                            } else {
                                $runningCustomer = $Row['sell_to_cust_no'];
                                // $runningBalance = 0;
                                // $runningBalance = $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'];

                                if($Row['rank'] ==1){
                                    $runningBalance = ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];
                                    $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'] = ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];

                                    
                                }

                                if($Row['rank'] ==2){

                                    $runningBalance = $runningBalance + floatval($Row['grand_total']);
                                    // $runningBalance = $runningBalance + $Row['remaining_amount'];
                                    $Row['runningBalance'] = $runningBalance;
                                }
                            }
                            $Row['index'] = $index++;                        
                            if($Row['openingBalanc']=='333333333'){
                                $Row['openingBalanc']='0';
                            }
                            
                        // if($Row['rank'] ==2)
                            $response['response'][] = $Row;
                    }
                  
                    $response['ack'] = 1;
                    // $response['loop'] = $num;
                    $response['error'] = NULL;
                    $response['Balances'] = $responseBalance;
        
            }
            else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }


                return  $response;


    }

    function customerPriceListReport($arr_attr){

        $this->objGeneral->mysql_clean($arr_attr);
        $response = array();
        $dateFrom = $this->objGeneral->convert_date($arr_attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($arr_attr['dateTo']);
        
        if ($arr_attr['customers']) {

            $cutomerarray = '';

            foreach ($arr_attr['customers'] as $rec) {
                if($rec->id > 0)
                    $cutomerarray .= $rec->id . ',';
            }
            $cutomerarray = substr($cutomerarray, 0, -1);
            // $where .=" AND orders.sell_to_cust_id in (" . substr($cutomerarray, 0, -1) . ") ";
        }else {

            $sqla = "SELECT c.id 
                    FROM sr_crm_listing c
                    WHERE c.type IN (2,3) AND 
                        c.company_id=" . $this->arrUser['company_id'] . " "; 
            
            /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $cutomerarray .= $Rowa['id'] . ',';
                }

                $cutomerarray = substr($cutomerarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }


        // echo $cutomerarray; exit;

        $SQL = "CALL srrep_CustomerPriceList(".$this->arrUser['company_id'].", $dateFrom, $dateTo, '$cutomerarray')";
        // echo $SQL; exit;
        $RS = $this->objsetup->CSI($SQL);

        $responseObj = array();
        $response = array();
        $isConfigSet = 0;
        $index = 0;
        $prevCustomer = 0;

        $runningCustomer = "";
        $runningBalance = 0;
        if ($RS->RecordCount() > 0) {
            while ($RowS = $RS->FetchRow()) {
                foreach ($RowS as $key => $value) {
                    if (is_numeric($key))
                        unset($RowS[$key]);
                }

                /* if(!($prevCustomer>0) || $prevCustomer != $RowS['crmID']){   

                    if($prevCustomer>0)
                    {
                        $singleCustChk = 0;
                        
                        if(count($customerArray['itemList'])>0)
                            $response['response'][] = $customerArray;
                    }
                    else{
                        $singleCustChk = 1;
                    }               

                    $prevCustomer = $RowS['crmID'];
                    $customerArray = array();                   
                }

                            
                if($prevCustomer == $RowS['crmID']){

                    if($RowS['rank'] == 1){                        
                        $customerArray['Customer_Code'] = $RowS['Customer_Code'];
                        $customerArray['Customer_Name'] = $RowS['Customer_Name'];
                    }

                    if($RowS['rank'] == 2){   

                        $customerPriceListArray = array();

                        $customerPriceListArray['start_date'] = $this->objGeneral->convert_unix_into_date($RowS['start_date']);                        
                        $customerPriceListArray['end_date'] = $this->objGeneral->convert_unix_into_date($RowS['end_date']);                        
                        $customerPriceListArray['priceName'] = $RowS['priceName'];
                        $customerPriceListArray['minQty'] = $RowS['minQty'];
                        $customerPriceListArray['maxQty'] = $RowS['maxQty'];
                        $customerPriceListArray['currency'] = $RowS['currency'];

                        $customerPriceListArray['Customer_Code'] = $RowS['Customer_Code'];
                        $customerPriceListArray['Customer_Name'] = $RowS['Customer_Name'];

                        $customerPriceListArray['Item_Code'] = $RowS['Item_Code'];
                        $customerPriceListArray['Item_Description'] = $RowS['Item_Description'];

                        $customerPriceListArray['UOM'] = $RowS['UOM'];

                        $customerArray['itemList'][] = $customerPriceListArray;
                    }

                    if($RowS['rank'] == 3){   

                        $customerArray['volume']['minQty'] = $RowS['minQty'];
                        $customerArray['volume']['discount'] = $RowS['discount'];
                    }
                }  */

                $RowS['start_date'] = $this->objGeneral->convert_unix_into_date($RowS['start_date']);                        
                $RowS['end_date'] = $this->objGeneral->convert_unix_into_date($RowS['end_date']);   

                $response['response'][] = $RowS;
            }

            /* if(count($customerArray['itemList'])>0)
                    $response['response'][] = $customerArray;

            if(count($response['response']) == 0){
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
            else{
                $response['ack'] = 1;
                $response['error'] = NULL;
            } */
            
            $response['ack'] = 1;
            $response['error'] = NULL;    
        }
        else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return  $response;
    }

    function customerPriceListReportPortal($arr_attr){

        $this->objGeneral->mysql_clean($arr_attr);
        $response = array();

        $responseObj = array();
        
        if ($arr_attr['customers']) {

            $cutomerarray = '';

            foreach ($arr_attr['customers'] as $rec) {
                if($rec->id > 0)
                    $cutomerarray .= $rec->id . ',';
            }
            $cutomerarray = substr($cutomerarray, 0, -1);
        }
        else {
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
        }

        if(isset($arr_attr['selCust'])){

            $key = hash('sha256', SECRET_KEY);
            $iv = substr(hash('sha256', SECRET_IV), 0, 16);
            $outputInvName = openssl_decrypt(base64_decode($arr_attr['selCust']), SECRET_METHOD, $key, 0, $iv);
            $fileName = explode(",",$outputInvName);

            $customerID = $fileName[1];

            $Sql = "SELECT c.id as cid,c.customer_code,c.name,c.company_id,
                            company.name as compName,company.url,company.address,
                            company.address_2,company.county,company.postcode,company.telephone,
                            company.fax,company.city,company.logo
                    FROM crm c
                    LEFT JOIN company on company.id = c.company_id
                    WHERE c.type IN (2,3) AND 
                        c.customer_code IS NOT NULL AND 
                        c.name !='' AND 
                        c.id=" . $customerID. "";
            // echo $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 0) {
                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $row = array();
                    $arr_attr['cust_id'] = $Row['cid'];
                    $this->arrUser['company_id'] = $Row['company_id'];

                    $arr_attr['compName'] = $Row['compName'];
                    $arr_attr['compURL'] = $Row['url'];
                    $arr_attr['address'] = $Row['address'];
                    $arr_attr['address_2'] = $Row['address_2'];
                    $arr_attr['county'] = $Row['county'];
                    $arr_attr['postcode'] = $Row['postcode'];
                    $arr_attr['telephone'] = $Row['telephone'];
                    $arr_attr['fax'] = $Row['fax'];
                    $arr_attr['city'] = $Row['city'];
                    $arr_attr['logo'] = $Row['logo'];
                }
                $response['customerID'] = $customerID;
            } else {
                $response['ack'] = 1;
                $response['error'] = NULL;
                $response['response'][] = array();
                return $response;
            }
        }
        else{
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
            return $response;
        }

        $response['compName'] = $arr_attr['compName'];
        $response['compURL'] = $arr_attr['compURL'];
        $response['address'] = $arr_attr['address'];
        $response['address_2'] = $arr_attr['address_2'];
        $response['county'] = $arr_attr['county'];
        $response['postcode'] = $arr_attr['postcode'];
        $response['telephone'] = $arr_attr['telephone'];
        $response['fax'] = $arr_attr['fax'];
        $response['city'] = $arr_attr['city'];
        $response['logo'] = $arr_attr['logo']; 

        $Sql = "SELECT year_start_date,year_end_date
				FROM financial_settings
				WHERE company_id=" . $this->arrUser['company_id'] . "
				LIMIT 1";

        //echo $Sql; exit;
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $Row = $RS->FetchRow();

            foreach ($Row as $key => $value) {
                if (is_numeric($key))
                    unset($Row[$key]);
            }

            $dateFrom = $Row['year_start_date'];
            $dateTo = $Row['year_end_date'];
        }

        $SQL = "CALL srrep_CustomerPriceList(".$this->arrUser['company_id'].", $dateFrom, $dateTo, '$cutomerarray')";
        // echo $SQL; exit;
        $RS = $this->objsetup->CSI($SQL);

        
        $isConfigSet = 0;
        $index = 0;
        $prevCustomer = 0;

        $runningCustomer = "";
        $runningBalance = 0;
        if ($RS->RecordCount() > 0) {
            while ($RowS = $RS->FetchRow()) {
                foreach ($RowS as $key => $value) {
                    if (is_numeric($key))
                        unset($RowS[$key]);
                }

                $RowS['start_date'] = $this->objGeneral->convert_unix_into_date($RowS['start_date']);                        
                $RowS['end_date'] = $this->objGeneral->convert_unix_into_date($RowS['end_date']);   

                $response['response'][] = $RowS;
            }
            
            $response['ack'] = 1;
            $response['dateFrom'] = $this->objGeneral->convert_unix_into_date($dateFrom);  
            $response['dateTo'] = $this->objGeneral->convert_unix_into_date($dateTo); 
            $response['error'] = NULL;    
        }
        else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        return  $response;
    }

    function supplierActivityReport($arr_attr){
        $this->objGeneral->mysql_clean($arr_attr);
        $responseBalance = array();
        $dateFrom = $this->objGeneral->convert_date($arr_attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($arr_attr['dateTo']);

        $docTypeID = (isset($arr_attr['docTypeID']) && $arr_attr['docTypeID']!='')?$arr_attr['docTypeID']:1;   


        // echo $dateFrom; exit;
        if ($arr_attr['suppliers']) {
            // echo "in if"; exit;

            $supplierarray = '';
            foreach ($arr_attr['suppliers'] as $rec) {
                $supplierarray .= $rec->id . ',';
                
                    // $suppliersBalance['balance'] = self::CalculateSupplierBalance($rec->id, $dateFrom);
                    // $suppliersBalance['id'] = $rec->id;
                    // $suppliersBalance['supplier_code'] = $rec->supplier_code;

                    // $responseBalance['supplier_balance'][$suppliersBalance['supplier_code']] = $suppliersBalance;

                    

            }            
            $supplierarray = rtrim($supplierarray, ", ");
            // echo $supplierarray; exit;
        }
        else {
            // echo "in else"; exit;

            $sqla = "SELECT s.id , s.supplier_code
                    FROM sr_srm_general_sel s
                    WHERE s.type IN (2,3) AND 
                            s.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 24);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    // $suppliersBalance['balance'] = self::CalculateSupplierBalance($Rowa['id'], $dateFrom);
                    // $suppliersBalance['id'] = $Rowa['id'];
                    // $suppliersBalance['supplier_code'] = $Rowa['supplier_code'];

                    // $responseBalance['supplier_balance'][$suppliersBalance['supplier_code']] = $suppliersBalance;
                    
                    $supplierarray .= $Rowa['id'] . ',';
                }

                $supplierarray = substr($supplierarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }  

        $SQL = "CALL srrep_SupplierActivity(".$this->arrUser['company_id'].", $dateFrom, $dateTo, '$supplierarray',$docTypeID)";
        // echo $SQL; exit;
        $RS = $this->objsetup->CSI($SQL);
        
       
        $responseObj = array();
        $response = array();
        $isConfigSet = 0;
        $index = 0;

        $runningSupplier = "";
        $runningBalance = 0;
        if ($RS->RecordCount() > 0) {
                // error_reporting(E_ALL);
                    while ($Row = $RS->FetchRow()) {


                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }

                        if($index == 0){
                            $runningSupplier = $Row['sell_to_cust_no'];                           
                            
                            // $runningBalance = $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'];
                        }
                        // if($Row['openingBalanc']!='333333333')
                            // $Row['openingBalanc']= -1 * floatval($Row['openingBalanc']);
                        if($Row['rank'] ==1){
                            $runningBalance = ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];
                            $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'] = ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];
                        }

                        if($Row['rank'] ==2){

                            $Row['posting_date'] = date("d/m/Y", strtotime($Row['posting_date2']));
                            $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
                            $Row['on_hold_check'] = (intval($Row['on_hold']) > 0) ? true : false;
                            
                            $Row['remaining_amount'] =  Round($Row['remaining_amount'],2);
                            $Row['remaining_amount_lcy'] =  Round($Row['remaining_amount_lcy'],2);
                            $Row['amount_without_vat'] =  Round($Row['amount_without_vat'],2);

                            $Row['amount_paid'] =  floatval($Row['grand_total']) - floatval($Row['remaining_amount']);
                            $Row['openingBalance'] =  ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];// $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'];

                            if($Row['docType']== "Opening Balance Debit Note" ||
                             $Row['docType']== "Bank Opening Balance Payment" ||
                             $Row['docType']== "Bank Opening Balance Refund" ){
                               $Row['due_date'] = $Row['posting_date'] ;
                             }
                            

                        }

                            
                            if($runningSupplier == $Row['sell_to_cust_no']){

                                if($Row['rank'] ==2){

                                    $runningBalance = $runningBalance + floatval($Row['grand_total']);
                                    // $runningBalance = $runningBalance + $Row['remaining_amount'];
                                    $Row['runningBalance'] = $runningBalance;
                                }
                                
                                
                            } else {
                                $runningSupplier = $Row['sell_to_cust_no'];
                                // $runningBalance = 0;
                                // $runningBalance = $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'];

                                if($Row['rank'] ==1){
                                    $runningBalance = ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];
                                    $responseBalance['supplier_balance'][$Row['sell_to_cust_no']]['balance'] = ($Row['openingBalanc']=='333333333')? 0:$Row['openingBalanc'];

                                    
                                }

                                if($Row['rank'] ==2){

                                    $runningBalance = $runningBalance + floatval($Row['grand_total']);
                                    // $runningBalance = $runningBalance + $Row['remaining_amount'];
                                    $Row['runningBalance'] = $runningBalance;
                                }
                            }
                            $Row['index'] = $index++;                        
                            if($Row['openingBalanc']=='333333333'){
                                $Row['openingBalanc']='0';
                            }
                            
                        // if($Row['rank'] ==2)
                            $response['response'][] = $Row;
                    }
                  
                    $response['ack'] = 1;
                    // $response['loop'] = $num;
                    $response['error'] = NULL;
                    $response['Balances'] = $responseBalance;
        
            }
            else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }


                return  $response;
          

    }

    function CalculateSupplierBalance($id, $upToDate) {
        $this->objGeneral->mysql_clean($attr);
        // IFNULL(SR_CalculateSupplierBalance(".$attr['id'].", " . $this->arrUser['company_id'] . "), 0) AS supplier_balance        

        $upToDate = date("Y-m-d", $upToDate); 

        /* $Sql = "SELECT IFNULL(SR_rep_aged_supp_sum($id,DATE_SUB('$upToDate', INTERVAL 14600 DAY),DATE_ADD('$upToDate', INTERVAL 14600 DAY)," . $this->arrUser['company_id'] . ",'sr_rep',2,'',DATE_ADD('$upToDate', INTERVAL 14600 DAY)), 0)*(-1) AS supplier_balance"; */

        $Sql = "SELECT sr_getSupplierBalance('$upToDate'," . $this->arrUser['company_id'] . ",$id) AS supplier_balance";
        
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        
        return $RS->fields['supplier_balance'];
    }

    function topCustomers($attr){

        $this->objGeneral->mysql_clean($attr);
        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
        $limit = $attr['limit'];

        $salespersonsArray = false;
        // echo '<pre>';print_r($attr['salepersons']);

        if (count($attr['salepersons']) > 0) {          

            foreach ($attr['salepersons'] as $rec) {
                if($rec->id > 0)
                    $salespersonsArray .= $rec->id . ',';
            }
            $salespersonsArray = substr($salespersonsArray, 0, -1);
        } 
        else 
        {
            // $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . ") " : "";

            $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . " OR
        emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
        emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : "";
            
            $sqla = "  SELECT * FROM (SELECT emp.id,
                                        emp.user_code,
                                        emp.line_manager_name_id,
                                        CONCAT(first_name,' ',last_name) AS name,
                                        emp.user_email AS email,
                                        emp.job_title,
                                        (CASE WHEN emp.employee_type>0 THEN empType.name 
                                            ELSE '' 
                                            END )AS employee_type
                                    FROM employees AS emp,
                                        employee_type AS empType 
                                    WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND emp.status = 1 AND
                                        (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                        $where_line_manager                                        
                                    GROUP BY emp.id
                                    ORDER BY emp.user_code DESC) AS tbl  
                        where 1  " . $where_clause . " ";
            
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    $salespersonsArray .= $Rowa['id'] . ',';
                }
                $salespersonsArray = substr($salespersonsArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }
        
        $Sql = "CALL srrep_topCustomerSale(".$this->arrUser['company_id'].", ".$this->arrUser['id'].", ".$this->arrUser['user_type'].", $dateFrom, $dateTo,'" . $salespersonsArray . "', $limit)";

        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['total_sales_percentage'] = ($Row['total_sales_percentage'] > 100) ? 100 : ROUND($Row['total_sales_percentage'],2);
                if($Row['RecordType']!='Total'){
                    $response['totalTopCustomerSales'] += $Row['customer_sale'];
                    $response['totalTopCustomerPercentage'] += $Row['total_sales_percentage'];                
                        if($response['totalTopCustomerPercentage'] > 100){
                            $response['totalTopCustomerPercentage'] = 100;
                        }
                }
                $response['totalTopCustomerSales'] = ROUND($response['totalTopCustomerSales'],2);
                $response['totalTopCustomerPercentage'] = ROUND($response['totalTopCustomerPercentage'],2);
                $response['response'][] = $Row;
            }
            $response['ack'] = 1;
        }
        else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        
        return  $response;
    }

    function customerDepotSalesAnalysisReport($attr){
        
        $this->objGeneral->mysql_clean($attr);

        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);  

        // $reportName = $attr['reportName']; 
        $reportOrderByID = (isset($attr['reportOrderByID']) && $attr['reportOrderByID']!='')?$attr['reportOrderByID']:0;         
        // $reportOrderTypeID = (isset($attr['reportOrderTypeID']) && $attr['reportOrderTypeID']!='')?$attr['reportOrderTypeID']:0;         
        // $reporttype = $attr['reporttype']; 

        $cutomerarray = '';
        $cutomerarray2 = '';
        $reportDoctype = $attr['reportDoctype'];

        if ($attr['customers']) {

            foreach ($attr['customers'] as $rec) {
                $cutomerarray .= $rec->id . ',';
            }

            $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
            $cutomerarray2 = substr($cutomerarray, 0, -1);

        } else {

            $sqla = "SELECT c.id 
                    FROM sr_crm_listing c
                    WHERE c.type IN (2,3) AND 
                          c.company_id=" . $this->arrUser['company_id'] . " "; 
            
            /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

           // $sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            $sqla .= " ORDER BY c.customer_code ASC";
           //  echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    $cutomerarray .= $Rowa['id'] . ',';
                }

                $whereClause .=" WHERE sel.id IN (" . substr($cutomerarray, 0, -1) . ") ";
                $cutomerarray2 = substr($cutomerarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        if($reportDoctype == 'summary'){

            $Sql = "CALL srrep_customerDepotSalesAnalysisSummaryReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$cutomerarray2."','".$reportOrderByID."')";

            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 2) {      

                $prev_sp_id = '';

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($Row['custID']>0 && $Row['Rank'] !=4){

                        if($prev_sp_id != $Row['custNo'])
                        {
                            $result = array();

                            // $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                            // $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));

                            $result['document_no'] = $Row['docNo'];
                            $result['document_type'] = $Row['orderDetailType'];
                            $result['Rank'] = $Row['Rank'];
                            $result['docRank'] = $Row['docRank'];
                            /* $result['itemCode'] = $Row['itemCode'];
                            $result['itemDesc'] = $Row['itemDesc'];
                            $result['unit_measure'] = $Row['unit_measure'];
                            $result['vat'] = $Row['vat'];
                            $result['qty'] = $Row['qty']; */
                            $result['ship_to_name'] = $Row['ship_to_name'];
                            $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                            // $result['discount_price'] = round($Row['discount_price'], 2);
                            $result['total_price'] = round($Row['total_price'], 2);
                            $result['total_sales_percentage'] = round($Row['total_sales_percentage'], 2);
                            
                            $prev_sp_id = $Row['custNo'];
                            $response['response']['records'][$Row['custNo']]['custNo'] = $Row['custNo'];
                            $response['response']['records'][$Row['custNo']]['custName'] = $Row['custName'];

                            if($Row['docRank'] == 4){
                                $response['response']['records'][$Row['custNo']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);//$Row['docType']
                                // $response['response']['records'][$Row['custID']][$Row['docType']]['total_sales_percentage'] = round($Row['total_sales_percentage'], 2);
                            }            
                            
                            $response['response']['records'][$Row['custNo']]['saleOrder']['invoices'][] = $result;
                        }
                        else
                        {
                            $result = array();

                            // $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                            // $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));

                            $result['document_no'] = $Row['docNo'];
                            $result['document_type'] = $Row['orderDetailType'];
                            $result['Rank'] = $Row['Rank'];
                            $result['docRank'] = $Row['docRank'];
                            /* $result['itemCode'] = $Row['itemCode'];
                            $result['itemDesc'] = $Row['itemDesc'];
                            $result['unit_measure'] = $Row['unit_measure'];
                            $result['vat'] = $Row['vat'];
                            $result['qty'] = $Row['qty']; */
                            $result['ship_to_name'] = $Row['ship_to_name'];
                            $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                            // $result['discount_price'] = round($Row['discount_price'], 2);
                            $result['total_price'] = round($Row['total_price'], 2);
                            $result['total_sales_percentage'] = round($Row['total_sales_percentage'], 2);

                            if($Row['docRank'] == 4){
                                $response['response']['records'][$Row['custNo']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);
                                // $response['response']['records'][$Row['custID']][$Row['docType']]['total_sales_percentage'] = round($Row['total_sales_percentage'], 2);
                            }

                            $response['response']['records'][$Row['custNo']]['saleOrder']['invoices'][] = $result;
                        }                    
                    }
                    else{
                        $response['response']['records']['grandtotal'][$Row['docRank']]['orderType'] = $Row['custName'];
                        $response['response']['records']['grandtotal']['custName'] = 'Grand Total';
                        $response['response']['records']['grandtotal'][$Row['docRank']]['item_converted_price'] = $Row['item_converted_price'];
                        $response['response']['records']['grandtotal'][$Row['docRank']]['discount_price'] = $Row['discount_price'];
                        $response['response']['records']['grandtotal'][$Row['docRank']]['total_price'] = $Row['total_price'];
                        $response['response']['totalPrice'] = $Row['total_price'];
                    }                    
                }

                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        }
        else{

            $Sql = "CALL srrep_customerDepotSalesAnalysisDetailedReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$cutomerarray2."','".$reportOrderByID."')";

            // echo $Sql; exit;
            $RS = $this->objsetup->CSI($Sql);

            if ($RS->RecordCount() > 2) {      

                $prev_sp_id = '';

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    if($Row['custID']>0 && $Row['Rank'] !=4){

                        if($prev_sp_id != $Row['custNo'])
                        {
                            $result = array();

                            $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                            $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));

                            $result['document_no'] = $Row['docNo'];
                            $result['document_type'] = $Row['orderDetailType'];
                            $result['Rank'] = $Row['Rank'];
                            $result['docRank'] = $Row['docRank'];
                            $result['itemCode'] = $Row['itemCode'];
                            $result['itemDesc'] = $Row['itemDesc'];
                            $result['unit_measure'] = $Row['unit_measure'];
                            $result['vat'] = $Row['vat'];
                            $result['qty'] = $Row['qty'];
                            $result['ship_to_name'] = $Row['ship_to_name'];
                            $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                            $result['avgPrice'] = round($Row['avgPrice'], 2);
                            $result['discount_price'] = round($Row['discount_price'], 2);
                            $result['total_price'] = round($Row['total_price'], 2);
                            $result['total_sales_percentage'] = round($Row['total_sales_percentage'], 2);
                            
                            $prev_sp_id = $Row['custNo'];
                            $response['response']['records'][$Row['custNo']]['custNo'] = $Row['custNo'];
                            $response['response']['records'][$Row['custNo']]['custName'] = $Row['custName'];

                            if($Row['docRank'] == 4){
                                $response['response']['records'][$Row['custNo']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);//$Row['docType']
                                // $response['response']['records'][$Row['custID']][$Row['docType']]['total_sales_percentage'] = round($Row['total_sales_percentage'], 2);
                            }            
                            
                            $response['response']['records'][$Row['custNo']]['saleOrder']['invoices'][] = $result;
                        }
                        else
                        {
                            $result = array();

                            $result['posting_date'] = date("d/m/Y", strtotime($Row['postingDate']));
                            $result['order_date'] = date("d/m/Y", strtotime($Row['orderDate']));

                            $result['document_no'] = $Row['docNo'];
                            $result['document_type'] = $Row['orderDetailType'];
                            $result['Rank'] = $Row['Rank'];
                            $result['docRank'] = $Row['docRank'];
                            $result['itemCode'] = $Row['itemCode'];
                            $result['itemDesc'] = $Row['itemDesc'];
                            $result['unit_measure'] = $Row['unit_measure'];
                            $result['vat'] = $Row['vat'];
                            $result['qty'] = $Row['qty'];
                            $result['ship_to_name'] = $Row['ship_to_name'];
                            $result['item_converted_price'] = round($Row['item_converted_price'], 2);
                            $result['avgPrice'] = round($Row['avgPrice'], 2);
                            $result['discount_price'] = round($Row['discount_price'], 2);
                            $result['total_price'] = round($Row['total_price'], 2);
                            $result['total_sales_percentage'] = round($Row['total_sales_percentage'], 2);

                            if($Row['docRank'] == 4){
                                $response['response']['records'][$Row['custNo']][$Row['docType']]['total_amount_ex_vat'] = round($Row['total_price'], 2);
                                // $response['response']['records'][$Row['custID']][$Row['docType']]['total_sales_percentage'] = round($Row['total_sales_percentage'], 2);
                            }

                            $response['response']['records'][$Row['custNo']]['saleOrder']['invoices'][] = $result;
                        }                    
                    }
                    else{
                        $response['response']['records']['grandtotal'][$Row['docRank']]['orderType'] = $Row['custName'];
                        $response['response']['records']['grandtotal']['custName'] = 'Grand Total';
                        $response['response']['records']['grandtotal'][$Row['docRank']]['item_converted_price'] = $Row['item_converted_price'];
                        $response['response']['records']['grandtotal'][$Row['docRank']]['discount_price'] = $Row['discount_price'];
                        $response['response']['records']['grandtotal'][$Row['docRank']]['total_price'] = $Row['total_price'];
                        $response['response']['totalPrice'] = $Row['total_price'];
                    }                    
                }

                $response['ack'] = 1;
                $response['error'] = NULL;
            } else {
                $response['ack'] = 0;
                $response['error'] = NULL;
            }
        }
        
        return  $response;
    }

    /* function topCustomers($attr){
        $this->objGeneral->mysql_clean($attr);
        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
        $limit = $attr['limit'];
        $sql = "SELECT cust_id, customer_no, customer_name, company_id, SUM(revenue) as sales FROM srmatrix_sales_sel WHERE salesType IN ('Sales Invoice', 'Credit Note') AND invoice_type = 2 AND posting_date BETWEEN $dateFrom and $dateTo and company_id = " . $this->arrUser['company_id'] . " ";
        $subQuery = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " ";

        $subQuery = $this->objsetup->whereClauseAppender($subQuery, 48);
        $sql .= " AND cust_id in ($subQuery) ";    
        $sql .= " GROUP BY cust_id ORDER BY SUM(revenue) DESC LIMIT $limit;";
        // echo $sql;exit;
        $RS = $this->objsetup->CSI($sql);
        if ($RS->RecordCount() > 0) {
            // error_reporting(E_ALL);
            $sqlTotal = "SELECT SUM(revenue) as totalSales FROM srmatrix_sales_sel WHERE salesType IN ('Sales Invoice', 'Credit Note') AND invoice_type = 2 AND posting_date BETWEEN $dateFrom and $dateTo and company_id = " . $this->arrUser['company_id'] . " ";
            $RS2 = $this->objsetup->CSI($sqlTotal);
            $response['totalSales'] = $RS2->FetchRow()['totalSales'];
            $response['totalTopCustomerSales'] = 0;
            $response['totalTopCustomerPercentage'] = 0;
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['salesPercentage'] = ($Row['sales'] / $response['totalSales']) * 100;
                $response['totalTopCustomerSales'] += $Row['sales'];
                $response['totalTopCustomerPercentage'] += $Row['salesPercentage'];
                $response['response'][] = $Row;
            }
            $response['ack'] = 1;
        }
        else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }


            return  $response;
    } */

    function inventoryFilterData($attr){
        $whereClause = "WHERE status = 1 AND company_id = " . $this->arrUser['company_id'] . " AND status = 1 ";
        $filterData = array();
        $filterData['brand'] = "SELECT id, brandname as name from brand $whereClause;";
        $filterData['category'] = "SELECT id, name as name from category $whereClause;";
        $filterData['uom'] = "SELECT id, title as name from units_of_measure $whereClause;";
        foreach ($filterData as $key => $value) {
            $RS[$key] =  $this->objsetup->CSI($value);
            if ($RS[$key]->RecordCount() > 0) {
                while ($Row = $RS[$key]->FetchRow()) {
                    $tempObj = new stdClass();
                    $tempObj->id = $Row['id'];
                    $tempObj->name = $Row['name'];
                    $response['response'][$key][] = $tempObj;
                }
            } 
            else   {
                $response['response'][$key] = array();
            }
        }
        $response['ack'] = 1;
        $response['error'] = NULL;
        return $response;
    }

    function inventoryList($attr){

        $flexiWhereClause = $this->objGeneral->flexiWhereRetriever("tbl.",$attr,$fieldsMeta, "", "AND");
        $linktoSubstitute = $attr['showLinkColumn'];

        $Sql = "select * from (SELECT *,
                        (CASE WHEN prd.stock_check > 0 THEN 'Yes' ELSE 'No' END) AS allocation_required,
                        (SELECT GROUP_CONCAT(psl.substitute_product_code SEPARATOR ', ')
                            FROM product_substitute_link AS psl 
                            WHERE psl.product_id=prd.id) AS link_to_sub_items,
                        sr_sel_title_byName(
                            prd.company_id,'units_of_measure_setup',prd.id)  AS bar_code
                            
                FROM  productcache as prd 
                WHERE prd.product_code IS NOT NULL AND 
                     (prd.company_id=" . $this->arrUser['company_id'] . " )   ";
            
        
          //$Sql = $this->objsetup->whereClauseAppender($Sql,11);

          $Sql .= "   ) as tbl where 1 
                     " . $flexiWhereClause . " order by tbl.product_code ASC;";
            // echo $Sql;exit;
            $RS =  $this->objsetup->CSI($Sql);
            $totalRecords = $RS->RecordCount();
            

            // echo "total rec: ". $totalRecords .  " | MAX : ".  MAX_REPORT_RECORDS; exit;
            if ($totalRecords > 0 && $totalRecords < MAX_REPORT_RECORDS) {
                while ($Row = $RS->FetchRow()) {
                    
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    $response['response'][] = $Row;
                }
                $response['ack'] = 1;
                $response['error'] = NULL;
                
        
                    
            } else if($totalRecords > MAX_REPORT_RECORDS){
                    $CSVDataTitle = array();
                    $CSVDataTitle['item_number'] = $this->arrUser['companyName'];
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['item_number'] = 'Inventory List';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $CSVDataTitle['item_number'] = 'Item No.';
                    $CSVDataTitle['description'] = 'Description';
                    $CSVDataTitle['uom'] = 'UOM';
                    $CSVDataTitle['category'] = 'Category';
                    $CSVDataTitle['Brand'] = 'Brand';
                    $CSVDataTitle['allocation_required'] = 'Allocation Required';
                    if($linktoSubstitute != "0")
                        $CSVDataTitle['substitute_item_no'] = 'Substitute Item No.';			
                    $CSVDataTitle['reorder_point'] = 'Reorder Point';
                    $response['CSVData'][] = $CSVDataTitle;

                    $CSVDataTitle = array();
                    $response['CSVData'][] = $CSVDataTitle;

                    $response['filename']=  APP_PATH . "Reports/inventory_list_".$this->arrUser['company_id'].".csv";

                    $this->createCSVfile2($response);

                    $CSVRecCounter = 0;

                    $response['CSVData'] = array();


                    while ($Row = $RS->FetchRow()) {
                    
                        foreach ($Row as $key => $value) {
                            if (is_numeric($key))
                                unset($Row[$key]);
                        }
                      
                        $CSVDataRec = array();
                        
                        $CSVDataRec['item_number'] = $Row['product_code'];
                        $CSVDataRec['description'] =  $Row['description'];
                        $CSVDataRec['uom'] = $Row['unit_name'];
                        $CSVDataRec['category'] = $Row['category_name'];
                        $CSVDataRec['Brand'] = $Row['brand_name'];
                        $CSVDataRec['allocation_required'] = $Row['allocation_required'];
                        if($linktoSubstitute != "0")
                            $CSVDataRec['substitute_item_no'] = $Row['link_to_sub_items'];			
                        $CSVDataRec['reorder_point'] =  $Row['reorder_quantity'];

                        $response['CSVData'][] = $CSVDataRec;
                        // $response['response'][] = $Row;

                        if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                            $CSVRecCounter = 0;

                            $this->createCSVFileAppend($response);
                            $response['CSVData'] = array();
                        }

                        $CSVRecCounter++;                        
                    }

                    if($CSVRecCounter>0){
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }

                    

                    $response['ack'] = 2;
                    $response['filename'] = WEB_PATH . "/Reports/inventory_list_".$this->arrUser['company_id'].".csv";
                    $response['response'] = array();
                    $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';  
              
            }
            else   {
                $response['ack'] = 1;
                $response['response'] = array();
            }
            return $response;  
    }

    function customer_reminders($attr)
    {
        $response = array();

        $from_days = ($attr['from_days']) ? $attr['from_days'] : 0;
        $to_days = ($attr['to_days']) ? $attr['to_days'] : 0;

        $cutomerarray = '';
        if ($attr['customers']) {

            $customersarray = '';
            foreach ($attr['customers'] as $rec) {
                $customersarray .= $rec->id . ',';
            }
            $customersarray = rtrim($customersarray, ", ");
        }else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 
            
            /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            $sqla .= " ORDER BY c.customer_code ASC";
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $customersarray .= $Rowa['id'] . ',';
                }

                $customersarray = substr($customersarray, 0, -1);
            }
        }
        
        $Sql = "SELECT d.sale_invioce_code AS invoice_code, d.posting_date, d.due_date, d.remaining_amount, d.sell_to_cust_id,
                        d.sell_to_cust_no, d.sell_to_cust_name , currency.code AS currency_code, finance.reminder_email
                FROM orders AS d
                LEFT JOIN currency ON currency.id = d.currency_id
                LEFT JOIN finance ON finance.customer_id = d.sell_to_cust_id
                WHERE 
                    d.type = 2 AND
                    DATEDIFF(DATE_FORMAT(FROM_UNIXTIME(UNIX_TIMESTAMP(NOW())), '%Y-%m-%d'), DATE_FORMAT(FROM_UNIXTIME(d.due_date), '%Y-%m-%d')) BETWEEN $from_days AND $to_days AND
                    ROUND(d.remaining_amount, 2) > 0 AND
                    d.due_date > 0 AND d.sell_to_cust_id IN ($customersarray) AND
                    d.company_id=" . $this->arrUser['company_id'] ." ORDER BY d.sell_to_cust_no ASC";
        // echo $Sql;exit;
        $RS = $this->objsetup->CSI($Sql);
        $prev_row_id = '';
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                $Row['posting_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $Row['due_date'] = $this->objGeneral->convert_unix_into_date($Row['due_date']);
                if($prev_row_id != $Row['sell_to_cust_no'])
                {
                    $prev_row_id = $Row['sell_to_cust_no'];
                    $response['response'][$prev_row_id]['cust_id'] = $Row['sell_to_cust_id'];
                    $response['response'][$prev_row_id]['cust_code'] = $Row['sell_to_cust_no'];
                    $response['response'][$prev_row_id]['cust_name'] = $Row['sell_to_cust_name'];
                    $response['response'][$prev_row_id]['currency_code'] = $Row['currency_code'];      
                    $response['response'][$prev_row_id]['reminder_email'] = $Row['reminder_email'];      
                                  
                    $response['response'][$prev_row_id]['total_remaining_amount'] += $Row['remaining_amount'];
                    
                    $response['response'][$prev_row_id]['invoices'][] = $Row;
                }
                else
                {
                    $response['response'][$prev_row_id]['total_remaining_amount'] += $Row['remaining_amount'];
                    $response['response'][$prev_row_id]['invoices'][] = $Row;
                }
            }
            $response['ack'] = 1;
        }
        else
            $response['ack'] = 0;

         //   print_r($response);exit;
        return $response;
    }

    function customer_reminders_email($attr)
    {
        $response = array();
        $succesfull_email = array();
        $un_succesfull_email = array();

        require_once(SERVER_PATH . "/classes/Mail.php");        
        $this->objMail = new Mail($this->arrUser);  

        foreach($attr['data'] as $customer)
        {
            if(strlen($customer->reminder_email))
            {
                $temp_attr = array();

                $invoices_table = '<table border="1" style="border:1px solid black; border-collapse: collapse; padding:5px;">
                                    <thead>
                                        <tr>
                                            <th> Document No. </th>
                                            <th> Invoice Date </th>
                                            <th> Due Date </th>
                                            <th style="text-align: right"> Amount Due ('.$customer->currency_code.') </th>
                                        <tr>
                                    </thead>
                                    <tbody>';

                foreach($customer->invoices as $tbl_row)
                {
                    $remaining_amount = round($tbl_row->remaining_amount, 2);
                    $invoices_table .= '<tr>
                                            <td>'.$tbl_row->invoice_code.'</td>
                                            <td>'.$tbl_row->posting_date.'</td>
                                            <td>'.$tbl_row->due_date.'</td>
                                            <td style="text-align: right">'.$remaining_amount.'</td>
                                        </tr>';
                }
                $total_remaining_amount = round($customer->total_remaining_amount, 2);
                $invoices_table .= '<tr>
                                        <td></td>
                                        <td></td>
                                        <th>Total Amount Due</th>
                                        <th style="text-align: right">'.$total_remaining_amount.' ('.$customer->currency_code.')</th>
                                    </tr>
                                    </tbody>
                                    </table>';


                $temp_attr['to'] = $customer->reminder_email;
                $temp_attr['body'] = "Dear Customer, <br/> <br/>It has come to our attention that as of today, your payment has still not been received.
                We wish to emphasise that this account must be paid within the terms of your invoice <br/><br/>".$invoices_table."<br/> 
                Yours faithfully, <br/>Credit Control";
                $temp_attr['subject'] = 'Overdue Reminder';
                
                $sendEmail = $this->objMail->SendSimpleEmail($temp_attr);
                if($sendEmail['ack'] == 1)
                {
                    $response['succesfull_email'][] = $customer;
                }
                else
                {
                    $response['un_succesfull_email'][] = $customer;
                }
            }
        }
        $response['ack'] = 1;
        return $response;
    }
    
    function sales_forecast($attr)
    {
        $response = array();

        $cutomerarray = '';
        if ($attr['customers']) {

            $customersarray = '';
            foreach ($attr['customers'] as $rec) {
                $customersarray .= $rec->id . ',';
            }
            $customersarray = rtrim($customersarray, ", ");
        }else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 
            /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $customersarray .= $Rowa['id'] . ',';
                }

                $customersarray = substr($customersarray, 0, -1);
            }
        }
        
        if (count($attr['salespersons']) > 0) {

            $salespersonsarray = '';
            foreach ($attr['salespersons'] as $rec) {
                $salespersonsarray .= $rec->id . ',';
            }
            $salespersonsarray = rtrim($salespersonsarray, ", ");
        }
        else
        {
            $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . "  OR
                emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id in (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
                emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : "";
            $sqla = "  SELECT * FROM (SELECT emp.id,
                                        emp.user_code,
                                        emp.line_manager_name_id,
                                        CONCAT(first_name,' ',last_name) AS name,
                                        emp.user_email AS email,
                                        emp.job_title,
                                        (CASE WHEN emp.employee_type>0 THEN empType.name 
                                            ELSE '' 
                                            END )AS employee_type
                                    FROM employees AS emp,
                                        employee_type AS empType 
                                    WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND
                                        (emp.employee_type = empType.id OR emp.employee_type = 0)      
                                        $where_line_manager                                        
                                    GROUP BY emp.id
                                    ORDER BY emp.user_code DESC) AS tbl  
                        where 1  " . $where_clause . " ";           
        // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $salespersonsarray .= $Rowa['id'] . ',';
                }

                $salespersonsarray = substr($salespersonsarray, 0, -1);
            }
        }

        if ($attr['items']) {

            $itemsarray = '';

            foreach ($attr['items'] as $rec) {
                if($rec->id > 0)
                    $itemsarray .= $rec->id . ',';
            }

            $itemsarray = substr($itemsarray, 0, -1);
        }
        else {

            $sqla = "SELECT prd.id 
                    FROM productcache prd
                    WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $itemsarray .= $Rowa['id'] . ',';
                }
                $itemsarray = substr($itemsarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $where_clause = '';
        $where_clause_1 = '';
        $where_clause_2 = '';
        if($attr['start_month']!=$attr['end_month'] || $attr['start_year'] !=$attr['end_year']){
            $where_clause = "(sfd.month >= $attr[start_month] AND sfd.year>=$attr[start_year]) OR (sfd.month <= $attr[end_month] AND sfd.year <=$attr[end_year])";

            $where_clause_1 = "(MONTH(FROM_UNIXTIME(od.posting_date)) >= $attr[start_month] AND YEAR(FROM_UNIXTIME(od.posting_date)) >= $attr[start_year] ) 
            AND 
            (MONTH(FROM_UNIXTIME(od.posting_date)) <= $attr[end_month] AND YEAR(FROM_UNIXTIME(od.posting_date)) <= $attr[end_year])";

            $where_clause_2 = "(MONTH(FROM_UNIXTIME(sfd.posting_date)) >= $attr[start_month] AND YEAR(FROM_UNIXTIME(sfd.posting_date)) >= $attr[start_year] ) 
            AND 
            (MONTH(FROM_UNIXTIME(sfd.posting_date)) <= $attr[end_month] AND YEAR(FROM_UNIXTIME(sfd.posting_date)) <= $attr[end_year])";

        }else{
            $where_clause = "(sfd.month = $attr[start_month] AND sfd.year=$attr[start_year]) OR (sfd.month = $attr[end_month] AND sfd.year =$attr[end_year])";
            //$where_clause_1 = "(MONTH(FROM_UNIXTIME(od.posting_date)) = $attr[start_month] AND YEAR(FROM_UNIXTIME(od.posting_date)) = $attr[start_year] ) AND (MONTH(FROM_UNIXTIME(od.posting_date)) = $attr[end_month] AND YEAR(FROM_UNIXTIME(od.posting_date)) = $attr[end_year])";
            $where_clause_1 = "(MONTH(FROM_UNIXTIME(od.posting_date)) = $attr[start_month] AND YEAR(FROM_UNIXTIME(od.posting_date)) = $attr[start_year] )";

            $where_clause_2 = "(MONTH(FROM_UNIXTIME(sfd.posting_date)) = $attr[start_month] AND YEAR(FROM_UNIXTIME(sfd.posting_date)) = $attr[start_year] )";
        }

        if($attr['report_type'] == 1)
        {
            //(MONTH(FROM_UNIXTIME(od.posting_date)) = sfd.month AND YEAR(FROM_UNIXTIME(od.posting_date)) = sfd.year)
            $Sql ="SELECT * FROM (SELECT 
                        sfd.sale_person_id,
                        e.user_code AS sp_code,
                        CONCAT(e.first_name,' ',e.last_name) AS sp_name,
                        sfd.item_id, 
                        sfd.item_name,
                        sfd.item_code,
                        SUM(ROUND(sfd.qty, 2)) AS sf_qty, 
                        SUM(ROUND(sfd.unit_price, 2)) AS sf_unit_price,                        
                        (SELECT CONCAT(SUM(ROUND(o1.qty, 2)), '*****', AVG(ROUND(o1.unit_price, 2)))
                            FROM orders AS od, order_details AS o1
                            WHERE o1.order_id = od.id AND
                                    od.sale_person_id = sfd.sale_person_id AND 
                                    o1.company_id = " . $this->arrUser['company_id'] . " AND 
                                    o1.type = 0 AND 
                                    od.type = 1 AND 
                                   
                                    o1.item_id = sfd.item_id AND
                                    (
                                        ".$where_clause_1."
                                    )
                        ) AS orders,
                        (SELECT CONCAT(SUM(ROUND(o1.qty, 2)), '*****', AVG(ROUND(o1.unit_price, 2)))
                            FROM  orders AS od, order_details AS o1
                            WHERE o1.order_id = od.id AND
                                    od.sale_person_id = sfd.sale_person_id AND 
                                    o1.company_id = " . $this->arrUser['company_id'] . " AND 
                                    o1.type = 0 AND 
                                    od.type = 2 AND 
                                   
                                    o1.item_id = sfd.item_id AND
                                    (
                                        ".$where_clause_1."
                                    )
                        ) AS invoice

                    FROM sales_forecast_detail AS sfd
                    LEFT JOIN employees AS e ON sfd.sale_person_id = e.id
                    WHERE sfd.sale_person_id IN ($salespersonsarray) AND 
                            sfd.item_id IN ($itemsarray) AND 
                            (
                                ".$where_clause."
                                )                          
                    GROUP BY sfd.sale_person_id, sfd.item_id"; 
             // for non forcast items                     
             $Sql .=" UNION ALL
                    
             SELECT 
                 sfd.sale_person_id,
                 e.user_code AS sp_code,
                 CONCAT(e.first_name,' ',e.last_name) AS sp_name,
                 sod.item_id, 
                 sod.item_name,
                 sod.product_code AS item_code,
                 0 AS sf_qty, 
                 0 AS sf_unit_price,                        
                 (SELECT CONCAT(SUM(ROUND(o1.qty, 2)), '*****', AVG(ROUND(o1.unit_price, 2)))
                            FROM orders AS od, order_details AS o1
                            WHERE o1.order_id = od.id AND
                                    od.sale_person_id = sfd.sale_person_id AND 
                                    o1.company_id = " . $this->arrUser['company_id'] . " AND 
                                    o1.type = 0 AND 
                                    od.type = 1 AND 
                                   
                                    o1.item_id = sod.item_id AND
                                    (
                                        ".$where_clause_1."
                                    )
                        ) AS orders,
                        (SELECT CONCAT(SUM(ROUND(o1.qty, 2)), '*****', AVG(ROUND(o1.unit_price, 2)))
                            FROM  orders AS od, order_details AS o1
                            WHERE o1.order_id = od.id AND
                                    od.sale_person_id = sfd.sale_person_id AND 
                                    o1.company_id = " . $this->arrUser['company_id'] . " AND 
                                    o1.type = 0 AND 
                                    od.type = 2 AND 
                                   
                                    o1.item_id = sod.item_id AND
                                    (
                                        ".$where_clause_1."
                                    )
                        ) AS invoice

                        FROM orders AS sfd
                        LEFT JOIN order_details AS sod ON sod.order_id = sfd.id
                        LEFT JOIN sales_forecast_detail sf ON (sfd.sale_person_id = sf.sale_person_id AND sod.item_id!=sf.item_id)
                                LEFT JOIN employees AS e ON sfd.sale_person_id = e.id
                                WHERE sfd.sale_person_id IN ($salespersonsarray) AND
                                        sod.item_id IN ($itemsarray) AND 
                                        ( ".$where_clause_2." )  
                                  #  AND sod.item_id!=sf.item_id                        
                                GROUP BY sfd.sale_person_id, sod.item_id ) as tbl ORDER BY tbl.sp_code ASC,tbl.item_code ASC";  
        }
        else
        {
            $Sql ="SELECT * FROM (SELECT 
                        sfd.customer_id,
                        c.name,
                        c.customer_code,
                        sfd.item_id, 
                        sfd.item_name,
                        sfd.item_code,
                        SUM(ROUND(sfd.qty, 2)) AS sf_qty, 
                        SUM(ROUND(sfd.unit_price, 2)) AS sf_unit_price,                        
                        (SELECT CONCAT(SUM(ROUND(o1.qty, 2)), '*****', AVG(ROUND(o1.unit_price, 2)))
                            FROM orders AS od, order_details AS o1
                            WHERE o1.order_id = od.id AND
                                    od.sell_to_cust_id = sfd.customer_id AND 
                                    o1.company_id = " . $this->arrUser['company_id'] . " AND 
                                    o1.type = 0 AND 
                                    od.type = 1 AND 
                                    
                                    o1.item_id = sfd.item_id  AND
                                    (
                                        ".$where_clause_1."
                                    )
                        ) AS orders,
                        (SELECT CONCAT(SUM(ROUND(o1.qty, 2)), '*****', AVG(ROUND(o1.unit_price, 2)))
                            FROM  orders AS od, order_details AS o1
                            WHERE o1.order_id = od.id AND
                                    od.sell_to_cust_id = sfd.customer_id AND 
                                    o1.company_id = " . $this->arrUser['company_id'] . " AND 
                                    o1.type = 0 AND 
                                    od.type = 2 AND 
                                   
                                    o1.item_id = sfd.item_id AND
                                    (
                                        ".$where_clause_1."
                                    )
                    ) AS invoice
                    
                    FROM sales_forecast_detail AS sfd
                    LEFT JOIN crm AS c ON sfd.customer_id = c.id
                    WHERE sfd.customer_id IN ($customersarray) AND 
                            sfd.item_id IN ($itemsarray) AND 
                            (
                                ".$where_clause."
                                )                            
                    GROUP BY sfd.customer_id, sfd.item_id"; 
            // for non forcast items        
            $Sql .=" UNION ALL
                    
            SELECT 
                sfd.sell_to_cust_id AS customer_id,
                c.name,
                c.customer_code,
                sod.item_id, 
                sod.item_name,
                sod.product_code AS item_code,
                0 AS sf_qty, 
                0 AS sf_unit_price,                        
                (SELECT CONCAT(SUM(ROUND(o1.qty, 2)), '*****', AVG(ROUND(o1.unit_price, 2)))
                    FROM orders AS od, order_details AS o1
                    WHERE o1.order_id = od.id AND
                            od.sell_to_cust_id = sfd.sell_to_cust_id AND 
                            o1.company_id = " . $this->arrUser['company_id'] . " AND  
                            o1.type = 0 AND 
                            od.type = 1 AND 
                            
                            o1.item_id = sod.item_id  AND
                            (
                                ".$where_clause_1."
                            )
                ) AS orders,
                (SELECT CONCAT(SUM(ROUND(o1.qty, 2)), '*****', AVG(ROUND(o1.unit_price, 2)))
                    FROM  orders AS od, order_details AS o1
                    WHERE o1.order_id = od.id AND
                            od.sell_to_cust_id = sfd.sell_to_cust_id AND 
                            o1.company_id = " . $this->arrUser['company_id'] . " AND 
                            o1.type = 0 AND 
                            od.type = 2 AND 
                           
                            o1.item_id = sod.item_id AND
                            (
                                ".$where_clause_1."
                            )
            ) AS invoice
            
            FROM orders AS sfd
            LEFT JOIN order_details AS sod ON sod.order_id = sfd.id
            LEFT JOIN crm AS c ON sfd.sell_to_cust_id = c.id
            LEFT JOIN sales_forecast_detail sf ON (sfd.sell_to_cust_id = sf.customer_id AND sod.item_id=sf.item_id)
            WHERE sfd.sell_to_cust_id IN ($customersarray) AND 
                    sod.item_id IN ($itemsarray) AND 
                    ( ".$where_clause_2." )    
            # AND sod.item_id!=sf.item_id                           
            GROUP BY sfd.sell_to_cust_id, sod.item_id) as tbl ORDER BY customer_code ASC,tbl.item_code ASC";
                    /* sfd.month BETWEEN $attr[start_month] AND $attr[end_month] AND
                            sfd.year BETWEEN $attr[start_year] AND $attr[end_year] */
        }
        //echo '<pre>'.$Sql;exit; 
        $RS = $this->objsetup->CSI($Sql);
        $prev_row_id = '';
        $count = 0;
        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                if($attr['report_type'] == 1)
                {
                    if($prev_row_id != $Row['sp_code'])
                    {
                        /* if($prev_row_id != 0)
                        {
                            $response['response'][$prev_row_id]['total_variance_qty_percentage'] = (floatval($response['response'][$prev_row_id]['total_variance_so_si_qty'])/floatval($Row['sf_qty']))*100;

                        } */


                        $prev_row_id = $Row['sp_code'];
                        $response['response'][$prev_row_id]['sale_person_id'] = $Row['sale_person_id'];
                        $response['response'][$prev_row_id]['sp_code'] = $Row['sp_code'];
                        $response['response'][$prev_row_id]['sp_name'] = $Row['sp_name'];
                        $response['response'][$prev_row_id]['name']    = $Row['sp_name'].' ('.$Row['sp_code'].')';
                                    
                        $Row['sf_amount']    = floatval($Row['sf_qty']) * floatval($Row['sf_unit_price']);
                        
                        $order_figures = explode("*****", $Row['orders']);
                        $Row['o_qty']       = ($order_figures[0] > 0) ? $order_figures[0] : 0;
                        $Row['o_unit_price']= ($order_figures[1] > 0) ? $order_figures[1] : 0;
                        $Row['o_amount']    = floatval($order_figures[0]) * floatval($order_figures[1]);

                        $invoice_figures = explode("*****", $Row['invoice']);
                        $Row['i_qty']       = ($invoice_figures[0] > 0) ? $invoice_figures[0] : 0;
                        $Row['i_unit_price']= ($invoice_figures[1] > 0) ? $invoice_figures[1] : 0;
                        $Row['i_amount']    = floatval($invoice_figures[0]) * floatval($invoice_figures[1]);

                        $Row['sum_qty']       = floatval($Row['o_qty']) + floatval($Row['i_qty']) - floatval($Row['sf_qty']);
                        $Row['sum_qty_percentage']    = (floatval($Row['sum_qty']) / floatval($Row['sf_qty'])) * 100;
                        
                        //$Row['sum_unit_price']= ((floatval($Row['o_unit_price']) * floatval($Row['o_qty']))  + (floatval($Row['i_unit_price']) * floatval($Row['i_qty']))) / (floatval($Row['o_qty'])+floatval($Row['i_qty'])-floatval($Row['sf_qty']));
                        $Row['sum_unit_price'] =  ((floatval($Row['o_amount']) + floatval($Row['i_amount']))/(floatval($Row['o_qty']) + floatval($Row['i_qty']))) - floatval($Row['sf_unit_price']);
                        $Row['sum_unit_price_percentage']    = (floatval($Row['sum_unit_price']) / floatval($Row['sf_unit_price'])) * 100;
                        
                        $response['response'][$prev_row_id]['total_variance_qty'] += $Row['sum_qty'];

                        // $response['response'][$prev_row_id]['total_variance_forecast_qty'] += floatval($Row['sf_qty']);
                        // $response['response'][$prev_row_id]['total_variance_so_si_qty'] += floatval($Row['o_qty']) + floatval($Row['i_qty']);

                        // $response['response'][$prev_row_id]['total_variance_unit_price'] += floatval($Row['sum_unit_price']);
                        // $count++;

                        unset($Row['orders']);
                        unset($Row['invoice']);
                    
                        $response['response'][$prev_row_id]['invoices'][] = $Row;
                    }
                    else
                    {   
                        $Row['sf_amount']    = floatval($Row['sf_qty']) * floatval($Row['sf_unit_price']);
                        
                        $order_figures = explode("*****", $Row['orders']);
                        $Row['o_qty']       = ($order_figures[0] > 0) ? $order_figures[0] : 0;
                        $Row['o_unit_price']= ($order_figures[1] > 0) ? $order_figures[1] : 0;
                        $Row['o_amount']    = floatval($order_figures[0]) * floatval($order_figures[1]);

                        $invoice_figures = explode("*****", $Row['invoice']);
                        $Row['i_qty']       = ($invoice_figures[0] > 0) ? $invoice_figures[0] : 0;
                        $Row['i_unit_price']= ($invoice_figures[1] > 0) ? $invoice_figures[1] : 0;
                        $Row['i_amount']    = floatval($invoice_figures[0]) * floatval($invoice_figures[1]);

                        $Row['sum_qty']       = floatval($Row['o_qty']) + floatval($Row['i_qty']) - floatval($Row['sf_qty']);
                        $Row['sum_qty_percentage']    = (floatval($Row['sum_qty']) / floatval($Row['sf_qty'])) * 100;
                        
                        $Row['sum_unit_price'] =  ((floatval($Row['o_amount']) + floatval($Row['i_amount']))/(floatval($Row['o_qty']) + floatval($Row['i_qty']))) - floatval($Row['sf_unit_price']);
                        $Row['sum_unit_price_percentage']    = (floatval($Row['sum_unit_price']) / floatval($Row['sf_unit_price'])) * 100;
                        
                        $response['response'][$prev_row_id]['total_qty'] += $Row['sum_qty'];

                        unset($Row['orders']);
                        unset($Row['invoice']);

                        $response['response'][$prev_row_id]['invoices'][] = $Row;
                    }
                }
                else
                {
                    if($prev_row_id != $Row['customer_code'])
                    {
                        $prev_row_id = $Row['customer_code'];
                        $response['response'][$prev_row_id]['customer_id'] = $Row['customer_id'];
                        $response['response'][$prev_row_id]['cust_code'] = $Row['customer_code'];
                        $response['response'][$prev_row_id]['cust_name'] = $Row['name'];
                        $response['response'][$prev_row_id]['name']      = $Row['name'].' ('.$Row['customer_code'].')';

                        $Row['sf_amount']    = floatval($Row['sf_qty']) * floatval($Row['sf_unit_price']);
                        
                        $order_figures = explode("*****", $Row['orders']);
                        $Row['o_qty']       = ($order_figures[0] > 0) ? $order_figures[0] : 0;
                        $Row['o_unit_price']= ($order_figures[1] > 0) ? $order_figures[1] : 0;
                        $Row['o_amount']    = floatval($order_figures[0]) * floatval($order_figures[1]);

                        $invoice_figures = explode("*****", $Row['invoice']);
                        $Row['i_qty']       = ($invoice_figures[0] > 0) ? $invoice_figures[0] : 0;
                        $Row['i_unit_price']= ($invoice_figures[1] > 0) ? $invoice_figures[1] : 0;
                        $Row['i_amount']    = floatval($invoice_figures[0]) * floatval($invoice_figures[1]);

                        $Row['sum_qty']       = floatval($Row['o_qty']) + floatval($Row['i_qty']) - floatval($Row['sf_qty']);
                        $Row['sum_qty_percentage']    = (floatval($Row['sum_qty']) / floatval($Row['sf_qty'])) * 100;
                        
                        $Row['sum_unit_price'] =  ((floatval($Row['o_amount']) + floatval($Row['i_amount']))/(floatval($Row['o_qty']) + floatval($Row['i_qty']))) - floatval($Row['sf_unit_price']);
                        $Row['sum_unit_price_percentage']    = (floatval($Row['sum_unit_price']) / floatval($Row['sf_unit_price'])) * 100;
                        
                        $response['response'][$prev_row_id]['total_qty'] += $Row['sum_qty'];

                        unset($Row['orders']);
                        unset($Row['invoice']);
                    
                        $response['response'][$prev_row_id]['invoices'][] = $Row;
                    }
                    else
                    {
                        $Row['sf_amount']    = floatval($Row['sf_qty']) * floatval($Row['sf_unit_price']);
                        
                        $order_figures = explode("*****", $Row['orders']);
                        $Row['o_qty']       = ($order_figures[0] > 0) ? $order_figures[0] : 0;
                        $Row['o_unit_price']= ($order_figures[1] > 0) ? $order_figures[1] : 0;
                        $Row['o_amount']    = floatval($order_figures[0]) * floatval($order_figures[1]);

                        $invoice_figures = explode("*****", $Row['invoice']);
                        $Row['i_qty']       = ($invoice_figures[0] > 0) ? $invoice_figures[0] : 0;
                        $Row['i_unit_price']= ($invoice_figures[1] > 0) ? $invoice_figures[1] : 0;
                        $Row['i_amount']    = floatval($invoice_figures[0]) * floatval($invoice_figures[1]);

                        $Row['sum_qty']       = floatval($Row['o_qty']) + floatval($Row['i_qty']) - floatval($Row['sf_qty']);
                        $Row['sum_qty_percentage']    = (floatval($Row['sum_qty']) / floatval($Row['sf_qty'])) * 100;
                        
                        $Row['sum_unit_price'] =  ((floatval($Row['o_amount']) + floatval($Row['i_amount']))/(floatval($Row['o_qty']) + floatval($Row['i_qty']))) - floatval($Row['sf_unit_price']);
                        $Row['sum_unit_price_percentage']    = (floatval($Row['sum_unit_price']) / floatval($Row['sf_unit_price'])) * 100;
                        
                        $response['response'][$prev_row_id]['total_qty'] += $Row['sum_qty'];

                        unset($Row['orders']);
                        unset($Row['invoice']);

                        $response['response'][$prev_row_id]['invoices'][] = $Row;
                    }
                }
            }
            $response['ack'] = 1;
        }
        else
            $response['ack'] = 0;

        $response['query'] = $Sql;
        return $response;
    }
    
    function customerItemPriceReport($attr)
    {
        $response = array();

        $cutomerarray = '';
        if ($attr['customers']) {

            $customersarray = '';
            foreach ($attr['customers'] as $rec) {
                $customersarray .= $rec->id . ',';
            }
            $customersarray = rtrim($customersarray, ", ");
        }else {

            $sqla = "SELECT c.id 
					 FROM sr_crm_listing c
					 WHERE c.type IN (2,3) AND 
						   c.company_id=" . $this->arrUser['company_id'] . " "; 

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $customersarray .= $Rowa['id'] . ',';
                }

                $customersarray = substr($customersarray, 0, -1);
            }
        }

        if ($attr['items']) {

            $itemsarray = '';

            foreach ($attr['items'] as $rec) {
                if($rec->id > 0)
                    $itemsarray .= $rec->id . ',';
            }

            $itemsarray = substr($itemsarray, 0, -1);
        }
        else {

            $sqla = "SELECT prd.id 
                    FROM productcache prd
                    WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $itemsarray .= $Rowa['id'] . ',';
                }
                $itemsarray = substr($itemsarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        $defaultCurrencyCode = $attr['defaultCurrencyCode'];

        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);  

        $reportOrderByID = (isset($attr['report_type']) && $attr['report_type']!='')?$attr['report_type']:0;  
        $reportXlsxType = (isset($attr['reportXlsxType']) && $attr['reportXlsxType']!='')?$attr['reportXlsxType']:0;  

        $Sql = "CALL srrep_customerItemPriceReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$customersarray."','".$itemsarray."','".$reportOrderByID."')";

        // echo $Sql;exit; 
        $RS = $this->objsetup->CSI($Sql);

        $prev_row_id = '';
        $count = 0;
        if ($RS->RecordCount() > 0) {

            $arrayCount = $RS->RecordCount();//'xlsx' 

            if($arrayCount > MAX_REPORT_RECORDS || $reportXlsxType == 1){

                $CSVDataTitle = array();
                $CSVDataTitle['itemNo'] = $this->arrUser['companyName'];
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $CSVDataTitle['itemNo'] = 'Customer/Item Price Report';
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                // $CSVDataTitle['itemNo'] = 'From '.date("d/m/Y", $dateFrom2).' To '.date("d/m/Y", $dateTo2);
                $CSVDataTitle['itemNo'] = 'From '.$attr['dateFrom'].' To '.$attr['dateTo'];
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $response['CSVData'][] = $CSVDataTitle;                
                
                $CSVDataTitle = array();

                if($reportOrderByID == 1){
                    
                    $CSVDataTitle['custNo'] = 'CUST No.';
                    $CSVDataTitle['custName'] = 'Name';
                    $CSVDataTitle['itemNo'] = 'Item No.';
                    $CSVDataTitle['Description'] = 'Description';
                    $CSVDataTitle['uom'] = 'Unit of Measure';
                    $CSVDataTitle['qty'] = 'Qty.';
                    $CSVDataTitle['Value'] = 'Average Unit Price ('.$defaultCurrencyCode.')';
                    $CSVDataTitle['averageValue'] = 'Amount ('.$defaultCurrencyCode.')';
                }
                else{
                    
                    $CSVDataTitle['itemNo'] = 'Item No.';
                    $CSVDataTitle['Description'] = 'Description';
                    $CSVDataTitle['uom'] = 'Unit of Measure';
                    $CSVDataTitle['custNo'] = 'CUST No.';
                    $CSVDataTitle['custName'] = 'Name';
                    $CSVDataTitle['qty'] = 'Qty.';
                    $CSVDataTitle['Value'] = 'Average Unit Price ('.$defaultCurrencyCode.')';
                    $CSVDataTitle['averageValue'] = 'Amount ('.$defaultCurrencyCode.')';
                }

                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $response['CSVData'][] = $CSVDataTitle;

                $response['filename']=  APP_PATH . "Reports/customerItemPriceReport".$this->arrUser['company_id'].".csv";

                $this->createCSVfile2($response);

                $CSVRecCounter = 0;

                $response['CSVData'] = array();

                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    $customerItemPriceArray = array();

                    if($reportOrderByID == 1){

                        $customerItemPriceArray['custNo'] = $Row['custNo'];
                        $customerItemPriceArray['custName'] = $Row['custName'];
                        $customerItemPriceArray['product_code'] = $Row['itemCode'];
                        $customerItemPriceArray['description'] = $Row['itemDesc'];
                        $customerItemPriceArray['Unit_of_measure'] = $Row['unit_measure'];
                        $customerItemPriceArray['qty'] = $Row['qty'];
                        $customerItemPriceArray['Value'] = $Row['priceAfterPromo'];
                        $customerItemPriceArray['averageValue'] = $Row['averageValue'];
                    }
                    else{                        
                        
                        $customerItemPriceArray['product_code'] = $Row['itemCode'];
                        $customerItemPriceArray['description'] = $Row['itemDesc'];
                        $customerItemPriceArray['Unit_of_measure'] = $Row['unit_measure'];
                        $customerItemPriceArray['custNo'] = $Row['custNo'];
                        $customerItemPriceArray['custName'] = $Row['custName'];
                        $customerItemPriceArray['qty'] = $Row['qty'];
                        $customerItemPriceArray['Value'] = $Row['priceAfterPromo'];
                        $customerItemPriceArray['averageValue'] = $Row['averageValue'];
                    }
                    
                    $response['CSVData'][] = $customerItemPriceArray;
                    $counter++;

                    if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }

                    $CSVRecCounter++;
                }
                
                if($CSVRecCounter>0){
                    $CSVRecCounter = 0;

                    $this->createCSVFileAppend($response);
                    $response['CSVData'] = array();
                }
            }
            else{

                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }

                    if($reportOrderByID == 1){

                        // if($Row['product_id']>0 && $Row['RecordType'] !='grand'){                         

                        if($prev_rec_id != $Row['custID'])
                        {
                            $result = array();

                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['product_code'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['Unit_of_measure'] = $Row['unit_measure'];
                            $result['qty'] = $Row['qty'];
                            $result['Value'] = $Row['priceAfterPromo'];
                            $result['averageValue'] = $Row['averageValue'];
                            
                            $prev_rec_id = $Row['custID'];
                            $response['response']['records'][$Row['custID']]['custNo'] = $Row['custNo'];        
                            $response['response']['records'][$Row['custID']]['custName'] = $Row['custName'];
                            
                            $response['response']['records'][$Row['custID']]['items'][] = $result;
                        }
                        else
                        {
                            $result = array();

                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['product_code'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['Unit_of_measure'] = $Row['unit_measure'];
                            $result['qty'] = $Row['qty'];
                            $result['Value'] = $Row['priceAfterPromo'];
                            $result['averageValue'] = $Row['averageValue'];

                            $response['response']['records'][$Row['custID']]['items'][] = $result;
                        }                   
                        /* }
                        else{
                            $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                            $response['response']['records']['grandtotal']['totalQty'] = $Row['totalQty'];
                            $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                            $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                            $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                            $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                            $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                        }  */

                    }else{

                        if($prev_rec_id != $Row['itemID'])
                        {
                            $result = array();
                            
                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['product_code'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['Unit_of_measure'] = $Row['unit_measure'];
                            $result['qty'] = $Row['qty'];
                            $result['Value'] = $Row['priceAfterPromo'];
                            $result['averageValue'] = $Row['averageValue'];
                            
                            $prev_rec_id = $Row['itemID'];

                            $response['response']['records'][$Row['itemID']]['product_code'] = $Row['itemCode'];        
                            $response['response']['records'][$Row['itemID']]['description'] = $Row['itemDesc'];        
                            $response['response']['records'][$Row['itemID']]['unitMeasure'] = $Row['unit_measure'];        
                            
                            $response['response']['records'][$Row['itemID']]['customer'][] = $result;
                        }
                        else
                        {
                            $result = array();
                            
                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['product_code'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['Unit_of_measure'] = $Row['unit_measure'];
                            $result['qty'] = $Row['qty'];
                            $result['Value'] = $Row['priceAfterPromo'];
                            $result['averageValue'] = $Row['averageValue'];

                            $response['response']['records'][$Row['itemID']]['customer'][] = $result;
                        } 

                        // if($Row['warehouse_id']>0 && $Row['RecordType'] !='grand'){

                                           
                        /* }
                        else{
                            $response['response']['records']['grandtotal']['warehouse'] = 'Grand Total';

                            $response['response']['records']['grandtotal']['totalQty'] = $Row['totalQty'];
                            $response['response']['records']['grandtotal']['allocatedQty'] = $Row['allocatedQty'];
                            $response['response']['records']['grandtotal']['allocatedValue'] = $Row['allocatedValue'];
                            $response['response']['records']['grandtotal']['availableQty'] = $Row['availableQty'];
                            $response['response']['records']['grandtotal']['availableValue'] = $Row['availableValue'];
                            $response['response']['records']['grandtotal']['totalValue'] = $Row['totalValue'];
                        } */ 
                    }

                }
            }

            // if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx'){
            if($arrayCount > MAX_REPORT_RECORDS || $reportXlsxType == 1){

                $response['ack'] = 2;
                $response['filename'] = WEB_PATH . "/Reports/customerItemPriceReport".$this->arrUser['company_id'].".csv";
                $response['response'] = array();
                $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
            }
            else{
                $response['ack'] = 1;
                $response['error'] = NULL;
            } 
        }
        else
            $response['ack'] = 0;

        $response['query'] = $Sql;
        return $response;
    }

    function inventoryStatisticsReport($attr)
    {
        $response = array();
        $filter_1_arr = '';
        $filter_2_arr = '';
        // filter 1
        $names_arr = [];
        $territories_arr = [];
        if ($attr['territories']) {

            $territoriesarray = '';
            foreach ($attr['territories'] as $rec) {
                $territoriesarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->title;
                $territories_arr[$rec->id] = $rec->title;
            }
            $territoriesarray = rtrim($territoriesarray, ", ");
          
        }else {

            $sqla = "SELECT id,title
					 FROM crm_region
					 WHERE company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $territoriesarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['title'];
                    $territories_arr[$Rowa['id']] = $Rowa['title'];

                }

               $territoriesarray = substr($territoriesarray, 0, -1);
               
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // // return $response;
                $territoriesarray = "";
            }
        }

        $buying_grps_arr = [];
        if ($attr['buyingGroups']) {

            $buyingGroupsarray = '';
            foreach ($attr['buyingGroups'] as $rec) {
                $buyingGroupsarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->title;
                $buying_grps_arr[$rec->id] = $rec->title;
            }
            $buyingGroupsarray = rtrim($buyingGroupsarray, ", ");
           
        }else {

            $sqla = "SELECT id,title
					 FROM crm_buying_group
					 WHERE company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $buyingGroupsarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['title'];
                    $buying_grps_arr[$Rowa['id']] = $Rowa['title'];
                }

                $buyingGroupsarray = substr($buyingGroupsarray, 0, -1);
                
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // return $response;
                $buyingGroupsarray = "";
            }
        }

        $segments_arr = [];
        if ($attr['segments']) {

            $segmentsarray = '';
            foreach ($attr['segments'] as $rec) {
                $segmentsarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->title;
                $segments_arr[$rec->id] = $rec->title;
            }
            $segmentsarray = rtrim($segmentsarray, ", ");
           
        }else {

            $sqla = "SELECT id,title
					 FROM crm_segment
					 WHERE company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $segmentsarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['title'];
                    $segments_arr[$Rowa['id']] = $Rowa['title'];
                }

                $segmentsarray = substr($segmentsarray, 0, -1);
                
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // return $response;
                $segmentsarray = "";
            }
        }
        $customersarray = '';
        if (count($attr['customers']) > 0) {

           
            foreach ($attr['customers'] as $rec) {
                $customersarray .= $rec->id . ',';
            }
            $customersarray = rtrim($customersarray, ", ");
           
        }else {
            if(isset($attr['customer_bucket']) && $attr['customer_bucket'] == 1)
            {
                $sqla = "SELECT c.id 
                        FROM sr_crm_listing c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . " "; 
                /* $sqla = "SELECT  c.id
                        FROM crm c
                        WHERE c.type IN (2,3) AND 
                            c.company_id=" . $this->arrUser['company_id'] . ""; */

                //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
                $sqla .= " ORDER BY c.customer_code ASC";
                // echo $sqla;exit;
                $RSa = $this->objsetup->CSI($sqla);

                if ($RSa->RecordCount() > 0) {
                    while ($Rowa = $RSa->FetchRow()) {

                        foreach ($Rowa as $key => $value) {
                            if (is_numeric($key))
                                unset($Rowa[$key]);
                        }

                        // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                        $customersarray .= $Rowa['id'] . ',';
                    }

                    $customersarray = substr($customersarray, 0, -1);
                   // echo $customersarray;
                }
                else{
                    $response['response'] = array();
                    $response['ack'] = 0;
                    $response['error'] = NULL;
                    return $response;
                }
            }
            else
                $customersarray = '';
        }
        // filter 2
        if ($attr['items']) {

            $itemsarray = '';
            foreach ($attr['items'] as $rec) {
                $itemsarray .= $rec->id . ',';
            }
           $itemsarray = rtrim($itemsarray, ", ");
           
        }else {

            $sqla = "SELECT prd.id 
					 FROM productcache prd
					 WHERE prd.company_id=" . $this->arrUser['company_id'] . " ";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 11);
            $sqla .= " ORDER BY prd.`product_code`";
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $itemsarray .= $Rowa['id'] . ',';
                }

                $itemsarray = substr($itemsarray, 0, -1);
                
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }       

        $brands_arr = [];
        if ($attr['brands']) {

            $brandsarray = '';
            foreach ($attr['brands'] as $rec) {
                $brandsarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->name;
                $brands_arr[$rec->id] = $rec->name;
            }
            $brandsarray = rtrim($brandsarray, ", ");
           
        }else {

            $brandsarray = '0,';

            $sqla = "SELECT id,brandname AS name
					 FROM brand
					 WHERE status = 1 AND company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $brandsarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['name'];
                    $brands_arr[$Rowa['id']] = $Rowa['name'];
                }
                $brandsarray = substr($brandsarray, 0, -1);
               
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // return $response;
                $brandsarray = "";
            }
        }

        $categories_arr = [];
        if ($attr['categories']) {

            $categoriesarray = '';
            foreach ($attr['categories'] as $rec) {
                $categoriesarray .= $rec->id . ',';
                $names_arr[$rec->id] = $rec->name;
                $categories_arr[$rec->id] = $rec->name;
            }
            $categoriesarray = rtrim($categoriesarray, ", ");
           
        }else {

            $categoriesarray = '0,';

            $sqla = "SELECT id,name
					 FROM category
					 WHERE status = 1 AND company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $categoriesarray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['name'];
                    $categories_arr[$Rowa['id']] = $Rowa['name'];
                }
                $categoriesarray = substr($categoriesarray, 0, -1);
               
            }
            else{
                // $response['response'] = array();
                // $response['ack'] = 0;
                // $response['error'] = NULL;
                // return $response;
                $categoriesarray = "";
            }
        }

        $SQ12 = "SELECT title FROM item_cost_description WHERE status = 1 AND company_id=" . $this->arrUser['company_id'] . " ";
             //echo $SQ12;exit;
            $RSq = $this->objsetup->CSI($SQ12);
            $cost_data = array();
            if ($RSq->RecordCount() > 0) {
               while ($Rowa = $RSq->FetchRow()) {
                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }
                    $cost_data[] = $Rowa;
                }          
            }
        
        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);

        // echo $segmentsarray; exit;

        $filter_1 = $attr['division_1'];
        $filter_2 = $attr['division_2'];

        if($filter_1==1){
            $filter_1_arr = $territoriesarray;
        }else if($filter_1==2){
            $filter_1_arr = $buyingGroupsarray;
        }else if($filter_1==3){
            $filter_1_arr = $segmentsarray;
        }else if($filter_1==4){
            $filter_1_arr = $customersarray;
        }

        if($filter_2==1){
            $filter_2_arr = $brandsarray;
        }else if($filter_2==2){
            $filter_2_arr = $categoriesarray;
        }else if($filter_2==3){
            $filter_2_arr = $itemsarray;
        }

        $defaultCurrencyCode = $attr['defaultCurrencyCode'];

        $dateFrom = $this->objGeneral->convertEndDate($attr['dateFrom']);
        $dateTo = $this->objGeneral->convertEndDate($attr['dateTo']);  

        $reportOrderBy = (isset($attr['report_by']) && $attr['report_by']!='')?$attr['report_by']:0;  
        $report_type = (isset($attr['report_type']) && $attr['report_type']!='')?$attr['report_type']:0; 
        $reportXlsxType = (isset($attr['reportXlsxType']) && $attr['reportXlsxType']!='')?$attr['reportXlsxType']:0;  

        //if($report_type==1){
        $Sql = "CALL srrep_inventoryStatsReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$filter_1_arr."','".$filter_2_arr."','".$filter_1."','".$filter_2."','".$report_type."','".$reportOrderBy."')";
        /* }else{
            $Sql = "CALL srrep_inventoryStatsReport_summary(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$filter_1_arr."','".$filter_2_arr."','".$filter_1."','".$filter_2."','".$report_type."','".$reportOrderBy."')";
        } */
        // echo $Sql;exit; 
        $RS = $this->objsetup->CSI($Sql);

        $prev_row_id = 0;
        $count = 0;
        if ($RS->RecordCount() > 0) {             

            $arrayCount = $RS->RecordCount();//'xlsx' 

            if($arrayCount > MAX_REPORT_RECORDS || $reportXlsxType == 1){

                $CSVDataTitle = array();
                $CSVDataTitle['itemNo'] = $this->arrUser['companyName'];
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                if($report_type==1){
                    $CSVDataTitle['itemNo'] = 'Inventory Statistics Report';
                }else{
                    $CSVDataTitle['itemNo'] = 'Inventory Statistics Summary Report';
                }
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                // $CSVDataTitle['itemNo'] = 'From '.date("d/m/Y", $dateFrom2).' To '.date("d/m/Y", $dateTo2);
                $CSVDataTitle['itemNo'] = 'From '.$attr['dateFrom'].' To '.$attr['dateTo'];
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $response['CSVData'][] = $CSVDataTitle;                
                
                $CSVDataTitle = array();
                if($report_type==1){
                    if($reportOrderBy == 1){
                        
                        $CSVDataTitle['invoiceNo'] = 'Invoice No.';
                        $CSVDataTitle['customerNo'] = 'Customer No.';
                        $CSVDataTitle['customer'] = 'Customer Name';
                        $CSVDataTitle['itemNo'] = 'Item No.';
                        $CSVDataTitle['Description'] = 'Description';
                        $CSVDataTitle['SalePrice'] = 'Unit Sales Price';
                        $CSVDataTitle['PromoPrice'] = 'Promotion';
                        $CSVDataTitle['UnitSalePrice'] = 'Total Unit Sale Price';
                        foreach($cost_data as $k=>$v){
                          $CSVDataTitle['PurchaseFeild'.$k] = $v['title'];  
                        }                        
                        $CSVDataTitle['PurchaseCost'] = 'Purchase Cost';
                        $CSVDataTitle['Profit'] = 'Profit';
                        $CSVDataTitle['Qty'] = 'Qty';
                        $CSVDataTitle['ProfitPerc'] = 'Profit %';
                        $CSVDataTitle['SaleAmount'] = 'Sales Amount';
                        $CSVDataTitle['Average'] = 'Average';
                    }
                    else{
                        $CSVDataTitle['invoiceNo'] = 'Invoice No.';
                        $CSVDataTitle['customerNo'] = 'Customer No.';
                        $CSVDataTitle['customer'] = 'Customer Name';
                        $CSVDataTitle['itemNo'] = 'Item No.';
                        $CSVDataTitle['Description'] = 'Description';
                        $CSVDataTitle['SalePrice'] = 'Unit Sales Price';
                        $CSVDataTitle['PromoPrice'] = 'Promotion';
                        $CSVDataTitle['UnitSalePrice'] = 'Total Unit Sale Price';
                        foreach($cost_data as $k=>$v){
                            $CSVDataTitle['PurchaseFeild'.$k] = $v['title'];  
                          } 
                        $CSVDataTitle['PurchaseCost'] = 'Purchase Cost';
                        $CSVDataTitle['Profit'] = 'Profit';
                        $CSVDataTitle['Qty'] = 'Qty';
                        $CSVDataTitle['ProfitPerc'] = 'Profit %';
                        $CSVDataTitle['SaleAmount'] = 'Sales Amount';
                        $CSVDataTitle['Average'] = 'Average';
                    }
            }else{
                    if($reportOrderBy == 1){
                        if($filter_1==1){
                            $CSVDataTitle['col1'] = 'Territory Name';   
                            $CSVDataTitle['col2'] = 'Item No.';   
                            $CSVDataTitle['col3'] = 'Description';
                            $CSVDataTitle['col4'] = 'Qty';
                            $CSVDataTitle['col5'] = 'Sale Amount';
                            $CSVDataTitle['col6'] = 'Average';
                        }
                        if($filter_1==2){
                            $CSVDataTitle['col1'] = 'Buying Group';   
                            $CSVDataTitle['col2'] = 'Item No.';   
                            $CSVDataTitle['col3'] = 'Description';
                            $CSVDataTitle['col4'] = 'Qty';
                            $CSVDataTitle['col5'] = 'Sale Amount';
                            $CSVDataTitle['col6'] = 'Average';
                        }
                        if($filter_1==3){
                            $CSVDataTitle['col1'] = 'Segment';   
                            $CSVDataTitle['col2'] = 'Item No.';   
                            $CSVDataTitle['col3'] = 'Description';
                            $CSVDataTitle['col4'] = 'Qty';
                            $CSVDataTitle['col5'] = 'Sale Amount';
                            $CSVDataTitle['col6'] = 'Average';
                        }
                        if($filter_1==4){
                            $CSVDataTitle['col1'] = 'Customer No.';   
                            $CSVDataTitle['col2'] = 'Name';  
                            $CSVDataTitle['col3'] = 'Item No.';   
                            $CSVDataTitle['col4'] = 'Description';
                            $CSVDataTitle['col5'] = 'Qty';
                            $CSVDataTitle['col6'] = 'Sale Amount';
                            $CSVDataTitle['col7'] = 'Average';
                        }                   

                    }else{
                        if($filter_2==1){
                            $CSVDataTitle['col1'] = 'Brand';   
                            $CSVDataTitle['col2'] = 'Customer No.';   
                            $CSVDataTitle['col3'] = 'Name';
                            $CSVDataTitle['col4'] = 'Qty';
                            $CSVDataTitle['col5'] = 'Sale Amount';
                            $CSVDataTitle['col6'] = 'Average';
                        }
                        if($filter_2==2){
                            $CSVDataTitle['col1'] = 'Category';   
                            $CSVDataTitle['col2'] = 'Customer No.';   
                            $CSVDataTitle['col3'] = 'Name';
                            $CSVDataTitle['col4'] = 'Qty';
                            $CSVDataTitle['col5'] = 'Sale Amount';
                            $CSVDataTitle['col6'] = 'Average';
                        }
                        if($filter_2==3){
                            $CSVDataTitle['col1'] = 'Item No.';   
                            $CSVDataTitle['col2'] = 'Description';  
                            $CSVDataTitle['col3'] = 'Customer No.';   
                            $CSVDataTitle['col4'] = 'Name';
                            $CSVDataTitle['col5'] = 'Qty';
                            $CSVDataTitle['col6'] = 'Sale Amount';
                            $CSVDataTitle['col7'] = 'Average';
                        }       
                    }               
                
            }

                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $response['CSVData'][] = $CSVDataTitle;
                if($report_type==1){                    
                    $response['filename']=  APP_PATH . "Reports/inventoryStatisticsReport".$this->arrUser['company_id'].".csv";
                }else{
                    $response['filename']=  APP_PATH . "Reports/inventoryStatisticsSummaryReport".$this->arrUser['company_id'].".csv";
                }

                $this->createCSVfile2($response);

                $CSVRecCounter = 0;

                $response['CSVData'] = array();

                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                   // print_r($Row['promotionValue']);exit;
                    $customerItemPriceArray = array();
                    $profit = ($Row['profit'])?$Row['profit']:0;
                    $purchase_cost = ($Row['total_purchase_cost'])?$Row['total_purchase_cost']:0;
                    /* if($Row['Rank']==2 || $Row['Rank']==3){
                        continue;
                    } */
                    $purchase_fileds=array();
                        $purchase_fileds_arr = ($Row['purchase_fields']) ? explode(',',$Row['purchase_fields']) :"";
                        if($purchase_fileds_arr){
                            foreach($purchase_fileds_arr as $pc){
                                $values = explode("#",$pc);
                                $purchase_fileds[$values[1]] = $values[0];
                            }
                        }
                       // print_r($cost_data);
                        foreach($cost_data as $j=>$p){
                            $search = $p['title']; 
                            $found = array_filter($purchase_fileds,function($v,$k) use ($search){
                               // echo $k;exit;
                                return $k == $search;
                            },ARRAY_FILTER_USE_BOTH); // With latest PHP third parameter is mandatory.. Available Values:- ARRAY_FILTER_USE_BOTH OR ARRAY_FILTER_USE_KEY  
                          
                        if(!$found){
                         $purchase_fileds[$p['title']] = 0;
                          }
                        }
                if($report_type==1){
                    if($reportOrderBy == 1){
                        
                        $customerItemPriceArray['invoiceNo'] = $Row['order_no'];
                        $customerItemPriceArray['customerNo'] = $Row['custNo'];
                        $customerItemPriceArray['customer'] = $Row['custName'];
                        $customerItemPriceArray['itemNo'] = $Row['itemCode'];
                        $customerItemPriceArray['Description'] = $Row['itemDesc'];
                        $customerItemPriceArray['SalePrice'] = $Row['amount'];
                        $customerItemPriceArray['PromoPrice'] = $Row['promotionValue'];
                        $customerItemPriceArray['UnitSalePrice'] = $Row['priceAfterPromo'];
                        foreach($cost_data as $k=>$v){
                            $customerItemPriceArray['PurchaseFeild'.$k] = $purchase_fileds[$v['title']];  
                          } 
                        $customerItemPriceArray['PurchaseCost'] = $purchase_cost;
                        $customerItemPriceArray['Profit'] = $profit;
                        $customerItemPriceArray['Qty'] = $Row['qty'];
                        $customerItemPriceArray['ProfitPerc'] = $Row['profit_percentage'];
                        $customerItemPriceArray['SaleAmount'] = $Row['sale_amount'];
                        $customerItemPriceArray['Average'] = ($Row['Rank']==2) ? $Row['average_sale_price'] : '';
                    }
                    else{                        
                        
                        $customerItemPriceArray['invoiceNo'] = $Row['order_no'];
                        $customerItemPriceArray['customerNo'] = $Row['custNo'];
                        $customerItemPriceArray['customer'] = $Row['custName'];
                        $customerItemPriceArray['itemNo'] = $Row['itemCode'];
                        $customerItemPriceArray['Description'] = $Row['itemDesc'];
                        $customerItemPriceArray['SalePrice'] = $Row['amount'];
                        $customerItemPriceArray['PromoPrice'] = $Row['promotionValue'];
                        $customerItemPriceArray['UnitSalePrice'] = $Row['priceAfterPromo'];
                        foreach($cost_data as $k=>$v){
                            $customerItemPriceArray['PurchaseFeild'.$k] = $purchase_fileds[$v['title']];  
                          } 
                        $customerItemPriceArray['PurchaseCost'] = $purchase_cost;
                        $customerItemPriceArray['Profit'] = $profit;
                        $customerItemPriceArray['Qty'] = $Row['qty'];
                        $customerItemPriceArray['ProfitPerc'] = $Row['profit_percentage'];
                        $customerItemPriceArray['SaleAmount'] = $Row['sale_amount'];
                        $customerItemPriceArray['Average'] = ($Row['Rank']==2) ? $Row['average_sale_price'] : '';
                    }
                }else{
                    if($reportOrderBy == 1){
                        //echo $buying_grps_arr[$Row['buying_grp_id']];exit;
                        if($filter_1 == 1){                       
                            $customerItemPriceArray['col1'] = $territories_arr[$Row['region_id']];
                            $customerItemPriceArray['col2'] = $Row['itemCode'];
                            $customerItemPriceArray['col3'] = $Row['itemDesc'];
                            $customerItemPriceArray['col4'] = $Row['qty'];
                            $customerItemPriceArray['col5'] = $Row['sale_amount'];
                            $customerItemPriceArray['col6'] = $Row['average_sale_price'];
                        }
                        if($filter_1 == 2){                       
                            $customerItemPriceArray['col1'] = $buying_grps_arr[$Row['buying_grp_id']];
                            $customerItemPriceArray['col2'] = $Row['itemCode'];
                            $customerItemPriceArray['col3'] = $Row['itemDesc'];
                            $customerItemPriceArray['col4'] = $Row['qty'];
                            $customerItemPriceArray['col5'] = $Row['sale_amount'];
                            $customerItemPriceArray['col6'] = $Row['average_sale_price'];
                        }
                        if($filter_1 == 3){                       
                            $customerItemPriceArray['col1'] = $segments_arr[$Row['segment_id']];
                            $customerItemPriceArray['col2'] = $Row['itemCode'];
                            $customerItemPriceArray['col3'] = $Row['itemDesc'];
                            $customerItemPriceArray['col4'] = $Row['qty'];
                            $customerItemPriceArray['col5'] = $Row['sale_amount'];
                            $customerItemPriceArray['col6'] = $Row['average_sale_price'];
                        }
                        if($filter_1==4){
                            $customerItemPriceArray['col1'] = $Row['custNo'];
                            $customerItemPriceArray['col2'] = $Row['custName'];
                            $customerItemPriceArray['col3'] = $Row['itemCode'];
                            $customerItemPriceArray['col4'] = $Row['itemDesc'];
                            $customerItemPriceArray['col5'] = $Row['qty'];
                            $customerItemPriceArray['col6'] = $Row['sale_amount'];
                            $customerItemPriceArray['col7'] = $Row['average_sale_price'];
                        }                    
                        
                    }else{

                        if($filter_2 == 1){                       
                            $customerItemPriceArray['col1'] = $brands_arr[$Row['brand_id']];
                            $customerItemPriceArray['col2'] = $Row['custNo'];
                            $customerItemPriceArray['col3'] = $Row['custName'];
                            $customerItemPriceArray['col4'] = $Row['qty'];
                            $customerItemPriceArray['col5'] = $Row['sale_amount'];
                            $customerItemPriceArray['col6'] = $Row['average_sale_price'];
                        }
                        if($filter_2 == 2){                       
                            $customerItemPriceArray['col1'] = $categories_arr[$Row['category_id']];
                            $customerItemPriceArray['col2'] = $Row['custNo'];
                            $customerItemPriceArray['col3'] = $Row['custName'];
                            $customerItemPriceArray['col4'] = $Row['qty'];
                            $customerItemPriceArray['col5'] = $Row['sale_amount'];
                            $customerItemPriceArray['col6'] = $Row['average_sale_price'];
                        }
                        if($filter_2==3){
                            $customerItemPriceArray['col1'] = $Row['itemCode'];
                            $customerItemPriceArray['col2'] = $Row['itemDesc'];
                            $customerItemPriceArray['col3'] = $Row['custNo'];
                            $customerItemPriceArray['col4'] = $Row['custName'];                            
                            $customerItemPriceArray['col5'] = $Row['qty'];
                            $customerItemPriceArray['col6'] = $Row['sale_amount'];
                            $customerItemPriceArray['col7'] = $Row['average_sale_price'];
                        }          
                    }

                        
                }
                    
                    $response['CSVData'][] = $customerItemPriceArray;
                    $counter++;

                    if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                        $CSVRecCounter = 0;

                        $this->createCSVFileAppend($response);
                        $response['CSVData'] = array();
                    }

                    $CSVRecCounter++;
                }
                
                if($CSVRecCounter>0){
                    $CSVRecCounter = 0;

                    $this->createCSVFileAppend($response);
                    $response['CSVData'] = array();
                }
            }
            else{

                while ($Row = $RS->FetchRow()) {

                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                            unset($Row[$key]);
                    }
                    // detail report
                    if($report_type==1){
                    // order by filter 1
                    $purchase_fileds=array();
                        $purchase_fileds_arr = ($Row['purchase_fields']) ? explode(',',$Row['purchase_fields']) :"";
                        if($purchase_fileds_arr){
                            foreach($purchase_fileds_arr as $pc){
                                $values = explode("#",$pc);
                                $purchase_fileds[$values[1]] = $values[0];
                            }
                        }
                       // print_r($cost_data);
                        foreach($cost_data as $j=>$p){
                            $search = $p['title']; 
                            $found = array_filter($purchase_fileds,function($v,$k) use ($search){
                               // echo $k;exit;
                                return $k == $search;
                            },ARRAY_FILTER_USE_BOTH); // With latest PHP third parameter is mandatory.. Available Values:- ARRAY_FILTER_USE_BOTH OR ARRAY_FILTER_USE_KEY  
                          
                        if(!$found){
                         $purchase_fileds[$p['title']] = 0;
                          }
                        }
                    if($reportOrderBy == 1){

                        // if($Row['product_id']>0 && $Row['RecordType'] !='grand'){                         
                            $field = "";
                            if($filter_1 == 1)
                                $field = "region_id";
                            else if($filter_1 == 2)
                                $field = "buying_grp_id";
                            else if($filter_1 == 3)
                                $field = "segment_id";
                            else if($filter_1 == 4)
                                $field = "custID";                                

                        //print_r($purchase_fileds);
                        if($prev_rec_id != $Row[$field])
                        {
                            $result = array();

                            $result['Rank'] = $Row['Rank'];
                            $result['order_no'] = $Row['order_no'];
                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['product_code'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['Unit_of_measure'] = $Row['unit_measure'];
                            $result['qty'] = $Row['qty'];
                            $result['sale_price'] = $Row['amount'];
                            $result['promotion'] = $Row['promotionValue'];
                            $result['Value'] = $Row['priceAfterPromo'];                            
                            $result['purchase_cost'] = $Row['total_purchase_cost'];
                            $result['purchase_fields'] =  $purchase_fileds;
                            $result['profit'] = $Row['profit'];
                            /* $result['profit_perc'] = round(($result['profit']/$result['purchase_cost'])*100,2);
                            $result['sales_amount'] = $Row['amount']*$Row['qty'];
                            $result['average'] = round($Row['amount']/$Row['qty'],2); */
                            $result['profit_perc'] = $Row['profit_percentage'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];
                            
                            $prev_rec_id = $Row[$field];
                            if($filter_1 == 1)
                                $response['response']['records'][$Row[$field]]['custName'] = $territories_arr[$Row[$field]];
                            else if($filter_1 == 2)
                                $response['response']['records'][$Row[$field]]['custName'] = $buying_grps_arr[$Row[$field]];
                            else if($filter_1 == 3)
                                $response['response']['records'][$Row[$field]]['custName'] = $segments_arr[$Row[$field]];
                            else if($filter_1 == 4)
                                $response['response']['records'][$Row[$field]]['custName'] = $Row['custName'];

                            $response['response']['records'][$Row[$field]]['custNo'] = $Row['custNo'];        
                            
                            
                            $response['response']['records'][$Row[$field]]['items'][] = $result;
                        }
                        else
                        {
                            $result = array();

                            $result['Rank'] = $Row['Rank'];
                            $result['order_no'] = $Row['order_no'];
                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['product_code'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['Unit_of_measure'] = $Row['unit_measure'];
                            $result['qty'] = $Row['qty'];
                            $result['sale_price'] = $Row['amount'];
                            $result['promotion'] = $Row['promotionValue'];
                            $result['Value'] = $Row['priceAfterPromo'];                            
                            $result['purchase_cost'] = $Row['total_purchase_cost'];
                            $result['purchase_fields'] =  $purchase_fileds;
                            $result['profit'] = $Row['profit'];
                            /* $result['profit_perc'] = round(($result['profit']/$result['purchase_cost'])*100,2);
                            $result['sales_amount'] = $Row['amount']*$Row['qty'];
                            $result['average'] = round($Row['amount']/$Row['qty'],2); */
                            $result['profit_perc'] = $Row['profit_percentage'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];

                            $response['response']['records'][$Row[$field]]['items'][] = $result;
                        }                   

                    }else{

                        $field = "";
                        if($filter_2 == 1)
                            $field = "brand_id";
                        else if($filter_2 == 2)
                            $field = "category_id";
                        else if($filter_2 == 3)
                            $field = "itemID";

                        if($prev_rec_id != $Row[$field])
                        {
                            $result = array();
                            
                            $result['Rank'] = $Row['Rank'];
                            $result['order_no'] = $Row['order_no'];
                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['product_code'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['Unit_of_measure'] = $Row['unit_measure'];
                            $result['qty'] = $Row['qty'];
                            $result['sale_price'] = $Row['amount'];
                            $result['promotion'] = $Row['promotionValue'];
                            $result['Value'] = $Row['priceAfterPromo'];                            
                            $result['purchase_cost'] = $Row['total_purchase_cost'];
                            $result['purchase_fields'] =  $purchase_fileds;
                            $result['profit'] = $Row['profit'];
                            /* $result['profit_perc'] = round(($result['profit']/$result['purchase_cost'])*100,2);
                            $result['sales_amount'] = $Row['amount']*$Row['qty'];
                            $result['average'] = round($Row['amount']/$Row['qty'],2); */
                            $result['profit_perc'] = $Row['profit_percentage'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];
                            
                            $prev_rec_id = $Row[$field];

                            if($filter_2 == 1)
                            $response['response']['records'][$Row[$field]]['description'] = $brands_arr[$Row[$field]];
                            elseif($filter_2 == 2)
                            $response['response']['records'][$Row[$field]]['description'] = $categories_arr[$Row[$field]];
                            elseif($filter_2 == 3)
                            $response['response']['records'][$Row[$field]]['description'] = $Row['itemDesc'];
                            $response['response']['records'][$Row[$field]]['product_code'] = $Row['itemCode'];
                            $response['response']['records'][$Row[$field]]['unitMeasure'] = $Row['unit_measure'];        
                            //print_r($response['response']['records'][$Row[$field]]);exit;
                            $response['response']['records'][$Row[$field]]['customer'][] = $result;
                        }
                        else
                        {
                            $result = array();
                            
                            $result['Rank'] = $Row['Rank'];
                            $result['order_no'] = $Row['order_no'];
                            $result['custNo'] = $Row['custNo'];
                            $result['custName'] = $Row['custName'];
                            $result['product_code'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['Unit_of_measure'] = $Row['unit_measure'];
                            $result['qty'] = $Row['qty'];
                            $result['sale_price'] = $Row['amount'];
                            $result['promotion'] = $Row['promotionValue'];
                            $result['Value'] = $Row['priceAfterPromo'];                            
                            $result['purchase_cost'] = $Row['total_purchase_cost'];
                            $result['purchase_fields'] =  $purchase_fileds;
                            $result['profit'] = $Row['profit'];
                            /* $result['profit_perc'] = round(($result['profit']/$result['purchase_cost'])*100,2);
                            $result['sales_amount'] = $Row['amount']*$Row['qty'];
                            $result['average'] = round($Row['amount']/$Row['qty'],2); */
                            $result['profit_perc'] = $Row['profit_percentage'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];

                            $response['response']['records'][$Row[$field]]['customer'][] = $result;
                        } 
                    }
                }else{ // summary report
                    // order by filter 1
                    if($reportOrderBy == 1){
                        if($filter_1 == 1){
                            $result = array();

                            $result['territory_name'] = $territories_arr[$Row['region_id']];                            
                            $result['item_no.'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['qty'] = $Row['qty'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];
                            
                            $response['response']['records'][] = $result; 
                        }else if($filter_1 == 2){
                            $result = array();

                            $result['buying_group'] = $buying_grps_arr[$Row['buying_grp_id']];
                            $result['item_no.'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['qty'] = $Row['qty'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];
                            
                            $response['response']['records'][] = $result; 
                        }else if($filter_1 == 3){
                            $result = array();

                            $result['segment'] = $segments_arr[$Row['segment_id']];
                            $result['item_no.'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['qty'] = $Row['qty'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];
                            
                            $response['response']['records'][] = $result; 
                        }else if($filter_1 == 4){
                            $result = array();

                            $result['customer_no.'] = $Row['custNo'];
                            $result['name'] = $Row['custName'];
                            $result['item_no.'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['qty'] = $Row['qty'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];
                            
                            $response['response']['records'][] = $result; 
                        }
                    }else{
                        if($filter_2 == 1){
                            $result = array();

                            $result['brand'] = $brands_arr[$Row['brand_id']];
                            $result['customer_no.'] = $Row['custNo'];
                            $result['name'] = $Row['custName'];
                            $result['qty'] = $Row['qty'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];
                            
                            $response['response']['records'][] = $result; 
                        }else if($filter_2 == 2){
                            $result = array();

                            $result['category'] = $categories_arr[$Row['category_id']];
                            $result['customer_no.'] = $Row['custNo'];
                            $result['name'] = $Row['custName'];
                            $result['qty'] = $Row['qty'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];
                            
                            $response['response']['records'][] = $result; 
                        }else if($filter_2 == 3){
                            $result = array();
                            
                            $result['item_no.'] = $Row['itemCode'];
                            $result['description'] = $Row['itemDesc'];
                            $result['customer_no.'] = $Row['custNo'];
                            $result['name'] = $Row['custName'];
                            $result['qty'] = $Row['qty'];
                            $result['sales_amount'] = $Row['sale_amount'];
                            $result['average'] = $Row['average_sale_price'];
                            
                            $response['response']['records'][] = $result; 
                        }
                    }

                }

                }
            }

             if($reportOrderBy == 1 && $filter_1 == 4){

                // total sale for sale person (added by Akhtar Nawaz)
                $records = $response['response']['records'];
                $total_sales = array_column($records, 'custNo');
                //echo '<pre>';print_r($total_sales);exit;
                array_multisort($total_sales, SORT_ASC, $records);
                $response['response']['records'] = $records;

             }
            
            $response['response']['cost_data'] = $cost_data;
            // if($arrayCount > MAX_REPORT_RECORDS || $reportTypeExcel == 'xlsx'){
            if($arrayCount > MAX_REPORT_RECORDS || $reportXlsxType == 1){

                $response['ack'] = 2;
                if($report_type==1){                    
                    $response['filename']=  WEB_PATH . "/Reports/inventoryStatisticsReport".$this->arrUser['company_id'].".csv";
                }else{
                    $response['filename']=  WEB_PATH . "/Reports/inventoryStatisticsSummaryReport".$this->arrUser['company_id'].".csv";
                }
                $response['response'] = array();
                $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
            }
            else{
                $response['ack'] = 1;
                $response['error'] = NULL;
            } 
        }
        else
            $response['ack'] = 0;

        $response['query'] = $Sql;
        return $response;
    }

    function get_employee_benefits($attr) {
        //echo '<pre>';print_r($attr);exit;

        $names_arr = [];
        if ($attr['employeesArr']) {
            $employeesArray = false;

            foreach ($attr['employeesArr'] as $rec) {
                if($rec->id > 0)
                    $employeesArray .= $rec->id . ',';
                    $names_arr[$rec->id] = $rec->name;
            }
           $employeesArray =  substr($employeesArray, 0, -1);
        }else {

            $where_line_manager = ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2) ? " AND (emp.id = " . $this->arrUser['id'] . " OR emp.line_manager_name_id = " . $this->arrUser['id'] . " OR
            emp.id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . "))) OR
            emp.id IN (SELECT e4.id FROM employees AS e4 WHERE e4.line_manager_name_id IN (SELECT e3.id FROM employees e3 WHERE e3.line_manager_name_id IN ( SELECT e1.id FROM employees AS e1 WHERE e1.id IN (SELECT e2.id FROM employees AS e2 WHERE e2.line_manager_name_id=" . $this->arrUser['id'] . ")))) ) " : "";

            $sqla = "SELECT emp.id,CONCAT(first_name,' ',last_name) AS name
                     FROM employees AS emp
                     WHERE emp.company_id=" . $this->arrUser['company_id'] . " AND emp.status = 1      
                          $where_line_manager";

            // $sqla = "SELECT id,name
			// 		 FROM sr_employee_sel
			// 		 WHERE company_id=" . $this->arrUser['company_id'] . " ";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $employeesArray .= $Rowa['id'] . ',';
                    $names_arr[$Rowa['id']] = $Rowa['name'];
                }

                $employeesArray = substr($employeesArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        }

        if ($attr['benefit_type']) {
            $where = " AND benefit_type IN (".$attr['benefit_type'].")";
        }else {
            $where = '';
        }
        $benefit_type_arr = [];
            $sqla = "SELECT benefit_type,
            (CASE
                WHEN benefit_type =1 THEN 'Company Car'
                WHEN benefit_type =2 THEN 'Fuel Card'
                WHEN benefit_type =3 THEN 'Company Laptop'
                WHEN benefit_type =4 THEN 'Company Tablet / Ipad'
                WHEN benefit_type =5 THEN 'Company Mobile'
                WHEN benefit_type =6 THEN 'Other Benefits'
            END ) AS name
        FROM  employees_benefits_history
        WHERE company_id=" . $this->arrUser['company_id'] . "  ".$where."
        GROUP BY benefit_type";

            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    $benefitArray .= $Rowa['benefit_type'] . ',';
                    $benefit_type_arr[$Rowa['benefit_type']] = $Rowa['name'];
                }

                $benefitArray = substr($benefitArray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        


        $is_fuel_card = ($attr['fuel_card']) ? 1 : 0;

        $response = array();

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
        $filter_by = $attr['filter_by'];

        // if($dateTo>0){
            /* $Sql = " SELECT b.* , CONCAT(e.first_name,' ',e.last_name) as employee_name, e.user_code as employee_code
                        FROM employees_benefits_history b
                        LEFT JOIN employees e ON e.id = b.employee_id
                        WHERE 
                        b.employee_id IN (".$employeesArray.") AND
                        b.benefit_type IN (".$benefitArray.") AND
                        b.company_id = " . $this->arrUser['company_id'] . "  
                        ORDER BY b.employee_id,b.benefit_type
                        "; */
            $Sql = "CALL srrep_EmployeeBenefitsReport(".$this->arrUser['company_id'].",'".$dateFrom."','".$dateTo."','".$employeesArray."','".$benefitArray."','".$is_fuel_card."')";

            // echo '<pre>'. $Sql;exit;
            $RS = $this->objsetup->CSI($Sql);
            $company_cars = array();
        $fuel_type_arr = array('1'=>'Petrol','2'=>'LPG','3'=>'Diesel');
        $arr_car_enngine = array(
                            '1'=>'1400cc or less',
                            '2'=>'1401cc to 2000cc',
                            '3'=>'Over 2000cc',
                            '4'=>'1600cc or less',
                            '5'=>'1601cc to 2000cc',
                            '6'=>'Over 2000cc',
                            '7'=>'1400cc or less',
                            '8'=>'1401cc to 2000cc',
                            '9'=>'Over 2000cc'
                         );
        if ($RS->RecordCount() > 0) {
            $prev_sp_id=0;
            while ($Row = $RS->FetchRow()) {
               
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                if($prev_sp_id != $Row['employee_id'])
                {
                    $result = array();
                    $benefits = array();
                    $benefits['Rank'] = $Row['Rank'];
                    $benefits['benefit_type'] = $Row['RecordType'];
                    $benefits['maker'] = $Row['maker'];
                    $benefits['model'] = $Row['model'];
                    $benefits['reg_no'] = $Row['reg_no'];
                    $benefits['emisions'] = $Row['emisions'];
                    $benefits['market_value'] = $Row['market_value'];
                    $benefits['fuel_type'] = $fuel_type_arr[$Row['fuel_type']];
                    $benefits['engine_type'] = $arr_car_enngine[$Row['engine_type']];
                    $benefits['assign_date'] = $this->objGeneral->convert_unix_into_date($Row['assign_date']);
                    $benefits['return_date'] = $this->objGeneral->convert_unix_into_date($Row['return_date']);


                    $result['emp_code'] = $Row['emp_code'];
                    $result['emp_name'] = $Row['emp_name'];
                    $result['benefits'][$Row['RecordType']][] = $benefits;
                   
                    $prev_sp_id = $Row['employee_id'];
                    $response['response'][$Row['employee_id']] = $result;
                  
                }
                else
                {
                    $benefits = array();
                    $benefits['Rank'] = $Row['Rank'];
                    $benefits['benefit_type'] = $Row['RecordType'];
                    $benefits['maker'] = $Row['maker'];
                    $benefits['model'] = $Row['model'];
                    $benefits['reg_no'] = $Row['reg_no'];
                    $benefits['emisions'] = $Row['emisions'];
                    $benefits['market_value'] = $Row['market_value'];
                    $benefits['fuel_type'] = $fuel_type_arr[$Row['fuel_type']];
                    $benefits['engine_type'] = $arr_car_enngine[$Row['engine_type']];
                    $benefits['assign_date'] = $this->objGeneral->convert_unix_into_date($Row['assign_date']);
                    $benefits['return_date'] = $this->objGeneral->convert_unix_into_date($Row['return_date']);

                    $response['response'][$Row['employee_id']]['benefits'][$Row['RecordType']][] = $benefits;
                }
                
            }

            // response ordering (added by Akhtar Nawaz)
            $records = $response['response'];
            $order_by_spec_col = array_column($records, 'emp_code');
            array_multisort($order_by_spec_col, SORT_ASC, $records);
            $response['response'] = $records;

            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        else {
            $response['response'] = array();
            $response['ack'] = 0;
            $response['error'] = NULL;
        }
        // }
        // else{
        // 	$response['response'] = array();
        // 	$response['ack'] = 0;
        // 	$response['error'] = NULL;
        // }


        return $response;
    }

    function get_order_stages($attr) {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        $response = array();

        $Sql = "  SELECT * FROM (SELECT id,
                                        name
                                    FROM  ref_crm_order_stages 
                                    WHERE company_id=" . $this->arrUser['company_id'] . " 
                                    AND module_id=1
                                    AND status = 1
                                    GROUP BY id) AS tbl  
                where 1  " . $where_clause . " ";
        // echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr['sort_column'];

            if ($attr['sort_column'] == 'title')
                $column = 'tbl.' . 'name';

            $order_type = "Order BY " . $column . " DESC";
        }

        $column = 'tbl.id';

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;
        
        $RS = $this->objsetup->CSI($response['q'], "customer", sr_ViewPermission);

        $response['q'] = '';

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }

                $row = array();
                $row['id'] = $Row['id'];
                $row['title'] = $Row['name'];

                $response['response'][] = $row;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('OrderStages');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;
        return $response;
    }

    function get_sale_orders($attr)
    {
        $limit_clause = $where_clause = $fieldsMeta = $order_clause = "";
        $defaultFilter = false;
        $cond = $attr['cond'];       

        if (!empty($attr['searchKeyword'])) {
            $where_clause = $this->objGeneral->flexiWhereRetriever("tbl.", $attr, $fieldsMeta);
            $order_clause = $this->objGeneral->flexiOrderRetriever("tbl.", $attr, $fieldsMeta);
        }

        if (empty($where_clause)) {
            $defaultFilter = true;
            $where_clause = $this->objGeneral->flexiDefaultFilterRetriever("SalesOrderListingsForPO", $this->arrUser);
        }

        $response = array(); 

        $where_clause2 = "";      
        $where_clause2 = " AND d.type in (1,2) ";
        $subQueryForBuckets = "";      

        // if ($this->arrUser['user_type'] != 1 && $this->arrUser['user_type'] != 2){

            $subQueryForBuckets = "SELECT  c.id
                                    FROM sr_crm_listing c
                                    WHERE c.type IN (2,3) AND 
                                        c.company_id=" . $this->arrUser['company_id'] . "";

            //$subQueryForBuckets = $this->objsetup->whereClauseAppender($subQueryForBuckets, 48);
        // }

        $Sql = "SELECT * FROM (SELECT   d.id,d.type,
                                        d.sale_invioce_code,
                                        d.posting_date,
                                        d.offer_date,
                                        d.requested_delivery_date,
                                        d.sell_to_cust_no,
                                        d.prev_code,
                                        d.sell_to_cust_name,
                                        d.sale_order_code,
                                        d.cust_order_no,
                                        d.sell_to_contact_no,
                                        d.net_amount,
                                        d.currency_id,
                                        d.currency_rate,
                                        d.net_amount_converted,
                                        d.grand_total,
                                        d.sell_to_cust_id as ids
                                FROM orders  d        
                                where  d.status=1   AND 
                                    d.company_id=" . $this->arrUser['company_id'] . " AND 
                                    d.sale_order_code IS NOT NULL AND 
                                    d.sale_order_code <> ''  AND 
                                    d.sell_to_cust_no IS NOT NULL  AND 
                                    (d.sell_to_cust_id = 0 OR 
                                        d.sell_to_cust_id IS NULL OR 
                                        d.sell_to_cust_id IN (".$subQueryForBuckets.")) 
                                    " . $where_clause2 . "    
                                Order by d.id DESC) AS tbl  where 1 " . $where_clause . " ";
        //echo $Sql;exit;

        //defualt Variable
        $total_limit = pagination_limit;
        
        if (isset($attr['pagination_limits']) && $attr['pagination_limits'])
            $total_limit = $attr['pagination_limits'];

        if (!empty($attr['sort_column'])) {
            $column = 'tbl.' . $attr['sort_column'];

            /* if ($attr['sort_column'] == 'sale_invioce_code')
                $column = 'tbl.' . 'sale_invioce_code';
            else if ($attr['sort_column'] == 'name')
                $column = 'tbl.' . 'name';
            else if ($attr['sort_column'] == "statusp")
                $column = 'tbl.' . 'statusp';
            else if ($attr['sort_column'] == "region")
                $column = 'tbl.' . 'region';
            else if ($attr['sort_column'] == "segment")
                $column = 'tbl.' . 'segment';
            else if ($attr['sort_column'] == "postingGrp")
                $column = 'tbl.' . 'postingGrp';
            else if ($attr['sort_column'] == 'selling_group')
                $column = 'tbl.selling_group'; */

            $order_type = "Order BY " . $column . " DESC";
        }
        else{
            $column = 'tbl.sale_invioce_code';
        }        

        if ($order_clause == "")
            $order_type = "Order BY " . $column . " ASC";
        else
            $order_type = $order_clause;

        $response = $this->objGeneral->pagination_genral($attr, $Sql, $response, $total_limit, 'tbl', $order_type);
        // echo $response['q'];exit;
        $RS = $this->objsetup->CSI($response['q'], 'purchase_order', sr_ViewPermission);
        $response['q'] = '';        

        if ($RS->RecordCount() > 0) {
            while ($Row = $RS->FetchRow()) {

                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                        unset($Row[$key]);
                }
                
                $result = array();
                $result['id'] = $Row['id'];
                $result['type'] = $Row['type'];
                $result['sale_invioce_code'] = $Row['sale_invioce_code'];

                $result['invoice_date'] = $this->objGeneral->convert_unix_into_date($Row['posting_date']);
                $result['offer_date'] = $this->objGeneral->convert_unix_into_date($Row['offer_date']);
                $result['requested_delivery_date'] = $this->objGeneral->convert_unix_into_date($Row['requested_delivery_date']);

                $result['sell_to_cust_no'] = $Row['sell_to_cust_no'];
                $result['prev_code'] = $Row['prev_code'];
                $result['sell_to_cust_name'] = $Row['sell_to_cust_name'];
                $result['sale_order_code'] = $Row['sale_order_code'];
                $result['cust_order_no'] = $Row['cust_order_no'];
                $result['sell_to_contact_no'] = $Row['sell_to_contact_no'];
                $result['net_amount'] = $Row['net_amount']; 
                $result['currency_id'] = $Row['currency_id'];
                $result['currency_rate'] = $Row['currency_rate'];
                $result['net_amount_converted'] = $Row['net_amount_converted'];
                $result['grand_total'] = $Row['grand_total'];

                $response['response'][] = $result;
            }
            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 1;
            $response['error'] = NULL;
            $response['response'][] = array();
        }

        $response['response']['tbl_meta_data'] = $this->objsetup->GetTableMetaData('SalesOrderListingsForPO');
        $response['response']['tbl_meta_data']['defaultFilter'] = $defaultFilter;

        return $response;
    }

    function inlandDistributionAnalysisReport($attr) {
 
        $whereClause = '';

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
        $area_code = $attr['area_code'];
        $to_location_id = $attr['to_location_id'];
        $from_location_id = $attr['from_location_id']->id;
        
        if(strlen($area_code)==1){
            $whereClause = " AND SUBSTR(o.bill_to_post_code, 1, 1) ='".$area_code."' AND SUBSTRING(o.bill_to_post_code, 2, 1) BETWEEN '0' AND '9' ";
        }elseif(strlen($area_code)==2){
            $whereClause = " AND SUBSTR(o.bill_to_post_code, 1, 2) ='".$area_code."' ";
        }

        if($area_code){
            $whereClause .= " AND ht.to_location_id=".$to_location_id."  ";
        }

        if($from_location_id){
            $whereClause .= " AND ht.from_location_id=".$from_location_id."  ";
        }

        if($area_code || $from_location_id){
            $whereClause .= " AND ht.STATUS=1  ";
        }

        $cutomerarray = false;
        // echo '<pre>';print_r($attr['salepersons']);

        if ($attr['customers']) {

            foreach ($attr['customers'] as $rec) {
                $cutomerarray .= $rec->id . ',';
            }
            $cutomerarray = substr($cutomerarray, 0, -1);

        } else {
            $sqla = "SELECT  c.id
                    FROM sr_crm_listing c
                    WHERE c.type IN (2,3) AND 
                        c.company_id=" . $this->arrUser['company_id'] . "";

            //$sqla = $this->objsetup->whereClauseAppender($sqla, 48);
            // echo $sqla;exit;
            $RSa = $this->objsetup->CSI($sqla);

            if ($RSa->RecordCount() > 0) {
                while ($Rowa = $RSa->FetchRow()) {

                    foreach ($Rowa as $key => $value) {
                        if (is_numeric($key))
                            unset($Rowa[$key]);
                    }

                    // $whereClause .=" WHERE id IN (".$Rowa['id'].") ";
                    $cutomerarray .= $Rowa['id'] . ',';
                }
                $cutomerarray = substr($cutomerarray, 0, -1);
            }
            else{
                $response['response'] = array();
                $response['ack'] = 0;
                $response['error'] = NULL;
                return $response;
            }
        } 

        $saleorderArray = '';
        if ($attr['saleOrders']) {

            foreach ($attr['saleOrders'] as $rec) {
                $saleorderArray .= $rec->record->id . ',';
            }
            $saleorderArray = substr($saleorderArray, 0, -1);

        }
        $where_saleOrders = '';
        if($saleorderArray){
            $where_saleOrders = ' AND o.id IN ('.$saleorderArray.')'; 
        }
        /*  o.bill_to_name AS location_name, 
        o.bill_to_address AS address,  */
        $Sql = "SELECT o.sell_to_cust_no AS customer_no ,
        o.sell_to_cust_name AS customer_name,       
        od.warehouse AS warehouse_name,
        o.bill_to_city AS city, 
        o.bill_to_post_code AS postcode, 
        o.sale_order_code AS sale_order_no,
        si.order_code AS purchase_order_no,
        si.sell_to_cust_no AS supplier_no ,
        si.sell_to_cust_name AS supplier_name,
        si.net_amount_converted AS puchase_net_amount,
        IF(ht.price,ht.price,0) AS target_amount, 
        si.type AS po_status,
        IF(ret.net_amount_converted,ret.net_amount_converted,0) as debit_note
        FROM link_so_po lsp
        LEFT JOIN orders o ON o.id=lsp.saleOrderID
        LEFT JOIN srm_invoice si ON si.id=lsp.purchaseOrderID
        LEFT JOIN srm_order_return ret ON si.id=ret.purchaseInvoiceID
        LEFT JOIN order_details od ON od.order_id=o.id 
       
        LEFT JOIN haulier_target ht ON ht.from_location_id=od.warehouse_id AND ht.STATUS=1  
        WHERE o.type=2 
        AND lsp.company_id=" . $this->arrUser['company_id'] . "  
        AND o.offer_date BETWEEN $dateFrom AND $dateTo 
        AND o.sell_to_cust_id IN (".$cutomerarray.")
        ".$where_saleOrders."
        ".$whereClause." 
        AND o.shipment_method_code=ht.shipping_method_name
          ORDER BY o.sell_to_cust_no,o.id ASC
        ";  
        //GROUP BY od.warehouse_id
        // echo $Sql; exit; //AND ea.login_time BETWEEN ". $dateFrom." AND ".$dateTo."
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $prev_sp_id=0;
            $total_po=0;
            $total_target=0;
            $total_diff=0;
            while ($Row = $RS->FetchRow()) {
                        $row = array();
                        $netAmount = $Row['puchase_net_amount'] - $Row['debit_note'];
                        $row['customer_no'] = $Row['customer_no'];
                        $row['customer_name'] = $Row['customer_name'];
                        //$row['location_name'] = $Row['location_name'];
                        //$row['address'] = $Row['address'];
                        $row['warehouse_name'] = $Row['warehouse_name'];
                        $row['city'] = $Row['city'];
                        $row['postcode'] = $Row['postcode'];
                        $row['sale_order_no'] = $Row['sale_order_no'];
                        $row['purchase_order_no'] = $Row['purchase_order_no'];
                        $row['supplier_no'] = $Row['supplier_no'];
                        $row['supplier_name'] = $Row['supplier_name'];
                        $row['puchase_net_amount'] = round($netAmount,2);
                        $row['target_amount'] = round($Row['target_amount'],2);
                        $row['target_diff'] = round($netAmount - $Row['target_amount'],2);
                        $row['po_status'] = ($Row['po_status']==2) ? 'Posted' : 'Unposted';
                        $row['color'] = (round($netAmount - $Row['target_amount'],2) >0) ? 'red' : 'green';
                        $total_po +=round($netAmount,2);
                        $total_target +=round($Row['target_amount'],2);
                        $total_diff +=round($netAmount - $Row['target_amount'],2);
                        $response['response'][] = $row;
            }  
            $response['net_total'] = $total_po;
            $response['target_total'] = $total_target;
            $response['diff_total'] = $total_diff;
            $response['color2'] = ($total_diff >0) ? 'red' :'green';

            $response['ack'] = 1;
            $response['error'] = NULL;
        } else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    }

    function haulierAccrualReport($attr) {
 
        $whereClause = '';

        $dateFrom = $this->objGeneral->convert_date($attr['dateFrom']);
        $dateTo = $this->objGeneral->convert_date($attr['dateTo']);
        
        $glsarray = '';

        if ($attr['gls']) {

            foreach ($attr['gls'] as $rec) {
                $glsarray .= $rec->id . ',';
            }

            // $glsarray = rtrim($glsarray, ", ");
            $glsarray = substr($glsarray, 0, -1);
        }

        $reportXlsxType = (isset($attr['reportXlsxType']) && $attr['reportXlsxType']!='')?$attr['reportXlsxType']:0;  
        
        $Sql = 'CALL SR_Haulier_Accrula_report('.$this->arrUser['company_id'].',"'.$dateFrom.'","'.$dateTo.'","'.$glsarray.'")';
        // echo $Sql; exit; //AND ea.login_time BETWEEN ". $dateFrom." AND ".$dateTo."
        $RS = $this->objsetup->CSI($Sql);

        if ($RS->RecordCount() > 0) {
            $arrayCount = $RS->RecordCount();
            $prev_sp_id=0;
            $total_posted = 0;
            $total_unposted = 0;
            $total_grand = 0;
            if($arrayCount > MAX_REPORT_RECORDS || $reportXlsxType == 1){

                $CSVDataTitle = array();
                $CSVDataTitle['col1'] = $this->arrUser['companyName'];
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $CSVDataTitle['col1'] = 'Haulier Accrual Report';
                
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                // $CSVDataTitle['itemNo'] = 'From '.date("d/m/Y", $dateFrom2).' To '.date("d/m/Y", $dateTo2);
                $CSVDataTitle['col1'] = 'From '.$attr['dateFrom'].' To '.$attr['dateTo'];
                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $response['CSVData'][] = $CSVDataTitle;                
                
                $CSVDataTitle = array();
                $CSVDataTitle['col1'] = 'Sales Invoice Date';   
                $CSVDataTitle['col2'] = 'SI No.';   
                $CSVDataTitle['col3'] = 'SO No.';
                $CSVDataTitle['col4'] = 'Cust No.';
                $CSVDataTitle['col5'] = 'Cust Name';
                $CSVDataTitle['col6'] = 'Shipment Method';
                $CSVDataTitle['col7'] = 'Linked PO No.';
                $CSVDataTitle['col8'] = 'Posted PO';
                $CSVDataTitle['col9'] = 'PI Date';
                $CSVDataTitle['col10'] = 'Unposted PO';

                $response['CSVData'][] = $CSVDataTitle;

                $CSVDataTitle = array();
                $response['CSVData'][] = $CSVDataTitle;
                $response['filename']=  APP_PATH . "Reports/haulierAccrualReport".$this->arrUser['company_id'].".csv";
                
                $this->createCSVfile2($response);

                $CSVRecCounter = 0;

                $response['CSVData'] = array();

                while ($Row = $RS->FetchRow()) {
                    foreach ($Row as $key => $value) {
                        if (is_numeric($key))
                        unset($Row[$key]);
                    }
                    $haArray = array();
                    if( $Row['Rank']==1){
                        $haArray['col1'] =  $this->objGeneral->convert_unix_into_date($Row['sale_invoice_date']);
                        $haArray['col2'] = $Row['sale_invioce_no'];
                        $haArray['col3'] = $Row['sale_order_no'];
                        $haArray['col4'] = $Row['customer_no'];
                        $haArray['col5'] = $Row['customer_name'];
                        $haArray['col6'] = $Row['shipment_method'];
                        $haArray['col7'] = $Row['linked_po'];
                        $haArray['col8'] = ($Row['po_status']==2) ? $Row['gl_amount'] : '';
                        $haArray['col9'] = ($Row['po_status']==2) ?  $this->objGeneral->convert_unix_into_date($Row['pi_date']) : '';
                        $haArray['col10'] = ($Row['po_status']==3) ? $Row['gl_amount'] : '';

                        $response['CSVData'][] = $haArray;
                                $counter++;

                                if($CSVRecCounter>1000 || $CSVRecCounter == 0) {
                                    $CSVRecCounter = 0;

                                    $this->createCSVFileAppend($response);
                                    $response['CSVData'] = array();
                                }

                                $CSVRecCounter++;
                    } else{
                        $row=array();
                        if( $Row['Rank']==2){
                        $row['Rank'] =  $Row['Rank'];
                        $row['RecordType'] =  $Row['RecordType'];                            
                        $row['label'] ='Total Posted';
                        $row['total_posted'] = $Row['gl_amount'];
                        $row['product_id'] =  $Row['product_id'];
                        $row['product_name'] =  $Row['product_name'];
                        $response['response']['posted'][$Row['product_id']] = $row;   
                        $total_posted +=  $Row['gl_amount'];
                        }
                        elseif( $Row['Rank']==3){
                            $month = substr($Row['converted_pi_date'], -2);
                            $year = substr($Row['converted_pi_date'],0,4);
                            $date1 = $year.'/'.$month.'/01';
                            $date = strtotime($date1);
                            $row['converted_pi_date'] =  $Row['converted_pi_date'];
                            $row['Rank'] =  $Row['Rank'];
                            $row['RecordType'] =  $Row['RecordType'];                               
                            $row['label'] =date("M'y", $date);
                            $row['posted_amount'] = $Row['gl_amount'];
                            $row['product_id'] =  $Row['product_id'];
                            $row['product_name'] =  $Row['product_name'];
                            $response['response']['postedProd'][$Row['converted_pi_date']][] = $row;   
                            }
                            elseif( $Row['Rank']==4){

                                $row['Rank'] =  $Row['Rank'];
                                $row['RecordType'] =  $Row['RecordType'];
                                $row['label'] ='Total Unposted';
                                $row['total_unposted'] = $Row['gl_amount'];
                                $row['product_id'] =  $Row['product_id'];
                                $row['product_name'] =  $Row['product_name'];
                                $response['response']['unposted'][$Row['product_id']] = $row;    
                                $total_unposted +=  $Row['gl_amount'];
                                }
                                elseif( $Row['Rank']==5){
                                    $row['Rank'] =  $Row['Rank'];
                                    $row['RecordType'] =  $Row['RecordType'];
                                    $row['label'] ='Grand Total';
                                    $row['grand_total'] = $Row['gl_amount'];
                                    $row['product_id'] =  $Row['product_id'];
                                    $row['product_name'] =  $Row['product_name'];
                                    $response['response']['products'][] = $row;   
                                    $total_grand +=  $Row['gl_amount'];
                                    }
                                }      

                }      
                // arranging data for the monthly posted arr
                $posted_arr = $response['response']['postedProd'];
                $data = [];
                foreach($posted_arr as $key=>$val){
                    $datalabel=[];
                    //echo '<pre>';print_r($val);
                    foreach($val as $k=>$v){
                        $datalabel['label'] = $v['label'];
                        $datalabel['data'][$v['product_id']] = array( 'product_id'=>$v['product_id'],'product_name'=>$v['product_name'], 'amount'=>$v['posted_amount']);
                    }
                    // check if product data for the month exist if not add an empty record
                    foreach($response['response']['products'] as $j=>$p){
                        $search = $p['product_id'];
                        $found = array_filter($datalabel['data'],function($v,$k) use ($search){
                            return $v['product_id'] == $search;
                        },ARRAY_FILTER_USE_BOTH); // With latest PHP third parameter is mandatory.. Available Values:- ARRAY_FILTER_USE_BOTH OR ARRAY_FILTER_USE_KEY  
                    
                    if(!$found){
                        $datalabel['data'][$p['product_id']] = array( 'product_id'=>$p['product_id'],'product_name'=>$p['product_name'], 'amount'=>0);
                    }
                    }
                    //echo '<pre> Here <br>';print_r($datalabel);exit;
                    $data[$key] = $datalabel;
                }
                $response['response']['postedProd'] = $data;
               // print_r($response['response']['postedProd']);exit;
                $response['CSVData'][] = array();
                $response['CSVData'][] = array();               

                $response['CSVData'][] = array(
                    'col1'=>'',
                    'col2'=>'Posted',
                    'col3'=>'Unposted',
                    'col4'=>'Grant Total'
                );
                foreach($response['response']['products'] as $prod){
                    $response['CSVData'][] = array(
                        'col1'=>$prod['product_name'],
                        'col2'=>$response['response']['posted'][$prod['product_id']]['total_posted'],
                        'col3'=>$response['response']['unposted'][$prod['product_id']]['total_unposted'],
                        'col4'=>$prod['grand_total']
                    );
                }
                $response['CSVData'][] = array(
                    'col1'=>'Total',
                    'col2'=>$total_posted,
                    'col3'=>$total_unposted,
                    'col4'=>$total_grand
                );
                $response['CSVData'][] = array();
                $response['CSVData'][] = array();  
                $response['CSVData'][] = array('col1'=>'Monthly Posted'); 
                $response['CSVData'][] = array();
                $products =array();
                $products[] = '';
                foreach($response['response']['products'] as $prod){
                    $products[] = $prod['product_name'];
                }
                $response['CSVData'][] = $products;

                foreach($response['response']['postedProd'] as $k=>$pdata){
                    $prodData = array();
                    $prodData[] = $pdata['label'];

                    foreach($response['response']['products'] as $j=>$prod){
                        $prodData[] = $pdata['data'][$prod['product_id']]['amount'];
                    }   
                    $response['CSVData'][] = $prodData;
                }
               
                if($CSVRecCounter>0){
                    $CSVRecCounter = 0;

                    $this->createCSVFileAppend($response);
                    $response['CSVData'] = array();
                }
                
            } else 
            {
            while ($Row = $RS->FetchRow()) {
                foreach ($Row as $key => $value) {
                    if (is_numeric($key))
                    unset($Row[$key]);
                }
                        $row = array();
                        if( $Row['Rank']==1){
                        $row['Rank'] =  $Row['Rank'];
                        $row['RecordType'] =  $Row['RecordType'];
                        $row['sale_invoice_date'] =  $this->objGeneral->convert_unix_into_date($Row['sale_invoice_date']);
                        $row['sale_invioce_no'] = $Row['sale_invioce_no'];
                        $row['sale_order_no'] = $Row['sale_order_no'];
                        $row['customer_no'] = $Row['customer_no'];
                        $row['customer_name'] = $Row['customer_name'];
                        $row['shipment_method'] = $Row['shipment_method'];
                        $row['linked_po'] = $Row['linked_po'];
                        $row['posted_po'] = ($Row['po_status']==2) ? $Row['gl_amount'] : '';
                        $row['pi_date'] = ($Row['po_status']==2) ?  $this->objGeneral->convert_unix_into_date($Row['pi_date']) : '';
                        $row['unposted_po'] = ($Row['po_status']==3) ? $Row['gl_amount'] : '';

                        $response['response'][] = $row;  
                        }else{
                            if( $Row['Rank']==2){
                            $row['Rank'] =  $Row['Rank'];
                            $row['RecordType'] =  $Row['RecordType'];                            
                            $row['label'] ='Total Posted';
                            $row['total_posted'] = $Row['gl_amount'];
                            $row['product_id'] =  $Row['product_id'];
                            $row['product_name'] =  $Row['product_name'];
                            $response['response']['posted'][$Row['product_id']] = $row;   
                            $total_posted +=  $Row['gl_amount'];
                            }
                            elseif( $Row['Rank']==3){
                                $month = substr($Row['converted_pi_date'], -2);
                                $year = substr($Row['converted_pi_date'],0,4);
                                $date1 = $year.'/'.$month.'/01';
                                $date = strtotime($date1);
                                $row['converted_pi_date'] =  $Row['converted_pi_date'];
                                $row['Rank'] =  $Row['Rank'];
                                $row['RecordType'] =  $Row['RecordType'];                               
                                $row['label'] =date("M'y", $date);
                                $row['posted_amount'] = $Row['gl_amount'];
                                $row['product_id'] =  $Row['product_id'];
                                $row['product_name'] =  $Row['product_name'];
                                $response['response']['postedProd'][$Row['converted_pi_date']][] = $row;   
                                }
                                elseif( $Row['Rank']==4){
  
                                    $row['Rank'] =  $Row['Rank'];
                                    $row['RecordType'] =  $Row['RecordType'];
                                    $row['label'] ='Total Unposted';
                                    $row['total_unposted'] = $Row['gl_amount'];
                                    $row['product_id'] =  $Row['product_id'];
                                    $row['product_name'] =  $Row['product_name'];
                                    $response['response']['unposted'][$Row['product_id']] = $row;    
                                    $total_unposted +=  $Row['gl_amount'];
                                    }
                                    elseif( $Row['Rank']==5){
                                        $row['Rank'] =  $Row['Rank'];
                                        $row['RecordType'] =  $Row['RecordType'];
                                        $row['label'] ='Grand Total';
                                        $row['grand_total'] = $Row['gl_amount'];
                                        $row['product_id'] =  $Row['product_id'];
                                        $row['product_name'] =  $Row['product_name'];
                                        $response['response']['products'][] = $row;   
                                        $total_grand +=  $Row['gl_amount'];
                                        }
                        //$response['response']['total'][] = $row;    
                                    }                    
            }  
            $gt = array(
                'label'=>'Total',
                'posted'=>$total_posted,
                'unposted'=>$total_unposted,
                'grand_total'=>$total_grand
            );           
            $response['response']['total'] = $gt; 
            // arranging data for the monthly posted arr
            $posted_arr = $response['response']['postedProd'];
            $data = [];
            foreach($posted_arr as $key=>$val){
                $datalabel=[];
                //echo '<pre>';print_r($val);
                foreach($val as $k=>$v){
                    $datalabel['label'] = $v['label'];
                    $datalabel['data'][$v['product_id']] = array( 'product_id'=>$v['product_id'],'product_name'=>$v['product_name'], 'amount'=>$v['posted_amount']);
                }
                // check if product data for the month exist if not add an empty record
                foreach($response['response']['products'] as $j=>$p){
                    $search = $p['product_id'];
                    $found = array_filter($datalabel['data'],function($v,$k) use ($search){
                        return $v['product_id'] == $search;
                    },ARRAY_FILTER_USE_BOTH); // With latest PHP third parameter is mandatory.. Available Values:- ARRAY_FILTER_USE_BOTH OR ARRAY_FILTER_USE_KEY  
                  
                  if(!$found){
                    $datalabel['data'][$p['product_id']] = array( 'product_id'=>$p['product_id'],'product_name'=>$p['product_name'], 'amount'=>0);
                  }
                }
                //echo '<pre> Here <br>';print_r($datalabel);exit;
                $data[$key] = $datalabel;
            }
            $response['response']['postedProd'] = $data; 

            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        if($arrayCount > MAX_REPORT_RECORDS || $reportXlsxType == 1){

            $response['ack'] = 2;                  
            $response['filename']=  WEB_PATH . "/Reports/haulierAccrualReport".$this->arrUser['company_id'].".csv";
            
            $response['response'] = array();
            $response['error'] = 'Data is greater than '.MAX_REPORT_RECORDS.' Records. CSV file has been generated.';                    
        }
        else{
            $response['ack'] = 1;
            $response['error'] = NULL;
        }
        $response['query'] = $Sql;
        } 
        else {
            $response['ack'] = 0;
            $response['error'] = NULL;
        }

        return $response;
    }
}

?>